import {
  __commonJS
} from "./chunk-UP2VWCW5.js";

// ../../../../node_modules/opensheetmusicdisplay/build/opensheetmusicdisplay.min.js
var require_opensheetmusicdisplay_min = __commonJS({
  "../../../../node_modules/opensheetmusicdisplay/build/opensheetmusicdisplay.min.js"(exports, module) {
    !function(t, e) {
      "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.opensheetmusicdisplay = e() : t.opensheetmusicdisplay = e();
    }(exports, () => (() => {
      var t = { 67: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SystemLinePosition = void 0, function(t3) {
          t3[t3.MeasureBegin = 0] = "MeasureBegin", t3[t3.MeasureEnd = 1] = "MeasureEnd";
        }(i2 || (e2.SystemLinePosition = i2 = {}));
      }, 98: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalGlissando = void 0;
        const s = i2(9409), n = i2(6438), r = i2(6452);
        e2.GraphicalGlissando = class {
          constructor(t3) {
            this.Glissando = t3, this.staffEntries = [];
          }
          calculateLine(t3) {
            const e3 = this.staffEntries[0], i3 = this.staffEntries[this.staffEntries.length - 1], o = e3.findGraphicalNoteFromNote(this.Glissando.StartNote), a = i3.findGraphicalNoteFromNote(this.Glissando.EndNote);
            if (!o && !a) return;
            const l = e3.parentMeasure.ParentStaffLine;
            let h, c, u, d;
            if (o && e3.parentMeasure.ParentStaffLine === this.StaffLine) h = o.PositionAndShape.RelativePosition.x + o.parentVoiceEntry.parentStaffEntry.PositionAndShape.RelativePosition.x + o.parentVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x + t3.GlissandoNoteOffset, u = o.PositionAndShape.AbsolutePosition.y;
            else {
              h = i3.parentMeasure.beginInstructionsWidth - 0.4;
              const e4 = this.Glissando.Direction === n.ColDirEnum.Down ? -1 : 1;
              u = a.PositionAndShape.AbsolutePosition.y + e4 * t3.GlissandoStafflineStartYDistanceToNote;
            }
            if (a && i3.parentMeasure.ParentStaffLine === this.StaffLine) c = a.PositionAndShape.RelativePosition.x + a.parentVoiceEntry.parentStaffEntry.PositionAndShape.RelativePosition.x + a.parentVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x - 0.5 - t3.GlissandoNoteOffset, h > c && (h = c - t3.GlissandoStafflineStartMinimumWidth), d = a.PositionAndShape.AbsolutePosition.y;
            else {
              if (l.Measures.last().parentSourceMeasure.HasEndLine) return;
              c = l.PositionAndShape.Size.width, c - h > t3.GlissandoStafflineEndOffset && (h = c - t3.GlissandoStafflineEndOffset);
              const e4 = this.Glissando.Direction === n.ColDirEnum.Down ? 1 : -1;
              d = o.PositionAndShape.AbsolutePosition.y + e4 * t3.GlissandoStafflineStartYDistanceToNote;
            }
            const f = new s.PointF2D(h, u), m = new s.PointF2D(c, d);
            void 0 === this.Width && (this.Width = t3.GlissandoDefaultWidth), this.Line = new r.GraphicalLine(f, m, this.Width);
          }
        };
      }, 164: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MidiInstrument = e2.ClefEnum = e2.ClefInstruction = void 0;
        const s = i2(8233), n = i2(5364), r = i2(8233), o = i2(8233), a = i2(7307);
        class l extends n.AbstractNotationInstruction {
          constructor(t3 = h.G, e3 = 0, i3 = 2) {
            super(void 0), this.clefType = h.G, this.line = 2, this.octaveOffset = 0, this.line = i3, this.clefType = t3, this.octaveOffset = e3, this.calcParameters();
          }
          static getDefaultClefFromMidiInstrument(t3) {
            switch (t3) {
              case c.Acoustic_Grand_Piano:
              case c.Electric_Bass_finger:
              case c.Electric_Bass_pick:
              case c.Fretless_Bass:
              case c.Slap_Bass_1:
              case c.Slap_Bass_2:
              case c.Synth_Bass_1:
              case c.Synth_Bass_2:
              case c.Contrabass:
                return new l(h.F, 0, 4);
              default:
                return new l(h.G, 0, 2);
            }
          }
          static getAllPossibleClefs() {
            const t3 = [];
            for (let e3 = 0; e3 <= 2; e3++) {
              const i3 = new l(h.G, e3, 2);
              t3.push(i3);
            }
            for (let e3 = -2; e3 <= 0; e3++) {
              const i3 = new l(h.F, e3, 4);
              t3.push(i3);
            }
            return t3;
          }
          static isSupportedClef(t3) {
            switch (t3) {
              case h.G:
              case h.F:
              case h.C:
              case h.percussion:
              case h.TAB:
                return true;
              default:
                return false;
            }
          }
          get ClefType() {
            return this.clefType;
          }
          set ClefType(t3) {
            this.clefType = t3;
          }
          get Line() {
            return this.line;
          }
          set Line(t3) {
            this.line = t3;
          }
          get OctaveOffset() {
            return this.octaveOffset;
          }
          set OctaveOffset(t3) {
            this.octaveOffset = t3;
          }
          get ClefPitch() {
            return this.clefPitch;
          }
          set ClefPitch(t3) {
            this.clefPitch = t3;
          }
          get ReferenceCyPosition() {
            return this.referenceCyPosition;
          }
          set ReferenceCyPosition(t3) {
            this.referenceCyPosition = t3;
          }
          Equals(t3) {
            return this === t3 || !(!this || !t3) && this.clefPitch === t3.clefPitch && this.Line === t3.Line;
          }
          NotEqual(t3) {
            return !this.Equals(t3);
          }
          ToString() {
            return "ClefType: " + this.clefType;
          }
          calcParameters() {
            switch (this.clefType) {
              case h.G:
                this.clefPitch = new s.Pitch(r.NoteEnum.G, 1 + this.octaveOffset, o.AccidentalEnum.NONE), this.referenceCyPosition = 5 - this.line + 2;
                break;
              case h.F:
                this.clefPitch = new s.Pitch(r.NoteEnum.F, 0 + this.octaveOffset, o.AccidentalEnum.NONE), this.referenceCyPosition = 5 - this.line + 1.5;
                break;
              case h.C:
                this.clefPitch = new s.Pitch(r.NoteEnum.C, 1 + this.octaveOffset, o.AccidentalEnum.NONE), this.referenceCyPosition = 5 - this.line;
                break;
              case h.percussion:
                this.clefPitch = new s.Pitch(r.NoteEnum.C, 2, o.AccidentalEnum.NONE), this.referenceCyPosition = 2;
                break;
              case h.TAB:
                this.clefPitch = new s.Pitch(r.NoteEnum.G, 0, o.AccidentalEnum.NONE), this.referenceCyPosition = 0;
                break;
              default:
                throw new a.ArgumentOutOfRangeException("clefType");
            }
          }
        }
        var h, c;
        e2.ClefInstruction = l, function(t3) {
          t3[t3.G = 0] = "G", t3[t3.F = 1] = "F", t3[t3.C = 2] = "C", t3[t3.percussion = 3] = "percussion", t3[t3.TAB = 4] = "TAB";
        }(h || (e2.ClefEnum = h = {})), function(t3) {
          t3[t3.None = -1] = "None", t3[t3.Acoustic_Grand_Piano = 0] = "Acoustic_Grand_Piano", t3[t3.Bright_Acoustic_Piano = 1] = "Bright_Acoustic_Piano", t3[t3.Electric_Grand_Piano = 2] = "Electric_Grand_Piano", t3[t3.Honky_tonk_Piano = 3] = "Honky_tonk_Piano", t3[t3.Electric_Piano_1 = 4] = "Electric_Piano_1", t3[t3.Electric_Piano_2 = 5] = "Electric_Piano_2", t3[t3.Harpsichord = 6] = "Harpsichord", t3[t3.Clavinet = 7] = "Clavinet", t3[t3.Celesta = 8] = "Celesta", t3[t3.Glockenspiel = 9] = "Glockenspiel", t3[t3.Music_Box = 10] = "Music_Box", t3[t3.Vibraphone = 11] = "Vibraphone", t3[t3.Marimba = 12] = "Marimba", t3[t3.Xylophone = 13] = "Xylophone", t3[t3.Tubular_Bells = 14] = "Tubular_Bells", t3[t3.Dulcimer = 15] = "Dulcimer", t3[t3.Drawbar_Organ = 16] = "Drawbar_Organ", t3[t3.Percussive_Organ = 17] = "Percussive_Organ", t3[t3.Rock_Organ = 18] = "Rock_Organ", t3[t3.Church_Organ = 19] = "Church_Organ", t3[t3.Reed_Organ = 20] = "Reed_Organ", t3[t3.Accordion = 21] = "Accordion", t3[t3.Harmonica = 22] = "Harmonica", t3[t3.Tango_Accordion = 23] = "Tango_Accordion", t3[t3.Acoustic_Guitar_nylon = 24] = "Acoustic_Guitar_nylon", t3[t3.Acoustic_Guitar_steel = 25] = "Acoustic_Guitar_steel", t3[t3.Electric_Guitar_jazz = 26] = "Electric_Guitar_jazz", t3[t3.Electric_Guitar_clean = 27] = "Electric_Guitar_clean", t3[t3.Electric_Guitar_muted = 28] = "Electric_Guitar_muted", t3[t3.Overdriven_Guitar = 29] = "Overdriven_Guitar", t3[t3.Distortion_Guitar = 30] = "Distortion_Guitar", t3[t3.Guitar_harmonics = 31] = "Guitar_harmonics", t3[t3.Acoustic_Bass = 32] = "Acoustic_Bass", t3[t3.Electric_Bass_finger = 33] = "Electric_Bass_finger", t3[t3.Electric_Bass_pick = 34] = "Electric_Bass_pick", t3[t3.Fretless_Bass = 35] = "Fretless_Bass", t3[t3.Slap_Bass_1 = 36] = "Slap_Bass_1", t3[t3.Slap_Bass_2 = 37] = "Slap_Bass_2", t3[t3.Synth_Bass_1 = 38] = "Synth_Bass_1", t3[t3.Synth_Bass_2 = 39] = "Synth_Bass_2", t3[t3.Violin = 40] = "Violin", t3[t3.Viola = 41] = "Viola", t3[t3.Cello = 42] = "Cello", t3[t3.Contrabass = 43] = "Contrabass", t3[t3.Tremolo_Strings = 44] = "Tremolo_Strings", t3[t3.Pizzicato_Strings = 45] = "Pizzicato_Strings", t3[t3.Orchestral_Harp = 46] = "Orchestral_Harp", t3[t3.Timpani = 47] = "Timpani", t3[t3.String_Ensemble_1 = 48] = "String_Ensemble_1", t3[t3.String_Ensemble_2 = 49] = "String_Ensemble_2", t3[t3.Synth_Strings_1 = 50] = "Synth_Strings_1", t3[t3.Synth_Strings_2 = 51] = "Synth_Strings_2", t3[t3.Choir_Aahs = 52] = "Choir_Aahs", t3[t3.Voice_Oohs = 53] = "Voice_Oohs", t3[t3.Synth_Voice = 54] = "Synth_Voice", t3[t3.Orchestra_Hit = 55] = "Orchestra_Hit", t3[t3.Trumpet = 56] = "Trumpet", t3[t3.Trombone = 57] = "Trombone", t3[t3.Tuba = 58] = "Tuba", t3[t3.Muted_Trumpet = 59] = "Muted_Trumpet", t3[t3.French_Horn = 60] = "French_Horn", t3[t3.Brass_Section = 61] = "Brass_Section", t3[t3.Synth_Brass_1 = 62] = "Synth_Brass_1", t3[t3.Synth_Brass_2 = 63] = "Synth_Brass_2", t3[t3.Soprano_Sax = 64] = "Soprano_Sax", t3[t3.Alto_Sax = 65] = "Alto_Sax", t3[t3.Tenor_Sax = 66] = "Tenor_Sax", t3[t3.Baritone_Sax = 67] = "Baritone_Sax", t3[t3.Oboe = 68] = "Oboe", t3[t3.English_Horn = 69] = "English_Horn", t3[t3.Bassoon = 70] = "Bassoon", t3[t3.Clarinet = 71] = "Clarinet", t3[t3.Piccolo = 72] = "Piccolo", t3[t3.Flute = 73] = "Flute", t3[t3.Recorder = 74] = "Recorder", t3[t3.Pan_Flute = 75] = "Pan_Flute", t3[t3.Blown_Bottle = 76] = "Blown_Bottle", t3[t3.Shakuhachi = 77] = "Shakuhachi", t3[t3.Whistle = 78] = "Whistle", t3[t3.Ocarina = 79] = "Ocarina", t3[t3.Lead_1_square = 80] = "Lead_1_square", t3[t3.Lead_2_sawtooth = 81] = "Lead_2_sawtooth", t3[t3.Lead_3_calliope = 82] = "Lead_3_calliope", t3[t3.Lead_4_chiff = 83] = "Lead_4_chiff", t3[t3.Lead_5_charang = 84] = "Lead_5_charang", t3[t3.Lead_6_voice = 85] = "Lead_6_voice", t3[t3.Lead_7_fifths = 86] = "Lead_7_fifths", t3[t3.Lead_8_bass_lead = 87] = "Lead_8_bass_lead", t3[t3.Pad_1_new_age = 88] = "Pad_1_new_age", t3[t3.Pad_2_warm = 89] = "Pad_2_warm", t3[t3.Pad_3_polysynth = 90] = "Pad_3_polysynth", t3[t3.Pad_4_choir = 91] = "Pad_4_choir", t3[t3.Pad_5_bowed = 92] = "Pad_5_bowed", t3[t3.Pad_6_metallic = 93] = "Pad_6_metallic", t3[t3.Pad_7_halo = 94] = "Pad_7_halo", t3[t3.Pad_8_sweep = 95] = "Pad_8_sweep", t3[t3.FX_1_rain = 96] = "FX_1_rain", t3[t3.FX_2_soundtrack = 97] = "FX_2_soundtrack", t3[t3.FX_3_crystal = 98] = "FX_3_crystal", t3[t3.FX_4_atmosphere = 99] = "FX_4_atmosphere", t3[t3.FX_5_brightness = 100] = "FX_5_brightness", t3[t3.FX_6_goblins = 101] = "FX_6_goblins", t3[t3.FX_7_echoes = 102] = "FX_7_echoes", t3[t3.FX_8_scifi = 103] = "FX_8_scifi", t3[t3.Sitar = 104] = "Sitar", t3[t3.Banjo = 105] = "Banjo", t3[t3.Shamisen = 106] = "Shamisen", t3[t3.Koto = 107] = "Koto", t3[t3.Kalimba = 108] = "Kalimba", t3[t3.Bag_pipe = 109] = "Bag_pipe", t3[t3.Fiddle = 110] = "Fiddle", t3[t3.Shanai = 111] = "Shanai", t3[t3.Tinkle_Bell = 112] = "Tinkle_Bell", t3[t3.Agogo = 113] = "Agogo", t3[t3.Steel_Drums = 114] = "Steel_Drums", t3[t3.Woodblock = 115] = "Woodblock", t3[t3.Taiko_Drum = 116] = "Taiko_Drum", t3[t3.Melodic_Tom = 117] = "Melodic_Tom", t3[t3.Synth_Drum = 118] = "Synth_Drum", t3[t3.Reverse_Cymbal = 119] = "Reverse_Cymbal", t3[t3.Guitar_Fret_Noise = 120] = "Guitar_Fret_Noise", t3[t3.Breath_Noise = 121] = "Breath_Noise", t3[t3.Seashore = 122] = "Seashore", t3[t3.Bird_Tweet = 123] = "Bird_Tweet", t3[t3.Telephone_Ring = 124] = "Telephone_Ring", t3[t3.Helicopter = 125] = "Helicopter", t3[t3.Applause = 126] = "Applause", t3[t3.Gunshot = 127] = "Gunshot", t3[t3.Percussion = 128] = "Percussion";
        }(c || (e2.MidiInstrument = c = {}));
      }, 200: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.RectangleF2D = void 0;
        const s = i2(6864), n = i2(9409);
        class r {
          constructor(t3, e3, i3, s2) {
            this.x = 0, this.y = 0, this.width = 0, this.height = 0, this.x = t3, this.y = e3, this.width = i3, this.height = s2;
          }
          static createFromLocationAndSize(t3, e3) {
            return new r(t3.x, t3.y, e3.width, e3.height);
          }
          get Location() {
            return new n.PointF2D(this.x, this.y);
          }
          get Size() {
            return new s.SizeF2D(this.width, this.height);
          }
        }
        e2.RectangleF2D = r;
      }, 242: (t2, e2) => {
        "use strict";
        var i2, s, n;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.PhonicScoreModes = e2.MusicSymbolDrawingStyle = e2.DrawingMode = void 0, function(t3) {
          t3[t3.All = 0] = "All", t3[t3.NoOverlays = 1] = "NoOverlays", t3[t3.Leadsheet = 2] = "Leadsheet";
        }(i2 || (e2.DrawingMode = i2 = {})), function(t3) {
          t3[t3.Normal = 0] = "Normal", t3[t3.Disabled = 1] = "Disabled", t3[t3.Selected = 2] = "Selected", t3[t3.Clickable = 3] = "Clickable", t3[t3.PlaybackSymbols = 4] = "PlaybackSymbols", t3[t3.FollowSymbols = 5] = "FollowSymbols", t3[t3.QFeedbackNotFound = 6] = "QFeedbackNotFound", t3[t3.QFeedbackOk = 7] = "QFeedbackOk", t3[t3.QFeedbackPerfect = 8] = "QFeedbackPerfect", t3[t3.Debug1 = 9] = "Debug1", t3[t3.Debug2 = 10] = "Debug2", t3[t3.Debug3 = 11] = "Debug3";
        }(s || (e2.MusicSymbolDrawingStyle = s = {})), function(t3) {
          t3[t3.Following = 0] = "Following", t3[t3.Midi = 1] = "Midi", t3[t3.Manual = 2] = "Manual";
        }(n || (e2.PhonicScoreModes = n = {}));
      }, 298: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.StaffLineActivitySymbol = void 0;
        const s = i2(7741), n = i2(6438);
        class r extends s.GraphicalObject {
          constructor(t3) {
            super(), this.parentStaffLine = t3;
            const e3 = t3.PositionAndShape;
            this.boundingBox = new n.BoundingBox(this, e3), this.boundingBox.BorderRight = 6, this.boundingBox.BorderBottom = 4.5, this.boundingBox.BorderLeft = -1.5, this.boundingBox.BorderTop = -1.5;
          }
        }
        e2.StaffLineActivitySymbol = r;
      }, 302: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(4127), e2), n(i2(9536), e2), n(i2(5984), e2), n(i2(6030), e2), n(i2(6302), e2), n(i2(7631), e2), n(i2(3186), e2);
      }, 348: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalStaffEntry = void 0;
        const s = i2(6438), n = i2(2561), r = i2(7741), o = i2(813), a = i2(7921);
        class l extends r.GraphicalObject {
          constructor(t3, e3 = void 0, i3 = void 0) {
            super(), this.graphicalChordContainers = [], this.tabStaffEntry = void 0, this.MaxAccidentals = 0, this.graphicalInstructions = [], this.ties = [], this.graphicalTies = [], this.lyricsEntries = [], this.parentMeasure = t3, this.graphicalVoiceEntries = [], this.sourceStaffEntry = e3, i3 ? (this.staffEntryParent = i3, this.parentVerticalContainer = i3.parentVerticalContainer, this.PositionAndShape = new s.BoundingBox(this, i3.PositionAndShape)) : this.PositionAndShape = new s.BoundingBox(this, t3.PositionAndShape), e3 && (this.relInMeasureTimestamp = e3.Timestamp), this.FingeringEntries = [];
          }
          get GraphicalInstructions() {
            return this.graphicalInstructions;
          }
          get GraphicalTies() {
            return this.graphicalTies;
          }
          get LyricsEntries() {
            return this.lyricsEntries;
          }
          set LyricsEntries(t3) {
            this.lyricsEntries = t3;
          }
          getAbsoluteTimestamp() {
            const t3 = this.parentMeasure.parentSourceMeasure.AbsoluteTimestamp.clone();
            return this.relInMeasureTimestamp && t3.Add(this.relInMeasureTimestamp), t3;
          }
          findTieGraphicalNoteFromNote(t3) {
            for (const e3 of this.graphicalVoiceEntries) for (const i3 of e3.notes) {
              const e4 = i3.sourceNote;
              if (!e4.isRest() && e4.Pitch.FundamentalNote === t3.Pitch.FundamentalNote && e4.Pitch.Octave === t3.Pitch.Octave && e4.getAbsoluteTimestamp().Equals(t3.getAbsoluteTimestamp())) return i3;
            }
          }
          findEndTieGraphicalNoteFromNoteWithStartingSlur(t3, e3) {
            if (t3) {
              for (const i3 of this.graphicalVoiceEntries) if (i3.parentVoiceEntry === t3.ParentVoiceEntry) for (const t4 of i3.notes) {
                const i4 = t4.sourceNote;
                if (i4.NoteTie && -1 !== i4.NoteSlurs.indexOf(e3)) return t4;
              }
            }
          }
          findGraphicalNoteFromGraceNote(t3) {
            if (t3) {
              for (const e3 of this.graphicalVoiceEntries) if (e3.parentVoiceEntry === t3.ParentVoiceEntry) {
                for (const i3 of e3.notes) if (i3.sourceNote === t3) return i3;
              }
            }
          }
          findGraphicalNoteFromNote(t3) {
            if (t3) {
              for (const e3 of this.graphicalVoiceEntries) if (e3.parentVoiceEntry === t3.ParentVoiceEntry) {
                for (const i3 of e3.notes) if (i3.sourceNote === t3 && this.getAbsoluteTimestamp().Equals(t3.getAbsoluteTimestamp())) return i3;
              }
            }
          }
          getGraphicalNoteDurationFromVoice(t3) {
            for (const e3 of this.graphicalVoiceEntries) if (e3.parentVoiceEntry.ParentVoice === t3) return e3.notes[0].graphicalNoteLength;
            return new n.Fraction(0, 1);
          }
          findVoiceEntryGraphicalNotes(t3) {
            for (const e3 of this.graphicalVoiceEntries) if (e3.parentVoiceEntry === t3) return e3.notes;
          }
          isVoiceEntryPartOfLinkedVoiceEntry(t3) {
            if (this.sourceStaffEntry.Link) for (let e3 = 0, i3 = this.sourceStaffEntry.Link.LinkStaffEntries.length; e3 < i3; ++e3) {
              const i4 = this.sourceStaffEntry.Link.LinkStaffEntries[e3];
              if (-1 !== i4.VoiceEntries.indexOf(t3) && i4 !== this.sourceStaffEntry) return true;
            }
            return false;
          }
          findStaffEntryMinNoteLength() {
            let t3 = new n.Fraction(Number.MAX_VALUE, 1);
            for (const e3 of this.graphicalVoiceEntries) for (const i3 of e3.notes) {
              const e4 = i3.graphicalNoteLength;
              e4.lt(t3) && e4.GetExpandedNumerator() > 0 && (t3 = e4);
            }
            return t3;
          }
          findStaffEntryMaxNoteLength() {
            let t3 = new n.Fraction(0, 1);
            for (const e3 of this.graphicalVoiceEntries) for (const i3 of e3.notes) {
              const e4 = i3.graphicalNoteLength;
              t3.lt(e4) && e4.GetExpandedNumerator() > 0 && (t3 = e4);
            }
            return t3;
          }
          findOrCreateGraphicalVoiceEntry(t3) {
            for (const e4 of this.graphicalVoiceEntries) if (e4.parentVoiceEntry === t3) return e4;
            const e3 = a.MusicSheetCalculator.symbolFactory.createVoiceEntry(t3, this);
            return this.graphicalVoiceEntries.push(e3), e3;
          }
          findOrCreateGraphicalVoiceEntryFromGraphicalNote(t3) {
            for (const e4 of this.graphicalVoiceEntries) if (e4 === t3.parentVoiceEntry) return e4;
            const e3 = a.MusicSheetCalculator.symbolFactory.createVoiceEntry(t3.sourceNote.ParentVoiceEntry, this);
            return this.graphicalVoiceEntries.push(e3), e3;
          }
          addGraphicalNoteToListAtCorrectYPosition(t3, e3) {
            const i3 = t3.notes;
            if (0 === i3.length || e3.PositionAndShape.RelativePosition.y < o.CollectionUtil.last(i3).PositionAndShape.RelativePosition.y) i3.push(e3);
            else for (let t4 = i3.length - 1; t4 >= 0; t4--) {
              if (i3[t4].PositionAndShape.RelativePosition.y > e3.PositionAndShape.RelativePosition.y) {
                i3.splice(t4 + 1, 0, e3);
                break;
              }
              if (0 === t4) {
                i3.splice(0, 0, e3);
                break;
              }
            }
          }
          hasOnlyRests() {
            return this.sourceStaffEntry.hasOnlyRests;
          }
          getSkylineMin() {
            var _a;
            const t3 = (_a = this.parentMeasure) == null ? void 0 : _a.ParentStaffLine.SkyBottomLineCalculator;
            if (!t3) return;
            const [e3, i3] = this.getAbsoluteStartAndEnd();
            return t3.getSkyLineMinInRange(e3, i3);
          }
          getHighestYAtEntry() {
            return this.parentMeasure.ParentStaffLine.PositionAndShape.AbsolutePosition.y + this.getSkylineMin();
          }
          getLowestYAtEntry() {
            return this.parentMeasure.ParentStaffLine.PositionAndShape.AbsolutePosition.y + this.getBottomlineMax();
          }
          getBottomlineMax() {
            var _a;
            const t3 = (_a = this.parentMeasure) == null ? void 0 : _a.ParentStaffLine.SkyBottomLineCalculator;
            if (!t3) return;
            const [e3, i3] = this.getAbsoluteStartAndEnd();
            return t3.getBottomLineMaxInRange(e3, i3);
          }
          getAbsoluteStartAndEnd() {
            let t3 = this.PositionAndShape.AbsolutePosition.x;
            return t3 -= this.parentMeasure.ParentStaffLine.PositionAndShape.AbsolutePosition.x, [t3, t3 + this.PositionAndShape.Size.width];
          }
        }
        e2.GraphicalStaffEntry = l;
      }, 363: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(8659), e2);
      }, 427: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MusicSheet = e2.PlaybackSettings = void 0;
        const n = i2(2561), r = i2(9024), o = i2(6001), a = i2(7435), l = i2(5534), h = i2(8786), c = i2(9713), u = i2(2683), d = s(i2(3065)), f = i2(7533);
        class m {
        }
        e2.PlaybackSettings = m;
        class p {
          constructor() {
            this.idString = "uninitialized", this.sourceMeasures = [], this.repetitions = [], this.dynListStaves = [], this.timestampSortedDynamicExpressionsList = [], this.timestampSortedTempoExpressionsList = [], this.instrumentalGroups = [], this.instruments = [], this.musicPartManager = void 0, this.musicSheetErrors = new h.MusicSheetErrors(), this.staves = [], this.transpose = 0, this.defaultStartTempoInBpm = 0, this.drawErroneousMeasures = false, this.hasBeenOpenedForTheFirstTime = false, this.currentEnrolledPosition = new n.Fraction(0, 1), this.MeasureWidthFactor = 1, this.playbackSettings = new m(), this.playbackSettings.rhythm = new n.Fraction(4, 4, 0, false), this.userStartTempoInBPM = 100, this.pageWidth = 120, this.MusicPartManager = new r.MusicPartManager(this), this.hasBPMInfo = false;
          }
          static getIndexFromStaff(t3) {
            return t3.idInMusicSheet;
          }
          get SourceMeasures() {
            return this.sourceMeasures;
          }
          set SourceMeasures(t3) {
            this.sourceMeasures = t3;
          }
          get Repetitions() {
            return this.repetitions;
          }
          set Repetitions(t3) {
            this.repetitions = t3;
          }
          get DynListStaves() {
            return this.dynListStaves;
          }
          get TimestampSortedTempoExpressionsList() {
            return this.timestampSortedTempoExpressionsList;
          }
          get TimestampSortedDynamicExpressionsList() {
            return this.timestampSortedDynamicExpressionsList;
          }
          get InstrumentalGroups() {
            return this.instrumentalGroups;
          }
          get Parts() {
            return this.instruments;
          }
          get Instruments() {
            return this.instruments;
          }
          get SheetPlaybackSetting() {
            return this.playbackSettings;
          }
          set SheetPlaybackSetting(t3) {
            this.playbackSettings = t3;
          }
          get DrawErroneousMeasures() {
            return this.drawErroneousMeasures;
          }
          set DrawErroneousMeasures(t3) {
            this.drawErroneousMeasures = t3;
          }
          get HasBeenOpenedForTheFirstTime() {
            return this.hasBeenOpenedForTheFirstTime;
          }
          set HasBeenOpenedForTheFirstTime(t3) {
            this.hasBeenOpenedForTheFirstTime = t3;
          }
          InitializeStartTempoInBPM(t3) {
            this.userStartTempoInBPM = t3;
          }
          get DefaultStartTempoInBpm() {
            return this.defaultStartTempoInBpm;
          }
          set DefaultStartTempoInBpm(t3) {
            this.defaultStartTempoInBpm = t3, this.InitializeStartTempoInBPM(t3);
          }
          get Path() {
            return this.path;
          }
          set Path(t3) {
            this.path = t3;
          }
          get Staves() {
            return this.staves;
          }
          get TitleString() {
            return this.title ? this.title.text : "";
          }
          set TitleString(t3) {
            this.Title = new a.Label(t3);
          }
          get SubtitleString() {
            return this.subtitle ? this.subtitle.text : "";
          }
          set SubtitleString(t3) {
            this.Subtitle = new a.Label(t3);
          }
          get ComposerString() {
            return this.composer ? this.composer.text : "";
          }
          set ComposerString(t3) {
            this.Composer = new a.Label(t3);
          }
          get LyricistString() {
            return this.lyricist ? this.lyricist.text : "";
          }
          set LyricistString(t3) {
            this.Lyricist = new a.Label(t3);
          }
          get CopyrightString() {
            return this.copyright ? this.copyright.text : "";
          }
          set CopyrightString(t3) {
            this.Copyright = new a.Label(t3, f.TextAlignmentEnum.CenterBottom, void 0, true);
          }
          get Title() {
            return this.title;
          }
          set Title(t3) {
            this.title = t3;
          }
          get Subtitle() {
            return this.subtitle;
          }
          set Subtitle(t3) {
            this.subtitle = t3;
          }
          get Composer() {
            return this.composer;
          }
          set Composer(t3) {
            this.composer = t3;
          }
          get Lyricist() {
            return this.lyricist;
          }
          set Lyricist(t3) {
            this.lyricist = t3;
          }
          get Copyright() {
            return this.copyright;
          }
          set Copyright(t3) {
            this.copyright = t3;
          }
          get Rules() {
            return this.rules || (d.default.debug("warning: sheet.Rules was undefined. Creating new EngravingRules."), this.rules = new c.EngravingRules()), this.rules;
          }
          set Rules(t3) {
            this.rules = t3;
          }
          get SheetErrors() {
            return this.musicSheetErrors;
          }
          get SelectionStart() {
            return this.selectionStart;
          }
          set SelectionStart(t3) {
            this.selectionStart = t3.clone(), this.currentEnrolledPosition = t3.clone();
          }
          get SelectionEnd() {
            return this.selectionEnd;
          }
          set SelectionEnd(t3) {
            this.selectionEnd = t3;
          }
          set HasBPMInfo(t3) {
            this.hasBPMInfo = t3;
          }
          get HasBPMInfo() {
            return this.hasBPMInfo;
          }
          addMeasure(t3) {
            this.sourceMeasures.push(t3), t3.measureListIndex = this.sourceMeasures.length - 1;
          }
          checkForInstrumentWithNoVoice() {
            for (let t3 = 0, e3 = this.instruments.length; t3 < e3; ++t3) {
              const e4 = this.instruments[t3];
              if (0 === e4.Voices.length) {
                const t4 = new l.Voice(e4, 1);
                e4.Voices.push(t4);
              }
            }
          }
          getStaffFromIndex(t3) {
            return this.staves[t3];
          }
          fillStaffList() {
            let t3 = 0;
            for (let e3 = 0, i3 = this.instruments.length; e3 < i3; ++e3) {
              const i4 = this.instruments[e3];
              for (let e4 = 0, s2 = i4.Staves.length; e4 < s2; ++e4) {
                const s3 = i4.Staves[e4];
                s3.idInMusicSheet = t3, this.staves.push(s3), t3++;
              }
            }
          }
          get MusicPartManager() {
            return this.musicPartManager;
          }
          set MusicPartManager(t3) {
            this.musicPartManager = t3;
          }
          getCompleteNumberOfStaves() {
            let t3 = 0;
            for (let e3 = 0, i3 = this.instruments.length; e3 < i3; ++e3) t3 += this.instruments[e3].Staves.length;
            return t3;
          }
          getListOfMeasuresFromIndeces(t3, e3) {
            const i3 = [];
            for (let s2 = t3; s2 <= e3; s2++) i3.push(this.sourceMeasures[s2]);
            return i3;
          }
          getNextSourceMeasure(t3) {
            const e3 = this.sourceMeasures.indexOf(t3);
            return e3 === this.sourceMeasures.length - 1 ? t3 : this.sourceMeasures[e3 + 1];
          }
          getFirstSourceMeasure() {
            return this.sourceMeasures[0];
          }
          getLastSourceMeasure() {
            return this.sourceMeasures[this.sourceMeasures.length - 1];
          }
          resetAllNoteStates() {
            const t3 = this.MusicPartManager.getIterator();
            for (; !t3.EndReached && t3.CurrentVoiceEntries; ) {
              for (let e3 = 0, i3 = t3.CurrentVoiceEntries.length; e3 < i3; ++e3) {
                const i4 = t3.CurrentVoiceEntries[e3];
                for (let t4 = 0, e4 = i4.Notes.length; t4 < e4; ++t4) i4.Notes[t4].state = u.NoteState.Normal;
              }
              t3.moveToNext();
            }
          }
          getMusicSheetInstrumentIndex(t3) {
            return this.Instruments.indexOf(t3);
          }
          getGlobalStaffIndexOfFirstStaff(t3) {
            const e3 = this.getMusicSheetInstrumentIndex(t3);
            let i3 = 0;
            for (let t4 = 0; t4 < e3; t4++) i3 += this.Instruments[t4].Staves.length;
            return i3;
          }
          setRepetitionNewUserNumberOfRepetitions(t3, e3) {
            let i3 = 0;
            for (let s2 = 0; s2 < this.repetitions.length; s2++) if (this.repetitions[s2] instanceof o.Repetition) {
              if (t3 === i3) {
                this.repetitions[s2].UserNumberOfRepetitions = e3;
                break;
              }
              i3++;
            }
          }
          getRepetitionByIndex(t3) {
            let e3 = 0;
            for (let i3 = 0; i3 < this.repetitions.length; i3++) if (this.repetitions[i3] instanceof o.Repetition) {
              if (t3 === e3) return this.repetitions[i3];
              e3++;
            }
          }
          CompareTo(t3) {
            return this.Title.text.localeCompare(t3.Title.text);
          }
          getExpressionsStartTempoInBPM() {
            if (this.TimestampSortedTempoExpressionsList.length > 0) {
              const t3 = this.TimestampSortedTempoExpressionsList[0];
              if (t3.InstantaneousTempo) return t3.InstantaneousTempo.TempoInBpm;
              if (t3.ContinuousTempo) return t3.ContinuousTempo.StartTempo;
            }
            return this.userStartTempoInBPM;
          }
          get Errors() {
            return this.musicSheetErrors.measureErrors;
          }
          get FirstMeasureNumber() {
            try {
              return this.getFirstSourceMeasure().MeasureNumber;
            } catch (t3) {
              return d.default.info("MusicSheet.FirstMeasureNumber: ", t3), 0;
            }
          }
          get LastMeasureNumber() {
            try {
              return this.getLastSourceMeasure().MeasureNumber;
            } catch (t3) {
              return d.default.info("MusicSheet.LastMeasureNumber: ", t3), 0;
            }
          }
          get CurrentEnrolledPosition() {
            return this.currentEnrolledPosition.clone();
          }
          set CurrentEnrolledPosition(t3) {
            this.currentEnrolledPosition = t3.clone();
          }
          get Transpose() {
            return this.transpose;
          }
          set Transpose(t3) {
            this.transpose = t3;
          }
          get FullNameString() {
            return this.ComposerString + " " + this.TitleString;
          }
          get IdString() {
            return this.idString;
          }
          set IdString(t3) {
            this.idString = t3;
          }
          getEnrolledSelectionStartTimeStampWorkaround() {
            const t3 = this.MusicPartManager.getIterator(this.SelectionStart);
            return n.Fraction.createFromFraction(t3.CurrentEnrolledTimestamp);
          }
          get SheetEndTimestamp() {
            const t3 = this.getLastSourceMeasure();
            return n.Fraction.plus(t3.AbsoluteTimestamp, t3.Duration);
          }
          getSourceMeasureFromTimeStamp(t3) {
            for (let e3 = 0, i3 = this.sourceMeasures.length; e3 < i3; ++e3) {
              const i4 = this.sourceMeasures[e3];
              for (let e4 = 0, s2 = i4.VerticalSourceStaffEntryContainers.length; e4 < s2; ++e4) {
                const s3 = i4.VerticalSourceStaffEntryContainers[e4];
                if (t3.Equals(s3.getAbsoluteTimestamp())) return i4;
              }
            }
            return this.findSourceMeasureFromTimeStamp(t3);
          }
          findSourceMeasureFromTimeStamp(t3) {
            for (const e3 of this.sourceMeasures) if (e3.AbsoluteTimestamp.lte(t3) && t3.lt(n.Fraction.plus(e3.AbsoluteTimestamp, e3.Duration))) return e3;
          }
          getVisibleInstruments() {
            const t3 = [];
            for (let e3 = 0, i3 = this.Instruments.length; e3 < i3; ++e3) {
              const i4 = this.Instruments[e3];
              i4.Voices.length > 0 && i4.Voices[0].Visible && t3.push(i4);
            }
            return t3;
          }
        }
        e2.MusicSheet = p, p.defaultTitle = "defaultTitle";
      }, 437: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.OctaveEnum = e2.OctaveShift = void 0;
        const s = i2(8233);
        var n;
        e2.OctaveShift = class {
          constructor(t3, e3) {
            this.numberXml = 1, this.setOctaveShiftValue(t3, e3);
          }
          get Type() {
            return this.octaveValue;
          }
          set Type(t3) {
            this.octaveValue = t3;
          }
          get StaffNumber() {
            return this.staffNumber;
          }
          set StaffNumber(t3) {
            this.staffNumber = t3;
          }
          get ParentStartMultiExpression() {
            return this.startMultiExpression;
          }
          set ParentStartMultiExpression(t3) {
            this.startMultiExpression = t3;
          }
          get ParentEndMultiExpression() {
            return this.endMultiExpression;
          }
          set ParentEndMultiExpression(t3) {
            this.endMultiExpression = t3;
          }
          setOctaveShiftValue(t3, e3) {
            this.octaveValue = 1 === e3 && "down" === t3 ? n.VA8 : 1 === e3 && "up" === t3 ? n.VB8 : 2 === e3 && "down" === t3 ? n.MA15 : 2 === e3 && "up" === t3 ? n.MB15 : n.NONE;
          }
          static getPitchFromOctaveShift(t3, e3) {
            if (!t3) return;
            if (t3.OctaveShiftApplied) return t3;
            let i3 = t3.Octave;
            switch (e3) {
              case n.VA8:
                i3 -= 1;
                break;
              case n.VB8:
                i3 += 1;
                break;
              case n.MA15:
                i3 -= 2;
                break;
              case n.MB15:
                i3 += 2;
                break;
              case n.NONE:
              default:
                i3 += 0;
            }
            const r = new s.Pitch(t3.FundamentalNote, i3, t3.Accidental);
            return r.OctaveShiftApplied = true, r;
          }
        }, function(t3) {
          t3[t3.VA8 = 0] = "VA8", t3[t3.VB8 = 1] = "VB8", t3[t3.MA15 = 2] = "MA15", t3[t3.MB15 = 3] = "MB15", t3[t3.NONE = 4] = "NONE";
        }(n || (e2.OctaveEnum = n = {}));
      }, 469: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VoiceGenerator = void 0;
        const n = i2(4249), r = i2(5534), o = i2(1336), a = i2(1850), l = i2(2369), h = i2(8365), c = i2(5274), u = i2(2257), d = i2(4268), f = i2(2561), m = i2(2148), p = i2(6030), g = i2(7307), b = i2(8233), S = i2(8233), y = i2(6644), E = s(i2(3065)), x = i2(8233), v = i2(813), _ = i2(4127), M = i2(4064), w = i2(4236), P = i2(5282), T = i2(9647), L = i2(6362);
        e2.VoiceGenerator = class {
          constructor(t3, e3, i3, s2, o2 = void 0) {
            this.openBeams = [], this.beamNumberOffset = 0, this.currentOctaveShift = 0, this.tupletDict = {}, this.openTupletNumber = 0, this.staff = e3, this.instrument = e3.ParentInstrument, this.musicSheet = this.instrument.GetMusicSheet, this.slurReader = s2, this.pluginManager = t3, this.voice = o2 ? new n.LinkedVoice(this.instrument, i3, o2) : new r.Voice(this.instrument, i3), this.instrument.Voices.push(this.voice), this.staff.Voices.push(this.voice), this.lyricsReader = new p.LyricsReader(this.musicSheet), this.articulationReader = new _.ArticulationReader(this.musicSheet.Rules);
          }
          get openTieDict() {
            return this.staff.openTieDict;
          }
          get GetVoice() {
            return this.voice;
          }
          get OctaveShift() {
            return this.currentOctaveShift;
          }
          set OctaveShift(t3) {
            this.currentOctaveShift = t3;
          }
          createVoiceEntry(t3, e3, i3, s2 = false, n2 = false, r2 = false) {
            this.currentVoiceEntry = new o.VoiceEntry(t3.clone(), this.voice, e3, s2, n2, r2), i3 && this.voice.VoiceEntries.push(this.currentVoiceEntry);
          }
          read(t3, e3, i3, s2, n2, r2, o2, a2, l2, h2, c2, d2, f2, p2, g2, b2, S2, y2, x2, v2, _2) {
            this.currentStaffEntry = o2, this.currentMeasure = a2;
            try {
              this.currentNote = r2 ? this.addRestNote(t3.element("rest"), e3, s2, i3, n2, f2, p2, x2) : this.addSingleNote(t3, e3, s2, i3, n2, c2, d2, f2, p2, g2, b2, S2, y2, x2, v2), this.currentNote.DotsXml = _2;
              const o3 = t3.elements("lyric");
              void 0 !== this.lyricsReader && o3 && (this.lyricsReader.addLyricEntry(o3, this.currentVoiceEntry), this.voice.Parent.HasLyrics = true);
              let a3 = false;
              const m2 = t3.element("notations");
              if (m2) {
                this.articulationReader && this.readArticulations(m2, this.currentVoiceEntry, this.currentNote);
                const e4 = m2.elements("slur"), i4 = m2.elements("slide"), s3 = m2.elements("glissando");
                void 0 !== this.slurReader && (e4.length > 0 || i4.length > 0) && !this.currentNote.ParentVoiceEntry.IsGrace && (this.slurReader.addSlur(e4, this.currentNote), i4.length > 0 && this.slurReader.addSlur(i4, this.currentNote), s3.length > 0 && this.slurReader.addSlur(s3, this.currentNote));
                const n3 = m2.elements("tuplet");
                n3.length > 0 && (this.openTupletNumber = this.addTuplet(t3, n3), a3 = true);
                const r3 = m2.element("arpeggiate");
                if (void 0 !== r3) {
                  let t4;
                  if (this.currentVoiceEntry.Arpeggio) t4 = this.currentVoiceEntry.Arpeggio;
                  else {
                    let e5 = false;
                    for (const i5 of this.currentStaffEntry.VoiceEntries) if (i5.Arpeggio) {
                      e5 = true, t4 = i5.Arpeggio;
                      break;
                    }
                    if (!e5) {
                      let e6 = w.ArpeggioType.ARPEGGIO_DIRECTIONLESS;
                      const i5 = r3.attribute("direction");
                      if (i5) switch (i5.value) {
                        case "up":
                          e6 = w.ArpeggioType.ROLL_UP;
                          break;
                        case "down":
                          e6 = w.ArpeggioType.ROLL_DOWN;
                          break;
                        default:
                          e6 = w.ArpeggioType.ARPEGGIO_DIRECTIONLESS;
                      }
                      t4 = new w.Arpeggio(this.currentVoiceEntry, e6), this.currentVoiceEntry.Arpeggio = t4;
                    }
                  }
                  t4.addNote(this.currentNote);
                }
                const o4 = m2.elements("tied");
                o4.length > 0 && this.addTie(o4, l2, h2, u.TieTypes.SIMPLE);
                const c3 = m2.element("technical");
                if (c3) {
                  const t4 = c3.elements("hammer-on");
                  t4.length > 0 && this.addTie(t4, l2, h2, u.TieTypes.HAMMERON);
                  const e5 = c3.elements("pull-off");
                  e5.length > 0 && this.addTie(e5, l2, h2, u.TieTypes.PULLOFF);
                }
              }
              void 0 === t3.element("time-modification") || a3 || this.handleTimeModificationNode(t3);
            } catch (t4) {
              E.default.warn(t4);
              const e4 = m.ITextTranslation.translateText("ReaderErrorMessages/NoteError", "Ignored erroneous Note.");
              this.musicSheet.SheetErrors.pushMeasureError(e4), this.musicSheet.SheetErrors.pushMeasureError(t4);
            }
            return this.currentNote;
          }
          checkForStaffEntryLink(t3, e3, i3, s2) {
            const n2 = new y.StaffEntryLink(this.currentVoiceEntry);
            n2.LinkStaffEntries.push(i3), i3.Link = n2;
            const r2 = this.currentVoiceEntry.Timestamp.clone(), o2 = s2.getVerticalContainerByTimestamp(r2);
            return (i3 = o2.StaffEntries[t3]) || (i3 = new l.SourceStaffEntry(o2, e3), o2.StaffEntries[t3] = i3), i3.VoiceEntries.push(this.currentVoiceEntry), n2.LinkStaffEntries.push(i3), i3.Link = n2, i3;
          }
          checkForOpenBeam() {
            this.openBeams.length > 0 && this.currentNote && this.handleOpenBeam();
          }
          checkOpenTies() {
            const t3 = this.openTieDict;
            for (const e3 in t3) if (t3.hasOwnProperty(e3)) {
              const i3 = t3[e3];
              f.Fraction.plus(i3.StartNote.ParentStaffEntry.Timestamp, i3.Duration).lt(i3.StartNote.SourceMeasure.Duration) && delete t3[e3];
            }
          }
          hasVoiceEntry() {
            return void 0 !== this.currentVoiceEntry;
          }
          readArticulations(t3, e3, i3) {
            const s2 = t3.element("articulations");
            s2 && this.articulationReader.addArticulationExpression(s2, e3);
            const n2 = t3.element("fermata");
            n2 && this.articulationReader.addFermata(n2, e3);
            const r2 = t3.element("technical");
            r2 && this.articulationReader.addTechnicalArticulations(r2, e3, i3);
            const o2 = t3.element("ornaments");
            o2 && this.articulationReader.addOrnament(o2, e3);
          }
          addSingleNote(t3, e3, i3, s2, n2, r2, l2, h2, c2, u2, d2, p2, y2, v2, _2) {
            let w2, P2, L2, A, C = 0, R = b.AccidentalEnum.NONE, N = S.NoteEnum.C, I = S.NoteEnum.C, B = 0, F = 0;
            const D = t3.elements();
            for (let t4 = 0, e4 = D.length; t4 < e4; ++t4) {
              const e5 = D[t4];
              try {
                if ("pitch" === e5.name) {
                  const t5 = e5.elements();
                  for (let e6 = 0, i4 = t5.length; e6 < i4; ++e6) {
                    const i5 = t5[e6];
                    L2 = void 0, A = void 0;
                    try {
                      if ("step" === i5.name) {
                        if (N = S.NoteEnum[i5.value], void 0 === N) {
                          const t6 = m.ITextTranslation.translateText("ReaderErrorMessages/NotePitchError", "Invalid pitch while reading note.");
                          throw this.musicSheet.SheetErrors.pushMeasureError(t6), new g.MusicSheetReadingException(t6, void 0);
                        }
                      } else if ("alter" === i5.name) {
                        if (C = parseFloat(i5.value), isNaN(C)) {
                          const t6 = m.ITextTranslation.translateText("ReaderErrorMessages/NoteAlterationError", "Invalid alteration while reading note.");
                          throw this.musicSheet.SheetErrors.pushMeasureError(t6), new g.MusicSheetReadingException(t6, void 0);
                        }
                        R = x.Pitch.AccidentalFromHalfTones(C);
                      } else if ("octave" === i5.name && (B = parseInt(i5.value, 10), isNaN(B))) {
                        const t6 = m.ITextTranslation.translateText("ReaderErrorMessages/NoteOctaveError", "Invalid octave value while reading note.");
                        throw this.musicSheet.SheetErrors.pushMeasureError(t6), new g.MusicSheetReadingException(t6, void 0);
                      }
                    } catch (t6) {
                      E.default.info("VoiceGenerator.addSingleNote read Step: ", t6.message);
                    }
                  }
                } else if ("accidental" === e5.name) w2 = e5.value, "natural" === w2 ? R = b.AccidentalEnum.NATURAL : "slash-flat" === w2 ? R = b.AccidentalEnum.SLASHFLAT : "slash-quarter-sharp" === w2 ? R = b.AccidentalEnum.SLASHQUARTERSHARP : "slash-sharp" === w2 ? R = b.AccidentalEnum.SLASHSHARP : "double-slash-flat" === w2 ? R = b.AccidentalEnum.DOUBLESLASHFLAT : "sori" === w2 ? R = b.AccidentalEnum.SORI : "koron" === w2 && (R = b.AccidentalEnum.KORON);
                else if ("unpitched" === e5.name) {
                  const t5 = e5.element("display-step"), i4 = e5.element("display-octave");
                  if (i4 && (B = parseInt(i4.value, 10), F = B - 3, l2 && (B += 1), 1 === this.instrument.Staves[0].StafflineCount && (F += 1)), t5) {
                    N = S.NoteEnum[t5.value.toUpperCase()];
                    let e6 = 0, i5 = this.musicSheet.Rules.PercussionXMLDisplayStepNoteValueShift;
                    1 === this.instrument.Staves[0].StafflineCount && (i5 -= 3), [I, e6] = x.Pitch.lineShiftFromNoteEnum(N, i5), F += e6;
                  }
                } else "instrument" === e5.name ? e5.firstAttribute && (P2 = e5.firstAttribute.value) : "notehead" === e5.name && (L2 = e5.value, e5.attribute("filled") && (A = "yes" === e5.attribute("filled").value));
              } catch (t5) {
                E.default.info("VoiceGenerator.addSingleNote: ", t5);
              }
            }
            B -= x.Pitch.OctaveXmlDifference;
            const O = new x.Pitch(N, B, R, w2), k = f.Fraction.createFromFraction(e3);
            let V, G = -1, W = -1;
            const U = [], z = t3.element("notations");
            if (z) {
              const t4 = z.element("technical");
              if (t4) {
                const e4 = t4.element("string");
                e4 && (G = parseInt(e4.value, 10));
                const i4 = t4.element("fret");
                i4 && (W = parseInt(i4.value, 10)), t4.elements("bend").forEach(function(t5) {
                  const e5 = t5.element("bend-alter");
                  void 0 !== t5.element("release") ? U.push({ bendalter: parseInt(e5.value, 10), direction: "down" }) : U.push({ bendalter: parseInt(e5.value, 10), direction: "up" });
                });
              }
            }
            return V = G < 0 || W < 0 ? new a.Note(this.currentVoiceEntry, this.currentStaffEntry, k, O, this.currentMeasure) : new T.TabNote(this.currentVoiceEntry, this.currentStaffEntry, k, O, this.currentMeasure, G, W, U, _2), this.addNoteInfo(V, i3, h2, c2, n2, I, F, v2, v2), V.TypeLength = s2, V.IsGraceNote = u2, V.StemDirectionXml = d2, V.TremoloInfo = p2, V.PlaybackInstrumentId = P2, (void 0 !== L2 && "normal" !== L2 || void 0 !== A) && (V.Notehead = new M.Notehead(V, L2, A)), d2 === o.StemDirectionType.None && (y2 = "#00000000"), this.currentVoiceEntry.Notes.push(V), this.currentVoiceEntry.StemDirectionXml = d2, y2 && (this.currentVoiceEntry.StemColorXml = y2, this.currentVoiceEntry.StemColor = y2, V.StemColorXml = y2), t3.elements("beam") && !r2 && this.createBeam(t3, V), V;
          }
          addRestNote(t3, e3, i3, s2, n2, r2, o2, l2) {
            const h2 = f.Fraction.createFromFraction(e3), c2 = t3.element("display-step"), u2 = t3.element("display-octave");
            let d2, m2, p2;
            c2 && u2 && (d2 = S.NoteEnum[c2.value.toUpperCase()], m2 = parseInt(u2.value, 10), p2 = new x.Pitch(d2, m2, b.AccidentalEnum.NONE, void 0, true));
            const g2 = new a.Note(this.currentVoiceEntry, this.currentStaffEntry, h2, p2, this.currentMeasure, true);
            return this.addNoteInfo(g2, i3, r2, o2, n2, d2, m2, l2, l2), g2.TypeLength = s2, this.currentVoiceEntry.Notes.push(g2), this.openBeams.length > 0 && this.openBeams.last().ExtendedNoteList.push(g2), g2;
          }
          addNoteInfo(t3, e3, i3, s2, n2, r2, o2, a2, l2) {
            t3.NoteTypeXml = e3, t3.PrintObject = i3, t3.IsCueNote = s2, t3.NormalNotes = n2, t3.displayStepUnpitched = r2, t3.displayOctaveUnpitched = o2, t3.NoteheadColorXml = a2, t3.NoteheadColor = a2;
          }
          createBeam(t3, e3) {
            var _a;
            try {
              const i3 = t3.element("beam");
              let s2;
              if (void 0 !== i3 && i3.hasAttributes && (s2 = i3.attribute("number")), s2) {
                let i4 = parseInt(s2.value, 10);
                const n2 = t3.elements("beam"), r2 = n2[0].value;
                n2 && ("begin" === r2 ? (i4 === ((_a = this.openBeams.last()) == null ? void 0 : _a.BeamNumber) ? (this.beamNumberOffset++, i4 += this.beamNumberOffset) : this.openBeams.last() && this.handleOpenBeam(), this.openBeams.push(new h.Beam(i4, this.beamNumberOffset))) : i4 += this.beamNumberOffset);
                let o2 = false;
                if (!(i4 > 0 && i4 <= this.openBeams.length && this.openBeams[i4 - 1])) return void E.default.debug("[OSMD] invalid beamnumber");
                for (let t4 = 0, e4 = this.openBeams[i4 - 1].Notes.length; t4 < e4; ++t4) {
                  const e5 = this.openBeams[i4 - 1].Notes[t4];
                  this.currentVoiceEntry === e5.ParentVoiceEntry && (o2 = true);
                }
                o2 || (this.openBeams[i4 - 1].addNoteToBeam(e3), "end" === r2 && this.endBeam());
              }
            } catch (t4) {
              const e4 = m.ITextTranslation.translateText("ReaderErrorMessages/BeamError", "Error while reading beam.");
              throw this.musicSheet.SheetErrors.pushMeasureError(e4), new g.MusicSheetReadingException("", t4);
            }
          }
          endBeam() {
            this.openBeams.pop(), this.beamNumberOffset = Math.max(0, this.beamNumberOffset - 1);
          }
          handleOpenBeam() {
            const t3 = this.openBeams.last();
            if (0 !== t3.Notes.length) {
              if (1 === t3.Notes.length) return t3.Notes[0].NoteBeam = void 0, void this.endBeam();
              if (this.currentNote === v.CollectionUtil.last(t3.Notes)) this.endBeam();
              else {
                const e3 = v.CollectionUtil.last(t3.Notes).ParentStaffEntry, i3 = this.currentMeasure.getVerticalContainerIndexByTimestamp(e3.Timestamp), s2 = e3.VerticalContainerParent.StaffEntries.indexOf(e3);
                if (i3 < this.currentMeasure.VerticalSourceStaffEntryContainers.length - 1) {
                  const t4 = this.currentMeasure.VerticalSourceStaffEntryContainers[i3 + 1].StaffEntries[s2];
                  if (t4) for (let e4 = 0, i4 = t4.VoiceEntries.length; e4 < i4; ++e4) {
                    const i5 = t4.VoiceEntries[e4];
                    if (i5.ParentVoice === this.voice) {
                      const t5 = i5.Notes[0];
                      t5.Length.lte(new f.Fraction(1, 8)) ? (this.openBeams.last().addNoteToBeam(t5), this.endBeam()) : this.endBeam();
                    }
                  }
                } else this.endBeam();
              }
            } else this.endBeam();
          }
          addTuplet(t3, e3) {
            let i3, s2 = false;
            if (void 0 !== e3 && e3.length > 1) {
              let n2 = t3.element("time-modification");
              n2 && (n2 = n2.element("actual-notes"));
              const r2 = e3;
              for (let e4 = 0, a2 = r2.length; e4 < a2; ++e4) {
                const a3 = r2[e4];
                if (void 0 !== a3 && a3.attributes()) {
                  const e5 = a3.attribute("bracket");
                  e5 && "yes" === e5.value ? (s2 = true, i3 = true) : e5 && "no" === e5.value && (i3 = false);
                  const r3 = this.readShowNumberNoneGiven(a3), l2 = a3.attribute("type");
                  if (l2 && "start" === l2.value) {
                    let e6 = 1;
                    a3.attribute("number") && (e6 = parseInt(a3.attribute("number").value, 10));
                    let o2 = 0;
                    if (n2 && (o2 = parseInt(n2.value, 10), isNaN(o2))) {
                      const t4 = m.ITextTranslation.translateText("ReaderErrorMessages/TupletNoteDurationError", "Invalid tuplet note duration.");
                      throw this.musicSheet.SheetErrors.pushMeasureError(t4), new g.MusicSheetReadingException(t4, void 0);
                    }
                    const l3 = new d.Tuplet(o2, s2);
                    l3.BracketedXmlValue = i3, l3.ShowNumberNoneGivenInXml = r3, l3.tupletLabelNumberPlacement = L.PlacementEnum.Above;
                    const h2 = a3.attribute("placement");
                    h2 && ("below" === h2.value && (l3.tupletLabelNumberPlacement = L.PlacementEnum.Below), l3.PlacementFromXml = true), this.tupletDict[e6] && (delete this.tupletDict[e6], 0 === Object.keys(this.tupletDict).length ? this.openTupletNumber = 0 : Object.keys(this.tupletDict).length > 1 && this.openTupletNumber--), this.tupletDict[e6] = l3;
                    const c2 = [];
                    c2.push(this.currentNote), l3.Notes.push(c2), l3.Fractions.push(this.getTupletNoteDurationFromType(t3)), this.currentNote.NoteTuplet = l3, this.openTupletNumber = e6;
                  } else if ("stop" === l2.value) {
                    let e6 = 1;
                    a3.attribute("number") && (e6 = parseInt(a3.attribute("number").value, 10));
                    const i4 = this.tupletDict[e6];
                    if (i4) {
                      const s3 = a3.attribute("placement");
                      s3 && ("below" === s3.value ? i4.tupletLabelNumberPlacement = L.PlacementEnum.Below : i4.tupletLabelNumberPlacement = L.PlacementEnum.Above, i4.PlacementFromXml = true);
                      const n3 = [];
                      if (n3.push(this.currentNote), i4.Notes.push(n3), !i4.PlacementFromXml) {
                        let t4 = false;
                        for (const e7 of i4.Notes) {
                          for (const s4 of e7) if (!s4.isRest()) {
                            s4.StemDirectionXml === o.StemDirectionType.Down ? i4.tupletLabelNumberPlacement = L.PlacementEnum.Below : i4.tupletLabelNumberPlacement = L.PlacementEnum.Above, t4 = true;
                            break;
                          }
                          if (t4) break;
                        }
                      }
                      i4.Fractions.push(this.getTupletNoteDurationFromType(t3)), this.currentNote.NoteTuplet = i4, delete this.tupletDict[e6], 0 === Object.keys(this.tupletDict).length ? this.openTupletNumber = 0 : Object.keys(this.tupletDict).length > 1 && this.openTupletNumber--;
                    }
                  }
                }
              }
            } else if (e3[0]) {
              const n2 = e3[0];
              if (n2.hasAttributes) {
                const e4 = n2.attribute("type").value;
                let r2 = 1;
                n2.attribute("number") && (r2 = parseInt(n2.attribute("number").value, 10));
                const a2 = isNaN(r2), l2 = this.readShowNumberNoneGiven(n2), h2 = n2.attribute("bracket");
                if (h2 && "yes" === h2.value ? (s2 = true, i3 = true) : h2 && "no" === h2.value && (i3 = false), "start" === e4) {
                  let e5 = 0, o2 = t3.element("time-modification");
                  if (o2 && (o2 = o2.element("actual-notes")), o2 && (e5 = parseInt(o2.value, 10), isNaN(e5))) {
                    const t4 = m.ITextTranslation.translateText("ReaderErrorMessages/TupletNoteDurationError", "Invalid tuplet note duration.");
                    throw this.musicSheet.SheetErrors.pushMeasureError(t4), new g.MusicSheetReadingException(t4);
                  }
                  a2 && (this.openTupletNumber++, r2 = this.openTupletNumber);
                  let h3 = this.tupletDict[r2];
                  h3 || (h3 = this.tupletDict[r2] = new d.Tuplet(e5, s2), h3.BracketedXmlValue = i3, h3.ShowNumberNoneGivenInXml = l2, h3.tupletLabelNumberPlacement = L.PlacementEnum.Above);
                  const c2 = n2.attribute("placement");
                  c2 && ("below" === c2.value ? h3.tupletLabelNumberPlacement = L.PlacementEnum.Below : h3.tupletLabelNumberPlacement = L.PlacementEnum.Above, h3.PlacementFromXml = true);
                  const u2 = [];
                  u2.push(this.currentNote), h3.Notes.push(u2), h3.Fractions.push(this.getTupletNoteDurationFromType(t3)), this.currentNote.NoteTuplet = h3, this.openTupletNumber = r2;
                } else if ("stop" === e4) {
                  a2 && (r2 = this.openTupletNumber);
                  const e5 = this.tupletDict[this.openTupletNumber];
                  if (e5) {
                    const i4 = n2.attribute("placement");
                    i4 && ("below" === i4.value ? e5.tupletLabelNumberPlacement = L.PlacementEnum.Below : e5.tupletLabelNumberPlacement = L.PlacementEnum.Above, e5.PlacementFromXml = true);
                    const s3 = [];
                    if (s3.push(this.currentNote), e5.Notes.push(s3), !e5.PlacementFromXml) {
                      let t4 = false;
                      for (const i5 of e5.Notes) {
                        for (const s4 of i5) if (!s4.isRest()) {
                          s4.StemDirectionXml === o.StemDirectionType.Down ? e5.tupletLabelNumberPlacement = L.PlacementEnum.Below : e5.tupletLabelNumberPlacement = L.PlacementEnum.Above, t4 = true;
                          break;
                        }
                        if (t4) break;
                      }
                    }
                    e5.Fractions.push(this.getTupletNoteDurationFromType(t3)), this.currentNote.NoteTuplet = e5, 0 === Object.keys(this.tupletDict).length ? this.openTupletNumber = 0 : Object.keys(this.tupletDict).length > 1 && this.openTupletNumber--, delete this.tupletDict[r2];
                  }
                }
              }
            }
            return this.openTupletNumber;
          }
          readShowNumberNoneGiven(t3) {
            const e3 = t3.attribute("show-number");
            return !(!(e3 == null ? void 0 : e3.value) || "none" !== e3.value);
          }
          handleTimeModificationNode(t3) {
            if (this.tupletDict[this.openTupletNumber]) try {
              const e3 = this.tupletDict[this.openTupletNumber], i3 = v.CollectionUtil.last(e3.Notes);
              let s2;
              i3[0].ParentVoiceEntry.Timestamp.Equals(this.currentVoiceEntry.Timestamp) ? s2 = i3 : (s2 = [], e3.Notes.push(s2), e3.Fractions.push(this.getTupletNoteDurationFromType(t3))), s2.push(this.currentNote), this.currentNote.NoteTuplet = e3;
            } catch (t4) {
              const e3 = m.ITextTranslation.translateText("ReaderErrorMessages/TupletNumberError", "Invalid tuplet number.");
              throw this.musicSheet.SheetErrors.pushMeasureError(e3), t4;
            }
            else if (this.currentVoiceEntry.Notes.length > 0) {
              const t4 = this.currentVoiceEntry.Notes[0];
              if (t4.NoteTuplet) {
                const e3 = t4.NoteTuplet;
                v.CollectionUtil.last(e3.Notes).push(this.currentNote), this.currentNote.NoteTuplet = e3;
              }
            }
          }
          addTie(t3, e3, i3, s2) {
            if (t3) {
              if (1 === t3.length) {
                const e4 = t3[0];
                if (void 0 !== e4 && e4.attributes()) {
                  const t4 = this.getTieDirection(e4), i4 = e4.attribute("type").value;
                  try {
                    if ("start" === i4) {
                      const e5 = this.findCurrentNoteInTieDict(this.currentNote);
                      e5 < 0 && delete this.openTieDict[e5];
                      const i5 = this.getNextAvailableNumberForTie(), n2 = new c.Tie(this.currentNote, s2);
                      this.openTieDict[i5] = n2, n2.TieNumber = i5, n2.TieDirection = t4;
                    } else if ("stop" === i4) {
                      const t5 = this.findCurrentNoteInTieDict(this.currentNote), e5 = this.openTieDict[t5];
                      e5 && (e5.AddNote(this.currentNote), delete this.openTieDict[t5]);
                    }
                  } catch (t5) {
                    const e5 = m.ITextTranslation.translateText("ReaderErrorMessages/TieError", "Error while reading tie.");
                    this.musicSheet.SheetErrors.pushMeasureError(e5);
                  }
                }
              } else if (2 === t3.length) {
                const e4 = this.findCurrentNoteInTieDict(this.currentNote);
                if (e4 >= 0) {
                  const i4 = this.openTieDict[e4];
                  i4.AddNote(this.currentNote);
                  for (const e5 of t3) if ("start" === e5.attribute("type").value) {
                    const t4 = this.getTieDirection(e5);
                    i4.NoteIndexToTieDirection[i4.Notes.length - 1] = t4;
                  }
                }
              }
            }
          }
          getTieDirection(t3) {
            let e3 = L.PlacementEnum.NotYetDefined;
            const i3 = t3.attribute("placement");
            i3 && ("above" === i3.value ? e3 = L.PlacementEnum.Above : "below" === i3.value && (e3 = L.PlacementEnum.Below));
            const s2 = t3.attribute("orientation");
            return s2 && ("over" === s2.value ? e3 = L.PlacementEnum.Above : "under" === s2.value && (e3 = L.PlacementEnum.Below)), e3;
          }
          getNextAvailableNumberForTie() {
            const t3 = Object.keys(this.openTieDict);
            if (0 === t3.length) return 1;
            t3.sort((t4, e3) => +t4 - +e3);
            for (let e3 = 0; e3 < t3.length; e3++) if ("" + (e3 + 1) !== t3[e3]) return e3 + 1;
            return +t3[t3.length - 1] + 1;
          }
          findCurrentNoteInTieDict(t3) {
            const e3 = this.openTieDict;
            for (const i3 in e3) if (e3.hasOwnProperty(i3)) {
              const s2 = e3[i3], n2 = s2.Notes[0], r2 = t3;
              if (s2.Pitch.FundamentalNote === t3.Pitch.FundamentalNote && s2.Pitch.Octave === t3.Pitch.Octave) return parseInt(i3, 10);
              if (void 0 !== n2.StringNumberTab && n2.StringNumberTab === r2.StringNumberTab) return parseInt(i3, 10);
            }
            return -1;
          }
          getTupletNoteDurationFromType(t3) {
            if (t3.element("type")) {
              const e3 = t3.element("type");
              if (e3) {
                const t4 = e3.value;
                try {
                  return P.NoteTypeHandler.getNoteDurationFromType(t4);
                } catch (t5) {
                  const e4 = m.ITextTranslation.translateText("ReaderErrorMessages/NoteDurationError", "Invalid note duration.");
                  throw this.musicSheet.SheetErrors.pushMeasureError(e4), new g.MusicSheetReadingException("", t5);
                }
              }
            }
          }
        };
      }, 474: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MusicPartManagerIterator = void 0;
        const n = i2(2561), r = i2(1110), o = i2(9288), a = i2(5875), l = s(i2(3065));
        class h {
          constructor(t3, e3, i3) {
            this.currentMeasureIndex = 0, this.currentPartIndex = 0, this.currentVoiceEntryIndex = -1, this.currentDynamicEntryIndex = 0, this.currentTempoEntryIndex = 0, this.currentDynamicChangingExpressions = [], this.currentRepetition = void 0, this.endReached = false, this.frontReached = false, this.currentTimeStamp = new n.Fraction(0, 1), this.currentEnrolledMeasureTimestamp = new n.Fraction(0, 1), this.currentRelativeInMeasureTimestamp = new n.Fraction(0, 1), this.currentVerticalContainerInMeasureTimestamp = new n.Fraction(0, 1), this.jumpResponsibleRepetition = void 0, this.activeDynamicExpressions = [], this.SkipInvisibleNotes = true;
            try {
              this.frontReached = true, this.musicSheet = t3, this.currentVoiceEntries = void 0, this.frontReached = false;
              for (const t4 of this.musicSheet.Repetitions) this.setRepetitionIterationCount(t4, 1);
              if (this.activeDynamicExpressions = new Array(this.musicSheet.getCompleteNumberOfStaves()), this.currentMeasure = this.musicSheet.SourceMeasures[0], !e3) return;
              do {
                this.moveToNext();
              } while ((!this.currentVoiceEntries || this.currentTimeStamp.lt(e3)) && !this.endReached);
              for (let t4 = 0; t4 < this.activeDynamicExpressions.length; t4++) if (this.activeDynamicExpressions[t4]) if (this.activeDynamicExpressions[t4] instanceof a.ContinuousDynamicExpression) {
                const e4 = this.activeDynamicExpressions[t4];
                this.currentDynamicChangingExpressions.push(new r.DynamicsContainer(e4, t4));
              } else {
                const e4 = this.activeDynamicExpressions[t4];
                this.currentDynamicChangingExpressions.push(new r.DynamicsContainer(e4, t4));
              }
              this.currentTempoChangingExpression = this.activeTempoExpression;
            } catch (t4) {
              l.default.info("MusicPartManagerIterator: " + t4);
            }
          }
          get EndReached() {
            return this.endReached;
          }
          get FrontReached() {
            return this.frontReached;
          }
          get CurrentMeasure() {
            return this.currentMeasure;
          }
          get CurrentRepetition() {
            return this.currentRepetition;
          }
          get CurrentRepetitionIteration() {
            return this.CurrentRepetition ? this.getRepetitionIterationCount(this.CurrentRepetition) : 0;
          }
          get CurrentJumpResponsibleRepetitionIterationBeforeJump() {
            return this.jumpResponsibleRepetition ? this.getRepetitionIterationCount(this.jumpResponsibleRepetition) - 1 : 0;
          }
          get CurrentBpm() {
            return this.currentBpm;
          }
          get CurrentVoiceEntries() {
            return this.currentVoiceEntries;
          }
          get CurrentMeasureIndex() {
            return this.currentMeasureIndex;
          }
          get CurrentEnrolledTimestamp() {
            return n.Fraction.plus(this.currentEnrolledMeasureTimestamp, this.currentVerticalContainerInMeasureTimestamp);
          }
          get CurrentSourceTimestamp() {
            return this.currentTimeStamp;
          }
          get CurrentRelativeInMeasureTimestamp() {
            return this.currentRelativeInMeasureTimestamp;
          }
          get JumpOccurred() {
            return this.backJumpOccurred || this.forwardJumpOccurred;
          }
          get ActiveTempoExpression() {
            return this.activeTempoExpression;
          }
          get ActiveDynamicExpressions() {
            return this.activeDynamicExpressions;
          }
          get CurrentTempoChangingExpression() {
            return this.currentTempoChangingExpression;
          }
          get JumpResponsibleRepetition() {
            return this.jumpResponsibleRepetition;
          }
          clone(t3 = void 0, e3 = void 0) {
            const i3 = new h(this.musicSheet, t3 ?? this.currentTimeStamp, e3);
            return i3.currentVoiceEntryIndex = this.currentVoiceEntryIndex, i3.currentMappingPart = this.currentMappingPart, i3.currentPartIndex = this.currentPartIndex, i3.currentVoiceEntries = this.currentVoiceEntries, i3.endReached = this.endReached, i3.frontReached = this.frontReached, i3;
          }
          CurrentVisibleVoiceEntries(t3) {
            const e3 = [];
            if (!this.currentVoiceEntries) return e3;
            if (t3) {
              for (const i3 of this.currentVoiceEntries) i3.ParentVoice.Parent.IdString === t3.IdString && this.getVisibleEntries(i3, e3);
              return e3;
            }
            for (const t4 of this.currentVoiceEntries) this.getVisibleEntries(t4, e3);
            return e3;
          }
          CurrentAudibleVoiceEntries(t3) {
            const e3 = [];
            if (!this.currentVoiceEntries) return e3;
            if (t3) {
              for (const i3 of this.currentVoiceEntries) if (i3.ParentVoice.Parent.IdString === t3.IdString) return this.getAudibleEntries(i3, e3), e3;
            } else for (const t4 of this.currentVoiceEntries) this.getAudibleEntries(t4, e3);
            return e3;
          }
          getCurrentDynamicChangingExpressions() {
            return this.currentDynamicChangingExpressions;
          }
          CurrentScoreFollowingVoiceEntries(t3) {
            const e3 = [];
            if (!this.currentVoiceEntries) return e3;
            if (t3) {
              for (const i3 of this.currentVoiceEntries) if (i3.ParentVoice.Parent.IdString === t3.IdString) return this.getScoreFollowingEntries(i3, e3), e3;
            } else for (const t4 of this.currentVoiceEntries) this.getScoreFollowingEntries(t4, e3);
            return e3;
          }
          moveToPrevious() {
            this.frontReached || (this.currentVoiceEntries && (this.currentVoiceEntries = []), this.recursiveMoveBack());
          }
          moveToPreviousVisibleVoiceEntry(t3) {
            for (; !this.frontReached; ) if (this.moveToPrevious(), this.checkEntries(t3)) return;
          }
          moveToNext() {
            this.forwardJumpOccurred = this.backJumpOccurred = false, this.endReached || (this.frontReached && (this.frontReached = false, this.currentVoiceEntryIndex = -1), this.currentVoiceEntries && (this.currentVoiceEntries = []), this.recursiveMove(), this.currentMeasure || (this.currentTimeStamp = new n.Fraction(99999, 1), this.currentMeasure = this.musicSheet.SourceMeasures.last()));
          }
          moveToNextVisibleVoiceEntry(t3) {
            for (; !this.endReached; ) if (this.moveToNext(), this.checkEntries(t3)) return;
          }
          resetRepetitionIterationCount(t3) {
            return this.setRepetitionIterationCount(t3, 1), 1;
          }
          incrementRepetitionIterationCount(t3) {
            return -1 === this.repetitionIterationCountDictKeys.indexOf(t3) ? this.setRepetitionIterationCount(t3, 1) : this.setRepetitionIterationCount(t3, this.getRepetitionIterationCount(t3) + 1);
          }
          setRepetitionIterationCount(t3, e3) {
            const i3 = this.repetitionIterationCountDictKeys.indexOf(t3);
            return -1 === i3 ? (this.repetitionIterationCountDictKeys.push(t3), this.repetitionIterationCountDictValues.push(e3)) : this.repetitionIterationCountDictValues[i3] = e3, e3;
          }
          getRepetitionIterationCount(t3) {
            const e3 = this.repetitionIterationCountDictKeys.indexOf(t3);
            if (-1 !== e3) return this.repetitionIterationCountDictValues[e3];
          }
          handleRepetitionsAtMeasureBegin() {
            for (let t3 = 0, e3 = this.currentMeasure.FirstRepetitionInstructions.length; t3 < e3; ++t3) {
              const e4 = this.currentMeasure.FirstRepetitionInstructions[t3];
              if (!e4.parentRepetition) continue;
              const i3 = e4.parentRepetition;
              this.currentRepetition = i3, i3.StartIndex === this.currentMeasureIndex && void 0 !== this.JumpResponsibleRepetition && i3 !== this.JumpResponsibleRepetition && i3.StartIndex >= this.JumpResponsibleRepetition.StartIndex && i3.EndIndex <= this.JumpResponsibleRepetition.EndIndex && this.resetRepetitionIterationCount(i3);
            }
          }
          handleRepetitionsAtMeasureEnd() {
            for (let t3 = 0, e3 = this.currentMeasure.LastRepetitionInstructions.length; t3 < e3; ++t3) {
              const e4 = this.currentMeasure.LastRepetitionInstructions[t3], i3 = e4.parentRepetition;
              if (i3) {
                if (i3.BackwardJumpInstructions.indexOf(e4) > -1 && this.getRepetitionIterationCount(i3) < i3.UserNumberOfRepetitions) return this.doBackJump(i3), void (this.backJumpOccurred = true);
                if (e4 === i3.forwardJumpInstruction) {
                  void 0 !== this.JumpResponsibleRepetition && i3 !== this.JumpResponsibleRepetition && i3.StartIndex >= this.JumpResponsibleRepetition.StartIndex && i3.EndIndex <= this.JumpResponsibleRepetition.EndIndex && this.resetRepetitionIterationCount(i3);
                  const t4 = i3.getForwardJumpTargetForIteration(this.getRepetitionIterationCount(i3));
                  if (t4 >= 0) return this.currentMeasureIndex = t4, this.currentMeasure = this.musicSheet.SourceMeasures[this.currentMeasureIndex], this.currentVoiceEntryIndex = -1, this.jumpResponsibleRepetition = i3, void (this.forwardJumpOccurred = true);
                  -2 === t4 && (this.endReached = true);
                }
              }
            }
            this.currentMeasureIndex++, void 0 !== this.JumpResponsibleRepetition && this.currentMeasureIndex > this.JumpResponsibleRepetition.EndIndex && (this.jumpResponsibleRepetition = void 0);
          }
          doBackJump(t3) {
            this.currentMeasureIndex = t3.getBackwardJumpTarget(), this.currentMeasure = this.musicSheet.SourceMeasures[this.currentMeasureIndex], this.currentVoiceEntryIndex = -1, this.incrementRepetitionIterationCount(t3), this.jumpResponsibleRepetition = t3;
          }
          activateCurrentRhythmInstructions() {
            if (void 0 !== this.currentMeasure && this.currentMeasure.FirstInstructionsStaffEntries.length > 0 && void 0 !== this.currentMeasure.FirstInstructionsStaffEntries[0]) {
              const t3 = this.currentMeasure.FirstInstructionsStaffEntries[0].Instructions;
              for (let e3 = 0, i3 = t3.length; e3 < i3; ++e3) {
                const i4 = t3[e3];
                i4 instanceof o.RhythmInstruction && (this.musicSheet.SheetPlaybackSetting.rhythm = i4.Rhythm);
              }
            }
          }
          activateCurrentDynamicOrTempoInstructions() {
            const t3 = this.musicSheet.TimestampSortedDynamicExpressionsList;
            for (; this.currentDynamicEntryIndex > 0 && (this.currentDynamicEntryIndex >= t3.length || this.CurrentSourceTimestamp.lte(t3[this.currentDynamicEntryIndex].parMultiExpression().AbsoluteTimestamp)); ) this.currentDynamicEntryIndex--;
            for (; this.currentDynamicEntryIndex < t3.length && t3[this.currentDynamicEntryIndex].parMultiExpression().AbsoluteTimestamp.lt(this.CurrentSourceTimestamp); ) this.currentDynamicEntryIndex++;
            for (; this.currentDynamicEntryIndex < t3.length && t3[this.currentDynamicEntryIndex].parMultiExpression().AbsoluteTimestamp.Equals(this.CurrentSourceTimestamp); ) {
              const e4 = t3[this.currentDynamicEntryIndex], i3 = e4.staffNumber;
              this.CurrentSourceTimestamp.Equals(e4.parMultiExpression().AbsoluteTimestamp) && (e4.continuousDynamicExpression ? this.activeDynamicExpressions[i3] = e4.continuousDynamicExpression : e4.instantaneousDynamicExpression && (this.activeDynamicExpressions[i3] = e4.instantaneousDynamicExpression)), this.currentDynamicEntryIndex++;
            }
            this.currentDynamicChangingExpressions = [];
            for (let t4 = 0; t4 < this.activeDynamicExpressions.length; t4++) if (this.activeDynamicExpressions[t4]) {
              let e4, i3;
              if (this.activeDynamicExpressions[t4] instanceof a.ContinuousDynamicExpression) {
                const s2 = this.activeDynamicExpressions[t4];
                e4 = s2.StartMultiExpression.AbsoluteTimestamp, i3 = s2.EndMultiExpression.AbsoluteTimestamp, e4.lte(this.CurrentSourceTimestamp) && this.CurrentSourceTimestamp.lte(i3) && this.currentDynamicChangingExpressions.push(new r.DynamicsContainer(s2, t4));
              } else {
                const e5 = this.activeDynamicExpressions[t4];
                this.CurrentSourceTimestamp.Equals(e5.ParentMultiExpression.AbsoluteTimestamp) && this.currentDynamicChangingExpressions.push(new r.DynamicsContainer(e5, t4));
              }
            }
            const e3 = this.musicSheet.TimestampSortedTempoExpressionsList;
            for (; this.currentTempoEntryIndex > 0 && (this.currentTempoEntryIndex >= e3.length || this.CurrentSourceTimestamp.lte(e3[this.currentTempoEntryIndex].AbsoluteTimestamp)); ) this.currentTempoEntryIndex--;
            for (; this.currentTempoEntryIndex < e3.length && e3[this.currentTempoEntryIndex].AbsoluteTimestamp.lt(this.CurrentSourceTimestamp); ) this.currentTempoEntryIndex++;
            for (; this.currentTempoEntryIndex < e3.length && e3[this.currentTempoEntryIndex].AbsoluteTimestamp.Equals(this.CurrentSourceTimestamp); ) this.activeTempoExpression = e3[this.currentTempoEntryIndex], this.currentTempoEntryIndex++;
            if (this.currentTempoChangingExpression = void 0, this.activeTempoExpression) {
              let t4 = this.activeTempoExpression.AbsoluteTimestamp;
              this.activeTempoExpression.ContinuousTempo && (t4 = this.activeTempoExpression.ContinuousTempo.AbsoluteEndTimestamp), (this.activeTempoExpression.AbsoluteTimestamp.lte(this.CurrentSourceTimestamp) || this.CurrentSourceTimestamp.lte(t4)) && (this.currentTempoChangingExpression = this.activeTempoExpression);
            }
          }
          recursiveMoveBack() {
            if (this.currentVoiceEntryIndex > 0) {
              this.currentVoiceEntryIndex--;
              const t3 = this.currentMeasure.VerticalSourceStaffEntryContainers[this.currentVoiceEntryIndex];
              this.currentVoiceEntries = this.getVoiceEntries(t3), this.currentVerticalContainerInMeasureTimestamp = t3.Timestamp, this.currentRelativeInMeasureTimestamp = this.currentVerticalContainerInMeasureTimestamp, this.currentTimeStamp = n.Fraction.plus(this.currentMeasure.AbsoluteTimestamp, this.currentVerticalContainerInMeasureTimestamp), this.activateCurrentDynamicOrTempoInstructions();
              const e3 = this.musicSheet.SelectionEnd;
              return e3 && this.currentTimeStamp.lt(e3) && (this.endReached = false), void (this.currentMeasureIndex = this.musicSheet.SourceMeasures.indexOf(this.CurrentMeasure));
            }
            if (0 !== this.currentVoiceEntryIndex || 0 === this.currentMeasureIndex) this.frontReached = true, this.currentTimeStamp = new n.Fraction(-1, 1);
            else {
              const t3 = this.musicSheet.SourceMeasures[this.currentMeasureIndex - 1];
              this.currentMeasureIndex--, this.currentMeasure = this.musicSheet.SourceMeasures[this.currentMeasureIndex];
              const e3 = t3.VerticalSourceStaffEntryContainers[t3.VerticalSourceStaffEntryContainers.length - 1];
              this.currentVoiceEntries = this.getVoiceEntries(e3), this.currentVerticalContainerInMeasureTimestamp = e3.Timestamp, this.currentVoiceEntryIndex = t3.VerticalSourceStaffEntryContainers.length - 1, this.currentTimeStamp = n.Fraction.plus(this.currentMeasure.AbsoluteTimestamp, e3.Timestamp), this.activateCurrentDynamicOrTempoInstructions();
              const i3 = this.musicSheet.SelectionEnd;
              i3 && this.currentTimeStamp.lt(i3) && (this.endReached = false);
            }
          }
          recursiveMove() {
            if (this.currentVoiceEntryIndex++, 0 === this.currentVoiceEntryIndex && (this.handleRepetitionsAtMeasureBegin(), this.activateCurrentRhythmInstructions()), this.currentVoiceEntryIndex >= 0 && this.currentVoiceEntryIndex < this.currentMeasure.VerticalSourceStaffEntryContainers.length) {
              const t3 = this.currentMeasure.VerticalSourceStaffEntryContainers[this.currentVoiceEntryIndex];
              this.currentVoiceEntries = this.getVoiceEntries(t3), this.currentVerticalContainerInMeasureTimestamp = t3.Timestamp, this.currentRelativeInMeasureTimestamp = this.currentVerticalContainerInMeasureTimestamp, this.currentTimeStamp = n.Fraction.plus(this.currentMeasure.AbsoluteTimestamp, this.currentVerticalContainerInMeasureTimestamp);
              const e3 = this.musicSheet.SelectionEnd;
              return e3 && this.currentTimeStamp.gte(e3) && (this.endReached = true), void this.activateCurrentDynamicOrTempoInstructions();
            }
            if (this.currentEnrolledMeasureTimestamp.Add(this.currentMeasure.Duration), this.handleRepetitionsAtMeasureEnd(), this.currentMeasureIndex >= 0 && this.currentMeasureIndex < this.musicSheet.SourceMeasures.length) return this.currentMeasure = this.musicSheet.SourceMeasures[this.currentMeasureIndex], this.currentTimeStamp = n.Fraction.plus(this.currentMeasure.AbsoluteTimestamp, this.currentVerticalContainerInMeasureTimestamp), this.currentVoiceEntryIndex = -1, void this.recursiveMove();
            this.currentVerticalContainerInMeasureTimestamp = new n.Fraction(), this.currentMeasure = void 0, this.currentVoiceEntries = void 0, this.endReached = true;
          }
          checkEntries(t3) {
            const e3 = this.CurrentVisibleVoiceEntries();
            if (e3.length > 0) {
              if (!t3) return true;
              for (let t4 = 0, i3 = e3.length; t4 < i3; ++t4) if (e3[t4].Notes[0].Pitch) return true;
            }
            return false;
          }
          getVisibleEntries(t3, e3) {
            if (t3.ParentVoice.Visible) {
              let i3 = false;
              for (const e4 of t3.Notes) if (e4.PrintObject) {
                i3 = true;
                break;
              }
              if (!i3 && this.SkipInvisibleNotes) return;
              e3.push(t3);
            }
          }
          getAudibleEntries(t3, e3) {
            t3.ParentVoice.Audible && e3.push(t3);
          }
          getScoreFollowingEntries(t3, e3) {
            t3.ParentVoice.Following && t3.ParentVoice.Parent.Following && e3.push(t3);
          }
          getVoiceEntries(t3) {
            const e3 = [];
            for (const i3 of t3.StaffEntries) if (i3) for (const t4 of i3.VoiceEntries) e3.push(t4);
            return e3;
          }
        }
        e2.MusicPartManagerIterator = h;
      }, 512: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MusicSymbol = void 0, function(t3) {
          t3[t3.Unused_first_Symbol = 0] = "Unused_first_Symbol", t3[t3.BLACK_HEAD = 1] = "BLACK_HEAD", t3[t3.UPWARDS_TAIL = 2] = "UPWARDS_TAIL", t3[t3.DOWNWARDS_TAIL = 3] = "DOWNWARDS_TAIL", t3[t3.UPWARDS_DOUBLE_TAIL = 4] = "UPWARDS_DOUBLE_TAIL", t3[t3.DOWNWARDS_DOUBLE_TAIL = 5] = "DOWNWARDS_DOUBLE_TAIL", t3[t3.UPWARDS_TRIPLE_TAIL = 6] = "UPWARDS_TRIPLE_TAIL", t3[t3.DOWNWARDS_TRIPLE_TAIL = 7] = "DOWNWARDS_TRIPLE_TAIL", t3[t3.UPWARDS_QUAD_TAIL = 8] = "UPWARDS_QUAD_TAIL", t3[t3.DOWNWARDS_QUAD_TAIL = 9] = "DOWNWARDS_QUAD_TAIL", t3[t3.ROUND_HEAD = 10] = "ROUND_HEAD", t3[t3.WHITE_HEAD = 11] = "WHITE_HEAD", t3[t3.G_CLEF = 12] = "G_CLEF", t3[t3.F_CLEF = 13] = "F_CLEF", t3[t3.C_CLEF = 14] = "C_CLEF", t3[t3.BREVE = 15] = "BREVE", t3[t3.BREVE_REST = 16] = "BREVE_REST", t3[t3.COMMON_TIME = 17] = "COMMON_TIME", t3[t3.CUT_TIME = 18] = "CUT_TIME", t3[t3.WHOLE_REST = 19] = "WHOLE_REST", t3[t3.HALF_REST = 20] = "HALF_REST", t3[t3.QUARTER_REST = 21] = "QUARTER_REST", t3[t3.EIGHTH_REST = 22] = "EIGHTH_REST", t3[t3.SIXTEENTH_REST = 23] = "SIXTEENTH_REST", t3[t3.THIRTYSECOND_REST = 24] = "THIRTYSECOND_REST", t3[t3.SIXTYFOURTH_REST = 25] = "SIXTYFOURTH_REST", t3[t3.FLAT = 26] = "FLAT", t3[t3.SHARP = 27] = "SHARP", t3[t3.NATURAL = 28] = "NATURAL", t3[t3.DOUBLE_FLAT = 29] = "DOUBLE_FLAT", t3[t3.DOUBLE_SHARP = 30] = "DOUBLE_SHARP", t3[t3.ZERO = 31] = "ZERO", t3[t3.ONE = 32] = "ONE", t3[t3.TWO = 33] = "TWO", t3[t3.THREE = 34] = "THREE", t3[t3.FOUR = 35] = "FOUR", t3[t3.FIVE = 36] = "FIVE", t3[t3.SIX = 37] = "SIX", t3[t3.SEVEN = 38] = "SEVEN", t3[t3.EIGHT = 39] = "EIGHT", t3[t3.NINE = 40] = "NINE", t3[t3.DOT = 41] = "DOT", t3[t3.FERMATA = 42] = "FERMATA", t3[t3.INVERTED_FERMATA = 43] = "INVERTED_FERMATA", t3[t3.SPICCATO = 44] = "SPICCATO", t3[t3.TENUTO = 45] = "TENUTO", t3[t3.MARCATO = 46] = "MARCATO", t3[t3.MARCATISSIMO = 47] = "MARCATISSIMO", t3[t3.INVERTED_MARCATISSIMO = 48] = "INVERTED_MARCATISSIMO", t3[t3.P = 49] = "P", t3[t3.F = 50] = "F", t3[t3.S = 51] = "S", t3[t3.Z = 52] = "Z", t3[t3.M = 53] = "M", t3[t3.R = 54] = "R", t3[t3.SEGNO = 55] = "SEGNO", t3[t3.CODA = 56] = "CODA", t3[t3.DRUM_CLEF = 57] = "DRUM_CLEF", t3[t3.G_CLEF_SUB8 = 58] = "G_CLEF_SUB8", t3[t3.G_CLEF_SUPER8 = 59] = "G_CLEF_SUPER8", t3[t3.G_CLEF_SUB15 = 60] = "G_CLEF_SUB15", t3[t3.G_CLEF_SUPER15 = 61] = "G_CLEF_SUPER15", t3[t3.F_CLEF_SUB8 = 62] = "F_CLEF_SUB8", t3[t3.F_CLEF_SUPER8 = 63] = "F_CLEF_SUPER8", t3[t3.F_CLEF_SUB15 = 64] = "F_CLEF_SUB15", t3[t3.F_CLEF_SUPER15 = 65] = "F_CLEF_SUPER15", t3[t3.DOWN_BOW = 66] = "DOWN_BOW", t3[t3.MORDENT = 67] = "MORDENT", t3[t3.INVERTED_MORDENT = 68] = "INVERTED_MORDENT", t3[t3.TURN = 69] = "TURN", t3[t3.INVERTED_TURN = 70] = "INVERTED_TURN", t3[t3.LEFTHAND_PIZZICATO = 71] = "LEFTHAND_PIZZICATO", t3[t3.RELEASE_PED = 72] = "RELEASE_PED", t3[t3.ENGAGE_PED = 73] = "ENGAGE_PED", t3[t3.VA8 = 74] = "VA8", t3[t3.VB8 = 75] = "VB8", t3[t3.TRILL = 76] = "TRILL", t3[t3.MA15 = 77] = "MA15", t3[t3.MB15 = 78] = "MB15", t3[t3.HIGH = 79] = "HIGH", t3[t3.PLAY = 80] = "PLAY", t3[t3.MIC = 81] = "MIC", t3[t3.SNAP_PIZZICATO = 82] = "SNAP_PIZZICATO", t3[t3.NATURAL_HARMONIC = 83] = "NATURAL_HARMONIC", t3[t3.EditPen = 84] = "EditPen", t3[t3.PEDAL_BRACKET = 85] = "PEDAL_BRACKET", t3[t3.PEDAL_MIXED = 86] = "PEDAL_MIXED", t3[t3.PEDAL_SYMBOL = 87] = "PEDAL_SYMBOL";
        }(i2 || (e2.MusicSymbol = i2 = {}));
      }, 599: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(6888), e2), n(i2(3902), e2);
      }, 624: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.OSMDOptions = e2.SkyBottomLineBatchCalculatorBackendType = e2.BackendType = e2.FillEmptyMeasuresWithWholeRests = e2.AlignRestOption = e2.CursorType = void 0;
        const s = i2(4146);
        var n, r, o, a, l;
        !function(t3) {
          t3[t3.Standard = 0] = "Standard", t3[t3.ThinLeft = 1] = "ThinLeft", t3[t3.ShortThinTopLeft = 2] = "ShortThinTopLeft", t3[t3.CurrentArea = 3] = "CurrentArea", t3[t3.CurrentAreaLeft = 4] = "CurrentAreaLeft";
        }(n || (e2.CursorType = n = {})), function(t3) {
          t3[t3.Never = 0] = "Never", t3[t3.Always = 1] = "Always", t3[t3.Auto = 2] = "Auto";
        }(r || (e2.AlignRestOption = r = {})), function(t3) {
          t3[t3.No = 0] = "No", t3[t3.YesVisible = 1] = "YesVisible", t3[t3.YesInvisible = 2] = "YesInvisible";
        }(o || (e2.FillEmptyMeasuresWithWholeRests = o = {})), function(t3) {
          t3[t3.SVG = 0] = "SVG", t3[t3.Canvas = 1] = "Canvas";
        }(a || (e2.BackendType = a = {})), function(t3) {
          t3[t3.Plain = 0] = "Plain", t3[t3.WebGL = 1] = "WebGL";
        }(l || (e2.SkyBottomLineBatchCalculatorBackendType = l = {})), e2.OSMDOptions = class {
          static OSMDOptionsStandard() {
            return { autoResize: true, backend: "svg", drawingParameters: s.DrawingParametersEnum.default };
          }
          static BackendTypeFromString(t3) {
            return t3 && "canvas" === t3.toLowerCase() ? a.Canvas : a.SVG;
          }
        };
      }, 649: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.LyricWord = void 0, e2.LyricWord = class {
          constructor() {
            this.syllables = [];
          }
          get Syllables() {
            return this.syllables;
          }
          containsVoiceEntry(t3) {
            for (let e3 = 0, i2 = this.Syllables.length; e3 < i2; ++e3) if (this.Syllables[e3].Parent === t3) return true;
            return false;
          }
          findLyricEntryInVoiceEntry(t3) {
            for (let e3 = 0, i2 = this.Syllables.length; e3 < i2; ++e3) {
              const i3 = this.Syllables[e3];
              if (i3.Parent === t3) return i3;
            }
          }
        };
      }, 735: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.PlainSkyBottomLineBatchCalculatorBackend = void 0;
        const s = i2(5479), n = i2(3667);
        class r extends n.SkyBottomLineBatchCalculatorBackend {
          constructor(t3, e3) {
            super(t3, e3);
          }
          getPreferredRenderingConfiguration(t3, e3) {
            return { elementWidth: Math.ceil(t3), numColumns: 6, numRows: 6 };
          }
          onInitialize(t3) {
          }
          calculateFromCanvas(t3, e3, i3, n2, r2) {
            const o = t3.width, a = e3.getImageData(0, 0, t3.width, t3.height), { elementWidth: l, elementHeight: h, numColumns: c } = r2, u = [];
            for (let t4 = 0; t4 < i3.length; ++t4) {
              const e4 = i3[t4], r3 = Math.floor(e4.getVFStave().getWidth()), d = Math.max(Math.ceil(e4.PositionAndShape.Size.width * n2), 1), f = t4 % c * l, m = f + r3, p = Math.floor(t4 / c) * h, g = p + h, b = new Array(Math.max(d, r3)).fill(0), S = new Array(Math.max(d, r3)).fill(0);
              for (let t5 = f; t5 < m; ++t5) {
                b[t5 - f] = 0;
                for (let e5 = p; e5 < g; ++e5) {
                  const i4 = e5 * o * 4 + 4 * t5;
                  if (a.data[i4 + 3] > 0) {
                    b[t5 - f] = e5 - p;
                    break;
                  }
                }
                S[t5 - f] = h;
                for (let e5 = g - 1; e5 >= p; e5--) {
                  const i4 = e5 * o * 4 + 4 * t5;
                  if (a.data[i4 + 3] > 0) {
                    S[t5 - f] = e5 - p;
                    break;
                  }
                }
              }
              const y = Math.max(...b), E = Math.min(...S);
              for (let t5 = 0; t5 < r3; ++t5) b[t5] = 0 === b[t5] ? y : b[t5], S[t5] = S[t5] === h ? E : S[t5];
              u.push(new s.SkyBottomLineCalculationResult(b, S));
            }
            return u;
          }
        }
        e2.PlainSkyBottomLineBatchCalculatorBackend = r;
      }, 806: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowMusicSheetCalculator = void 0;
        const n = i2(7921), r = i2(3753), o = i2(5748), a = i2(1327), l = i2(5054), h = i2(7785), c = s(i2(3206));
        var u = c.default.Flow;
        const d = s(i2(3065)), f = i2(9479), m = i2(2395), p = i2(7751), g = i2(9310), b = i2(7809), S = i2(7533), y = i2(4022), E = i2(2400), x = i2(9161), v = i2(624), _ = i2(7506), M = i2(5282), w = i2(6014), P = i2(4980), T = i2(6659), L = i2(6954), A = i2(7109), C = i2(512), R = i2(813), N = i2(1216);
        class I extends n.MusicSheetCalculator {
          constructor(t3) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(), this.beamsNeedUpdate = false, this.rules = t3, n.MusicSheetCalculator.symbolFactory = new r.VexFlowGraphicalSymbolFactory(), n.MusicSheetCalculator.TextMeasurer = new h.VexFlowTextMeasurer(this.rules), n.MusicSheetCalculator.stafflineNoteCalculator = new _.VexflowStafflineNoteCalculator(this.rules), "gonville" === ((_a = this.rules.DefaultVexFlowNoteFont) == null ? void 0 : _a.toLowerCase()) ? c.default.Flow.DEFAULT_FONT_STACK = [(_b = c.default.Flow.Fonts) == null ? void 0 : _b.Gonville, (_c = c.default.Flow.Fonts) == null ? void 0 : _c.Bravura, (_d = c.default.Flow.Fonts) == null ? void 0 : _d.Custom] : "petaluma" === ((_e = this.rules.DefaultVexFlowNoteFont) == null ? void 0 : _e.toLowerCase()) && (c.default.Flow.DEFAULT_FONT_STACK = [(_f = c.default.Flow.Fonts) == null ? void 0 : _f.Petaluma, (_g = c.default.Flow.Fonts) == null ? void 0 : _g.Gonville, (_h = c.default.Flow.Fonts) == null ? void 0 : _h.Bravura]);
          }
          clearRecreatedObjects() {
            super.clearRecreatedObjects(), n.MusicSheetCalculator.stafflineNoteCalculator = new _.VexflowStafflineNoteCalculator(this.rules);
            for (const t3 of this.graphicalMusicSheet.MeasureList) for (const e3 of t3) e3 == null ? void 0 : e3.clean();
          }
          formatMeasures() {
            for (const t3 of this.graphicalMusicSheet.MeasureList) if (t3 && t3[0]) {
              t3.find((t4) => t4 == null ? void 0 : t4.isVisible()).format();
              for (const e3 of t3) {
                for (const t4 of e3.staffEntries) t4.calculateXPosition();
                e3.finalizeBeams();
              }
            }
            this.beamsNeedUpdate = false;
          }
          calculateMeasureXLayout(t3) {
            const e3 = [];
            for (const i4 of t3) (i4 == null ? void 0 : i4.isVisible()) && e3.push(i4);
            if (0 === e3.length) return 0;
            t3 = e3;
            const i3 = [], s2 = new u.Formatter({ softmaxFactor: this.rules.SoftmaxFactorVexFlow });
            let r2 = t3[0].staffEntries.length, o2 = 1;
            for (const e4 of t3) {
              if (!e4) continue;
              let t4 = 0;
              for (const i4 of e4.staffEntries) t4 += i4.setMaxAccidentals();
              e4.parentSourceMeasure.ImplicitMeasure && (r2 = Math.max(e4.staffEntries.length, r2), o2 = Math.max(e4.staffEntries.length + t4, o2));
              const n2 = e4.vfVoices, a3 = [];
              for (const t5 in n2) if (n2.hasOwnProperty(t5)) {
                const s3 = n2[t5];
                e4.hasOnlyRests && !s3.ticksUsed.equals(s3.totalTicks) && (s3.ticksUsed = s3.totalTicks), a3.push(s3), i3.push(s3);
              }
              0 !== a3.length ? s2.joinVoices(a3) : d.default.debug("Found a measure with no voices. Continuing anyway.", n2);
            }
            let a2 = 12;
            const l2 = t3[0].parentSourceMeasure;
            if (i3.length > 0) {
              if (a2 = s2.preCalculateMinTotalWidth(i3) / f.unitInPixels * this.rules.VoiceSpacingMultiplierVexflow + this.rules.VoiceSpacingAddendVexflow + 0.3 * r2, l2 == null ? void 0 : l2.ImplicitMeasure) {
                a2 = l2.Duration.RealValue / l2.ActiveTimeSignature.RealValue * a2;
                let t4 = 0;
                const e5 = l2.measureListIndex;
                if (e5 > 1) for (const i4 of this.graphicalMusicSheet.MeasureList[e5 - 1]) {
                  const e6 = i4 == null ? void 0 : i4.parentSourceMeasure.endingBarStyleEnum;
                  if (e6 === L.SystemLinesEnum.ThinBold || e6 === L.SystemLinesEnum.DotsThinBold) {
                    t4 = this.rules.PickupMeasureRepetitionSpacing;
                    break;
                  }
                }
                a2 += t4, r2 > 1 ? a2 += 0.3 * o2 * 1.5 : e5 > 1 && 1 === r2 && (a2 += this.rules.PickupMeasureSpacingSingleNoteAddend), a2 *= this.rules.PickupMeasureWidthMultiplier;
              }
              n.MusicSheetCalculator.setMeasuresMinStaffEntriesWidth(t3, a2);
              const e4 = (t4, e5) => {
                s2.formatToStave(i3, e5.getVFStave());
              }, h2 = (t4, e5) => {
                s2.formatToStave(i3, e5.getVFStave(), { align_rests: true, context: void 0 });
              };
              for (const i4 of t3) {
                if (this.rules.AlignRests === v.AlignRestOption.Never) i4.formatVoices = e4;
                else if (this.rules.AlignRests === v.AlignRestOption.Always) i4.formatVoices = h2;
                else if (this.rules.AlignRests === v.AlignRestOption.Auto) {
                  let t4 = false;
                  for (const e5 of i4.staffEntries) {
                    let i5 = 0, s3 = 0;
                    for (const n2 of e5.graphicalVoiceEntries) if (n2.parentVoiceEntry.IsGrace || n2 && n2.notes && n2.notes[0] && n2.notes[0].sourceNote && n2.notes[0].sourceNote.PrintObject && i5++, n2 && n2.notes && n2.notes[0] && n2.notes[0].sourceNote && n2.notes[0].sourceNote.isRest() && n2.notes[0].sourceNote.PrintObject && s3++, i5 > 1 && s3 >= 1) {
                      t4 = true;
                      break;
                    }
                    if (t4) break;
                  }
                  i4.formatVoices = t4 ? h2 : e4;
                }
                if (i4 === t3[0]) {
                  const t4 = i4;
                  t4.formatVoices(a2 * f.unitInPixels, t4);
                }
              }
            }
            for (const e4 of t3) if (e4) for (const t4 of e4.staffEntries) t4.calculateXPosition();
            for (const e4 of t3) {
              if (!e4) continue;
              const t4 = e4.vfVoices, i4 = [];
              for (const e5 in t4) t4.hasOwnProperty(e5) && i4.push(t4[e5]);
              0 !== i4.length ? s2.joinVoices(i4) : d.default.debug("Found a measure with no voices. Continuing anyway.", t4);
            }
            return a2;
          }
          calculateElongationFactor(t3, e3, i3, s2, n2, r2, a2, l2) {
            let h2 = n2, c2 = 0;
            for (const u2 of t3) {
              const t4 = u2.GraphicalLabel.Label.textAlignment;
              let d2 = a2, f2 = l2;
              if (u2 instanceof m.GraphicalLyricEntry && u2.ParentLyricWord) {
                u2.LyricsEntry.SyllableIndex > 0 && (d2 = this.rules.BetweenSyllableMinimumDistance, S.TextAlignment.IsCenterAligned(t4) && (d2 += 1));
                const e4 = u2.ParentLyricWord.GetLyricWord.Syllables;
                e4.length > 1 && u2.LyricsEntry.SyllableIndex < e4.length - 1 && (void 0 === this.dashSpace && (this.dashSpace = 1.5), f2 -= this.dashSpace);
              }
              const p2 = u2 instanceof m.GraphicalLyricEntry ? u2.GraphicalLabel.PositionAndShape : u2.PositionAndShape, g2 = p2.Size.width;
              let b2, y2, E2, x2, v2 = e3.PositionAndShape.RelativePosition.x + p2.BorderLeft;
              u2 instanceof T.GraphicalChordSymbolContainer && u2.PositionAndShape.Parent.DataObject instanceof o.GraphicalMeasure && (v2 = this.rules.ChordSymbolWholeMeasureRestXOffset + p2.BorderMarginLeft + u2.PositionAndShape.Parent.DataObject.beginInstructionsWidth), void 0 !== i3[c2] && i3[c2].extend, i3[c2] && (y2 = v2 - i3[c2].xPosition);
              const _2 = s2 * n2;
              S.TextAlignment.IsCenterAligned(t4) ? (f2 /= 4, E2 = _2 - v2, x2 = g2 / 2 - f2, i3[c2] && (b2 = i3[c2].labelWidth / 2 + g2 / 2 + d2)) : S.TextAlignment.IsLeft(t4) && (E2 = _2 - v2, x2 = g2 - f2, i3[c2] && (b2 = i3[c2].labelWidth + d2));
              let M2 = 1;
              const w2 = x2 / E2;
              let P2 = 1;
              u2 instanceof m.GraphicalLyricEntry && u2.LyricsEntry ? i3[c2] && (P2 = b2 / y2, i3[c2].sourceNoteDuration.Denominator > 4 && (P2 *= 1.1)) : i3[c2] && (P2 = b2 / y2), M2 = Math.max(w2, P2), h2 = Math.max(h2, M2);
              let L2 = Math.max(b2 - y2 || 0, 0);
              i3[c2] && (L2 += i3[c2].cumulativeOverlap), i3[c2] = { cumulativeOverlap: L2, extend: u2 instanceof m.GraphicalLyricEntry && u2.LyricsEntry.extend, labelWidth: g2, measureNumber: r2, sourceNoteDuration: u2 instanceof m.GraphicalLyricEntry && u2.LyricsEntry && u2.LyricsEntry.Parent.Notes[0].Length, text: u2 instanceof m.GraphicalLyricEntry ? u2.LyricsEntry.Text : u2.GraphicalLabel.Label.text, xPosition: v2 }, c2++;
            }
            return h2;
          }
          calculateElongationFactorFromStaffEntries(t3, e3, i3, s2) {
            let n2 = i3;
            const r2 = {}, o2 = {};
            for (const i4 of t3) i4.LyricsEntries.length > 0 && this.rules.RenderLyrics && (n2 = this.calculateElongationFactor(i4.LyricsEntries, i4, r2, e3, n2, s2, this.rules.HorizontalBetweenLyricsDistance, this.rules.LyricOverlapAllowedIntoNextMeasure)), i4.graphicalChordContainers.length > 0 && this.rules.RenderChordSymbols && (n2 = this.calculateElongationFactor(i4.graphicalChordContainers, i4, o2, e3, n2, s2, this.rules.ChordSymbolXSpacing, this.rules.ChordOverlapAllowedIntoNextMeasure));
            return n2;
          }
          calculateMeasureWidthFromStaffEntries(t3, e3) {
            let i3 = 1;
            for (const s2 of t3) s2 && 0 !== s2.staffEntries.length && s2.isVisible() && (i3 = this.calculateElongationFactorFromStaffEntries(s2.staffEntries, e3, i3, s2.MeasureNumber));
            return i3 = Math.min(i3, this.rules.MaximumLyricsElongationFactor), e3 * i3;
          }
          createGraphicalTie(t3, e3, i3, s2, n2) {
            return new l.GraphicalTie(t3, s2, n2);
          }
          updateStaffLineBorders(t3) {
            t3.SkyBottomLineCalculator.updateStaffLineBorders();
          }
          graphicalMeasureCreatedCalculations(t3) {
            t3.rules = this.rules, t3.graphicalMeasureCreatedCalculations();
          }
          layoutVoiceEntry(t3, e3, i3, s2) {
            for (let t4 = 0; t4 < e3.length; t4++) e3[t4] = n.MusicSheetCalculator.stafflineNoteCalculator.positionNote(e3[t4]);
          }
          layoutStaffEntry(t3) {
            t3.parentMeasure.layoutStaffEntry(t3);
          }
          initGraphicalMeasuresCreation() {
          }
          layoutArticulationMarks(t3, e3, i3) {
          }
          layoutGraphicalTie(t3, e3, i3) {
            const s2 = t3.StartNote, n2 = t3.EndNote;
            let r2, o2, a2 = 0;
            s2 && s2.vfnote && s2.vfnote.length >= 2 && (r2 = s2.vfnote[0], a2 = s2.vfnote[1]);
            let l2 = 0;
            if (n2 && n2.vfnote && n2.vfnote.length >= 2 && (o2 = n2.vfnote[0], l2 = n2.vfnote[1]), e3) {
              if (r2) {
                const e4 = new u.StaveTie({ first_indices: [a2], first_note: r2 });
                s2.parentVoiceEntry.parentStaffEntry.parentMeasure.addStaveTie(e4, t3);
              }
              if (o2) {
                const e4 = new u.StaveTie({ last_indices: [l2], last_note: o2 });
                n2.parentVoiceEntry.parentStaffEntry.parentMeasure.addStaveTie(e4, t3);
              }
            } else if (r2 || o2) {
              let e4;
              if (i3) if ("S" === t3.Tie.Type) {
                const i4 = t3.StartNote.sourceNote, s3 = t3.EndNote.sourceNote;
                let n3 = 1;
                i4.FretNumber > s3.FretNumber && (n3 = -1), e4 = new u.TabSlide({ first_indices: [a2], first_note: r2, last_indices: [l2], last_note: o2 }, n3);
              } else e4 = new u.TabTie({ first_indices: [a2], first_note: r2, last_indices: [l2], last_note: o2 }, t3.Tie.Type);
              else {
                e4 = new u.StaveTie({ first_indices: [a2], first_note: r2, last_indices: [l2], last_note: o2 });
                const i4 = t3.Tie.getTieDirection(s2.sourceNote);
                i4 === P.PlacementEnum.Below ? e4.setDirection(1) : i4 === P.PlacementEnum.Above && e4.setDirection(-1);
              }
              n2.parentVoiceEntry.parentStaffEntry.parentMeasure.addStaveTie(e4, t3);
            }
          }
          calculateDynamicExpressionsForMultiExpression(t3, e3, i3) {
            if (e3 < this.rules.MinMeasureToDrawIndex || e3 > this.rules.MaxMeasureToDrawIndex) return;
            const s2 = t3.AbsoluteTimestamp, n2 = this.graphicalMusicSheet.MeasureList[e3], r2 = n2[i3].ParentStaffLine, o2 = n2[i3], a2 = t3.StartingContinuousDynamic, l2 = void 0 !== a2 && !a2.IsStartOfSoftAccent, h2 = this.getRelativePositionInStaffLineFromTimestamp(s2, i3, r2, r2 == null ? void 0 : r2.isPartOfMultiStaffInstrument(), void 0, l2);
            if (h2.x <= 0 && (h2.x = o2.beginInstructionsWidth + this.rules.RhythmRightMargin), t3.InstantaneousDynamic) {
              const e4 = new b.VexFlowInstantaneousDynamicExpression(t3.InstantaneousDynamic, r2, o2);
              this.calculateGraphicalInstantaneousDynamicExpression(e4, h2, s2), this.dynamicExpressionMap.set(s2.RealValue, e4.PositionAndShape);
            }
            if (a2) {
              const e4 = new E.VexFlowContinuousDynamicExpression(a2, r2, o2.parentSourceMeasure);
              if (e4.StartMeasure = o2, e4.IsSoftAccent = t3.StartingContinuousDynamic.IsStartOfSoftAccent, !e4.IsVerbal && a2.EndMultiExpression) try {
                this.calculateGraphicalContinuousDynamic(e4, h2), e4.updateSkyBottomLine();
              } catch (t4) {
              }
              else e4.IsVerbal ? this.calculateGraphicalVerbalContinuousDynamic(e4, h2) : d.default.warn("This continuous dynamic is not covered. measure" + t3.SourceMeasureParent.MeasureNumber);
            }
          }
          createMetronomeMark(t3) {
            var _a, _b;
            const e3 = t3.ParentMultiTempoExpression.SourceMeasureParent.MeasureNumber, i3 = Math.max(t3.StaffNumber - 1, 0), s2 = this.graphicalMusicSheet.findGraphicalMeasureByMeasureNumber(e3, i3), n2 = s2 === this.graphicalMusicSheet.MeasureList[0][0];
            if (s2.hasMetronomeMark) return;
            const r2 = s2.getVFStave();
            let o2 = "q";
            if (t3.beatUnit) {
              const e4 = M.NoteTypeHandler.getNoteDurationFromType(t3.beatUnit);
              o2 = w.VexFlowConverter.durations(e4, false)[0];
            }
            let a2 = this.rules.MetronomeMarkYShift, l2 = false;
            for (const e4 of t3.parentMeasure.TempoExpressions) {
              const t4 = ((_a = e4.InstantaneousTempo) == null ? void 0 : _a.Enum) === x.TempoEnum.metronomeMark;
              if (e4.getPlacementOfFirstEntry() === P.PlacementEnum.Above && !t4) {
                l2 = true;
                break;
              }
            }
            l2 && (a2 -= 1.4);
            const h2 = (_b = this.graphicalMusicSheet.MeasureList[0][0].ParentStaffLine) == null ? void 0 : _b.SkyLine;
            r2.setTempo({ bpm: t3.TempoInBpm, dots: t3.dotted, duration: o2 }, a2 * f.unitInPixels);
            const c2 = n2 ? this.rules.MetronomeMarkXShift * f.unitInPixels : 0;
            r2.getModifiers()[r2.getModifiers().length - 1].setShiftX(c2), s2.hasMetronomeMark = true, h2 && (h2[0] = Math.min(h2[0], -4.5 + a2));
          }
          calculateRehearsalMark(t3) {
            const e3 = t3.rehearsalExpression;
            if (!e3) return;
            const i3 = this.graphicalMusicSheet.MeasureList[0][0].MeasureNumber, s2 = Math.max(t3.MeasureNumber - i3, 0);
            for (const i4 of this.graphicalMusicSheet.MeasureList[s2]) {
              const s3 = i4 == null ? void 0 : i4.getVFStave();
              if (!s3 || !i4.isVisible()) continue;
              let n2 = -this.rules.RehearsalMarkYOffsetDefault - this.rules.RehearsalMarkYOffset;
              i4.parentSourceMeasure.isReducedToMultiRest && (n2 += this.rules.RehearsalMarkYOffsetAddedForRehearsalMarks);
              let r2 = this.rules.RehearsalMarkXOffsetDefault + this.rules.RehearsalMarkXOffset;
              t3.IsSystemStartMeasure && (r2 += this.rules.RehearsalMarkXOffsetSystemStartMeasure);
              const o2 = this.rules.RehearsalMarkFontSize;
              return void s3.setSection(e3.label, n2, r2, o2);
            }
          }
          calculateSingleOctaveShift(t3, e3, i3, s2) {
            var _a;
            const n2 = e3.OctaveShiftStart, r2 = n2.ParentStartMultiExpression.Timestamp, o2 = (_a = n2.ParentEndMultiExpression) == null ? void 0 : _a.Timestamp, a2 = this.rules.MinMeasureToDrawIndex, l2 = this.rules.MaxMeasureToDrawIndex;
            let h2, c2, u2 = this.graphicalMusicSheet.MeasureList[i3][s2].ParentStaffLine;
            if (u2 || (u2 = this.graphicalMusicSheet.MeasureList[a2][s2].ParentStaffLine), h2 = n2.ParentEndMultiExpression ? this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(n2.ParentEndMultiExpression.SourceMeasureParent, s2) : this.graphicalMusicSheet.getLastGraphicalMeasureFromIndex(s2, true), h2.MeasureNumber > l2 + 1 && (h2 = this.graphicalMusicSheet.getLastGraphicalMeasureFromIndex(s2, true)), c2 = n2.ParentEndMultiExpression ? this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(n2.ParentStartMultiExpression.SourceMeasureParent, s2) : this.graphicalMusicSheet.MeasureList[a2][s2], c2.MeasureNumber < a2 + 1 && (c2 = this.graphicalMusicSheet.MeasureList[a2][s2]), c2.MeasureNumber < a2 + 1 || c2.MeasureNumber > l2 + 1 || h2.MeasureNumber < a2 + 1 || h2.MeasureNumber > l2 + 1) return;
            let f2 = h2.ParentStaffLine;
            if (f2 || (f2 = u2), h2 && u2 && f2) {
              const t4 = new g.VexFlowOctaveShift(n2, u2.PositionAndShape);
              if (!t4.startNote) {
                let e5;
                for (const t5 of c2.staffEntries) if (t5) {
                  e5 = t5;
                  break;
                }
                if (!e5) return;
                if (t4.setStartNote(e5), !t4.startNote) return;
              }
              if (!t4.endNote) {
                let e5;
                for (let t5 = h2.staffEntries.length - 1; t5 >= 0; t5++) if (h2.staffEntries[t5]) {
                  e5 = h2.staffEntries[t5];
                  break;
                }
                if (!e5) return void (t4.graphicalEndAtMeasureEnd = true);
                if (t4.setEndNote(e5), !t4.endNote) return;
              }
              let e4 = c2.findGraphicalStaffEntryFromTimestamp(r2);
              e4 || (e4 = c2.staffEntries[0]);
              let i4 = h2.findGraphicalStaffEntryFromTimestamp(o2);
              if (i4 || (i4 = h2.staffEntries[h2.staffEntries.length - 1]), t4.setStartNote(e4), f2 !== u2) {
                t4.endsOnDifferentStaffLine = true;
                let r3 = this.findLastStafflineMeasure(u2);
                void 0 === r3 && (r3 = h2);
                const o3 = r3.staffEntries[r3.staffEntries.length - 1];
                t4.setEndNote(o3), t4.graphicalEndAtMeasureEnd = true, t4.endMeasure = r3;
                const a3 = f2.ParentMusicSystem.Id - u2.ParentMusicSystem.Id;
                if (a3 > 0) for (let t5 = u2.ParentMusicSystem.Id; t5 < f2.ParentMusicSystem.Id; t5++) {
                  const e5 = t5 + 1, r4 = this.musicSystems[e5];
                  let o4;
                  for (const t6 of r4.StaffLines) if (t6.ParentStaff.idInMusicSheet === s2) {
                    o4 = t6;
                    break;
                  }
                  if (!o4) continue;
                  const l3 = o4.Measures[0], c3 = new g.VexFlowOctaveShift(n2, l3.PositionAndShape);
                  let u3 = this.findLastStafflineMeasure(o4);
                  t5 < a3 - 1 && (c3.endsOnDifferentStaffLine = true, c3.graphicalEndAtMeasureEnd = true, c3.endMeasure = u3);
                  const f3 = l3.staffEntries[0];
                  let m2 = u3.staffEntries[u3.staffEntries.length - 1];
                  h2.ParentStaffLine === o4 && (u3 = h2, m2 = i4), 1 === m2.graphicalVoiceEntries.length && 1 === m2.graphicalVoiceEntries[0].notes.length && m2.graphicalVoiceEntries[0].notes[0].sourceNote.isWholeMeasureNote() && (c3.graphicalEndAtMeasureEnd = true, c3.endMeasure = u3);
                  const p2 = "VexFlowMusicSheetCalculator.calculateSingleOctaveShift: ";
                  f3 || d.default.warn(p2 + "no firstNote found"), m2 || d.default.warn(p2 + "no lastNote found"), c3.setStartNote(f3), c3.setEndNote(m2), o4.OctaveShifts.push(c3), this.calculateOctaveShiftSkyBottomLine(f3, m2, c3, o4);
                }
                this.calculateOctaveShiftSkyBottomLine(e4, o3, t4, u2);
              } else t4.setEndNote(i4), this.calculateOctaveShiftSkyBottomLine(e4, i4, t4, u2);
              u2.OctaveShifts.push(t4);
            } else d.default.warn("End measure or staffLines for octave shift are undefined! This should not happen!");
          }
          findLastStafflineMeasure(t3) {
            for (let e3 = t3.Measures.length - 1; e3 >= 0; e3--) {
              const i3 = t3.Measures[e3];
              if (i3.staffEntries.length > 0) return i3;
            }
          }
          calculateSinglePedal(t3, e3, i3, s2) {
            var _a;
            const n2 = e3.PedalStart, r2 = n2.ParentStartMultiExpression.Timestamp, o2 = (_a = n2.ParentEndMultiExpression) == null ? void 0 : _a.Timestamp, a2 = this.rules.MinMeasureToDrawIndex, l2 = this.rules.MaxMeasureToDrawIndex;
            let h2, c2, u2 = this.graphicalMusicSheet.MeasureList[i3][s2].ParentStaffLine;
            if (u2 || (u2 = this.graphicalMusicSheet.MeasureList[a2][s2].ParentStaffLine), h2 = n2.ParentEndMultiExpression ? this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(n2.ParentEndMultiExpression.SourceMeasureParent, s2) : this.graphicalMusicSheet.getLastGraphicalMeasureFromIndex(s2, true), h2.MeasureNumber > l2 + 1 && (h2 = this.graphicalMusicSheet.getLastGraphicalMeasureFromIndex(s2, true)), n2.ParentEndMultiExpression ? c2 = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(n2.ParentStartMultiExpression.SourceMeasureParent, s2) : (c2 = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(n2.ParentStartMultiExpression.SourceMeasureParent, s2), c2 || (c2 = this.graphicalMusicSheet.MeasureList[a2][s2])), c2.MeasureNumber < a2 + 1 && (c2 = this.graphicalMusicSheet.MeasureList[a2][s2]), c2.parentSourceMeasure.measureListIndex < a2 || c2.parentSourceMeasure.measureListIndex > l2 || h2.parentSourceMeasure.measureListIndex < a2 || h2.parentSourceMeasure.measureListIndex > l2) return;
            let f2 = h2.ParentStaffLine;
            if (f2 || (f2 = u2), h2 && u2 && f2) {
              let t4 = false;
              u2 !== f2 && (t4 = true);
              const e4 = new A.VexFlowPedal(n2, u2.PositionAndShape, false, t4);
              e4.setEndsStave(h2, o2);
              let i4 = c2.findGraphicalStaffEntryFromTimestamp(r2);
              i4 || (i4 = c2.staffEntries[0]);
              let a3 = h2.findGraphicalStaffEntryFromTimestamp(o2);
              if (a3 || (a3 = h2.staffEntries[h2.staffEntries.length - 1]), !e4.setStartNote(i4)) return;
              if (e4.setBeginsStave(e4.startNote.isRest(), r2), f2 !== u2) if (e4.pedalSymbol === C.MusicSymbol.PEDAL_SYMBOL) {
                e4.setEndNote(a3), e4.setEndMeasure(h2), e4.ReleaseText = " ", e4.CalculateBoundingBox(), this.calculatePedalSkyBottomLine(e4.startVfVoiceEntry, e4.endVfVoiceEntry, e4, u2);
                const t5 = f2.Measures[0], i5 = new A.VexFlowPedal(n2, t5.PositionAndShape);
                e4.setEndsStave(h2, o2);
                const s3 = t5.staffEntries[0];
                if (!i5.setStartNote(s3)) return;
                i5.setEndNote(a3), i5.setEndMeasure(h2), e4.setEndMeasure(h2), f2.Pedals.push(i5), i5.CalculateBoundingBox(), i5.DepressText = " ", this.calculatePedalSkyBottomLine(i5.startVfVoiceEntry, i5.endVfVoiceEntry, i5, f2);
              } else {
                let t5 = this.findLastStafflineMeasure(u2);
                void 0 === t5 && (t5 = h2);
                const i5 = t5.staffEntries[t5.staffEntries.length - 1];
                e4.setEndNote(i5), e4.setEndMeasure(h2), e4.ChangeEnd = false;
                const r3 = f2.ParentMusicSystem.Id - u2.ParentMusicSystem.Id;
                if (r3 > 0) {
                  let t6 = 1;
                  for (let i6 = u2.ParentMusicSystem.Id; i6 < f2.ParentMusicSystem.Id; i6++) {
                    const l3 = this.musicSystems[i6 + 1].StaffLines[s2], c3 = l3.Measures[0];
                    let u3 = false, d2 = false;
                    t6 < r3 ? u3 = true : d2 = true, t6++;
                    const f3 = new A.VexFlowPedal(n2, c3.PositionAndShape, true, u3);
                    e4.setEndsStave(h2, o2), f3.ChangeBegin = false, f3.ChangeEnd = !!d2 && n2.ChangeEnd;
                    let m2 = this.findLastStafflineMeasure(l3);
                    const p2 = c3.staffEntries[0];
                    let g2 = m2.staffEntries[m2.staffEntries.length - 1];
                    if (h2.ParentStaffLine === l3 ? (m2 = h2, f3.setEndMeasure(h2), g2 = a3) : f3.setEndMeasure(l3.Measures.last()), !f3.setStartNote(p2)) break;
                    f3.setEndNote(g2), e4.setEndMeasure(h2), l3.Pedals.push(f3), f3.CalculateBoundingBox(), this.calculatePedalSkyBottomLine(f3.startVfVoiceEntry, f3.endVfVoiceEntry, f3, l3);
                  }
                }
                e4.CalculateBoundingBox(), this.calculatePedalSkyBottomLine(e4.startVfVoiceEntry, e4.endVfVoiceEntry, e4, u2);
              }
              else e4.setEndNote(a3), e4.setEndMeasure(h2), e4.CalculateBoundingBox(), this.calculatePedalSkyBottomLine(e4.startVfVoiceEntry, e4.endVfVoiceEntry, e4, u2);
              u2.Pedals.push(e4);
            } else d.default.warn("End measure or staffLines for pedal are undefined! This should not happen!");
          }
          calculatePedalSkyBottomLine(t3, e3, i3, s2) {
            var _a, _b, _c, _d;
            let n2 = e3 == null ? void 0 : e3.PositionAndShape;
            n2 || (n2 = i3.endMeasure.PositionAndShape);
            const r2 = c.default.Flow.PedalMarking.Styles, o2 = i3.getPedalMarking(), a2 = o2.line + 3 + (s2.StaffLines.length - 1), l2 = o2.render_options.text_margin_right / 10;
            let h2, u2 = t3.PositionAndShape.AbsolutePosition.x - l2;
            o2.style !== r2.MIXED && o2.style !== r2.MIXED_OPEN_END && o2.style !== r2.TEXT || (u2 -= 1);
            let d2 = s2.StaffLines.length - 1;
            for (const t4 of s2.Pedals) {
              const e4 = t4.getPedalMarking().line + 3 + (s2.StaffLines.length - 1);
              d2 = Math.max(e4, d2);
            }
            if (i3.EndSymbolPositionAndShape) {
              const t4 = o2.render_options.glyph_point_size / 20;
              h2 = u2 + 3.4;
              const e4 = n2.AbsolutePosition.x - l2, r3 = e4 + 1.5;
              d2 = Math.max(s2.SkyBottomLineCalculator.getBottomLineMaxInRange(u2, h2), d2), d2 = Math.max(a2 + 2 * t4, d2);
              const c2 = s2.SkyBottomLineCalculator.getBottomLineMaxInRange(e4, r3);
              i3.DepressText || (d2 = Math.max(d2, c2)), i3.setLine(d2 - 3 - (s2.StaffLines.length - 1)), s2.SkyBottomLineCalculator.updateBottomLineInRange(u2, h2, d2 + t4), s2.SkyBottomLineCalculator.updateBottomLineInRange(e4, r3, d2 + t4);
            } else {
              const t4 = o2.render_options.bracket_height / 10;
              if (o2.EndsStave) h2 = e3 ? e3.parentStaffEntry.parentMeasure.PositionAndShape.AbsolutePosition.x + e3.parentStaffEntry.parentMeasure.PositionAndShape.Size.width - l2 : n2.AbsolutePosition.x + n2.Size.width;
              else switch (o2.style) {
                case r2.BRACKET_OPEN_END:
                case r2.BRACKET_OPEN_BOTH:
                case r2.MIXED_OPEN_END:
                  h2 = n2.AbsolutePosition.x + n2.BorderRight - l2;
                  break;
                default:
                  h2 = n2.AbsolutePosition.x + n2.BorderLeft - l2;
              }
              const c2 = (_a = e3 == null ? void 0 : e3.parentStaffEntry) == null ? void 0 : _a.vfClefBefore;
              if (c2 && (h2 += c2.getWidth() / 10), d2 = Math.max(s2.SkyBottomLineCalculator.getBottomLineMaxInRange(u2, h2), d2), d2 === 1 / 0) return;
              if (d2 = Math.max(d2, a2 + t4), i3.setLine(d2 - 3 - (s2.StaffLines.length - 1)), u2 > h2) {
                const t5 = h2;
                h2 = u2, u2 = t5;
              }
              s2.SkyBottomLineCalculator.updateBottomLineInRange(u2, h2, d2 + t4);
            }
            for (const t4 of s2.Pedals) {
              const e4 = t4, i4 = e4.getPedalMarking();
              if (d2 > i4.line + 3 + (s2.StaffLines.length - 1)) {
                const t5 = i4.render_options.text_margin_right / 10;
                let n3, a3 = e4.startVfVoiceEntry.PositionAndShape.AbsolutePosition.x - t5;
                e4.setLine(d2 - 3 - (s2.StaffLines.length - 1));
                let l3 = (_b = e4.endVfVoiceEntry) == null ? void 0 : _b.PositionAndShape;
                if (l3 || (l3 = e4.endMeasure.PositionAndShape), e4.EndSymbolPositionAndShape) {
                  const e5 = o2.render_options.glyph_point_size / 20;
                  n3 = a3 + 3.4;
                  const i5 = l3.AbsolutePosition.x - t5, r3 = i5 + 1.5;
                  s2.SkyBottomLineCalculator.updateBottomLineInRange(a3, n3, d2 + e5), s2.SkyBottomLineCalculator.updateBottomLineInRange(i5, r3, d2 + e5);
                } else {
                  const h3 = i4.render_options.bracket_height / 10;
                  if (i4.EndsStave) n3 = l3.AbsolutePosition.x + l3.Size.width - t5;
                  else switch (o2.style) {
                    case r2.BRACKET_OPEN_END:
                    case r2.BRACKET_OPEN_BOTH:
                    case r2.MIXED_OPEN_END:
                      n3 = l3.AbsolutePosition.x + l3.BorderRight - t5;
                      break;
                    default:
                      n3 = l3.AbsolutePosition.x + l3.BorderLeft - t5;
                  }
                  const c2 = (_d = (_c = e4.endVfVoiceEntry) == null ? void 0 : _c.parentStaffEntry) == null ? void 0 : _d.vfClefBefore;
                  if (c2 && (n3 += c2.getWidth() / 10), a3 > n3) {
                    const t6 = a3;
                    a3 = n3, n3 = t6;
                  }
                  s2.SkyBottomLineCalculator.updateBottomLineInRange(a3, n3, d2 + h3);
                }
              }
            }
          }
          calculateOctaveShiftSkyBottomLine(t3, e3, i3, s2) {
            if (!e3) return void d.default.warn("octaveshift: no endStaffEntry");
            let n2 = e3.PositionAndShape;
            i3.graphicalEndAtMeasureEnd && (n2 = e3.parentMeasure.PositionAndShape);
            let r2 = t3.PositionAndShape.Size.width, o2 = n2.Size.width;
            t3.hasOnlyRests() ? r2 = -r2 : r2 /= 2, i3.graphicalEndAtMeasureEnd || (e3.hasOnlyRests() ? o2 *= 2 : o2 /= 2, t3 === e3 && (o2 *= 2));
            let a2 = t3.PositionAndShape.AbsolutePosition.x - r2, l2 = n2.AbsolutePosition.x + o2;
            if (a2 > l2) {
              const t4 = a2;
              a2 = l2, l2 = t4;
            }
            i3.PositionAndShape.Size.width = l2 - a2;
            const h2 = i3.getTextBracket(), c2 = h2.font.size / 10;
            if (h2.position === u.TextBracket.Positions.TOP) {
              const t4 = Math.ceil(s2.SkyBottomLineCalculator.getSkyLineMinInRange(a2, l2));
              if (t4 === 1 / 0) return;
              h2.start.getStave().options.top_text_position = Math.abs(t4), s2.SkyBottomLineCalculator.updateSkyLineInRange(a2, l2, t4 - 2 * c2);
            } else {
              const t4 = s2.SkyBottomLineCalculator.getBottomLineMaxInRange(a2, l2);
              if (t4 === 1 / 0) return;
              h2.start.getStave().options.bottom_text_position = t4, s2.SkyBottomLineCalculator.updateBottomLineInRange(a2, l2, t4 + 1.5 * c2);
            }
          }
          calculateWordRepetitionInstruction(t3, e3) {
            let i3;
            const s2 = this.graphicalMusicSheet.MeasureList[e3];
            for (let t4 = 0, e4 = s2.length; t4 < e4; ++t4) {
              const e5 = s2[t4];
              if (e5 && e5.ParentStaffLine && e5.ParentStaff.ParentInstrument.Visible) {
                i3 = e5;
                break;
              }
            }
            i3 && i3.addWordRepetition(t3);
          }
          calculateSkyBottomLines() {
            const t3 = R.CollectionUtil.flat(this.musicSystems.map((t4) => t4.StaffLines));
            let e3 = 0;
            for (const i3 of t3) for (const t4 of i3.Measures) t4 && e3++;
            if (this.rules.AlwaysSetPreferredSkyBottomLineBackendAutomatically && this.rules.setPreferredSkyBottomLineBackendAutomatically(e3), e3 >= this.rules.SkyBottomLineBatchMinMeasures) new a.SkyBottomLineBatchCalculator(t3, this.rules.PreferredSkyBottomLineBatchCalculatorBackend).calculateLines();
            else for (const e4 of t3) e4.SkyBottomLineCalculator.calculateLines();
          }
          calculateExpressionAlignements() {
            for (const t3 of this.musicSystems) for (const e3 of t3.StaffLines) try {
              e3.AlignmentManager.alignDynamicExpressions(), e3.AbstractExpressions.forEach((t4) => {
                t4.updateSkyBottomLine();
              });
            } catch (t4) {
            }
          }
          handleTiedGraphicalNote(t3, e3, i3, s2, n2, r2, o2, a2) {
          }
          handleBeam(t3, e3, i3) {
            t3.parentVoiceEntry.parentStaffEntry.parentMeasure.handleBeam(t3, e3);
          }
          handleVoiceEntryLyrics(t3, e3, i3) {
            t3.LyricsEntries.forEach((t4, s2) => {
              const n2 = new m.GraphicalLyricEntry(s2, e3, this.rules.LyricsHeight, this.rules.StaffHeight);
              if (e3.LyricsEntries.push(n2), n2.GraphicalLabel.setLabelPositionAndShapeBorders(), s2.Word) {
                const t5 = s2.Word.Syllables.indexOf(s2);
                let e4 = i3.indexOf(s2.Word);
                if (-1 === e4 && (i3.push(s2.Word), e4 = i3.indexOf(s2.Word)), 0 === this.graphicalLyricWords.length || e4 > this.graphicalLyricWords.length - 1) {
                  const e5 = new p.GraphicalLyricWord(s2.Word);
                  n2.ParentLyricWord = e5, e5.GraphicalLyricsEntries[t5] = n2, this.graphicalLyricWords.push(e5);
                } else {
                  const s3 = this.graphicalLyricWords[e4];
                  n2.ParentLyricWord = s3, s3.GraphicalLyricsEntries[t5] = n2, s3.isFilled() && (i3.splice(e4, 1), this.graphicalLyricWords.splice(this.graphicalLyricWords.indexOf(s3), 1));
                }
              }
            });
          }
          handleVoiceEntryOrnaments(t3, e3, i3) {
          }
          handleVoiceEntryArticulations(t3, e3, i3) {
          }
          handleVoiceEntryTechnicalInstructions(t3, e3, i3) {
          }
          handleTuplet(t3, e3, i3) {
            t3.parentVoiceEntry.parentStaffEntry.parentMeasure.handleTuplet(t3, e3);
          }
          findIndexGraphicalSlurFromSlur(t3, e3) {
            for (let i3 = 0; i3 < t3.length; i3++) if (t3[i3].slur === e3) return i3;
            return -1;
          }
          indexOfGraphicalGlissFromGliss(t3, e3) {
            for (let i3 = 0; i3 < t3.length; i3++) if (t3[i3].Glissando === e3) return i3;
            return -1;
          }
          calculateSlurs() {
            const t3 = {};
            for (const e3 of this.graphicalMusicSheet.MeasureList[0]) t3[e3.ParentStaff.idInMusicSheet] = [];
            for (const e3 of this.musicSystems) for (const i3 of e3.StaffLines) {
              const e4 = t3[i3.ParentStaff.idInMusicSheet];
              for (let t4 = 0; t4 < e4.length; t4++) {
                const s2 = e4[t4], n2 = new y.GraphicalSlur(s2.slur, this.rules);
                i3.addSlurToStaffline(n2), e4[t4] = n2;
              }
              for (const t4 of i3.Measures) for (const s2 of t4.staffEntries) {
                for (const t5 of s2.graphicalVoiceEntries) for (const n2 of t5.notes) for (const t6 of n2.sourceNote.NoteSlurs) if (t6.EndNote && t6.StartNote) {
                  if (t6.StartNote === n2.sourceNote) {
                    const s3 = new y.GraphicalSlur(t6, this.rules);
                    e4.push(s3), i3.addSlurToStaffline(s3);
                  }
                  if (t6.EndNote === n2.sourceNote) {
                    const i4 = this.findIndexGraphicalSlurFromSlur(e4, t6);
                    if (i4 >= 0) {
                      const t7 = e4[i4];
                      -1 === t7.staffEntries.indexOf(s2) && t7.staffEntries.push(s2), e4.splice(i4, 1);
                    }
                  }
                }
                for (const t5 of e4) -1 === t5.staffEntries.indexOf(s2) && t5.staffEntries.push(s2);
              }
            }
            for (const t4 of this.musicSystems) for (const e3 of t4.StaffLines) {
              const t5 = e3.GraphicalSlurs.sort(y.GraphicalSlur.Compare);
              for (const e4 of t5) e4.slur.isCrossed() || e4.calculateCurve(this.rules);
            }
          }
          calculateGlissandi() {
            const t3 = {};
            for (const e3 of this.graphicalMusicSheet.MeasureList[0]) t3[e3.ParentStaff.idInMusicSheet] = [];
            for (const e3 of this.musicSystems) for (const i3 of e3.StaffLines) {
              const e4 = t3[i3.ParentStaff.idInMusicSheet];
              for (let t4 = 0; t4 < e4.length; t4++) {
                const s2 = e4[t4], n2 = new N.VexFlowGlissando(s2.Glissando);
                i3.addGlissandoToStaffline(n2), e4[t4] = n2;
              }
              for (const t4 of i3.Measures) for (const s2 of t4.staffEntries) {
                for (const t5 of s2.graphicalVoiceEntries) for (const n2 of t5.notes) {
                  const t6 = n2.sourceNote.NoteGlissando;
                  if ((t6 == null ? void 0 : t6.EndNote) && (t6 == null ? void 0 : t6.StartNote)) {
                    if (t6.StartNote === n2.sourceNote) {
                      const s3 = new N.VexFlowGlissando(t6);
                      e4.push(s3), i3.addGlissandoToStaffline(s3);
                    }
                    if (t6.EndNote === n2.sourceNote) {
                      const i4 = this.indexOfGraphicalGlissFromGliss(e4, t6);
                      if (i4 >= 0) {
                        const t7 = e4[i4];
                        -1 === t7.staffEntries.indexOf(s2) && t7.staffEntries.push(s2), e4.splice(i4, 1);
                      }
                    }
                  }
                }
                for (const t5 of e4) -1 === t5.staffEntries.indexOf(s2) && t5.staffEntries.push(s2);
              }
            }
            for (const t4 of this.musicSystems) for (const e3 of t4.StaffLines) for (const t5 of e3.GraphicalGlissandi) if (e3.ParentStaff.isTab) {
              const e4 = t5.Glissando.StartNote, i3 = t5.Glissando.EndNote, s2 = t5.staffEntries[0].findGraphicalNoteFromNote(e4), n2 = t5.staffEntries.last().findGraphicalNoteFromNote(i3);
              if (!s2 && !n2) return;
              let r2, o2, a2, l2, h2 = 1;
              e4.FretNumber > i3.FretNumber && (h2 = -1), s2 && s2.vfnote && s2.vfnote.length >= 2 && (a2 = s2.vfnote[0], r2 = [0]), n2 && n2.vfnote && n2.vfnote.length >= 2 && (l2 = n2.vfnote[0], o2 = [0]);
              const c2 = new u.TabSlide({ first_indices: r2, first_note: a2, last_indices: o2, last_note: l2 }, h2), d2 = s2 == null ? void 0 : s2.parentVoiceEntry.parentStaffEntry.parentMeasure;
              d2 && (d2.vfTies.push(c2), t5.vfTie = c2);
              const f2 = n2 == null ? void 0 : n2.parentVoiceEntry.parentStaffEntry.parentMeasure;
              f2 && (f2.vfTies.push(c2), t5.vfTie = c2);
            }
          }
        }
        e2.VexFlowMusicSheetCalculator = I;
      }, 813: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.CollectionUtil = void 0, Array.prototype.last || Object.defineProperty(Array.prototype, "last", { enumerable: false, writable: true, value: function() {
          return this[this.length - 1];
        } }), Array.prototype.clear || Object.defineProperty(Array.prototype, "clear", { enumerable: false, writable: true, value: function() {
          this.length = 0;
        } }), Array.prototype.contains || Object.defineProperty(Array.prototype, "contains", { enumerable: false, writable: true, value: function(t3) {
          return -1 !== this.indexOf(t3);
        } }), e2.CollectionUtil = class {
          static contains2(t3, e3) {
            for (let i2 = 0; i2 < t3.length; i2++) if (t3[i2] === e3) return true;
            return false;
          }
          static last(t3) {
            return t3[t3.length - 1];
          }
          static flat(t3) {
            return [].concat(...t3);
          }
          static removeDictElementIfTrue(t3, e3, i2) {
            const s = [];
            e3.forEach(function(e4, n) {
              i2(t3, e4, n) && s.push(e4);
            });
            for (let t4 = 0; t4 < s.length; t4++) e3.remove(s[t4]);
          }
          static getLastElement(t3) {
            return t3[t3.length - 1];
          }
          static binarySearch(t3, e3, i2, s = 0, n = t3.length - 1) {
            let r = 1, o = -1;
            for (; s <= n && (r = Math.floor((s + n) / 2), r !== o); ) {
              const a = i2(t3[r], e3);
              if (0 === a) return r;
              a < 0 && (s = r + 1), 0 < a && (n = r), o = r;
            }
            return -r;
          }
        };
      }, 899: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(9490), e2), n(i2(1974), e2), n(i2(8927), e2), n(i2(1083), e2), n(i2(6438), e2), n(i2(995), e2), n(i2(2683), e2), n(i2(242), e2), n(i2(3661), e2), n(i2(9713), e2), n(i2(6659), e2), n(i2(953), e2), n(i2(1066), e2), n(i2(6711), e2), n(i2(98), e2), n(i2(5023), e2), n(i2(3361), e2), n(i2(8254), e2), n(i2(6452), e2), n(i2(2395), e2), n(i2(7751), e2), n(i2(1519), e2), n(i2(5748), e2), n(i2(1888), e2), n(i2(8724), e2), n(i2(3430), e2), n(i2(7741), e2), n(i2(2768), e2), n(i2(973), e2), n(i2(4022), e2), n(i2(348), e2), n(i2(9760), e2), n(i2(5054), e2), n(i2(4548), e2), n(i2(7225), e2), n(i2(7921), e2), n(i2(1932), e2), n(i2(512), e2), n(i2(5221), e2), n(i2(7066), e2), n(i2(8033), e2), n(i2(7624), e2), n(i2(8713), e2), n(i2(2779), e2), n(i2(2919), e2), n(i2(298), e2), n(i2(4284), e2), n(i2(67), e2), n(i2(6954), e2), n(i2(6723), e2), n(i2(7499), e2);
      }, 953: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalComment = void 0, e2.GraphicalComment = class {
          constructor(t3, e3) {
            this.label = t3, this.settings = e3;
          }
        };
      }, 973: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalRectangle = void 0;
        const s = i2(6438), n = i2(7741);
        class r extends n.GraphicalObject {
          constructor(t3, e3, i3, n2) {
            super(), this.boundingBox = new s.BoundingBox(this, i3), this.boundingBox.RelativePosition = t3, this.boundingBox.BorderRight = e3.x - t3.x, this.boundingBox.BorderBottom = e3.y - t3.y, this.style = n2;
          }
        }
        e2.GraphicalRectangle = r;
      }, 995: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Clickable = void 0;
        const s = i2(7741);
        class n extends s.GraphicalObject {
        }
        e2.Clickable = n;
      }, 1066: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalContinuousDynamicExpression = void 0;
        const n = i2(6452), r = i2(5875), o = i2(9409), a = i2(9490), l = i2(6362), h = s(i2(3065));
        class c extends a.AbstractGraphicalExpression {
          constructor(t3, e3, i3) {
            super(e3, t3, i3), this.lines = [], this.isSplittedPart = false, this.notToBeRemoved = false;
          }
          get StartMeasure() {
            return this.startMeasure;
          }
          set StartMeasure(t3) {
            this.startMeasure = t3;
          }
          get EndMeasure() {
            return this.endMeasure;
          }
          set EndMeasure(t3) {
            this.endMeasure = t3;
          }
          get EndStaffLine() {
            return this.endMeasure ? this.endMeasure.ParentStaffLine : void 0;
          }
          get IsSplittedPart() {
            return this.isSplittedPart;
          }
          set IsSplittedPart(t3) {
            this.isSplittedPart = t3;
          }
          get IsVerbal() {
            return this.ContinuousDynamic.Label && this.ContinuousDynamic.Label.length > 0;
          }
          get NotToBeRemoved() {
            return this.notToBeRemoved;
          }
          set NotToBeRemoved(t3) {
            this.notToBeRemoved = t3;
          }
          get Lines() {
            return this.lines;
          }
          get ContinuousDynamic() {
            return this.SourceExpression;
          }
          updateSkyBottomLine() {
            var _a;
            const t3 = this.parentStaffLine.SkyBottomLineCalculator, e3 = this.IsVerbal ? this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginLeft : 0, i3 = this.IsVerbal ? this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginRight : 0;
            switch (!this.IsSoftAccent && !this.IsVerbal && this.lines.length < 2 && h.default.warn("Not enough lines for SkyBottomLine calculation"), this.IsVerbal || this.ContinuousDynamic.DynamicType !== r.ContDynamicEnum.crescendo && this.ContinuousDynamic.DynamicType !== r.ContDynamicEnum.diminuendo && h.default.warn("GraphicalContinuousDynamicExpression.updateSkyBottomLine(): unhandled continuous dynamic type. start measure: " + ((_a = this.startMeasure) == null ? void 0 : _a.MeasureNumber)), this.Placement) {
              case l.PlacementEnum.Above:
                if (this.IsSoftAccent) t3.updateSkyLineWithWedge(this.lines[0].Start, this.lines[0].End), t3.updateSkyLineWithWedge(this.lines[2].End, this.lines[2].Start), t3.updateSkyLineWithLine(this.lines[0].End, this.lines[2].End, this.lines[0].End.y);
                else if (this.IsVerbal) {
                  const s2 = this.label.PositionAndShape.BorderMarginTop + this.label.PositionAndShape.RelativePosition.y;
                  t3.updateSkyLineInRange(e3, i3, s2);
                } else this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.crescendo ? t3.updateSkyLineWithWedge(this.lines[0].Start, this.lines[0].End) : this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.diminuendo && t3.updateSkyLineWithWedge(this.lines[0].End, this.lines[0].Start);
                break;
              case l.PlacementEnum.Below:
                if (this.IsVerbal) {
                  const s2 = this.label.PositionAndShape.BorderMarginBottom + this.label.PositionAndShape.RelativePosition.y;
                  t3.updateBottomLineInRange(e3, i3, s2);
                } else this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.crescendo ? t3.updateBottomLineWithWedge(this.lines[1].Start, this.lines[1].End) : this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.diminuendo && t3.updateBottomLineWithWedge(this.lines[1].End, this.lines[1].Start);
                break;
              default:
                h.default.error("Placement for GraphicalContinuousDynamicExpression is unknown");
            }
          }
          createCrescendoLines(t3, e3, i3, s2 = this.rules.WedgeOpeningLength, n2 = this.rules.WedgeLineWidth) {
            const r2 = new o.PointF2D(t3, i3), a2 = new o.PointF2D(e3, i3 - s2 / 2), l2 = new o.PointF2D(e3, i3 + s2 / 2);
            this.addWedgeLines(r2, a2, l2, n2);
          }
          createFirstHalfCrescendoLines(t3, e3, i3, s2 = this.rules.WedgeMeasureEndOpeningLength, n2 = this.rules.WedgeLineWidth) {
            const r2 = new o.PointF2D(t3, i3), a2 = new o.PointF2D(e3, i3 - s2 / 2), l2 = new o.PointF2D(e3, i3 + s2 / 2);
            this.addWedgeLines(r2, a2, l2, n2);
          }
          createSecondHalfCrescendoLines(t3, e3, i3, s2 = this.rules.WedgeMeasureBeginOpeningLength, n2 = this.rules.WedgeOpeningLength, r2 = this.rules.WedgeLineWidth) {
            const a2 = new o.PointF2D(t3, i3 - s2 / 2), l2 = new o.PointF2D(t3, i3 + s2 / 2), h2 = new o.PointF2D(e3, i3 - n2 / 2), c2 = new o.PointF2D(e3, i3 + n2 / 2);
            this.addDoubleLines(a2, h2, l2, c2, r2);
          }
          recalculateCrescendoLines(t3, e3, i3) {
            const s2 = Math.abs(this.lines[0].Start.y - this.lines[1].Start.y) > 1e-4;
            this.lines.clear(), s2 ? this.createSecondHalfCrescendoLines(t3, e3, i3) : this.isSplittedPart ? this.createFirstHalfCrescendoLines(t3, e3, i3) : this.createCrescendoLines(t3, e3, i3);
          }
          createDiminuendoLines(t3, e3, i3, s2 = this.rules.WedgeOpeningLength, n2 = this.rules.WedgeLineWidth) {
            const r2 = new o.PointF2D(t3, i3 - s2 / 2), a2 = new o.PointF2D(t3, i3 + s2 / 2), l2 = new o.PointF2D(e3, i3);
            this.addWedgeLines(l2, r2, a2, n2);
          }
          createFirstHalfDiminuendoLines(t3, e3, i3, s2 = this.rules.WedgeOpeningLength, n2 = this.rules.WedgeMeasureEndOpeningLength, r2 = this.rules.WedgeLineWidth) {
            const a2 = new o.PointF2D(t3, i3 - s2 / 2), l2 = new o.PointF2D(t3, i3 + s2 / 2), h2 = new o.PointF2D(e3, i3 - n2 / 2), c2 = new o.PointF2D(e3, i3 + n2 / 2);
            this.addDoubleLines(a2, h2, l2, c2, r2);
          }
          createSecondHalfDiminuendoLines(t3, e3, i3, s2 = this.rules.WedgeMeasureBeginOpeningLength, n2 = this.rules.WedgeLineWidth) {
            const r2 = new o.PointF2D(t3, i3 - s2 / 2), a2 = new o.PointF2D(t3, i3 + s2 / 2), l2 = new o.PointF2D(e3, i3);
            this.addWedgeLines(l2, r2, a2, n2);
          }
          recalculateDiminuendoLines(t3, e3, i3) {
            const s2 = Math.abs(this.lines[0].End.y - this.lines[1].End.y) > 1e-4;
            this.lines.clear(), s2 ? this.createFirstHalfDiminuendoLines(t3, e3, i3) : this.isSplittedPart ? this.createSecondHalfDiminuendoLines(t3, e3, i3) : this.createDiminuendoLines(t3, e3, i3);
          }
          createFirstHalfLines(t3, e3, i3, s2 = this.rules.WedgeOpeningLength, n2 = this.rules.WedgeMeasureEndOpeningLength, o2 = this.rules.WedgeLineWidth) {
            this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.crescendo ? this.createFirstHalfCrescendoLines(t3, e3, i3, n2, o2) : this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.diminuendo && this.createFirstHalfDiminuendoLines(t3, e3, i3, s2, n2, o2);
          }
          createSecondHalfLines(t3, e3, i3, s2 = this.rules.WedgeMeasureBeginOpeningLength, n2 = this.rules.WedgeOpeningLength, o2 = this.rules.WedgeLineWidth) {
            this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.crescendo ? this.createSecondHalfCrescendoLines(t3, e3, i3, s2, n2, o2) : this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.diminuendo && this.createSecondHalfDiminuendoLines(t3, e3, i3, s2, o2);
          }
          createLines(t3, e3, i3, s2 = this.rules.WedgeOpeningLength, n2 = this.rules.WedgeLineWidth) {
            this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.crescendo ? this.createCrescendoLines(t3, e3, i3, s2, n2) : this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.diminuendo && this.createDiminuendoLines(t3, e3, i3, s2, n2);
          }
          calcPsi() {
            this.IsVerbal ? this.PositionAndShape.calculateBoundingBox() : (this.PositionAndShape.RelativePosition = this.lines[0].Start, this.PositionAndShape.BorderMarginTop = this.lines[0].End.y - this.lines[0].Start.y, this.PositionAndShape.BorderMarginBottom = this.lines[1].End.y - this.lines[1].Start.y, this.PositionAndShape.Center.y = (this.PositionAndShape.BorderMarginTop + this.PositionAndShape.BorderMarginBottom) / 2, this.IsSoftAccent ? (this.PositionAndShape.BorderMarginLeft = 0, this.PositionAndShape.BorderMarginRight = this.lines[3].Start.x - this.lines[0].Start.x) : this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.crescendo ? (this.PositionAndShape.BorderMarginLeft = 0, this.PositionAndShape.BorderMarginRight = this.lines[0].End.x - this.lines[0].Start.x) : (this.PositionAndShape.BorderMarginLeft = this.lines[0].End.x - this.lines[0].Start.x, this.PositionAndShape.BorderMarginRight = 0));
          }
          cleanUp() {
            this.lines.clear();
          }
          shiftYPosition(t3) {
            this.IsVerbal ? (this.PositionAndShape.RelativePosition.y += t3, this.PositionAndShape.calculateBoundingBox()) : (this.lines[0].Start.y += t3, this.lines[0].End.y += t3, this.lines[1].End.y += t3);
          }
          squeeze(t3) {
            this.IsVerbal || Math.abs(this.lines[0].End.x - this.lines[0].Start.x) < Math.abs(t3) || (this.ContinuousDynamic.DynamicType === r.ContDynamicEnum.crescendo ? t3 > 0 ? this.lines[0].Start.x += t3 : (this.lines[0].End.x += t3, this.lines[1].End.x += t3) : t3 < 0 ? this.lines[0].Start.x += t3 : (this.lines[0].End.x += t3, this.lines[1].End.x += t3), this.calcPsi());
          }
          addWedgeLines(t3, e3, i3, s2) {
            const r2 = new n.GraphicalLine(t3, e3, s2), o2 = new n.GraphicalLine(t3, i3, s2);
            this.rules.DefaultColorMusic && (r2.colorHex = this.rules.DefaultColorMusic, o2.colorHex = this.rules.DefaultColorMusic), this.lines.push(r2), this.lines.push(o2);
          }
          addDoubleLines(t3, e3, i3, s2, r2) {
            const o2 = new n.GraphicalLine(t3, e3, r2), a2 = new n.GraphicalLine(i3, s2, r2);
            this.rules.DefaultColorMusic && (o2.colorHex = this.rules.DefaultColorMusic, a2.colorHex = this.rules.DefaultColorMusic), this.lines.push(o2), this.lines.push(a2);
          }
        }
        e2.GraphicalContinuousDynamicExpression = c;
      }, 1083: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.AlignmentManager = void 0;
        const s = i2(2400), n = i2(9409);
        e2.AlignmentManager = class {
          constructor(t3) {
            this.parentStaffline = t3, this.rules = this.parentStaffline.ParentMusicSystem.rules;
          }
          alignDynamicExpressions() {
            var _a, _b;
            const t3 = [];
            let e3 = new Array();
            for (let i3 = 0; i3 < this.parentStaffline.AbstractExpressions.length - 1; i3++) {
              const s2 = this.parentStaffline.AbstractExpressions[i3], n2 = this.parentStaffline.AbstractExpressions[i3 + 1], r = (_a = s2 == null ? void 0 : s2.SourceExpression) == null ? void 0 : _a.Placement, o = (_b = n2 == null ? void 0 : n2.SourceExpression) == null ? void 0 : _b.Placement;
              if (r === o) {
                const i4 = this.getDistance(s2.PositionAndShape, n2.PositionAndShape);
                Math.abs(i4.x) < this.rules.DynamicExpressionMaxDistance ? (-1 === e3.indexOf(s2) && e3.push(s2), e3.push(n2)) : (t3.push(e3), e3 = new Array());
              }
            }
            t3.push(e3);
            for (const e4 of t3) if (e4.length > 0) {
              const t4 = e4.map((t5) => t5.PositionAndShape.Center.y), i3 = Math.max(...t4);
              for (let n2 = 0; n2 < e4.length; n2++) {
                const r = e4[n2], o = t4[n2] - i3;
                if (r instanceof s.VexFlowContinuousDynamicExpression ? (r.shiftYPosition(-o), r.calcPsi()) : (r.PositionAndShape.RelativePosition.y -= 0.8 * o, r.PositionAndShape.calculateBoundingBox()), r.squeeze) {
                  const t5 = n2 < e4.length - 1 ? e4[n2 + 1] : void 0, i4 = n2 > 0 ? e4[n2 - 1] : void 0;
                  if (t5) {
                    const e5 = this.getOverlap(r.PositionAndShape, t5.PositionAndShape);
                    r.squeeze(-(e5.x + this.rules.DynamicExpressionSpacer));
                  }
                  if (i4) {
                    const t6 = this.getOverlap(i4.PositionAndShape, r.PositionAndShape);
                    r.squeeze(t6.x + this.rules.DynamicExpressionSpacer);
                  }
                }
              }
            }
          }
          getDistance(t3, e3) {
            const i3 = t3.RelativePosition.x + t3.BorderMarginRight, s2 = e3.RelativePosition.x + e3.BorderMarginLeft, r = t3.RelativePosition.y + t3.BorderMarginBottom, o = e3.RelativePosition.y + e3.BorderMarginTop;
            return new n.PointF2D(s2 - i3, o - r);
          }
          getOverlap(t3, e3) {
            return new n.PointF2D(t3.RelativePosition.x + t3.BorderMarginRight - (e3.RelativePosition.x + e3.BorderMarginLeft), t3.RelativePosition.y + t3.BorderMarginBottom - (e3.RelativePosition.y + e3.BorderMarginTop));
          }
        };
      }, 1110: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.DynamicsContainer = void 0;
        const s = i2(5875), n = i2(9767);
        e2.DynamicsContainer = class {
          constructor(t3, e3) {
            t3 instanceof s.ContinuousDynamicExpression ? this.continuousDynamicExpression = t3 : t3 instanceof n.InstantaneousDynamicExpression && (this.instantaneousDynamicExpression = t3), this.staffNumber = e3;
          }
          parMultiExpression() {
            return this.continuousDynamicExpression ? this.continuousDynamicExpression.StartMultiExpression : this.instantaneousDynamicExpression ? this.instantaneousDynamicExpression.ParentMultiExpression : void 0;
          }
          CompareTo(t3) {
            return this.parMultiExpression().AbsoluteTimestamp.CompareTo(t3.parMultiExpression().AbsoluteTimestamp);
          }
        };
      }, 1112: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.UnknownExpression = void 0;
        const s = i2(6362), n = i2(7533);
        class r extends s.AbstractExpression {
          constructor(t3, e3, i3, s2) {
            super(e3), this.label = t3, this.staffNumber = s2, void 0 === i3 && (i3 = n.TextAlignmentEnum.LeftBottom), this.textAlignment = i3;
          }
          get Label() {
            return this.label;
          }
          get Placement() {
            return this.placement;
          }
          set Placement(t3) {
            this.placement = t3;
          }
          get StaffNumber() {
            return this.staffNumber;
          }
          set StaffNumber(t3) {
            this.staffNumber = t3;
          }
          get TextAlignment() {
            return this.textAlignment;
          }
        }
        e2.UnknownExpression = r;
      }, 1121: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(9024), e2), n(i2(474), e2);
      }, 1216: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowGlissando = void 0;
        const s = i2(98);
        class n extends s.GraphicalGlissando {
        }
        e2.VexFlowGlissando = n;
      }, 1272: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.InstrumentReader = void 0;
        const n = i2(469), r = i2(2369), o = i2(164), a = i2(4543), l = i2(9288), h = i2(2561), c = i2(2148), u = i2(7307), d = i2(164), f = i2(9288), m = i2(4543), p = s(i2(3065)), g = i2(164), b = i2(9536), S = i2(5984), y = i2(3186), E = i2(1336), x = i2(5282), v = i2(6954);
        e2.InstrumentReader = class {
          constructor(t3, e3, i3, s2) {
            this.voiceGeneratorsDict = {}, this.staffMainVoiceGeneratorDict = {}, this.divisions = 0, this.currentClefNumber = 1, this.currentXmlMeasureIndex = 0, this.activeKeyHasBeenInitialized = false, this.abstractInstructions = [], this.repetitionInstructionReader = e3, this.xmlMeasureList = i3, this.musicSheet = s2.GetMusicSheet, this.instrument = s2, this.activeClefs = new Array(s2.Staves.length), this.activeClefsHaveBeenInitialized = new Array(s2.Staves.length);
            for (let t4 = 0; t4 < s2.Staves.length; t4++) this.activeClefsHaveBeenInitialized[t4] = false;
            this.createExpressionGenerators(s2.Staves.length), this.slurReader = new y.SlurReader(this.musicSheet), this.pluginManager = t3;
          }
          get ActiveKey() {
            return this.activeKey;
          }
          get MaxTieNoteFraction() {
            return this.maxTieNoteFraction;
          }
          get ActiveRhythm() {
            return this.activeRhythm;
          }
          set ActiveRhythm(t3) {
            this.activeRhythm = t3;
          }
          readNextXmlMeasure(t3, e3, i3) {
            var _a, _b, _c, _d;
            if (this.currentXmlMeasureIndex >= this.xmlMeasureList.length) return false;
            this.currentMeasure = t3, this.followingMultirestMeasures = Math.max(this.followingMultirestMeasures - 1, 0), this.inSourceMeasureInstrumentIndex = this.musicSheet.getGlobalStaffIndexOfFirstStaff(this.instrument), this.repetitionInstructionReader && this.repetitionInstructionReader.prepareReadingMeasure(t3, this.currentXmlMeasureIndex);
            let s2 = new h.Fraction(0, 1), n2 = new h.Fraction(0, 1), r2 = false;
            this.maxTieNoteFraction = new h.Fraction(0, 1);
            let o2 = false;
            try {
              const a2 = this.xmlMeasureList[this.currentXmlMeasureIndex], l2 = a2.elements();
              let d2;
              t3.Rules.UseXMLMeasureNumbers && !Number.isInteger(t3.MeasureNumberXML) && (d2 = parseInt((_a = a2.attribute("number")) == null ? void 0 : _a.value, 10), Number.isInteger(d2) && (t3.MeasureNumberXML = d2));
              const f2 = a2.attribute("osmdWidthFactor");
              if (f2) {
                const e4 = Number.parseFloat(f2.value);
                "number" != typeof e4 || isNaN(e4) ? p.default.info(`xml parse: osmdWidthFactor invalid for measure ${d2}`) : t3.WidthFactor = e4;
              }
              let m2;
              for (let a3 = 0; a3 < l2.length; a3++) {
                const d3 = l2[a3];
                if (a3 > 0 && (m2 = l2[a3 - 1]), "print" === d3.name) {
                  const e4 = d3.attribute("new-system");
                  "yes" === (e4 == null ? void 0 : e4.value) && (t3.printNewSystemXml = true);
                  const i4 = d3.attribute("new-page");
                  "yes" === (i4 == null ? void 0 : i4.value) && (t3.printNewPageXml = true);
                } else if ("attributes" === d3.name) {
                  const e4 = d3.element("divisions");
                  if (e4 && (this.divisions = parseInt(e4.value, 10), isNaN(this.divisions))) {
                    const t4 = c.ITextTranslation.translateText("ReaderErrorMessages/DivisionError", "Invalid divisions value at Instrument: ");
                    if (p.default.debug("InstrumentReader.readNextXmlMeasure", t4), this.divisions = this.readDivisionsFromNotes(), !(this.divisions > 0)) throw r2 = true, new u.MusicSheetReadingException(t4 + this.instrument.Name);
                    this.musicSheet.SheetErrors.push(t4 + this.instrument.Name);
                  }
                  if (!d3.element("divisions") && 0 === this.divisions && 0 === this.currentXmlMeasureIndex) {
                    const t4 = c.ITextTranslation.translateText("ReaderErrorMessages/DivisionError", "Invalid divisions value at Instrument: ");
                    if (this.divisions = this.readDivisionsFromNotes(), !(this.divisions > 0)) throw r2 = true, new u.MusicSheetReadingException(t4 + this.instrument.Name);
                    this.musicSheet.SheetErrors.push(t4 + this.instrument.Name);
                  }
                  this.addAbstractInstruction(d3, i3, m2, s2.clone()), s2.Equals(new h.Fraction(0, 1)) && this.isAttributesNodeAtBeginOfMeasure(this.xmlMeasureList[this.currentXmlMeasureIndex], d3) && this.saveAbstractInstructionList(this.instrument.Staves.length, true), this.isAttributesNodeAtEndOfMeasure(this.xmlMeasureList[this.currentXmlMeasureIndex], d3, s2) && this.saveClefInstructionAtEndOfMeasure();
                  const n3 = d3.elements("staff-details");
                  for (const t4 of n3) {
                    const e5 = t4.element("staff-lines");
                    if (e5) {
                      let i4 = 1;
                      const s3 = t4.attribute("number");
                      s3 && (i4 = parseInt(s3.value, 10)), this.instrument.Staves[i4 - 1].StafflineCount = parseInt(e5.value, 10);
                    }
                  }
                  const o3 = d3.element("measure-style");
                  if (o3) {
                    const e5 = o3.element("multiple-rest");
                    if (e5) {
                      const i4 = e5.value;
                      let s3 = 0;
                      try {
                        s3 = Number.parseInt(i4, 10), void 0 !== t3.multipleRestMeasures && s3 !== t3.multipleRestMeasures ? t3.multipleRestMeasures = 0 : (t3.multipleRestMeasures = s3, this.currentMultirestStartMeasure = t3, this.followingMultirestMeasures = s3 + 1);
                      } catch (t4) {
                        console.log("multirest parse error: " + t4);
                      }
                    }
                  }
                } else if ("note" === d3.name) {
                  let t4 = true;
                  "no" === ((_b = d3.attribute("print-object")) == null ? void 0 : _b.value) && (t4 = false);
                  const r3 = this.getNoteStaff(d3);
                  this.currentStaff = this.instrument.Staves[r3 - 1];
                  const a4 = void 0 !== d3.element("chord");
                  if (d3.element("voice")) {
                    const t5 = parseInt(d3.element("voice").value, 10);
                    this.currentVoiceGenerator = this.getOrCreateVoiceGenerator(t5, r3 - 1);
                  } else a4 && this.currentVoiceGenerator || (this.currentVoiceGenerator = this.getOrCreateVoiceGenerator(1, r3 - 1));
                  let l3, u2 = 0, f3 = new h.Fraction(0, 1), m3 = 2;
                  const g2 = void 0 !== d3.element("rest");
                  if (d3.element("duration")) {
                    if (u2 = parseInt(d3.element("duration").value, 10), isNaN(u2)) {
                      const t5 = c.ITextTranslation.translateText("ReaderErrorMessages/NoteDurationError", "Invalid Note Duration.");
                      this.musicSheet.SheetErrors.pushMeasureError(t5), p.default.debug("InstrumentReader.readNextXmlMeasure", t5);
                      continue;
                    }
                    if (f3 = new h.Fraction(u2, 4 * this.divisions), g2 && f3.RealValue > ((_c = this.ActiveRhythm) == null ? void 0 : _c.Rhythm.RealValue) && (f3 = this.ActiveRhythm.Rhythm.clone()), 0 === u2 ? f3 = this.getNoteDurationFromTypeNode(d3) : l3 = this.getNoteDurationFromTypeNode(d3), d3.element("time-modification")) {
                      f3 = this.getNoteDurationForTuplet(d3);
                      const t5 = d3.element("time-modification");
                      (t5 == null ? void 0 : t5.element("normal-notes")) && (m3 = parseInt(t5.element("normal-notes").value, 10));
                    }
                  }
                  const b2 = d3.combinedElement("notations"), S2 = void 0 !== d3.element("grace") || 0 === u2 || a4 && o2;
                  let y2 = false, E2 = false;
                  if (S2) {
                    const t5 = d3.element("grace");
                    t5 && t5.attributes() && t5.attribute("slash") && "yes" === t5.attribute("slash").value && (y2 = true), f3 = this.getNoteDurationFromTypeNode(d3), b2 && b2.element("slur") && (E2 = true);
                  }
                  const [x2, v2] = this.getCueNoteAndNoteTypeXml(d3), [_, M, w] = this.getStemDirectionAndColors(d3);
                  let P, T = false;
                  if (b2) {
                    const t5 = b2.element("ornaments");
                    t5 && (P = this.getTremoloInfo(t5), T = this.getVibratoStrokes(t5));
                  }
                  const L = a4 ? n2.clone() : s2.clone();
                  this.currentStaffEntry = this.currentMeasure.findOrCreateStaffEntry(L, this.inSourceMeasureInstrumentIndex + r3 - 1, this.currentStaff).staffEntry, (!this.currentVoiceGenerator.hasVoiceEntry() || !a4 && !S2 && !o2 || S2 && !o2 || S2 && !a4 || !S2 && o2) && this.currentVoiceGenerator.createVoiceEntry(L, this.currentStaffEntry, !g2 && !S2, S2, y2, E2), S2 || a4 || (n2 = s2.clone(), s2.Add(f3)), a4 && void 0 !== this.currentStaffEntry && this.currentStaffEntry.ParentStaff !== this.currentStaff && (this.currentStaffEntry = this.currentVoiceGenerator.checkForStaffEntryLink(this.inSourceMeasureInstrumentIndex + r3 - 1, this.currentStaff, this.currentStaffEntry, this.currentMeasure));
                  const A = void 0 !== this.currentStaffEntry && void 0 !== this.currentStaffEntry.Timestamp && this.currentStaffEntry.Timestamp.Equals(new h.Fraction(0, 1)) && !this.currentStaffEntry.hasNotes();
                  this.saveAbstractInstructionList(this.instrument.Staves.length, A), this.activeRhythm;
                  const C = d3.elements("dot").length;
                  if (this.currentVoiceGenerator.read(d3, f3, l3, v2, m3, g2, this.currentStaffEntry, this.currentMeasure, e3, this.maxTieNoteFraction, a4, i3, t4, x2, S2, _, P, M, w, T, C), void 0 !== b2 && b2.element("dynamics")) {
                    const t5 = this.expressionReaders[this.readExpressionStaffNumber(d3) - 1];
                    t5 && (t5.readExpressionParameters(d3, this.instrument, this.divisions, s2, n2, this.currentMeasure.MeasureNumber, false), t5.read(d3, this.currentMeasure, n2));
                  }
                  o2 = S2;
                } else if ("forward" === d3.name) {
                  const t4 = parseInt(d3.element("duration").value, 10);
                  s2.Add(new h.Fraction(t4, 4 * this.divisions));
                } else if ("backup" === d3.name) {
                  const t4 = parseInt(d3.element("duration").value, 10);
                  s2.Sub(new h.Fraction(t4, 4 * this.divisions)), s2.IsNegative() && (s2 = new h.Fraction(0, 1)), n2.Sub(new h.Fraction(t4, 4 * this.divisions)), n2.IsNegative() && (n2 = new h.Fraction(0, 1));
                } else if ("direction" === d3.name) {
                  const t4 = d3.element("direction-type");
                  let e4 = Math.min(1, s2.RealValue);
                  void 0 !== this.activeRhythm && this.activeRhythm.Rhythm && (e4 /= this.activeRhythm.Rhythm.RealValue);
                  let i4 = false;
                  if (this.repetitionInstructionReader && (i4 = this.repetitionInstructionReader.handleRepetitionInstructionsFromWordsOrSymbols(t4, e4)), !i4) {
                    let e5 = this.expressionReaders[0];
                    const i5 = this.readExpressionStaffNumber(d3) - 1;
                    i5 < this.expressionReaders.length && (e5 = this.expressionReaders[i5]), e5 && (t4.element("octave-shift") && (e5.readExpressionParameters(d3, this.instrument, this.divisions, s2, n2, this.currentMeasure.MeasureNumber, true), e5.addOctaveShift(d3, this.currentMeasure, n2.clone())), t4.element("pedal") && (e5.readExpressionParameters(d3, this.instrument, this.divisions, s2, n2, this.currentMeasure.MeasureNumber, true), e5.addPedalMarking(d3, this.currentMeasure, s2.clone())), e5.readExpressionParameters(d3, this.instrument, this.divisions, s2, n2, this.currentMeasure.MeasureNumber, false), e5.read(d3, this.currentMeasure, s2, n2.clone()));
                  }
                } else if ("barline" === d3.name) {
                  this.repetitionInstructionReader && this.repetitionInstructionReader.handleLineRepetitionInstructions(d3) && (this.currentMeasure.HasEndLine = true);
                  const t4 = d3.attribute("location"), e4 = (t4 == null ? void 0 : t4.value) ?? "right";
                  if (a3 === l2.length - 1 || "right" === e4) {
                    const t5 = (_d = d3.element("bar-style")) == null ? void 0 : _d.value;
                    t5 && (this.currentMeasure.endingBarStyleXml = t5, this.currentMeasure.endingBarStyleEnum = v.SystemLinesEnumHelper.xmlBarlineStyleToSystemLinesEnum(t5));
                  }
                } else if ("sound" === d3.name) try {
                  if (d3.attribute("tempo")) {
                    const t4 = parseFloat(d3.attribute("tempo").value);
                    0 === this.currentXmlMeasureIndex && (this.musicSheet.DefaultStartTempoInBpm = t4, this.musicSheet.HasBPMInfo = true);
                  }
                } catch (t4) {
                  p.default.debug("InstrumentReader.readTempoInstruction", t4);
                }
                else if ("harmony" === d3.name) {
                  const t4 = this.getNoteStaff(d3);
                  this.currentStaff = this.instrument.Staves[t4 - 1];
                  const e4 = s2.clone();
                  this.currentStaffEntry = this.currentMeasure.findOrCreateStaffEntry(e4, this.inSourceMeasureInstrumentIndex + t4 - 1, this.currentStaff).staffEntry, this.currentStaffEntry.ChordContainers.push(b.ChordSymbolReader.readChordSymbol(d3, this.musicSheet, this.activeKey));
                }
              }
              for (const t4 in this.voiceGeneratorsDict) this.voiceGeneratorsDict.hasOwnProperty(t4) && this.voiceGeneratorsDict[t4].checkForOpenBeam();
              if (this.currentXmlMeasureIndex === this.xmlMeasureList.length - 1) {
                for (let t4 = 0; t4 < this.instrument.Staves.length; t4++) this.activeClefsHaveBeenInitialized[t4] || this.createDefaultClefInstruction(this.musicSheet.getGlobalStaffIndexOfFirstStaff(this.instrument) + t4);
                this.activeKeyHasBeenInitialized || this.createDefaultKeyInstruction();
                for (let t4 = 0; t4 < this.expressionReaders.length; t4++) {
                  const e4 = this.expressionReaders[t4];
                  e4 && e4.closeOpenExpressions(this.currentMeasure, s2);
                }
              }
              this.musicSheet.HasBPMInfo ? 0 === t3.TempoInBPM && this.previousMeasure && (this.currentMeasure.TempoInBPM = this.previousMeasure.TempoInBPM) : this.currentMeasure.TempoInBPM = 120;
            } catch (t4) {
              if (r2) throw new u.MusicSheetReadingException(t4.Message);
              const e4 = c.ITextTranslation.translateText("ReaderErrorMessages/MeasureError", "Error while reading Measure.");
              this.musicSheet.SheetErrors.pushMeasureError(e4), p.default.debug("InstrumentReader.readNextXmlMeasure", e4, t4);
            }
            return this.previousMeasure = this.currentMeasure, this.currentXmlMeasureIndex += 1, true;
          }
          getStemDirectionAndColors(t3) {
            let e3, i3 = E.StemDirectionType.Undefined;
            const s2 = t3.element("stem");
            if (s2) {
              i3 = this.getStemDirectionType(s2);
              const t4 = s2.attribute("color");
              t4 && (e3 = this.parseXmlColor(t4.value));
            }
            let n2 = this.getNoteHeadColorXml(t3);
            const r2 = this.getNoteColorXml(t3);
            return r2 && !n2 && (n2 = r2), r2 && !e3 && (e3 = r2), [i3, e3, n2];
          }
          parseXmlColor(t3) {
            if (t3) return 7 === t3.length ? t3 : 9 === t3.length ? "#" + t3.substr(3) : void 0;
          }
          doCalculationsAfterDurationHasBeenSet() {
            for (const t3 in this.voiceGeneratorsDict) this.voiceGeneratorsDict.hasOwnProperty(t3) && this.voiceGeneratorsDict[t3].checkOpenTies();
          }
          getOrCreateVoiceGenerator(t3, e3) {
            const i3 = this.instrument.Staves[e3];
            let s2 = this.voiceGeneratorsDict[t3];
            if (s2) -1 === i3.Voices.indexOf(s2.GetVoice) && i3.Voices.push(s2.GetVoice);
            else {
              const r2 = this.staffMainVoiceGeneratorDict[e3];
              r2 ? (s2 = new n.VoiceGenerator(this.pluginManager, i3, t3, this.slurReader, r2.GetVoice), i3.Voices.push(s2.GetVoice), this.voiceGeneratorsDict[t3] = s2) : (s2 = new n.VoiceGenerator(this.pluginManager, i3, t3, this.slurReader), i3.Voices.push(s2.GetVoice), this.voiceGeneratorsDict[t3] = s2, this.staffMainVoiceGeneratorDict[e3] = s2);
            }
            return s2;
          }
          createExpressionGenerators(t3) {
            this.expressionReaders = new Array(t3);
            for (let e3 = 0; e3 < t3; e3++) this.expressionReaders[e3] = new S.ExpressionReader(this.musicSheet, this.instrument, e3 + 1);
          }
          createDefaultClefInstruction(t3) {
            let e3;
            e3 = this.musicSheet.SourceMeasures.length > 0 ? this.musicSheet.SourceMeasures[0] : this.currentMeasure;
            const i3 = new o.ClefInstruction(d.ClefEnum.G, 0, 2);
            let s2;
            e3.FirstInstructionsStaffEntries[t3] ? (s2 = e3.FirstInstructionsStaffEntries[t3], s2.removeFirstInstructionOfTypeClefInstruction()) : (s2 = new r.SourceStaffEntry(void 0, void 0), e3.FirstInstructionsStaffEntries[t3] = s2), i3.Parent = s2, s2.Instructions.splice(0, 0, i3);
          }
          createDefaultKeyInstruction() {
            let t3;
            t3 = this.musicSheet.SourceMeasures.length > 0 ? this.musicSheet.SourceMeasures[0] : this.currentMeasure;
            const e3 = new a.KeyInstruction(void 0, 0, m.KeyEnum.major);
            for (let i3 = this.inSourceMeasureInstrumentIndex; i3 < this.inSourceMeasureInstrumentIndex + this.instrument.Staves.length; i3++) if (t3.FirstInstructionsStaffEntries[i3]) {
              const s2 = t3.FirstInstructionsStaffEntries[i3];
              e3.Parent = s2, s2.removeFirstInstructionOfTypeKeyInstruction(), s2.Instructions[0] instanceof o.ClefInstruction ? s2.Instructions.splice(1, 0, e3) : s2.Instructions.splice(0, 0, e3);
            } else {
              const s2 = new r.SourceStaffEntry(void 0, void 0);
              t3.FirstInstructionsStaffEntries[i3] = s2, e3.Parent = s2, s2.Instructions.push(e3);
            }
          }
          isAttributesNodeAtBeginOfMeasure(t3, e3) {
            const i3 = t3.elements(), s2 = i3.indexOf(e3);
            if (s2 > 0 && "backup" === i3[s2 - 1].name) return true;
            let n2 = -1;
            for (let t4 = 0; t4 < i3.length; t4++) if ("note" === i3[t4].name) {
              n2 = t4;
              break;
            }
            return s2 < n2 && n2 > 0 || n2 < 0;
          }
          isAttributesNodeAtEndOfMeasure(t3, e3, i3) {
            var _a;
            if (i3.Equals((_a = this.ActiveRhythm) == null ? void 0 : _a.Rhythm)) return true;
            const s2 = t3.elements().slice();
            let n2 = 0;
            for (let t4 = 0; t4 < s2.length; t4++) if (s2[t4] === e3) {
              n2 = t4;
              break;
            }
            let r2 = 0;
            for (let t4 = n2; t4 < s2.length; t4++) if ("note" === s2[t4].name) {
              r2 = t4;
              break;
            }
            return n2 > r2;
          }
          getNoteDurationFromTypeNode(t3) {
            const e3 = t3.element("type");
            if (e3) {
              const t4 = e3.value;
              return x.NoteTypeHandler.getNoteDurationFromType(t4);
            }
            return new h.Fraction(0, 4 * this.divisions);
          }
          addAbstractInstruction(t3, e3, i3, s2) {
            if (t3.element("divisions") && 1 === t3.elements().length) return;
            const n2 = t3.element("transpose");
            if (n2) {
              const t4 = n2.element("chromatic");
              t4 && (this.instrument.PlaybackTranspose = parseInt(t4.value, 10));
            }
            const r2 = t3.elements("clef");
            let u2;
            if (r2.length > 0) for (let t4 = 0, e4 = r2.length; t4 < e4; ++t4) {
              const e5 = r2[t4];
              let i4 = d.ClefEnum.G, n3 = 2, a2 = 1, l2 = 0;
              const h2 = e5.element("line");
              if (h2) try {
                n3 = parseInt(h2.value, 10);
              } catch (t5) {
                u2 = c.ITextTranslation.translateText("ReaderErrorMessages/ClefLineError", "Invalid clef line. Using default."), this.musicSheet.SheetErrors.pushMeasureError(u2), n3 = 2, p.default.debug("InstrumentReader.addAbstractInstruction", u2, t5);
              }
              const f2 = e5.element("sign");
              if (f2) try {
                i4 = d.ClefEnum[f2.value], o.ClefInstruction.isSupportedClef(i4) || (u2 = c.ITextTranslation.translateText("ReaderErrorMessages/ClefError", "Unsupported clef. Using default."), this.musicSheet.SheetErrors.pushMeasureError(u2), i4 = d.ClefEnum.G, n3 = 2), i4 === d.ClefEnum.TAB && (l2 = -1);
              } catch (t5) {
                u2 = c.ITextTranslation.translateText("ReaderErrorMessages/ClefError", "Invalid clef. Using default."), this.musicSheet.SheetErrors.pushMeasureError(u2), i4 = d.ClefEnum.G, n3 = 2, p.default.debug("InstrumentReader.addAbstractInstruction", u2, t5);
              }
              const m2 = e5.element("clef-octave-change");
              if (m2) try {
                l2 = parseInt(m2.value, 10);
              } catch (t5) {
                u2 = c.ITextTranslation.translateText("ReaderErrorMessages/ClefOctaveError", "Invalid clef octave. Using default."), this.musicSheet.SheetErrors.pushMeasureError(u2), l2 = 0;
              }
              if (e5.hasAttributes && e5.attribute("number")) try {
                a2 = parseInt(e5.attribute("number").value, 10), a2 > this.currentClefNumber && (a2 = this.currentClefNumber), this.currentClefNumber = a2 + 1;
              } catch (t5) {
                u2 = c.ITextTranslation.translateText("ReaderErrorMessages/ClefError", "Invalid clef. Using default."), this.musicSheet.SheetErrors.pushMeasureError(u2), a2 = 1, this.currentClefNumber = a2 + 1;
              }
              const g2 = new o.ClefInstruction(i4, l2, n3);
              this.abstractInstructions.push([a2, g2, s2]);
            }
            if (void 0 !== t3.element("key") && this.instrument.MidiInstrumentId !== g.MidiInstrument.Percussion) {
              let e4 = 0;
              const i4 = t3.element("key").element("fifths");
              if (i4) try {
                e4 = parseInt(i4.value, 10);
              } catch (t4) {
                u2 = c.ITextTranslation.translateText("ReaderErrorMessages/KeyError", "Invalid key. Set to default."), this.musicSheet.SheetErrors.pushMeasureError(u2), e4 = 0, p.default.debug("InstrumentReader.addAbstractInstruction", u2, t4);
              }
              let n3 = m.KeyEnum.none, r3 = t3.element("key");
              if (r3 && (r3 = r3.element("mode")), r3) try {
                n3 = m.KeyEnum[r3.value];
              } catch (t4) {
                u2 = c.ITextTranslation.translateText("ReaderErrorMessages/KeyError", "Invalid key/mode. Set to default."), this.musicSheet.SheetErrors.pushMeasureError(u2), n3 = m.KeyEnum.major, p.default.debug("InstrumentReader.addAbstractInstruction", u2, t4);
              }
              const o2 = new a.KeyInstruction(void 0, e4, n3);
              this.abstractInstructions.push([1, o2, s2]);
            }
            if (t3.element("time")) {
              const e4 = t3.element("time");
              let i4 = f.RhythmSymbolEnum.NONE, n3 = true;
              if (void 0 !== e4 && e4.hasAttributes) {
                const t4 = e4.attribute("symbol");
                t4 && ("common" === t4.value ? i4 = f.RhythmSymbolEnum.COMMON : "cut" === t4.value && (i4 = f.RhythmSymbolEnum.CUT));
                const s3 = e4.attribute("print-object");
                s3 && "no" === s3.value && (n3 = false);
              }
              let r3 = 0, o2 = 0;
              const a2 = e4 && void 0 !== e4.element("senza-misura"), d2 = t3.elements("time"), m2 = [], g2 = [];
              for (let t4 = 0, e5 = d2.length; t4 < e5; ++t4) {
                const e6 = d2[t4];
                m2.push.apply(m2, e6.elements("beats")), g2.push.apply(g2, e6.elements("beat-type"));
              }
              if (a2) this.abstractInstructions.push([1, new l.RhythmInstruction(new h.Fraction(4, 4, 0, false), f.RhythmSymbolEnum.NONE), s2]);
              else {
                try {
                  if (void 0 !== m2 && m2.length > 0 && void 0 !== g2 && m2.length === g2.length) {
                    const t4 = m2.length, e6 = new Array(t4);
                    let i5 = 0;
                    for (let s3 = 0; s3 < t4; s3++) {
                      const t5 = m2[s3].value;
                      let n4 = 0, r4 = 0;
                      if (-1 !== t5.indexOf("+")) {
                        const e7 = t5.split("+");
                        for (let t6 = 0, i6 = e7.length; t6 < i6; ++t6) n4 += parseInt(e7[t6], 10);
                      } else n4 = parseInt(t5, 10);
                      r4 = parseInt(g2[s3].value, 10), i5 = Math.max(i5, r4), e6[s3] = new h.Fraction(n4, r4, 0, false);
                    }
                    for (let s3 = 0; s3 < t4; s3++) e6[s3].Denominator === i5 ? r3 += e6[s3].Numerator : r3 += i5 / e6[s3].Denominator * e6[s3].Numerator;
                    o2 = i5;
                  } else r3 = parseInt(t3.element("time").element("beats").value, 10), o2 = parseInt(t3.element("time").element("beat-type").value, 10);
                } catch (t4) {
                  u2 = c.ITextTranslation.translateText("ReaderErrorMessages/RhythmError", "Invalid rhythm. Set to default."), this.musicSheet.SheetErrors.pushMeasureError(u2), r3 = 4, o2 = 4, p.default.debug("InstrumentReader.addAbstractInstruction", u2, t4);
                }
                const e5 = new l.RhythmInstruction(new h.Fraction(r3, o2, 0, false), i4);
                e5.PrintObject = n3, this.abstractInstructions.push([1, e5, s2]);
              }
            }
          }
          saveAbstractInstructionList(t3, e3) {
            for (let i3 = this.abstractInstructions.length - 1; i3 >= 0; i3--) {
              const s2 = this.abstractInstructions[i3], n2 = s2[0], h2 = s2[1], c2 = s2[2];
              if (h2 instanceof o.ClefInstruction) {
                const t4 = h2;
                if (0 === this.currentXmlMeasureIndex || n2 <= this.activeClefs.length && t4 !== this.activeClefs[n2 - 1]) if (e3 || void 0 === this.currentStaffEntry || this.currentStaffEntry.hasNotes() || n2 - 1 !== this.instrument.Staves.indexOf(this.currentStaffEntry.ParentStaff)) if (e3) {
                  if (0 !== c2.RealValue) continue;
                  let e4;
                  if (this.currentMeasure) {
                    const s3 = t4, a2 = this.inSourceMeasureInstrumentIndex + n2 - 1, l2 = this.currentMeasure.FirstInstructionsStaffEntries[a2];
                    if (0 === this.currentXmlMeasureIndex) if (l2) if (void 0 === this.currentMeasure.FirstInstructionsStaffEntries[a2] || l2.Instructions[0] instanceof o.ClefInstruction) {
                      const t5 = new r.SourceStaffEntry(void 0, void 0);
                      this.currentMeasure.LastInstructionsStaffEntries[a2] = t5, s3.Parent = t5, t5.Instructions.push(s3);
                    } else e4 = l2, s3.Parent = e4, e4.removeFirstInstructionOfTypeClefInstruction(), e4.Instructions.splice(0, 0, s3), this.activeClefsHaveBeenInitialized[n2 - 1] = true;
                    else e4 = new r.SourceStaffEntry(void 0, void 0), this.currentMeasure.FirstInstructionsStaffEntries[a2] = e4, s3.Parent = e4, e4.Instructions.push(s3), this.activeClefsHaveBeenInitialized[n2 - 1] = true;
                    else if (this.activeClefsHaveBeenInitialized[n2 - 1]) {
                      let t5 = this.previousMeasure;
                      this.followingMultirestMeasures > 0 && this.currentMeasure.Rules.RenderMultipleRestMeasures && (t5 = this.currentMultirestStartMeasure);
                      const e5 = new r.SourceStaffEntry(void 0, void 0);
                      t5.LastInstructionsStaffEntries[a2] = e5, s3.Parent = e5, e5.Instructions.push(s3);
                    } else {
                      const t5 = this.musicSheet.SourceMeasures[0];
                      t5.FirstInstructionsStaffEntries[a2] ? (e4 = t5.FirstInstructionsStaffEntries[a2], e4.removeFirstInstructionOfTypeClefInstruction()) : e4 = new r.SourceStaffEntry(void 0, void 0), s3.Parent = e4, e4.Instructions.splice(0, 0, s3), this.activeClefsHaveBeenInitialized[n2 - 1] = true;
                    }
                    this.activeClefs[n2 - 1] = t4, this.abstractInstructions.splice(i3, 1);
                  }
                } else {
                  let e4;
                  const s3 = this.activeRhythm.Rhythm;
                  s3.RealValue > 0 && c2.RealValue / s3.RealValue > 0.9 && s3.RealValue !== c2.RealValue && (this.currentMeasure.LastInstructionsStaffEntries[n2 - 1] || (this.currentMeasure.LastInstructionsStaffEntries[n2 - 1] = new r.SourceStaffEntry(void 0, this.instrument.Staves[n2 - 1])), e4 = this.currentMeasure.LastInstructionsStaffEntries[n2 - 1]), e4 && (t4.Parent = e4, e4.Instructions.push(t4), this.activeClefs[n2 - 1] = t4, this.abstractInstructions.splice(i3, 1));
                }
                else {
                  const e4 = t4, s3 = this.currentStaffEntry;
                  if (c2 && Math.abs(c2.RealValue - s3.Timestamp.RealValue) > 0.01) continue;
                  e4.Parent = s3, s3.removeFirstInstructionOfTypeClefInstruction(), s3.Instructions.push(e4), this.activeClefs[n2 - 1] = t4, this.abstractInstructions.splice(i3, 1);
                }
                else n2 <= this.activeClefs.length && t4 === this.activeClefs[n2 - 1] && this.abstractInstructions.splice(i3, 1);
              }
              if (h2 instanceof a.KeyInstruction) {
                const e4 = h2;
                if (this.activeKey && this.activeKey.Key === e4.Key) this.abstractInstructions.splice(i3, 1);
                else {
                  let s3;
                  if (this.activeKey = e4, this.abstractInstructions.splice(i3, 1), this.activeKeyHasBeenInitialized ? s3 = this.currentMeasure : (this.activeKeyHasBeenInitialized = true, s3 = this.currentXmlMeasureIndex > 0 ? this.musicSheet.SourceMeasures[0] : this.currentMeasure), s3) for (let i4 = this.inSourceMeasureInstrumentIndex; i4 < this.inSourceMeasureInstrumentIndex + t3; i4++) {
                    const t4 = e4;
                    if (s3.FirstInstructionsStaffEntries[i4]) {
                      const e5 = s3.FirstInstructionsStaffEntries[i4];
                      t4.Parent = e5, e5.removeFirstInstructionOfTypeKeyInstruction(), 0 === e5.Instructions.length ? e5.Instructions.push(t4) : e5.Instructions[0] instanceof o.ClefInstruction ? e5.Instructions.splice(1, 0, t4) : e5.Instructions.splice(0, 0, t4);
                    } else {
                      const e5 = new r.SourceStaffEntry(void 0, void 0);
                      s3.FirstInstructionsStaffEntries[i4] = e5, t4.Parent = e5, e5.Instructions.push(t4);
                    }
                  }
                }
              }
              if (h2 instanceof l.RhythmInstruction) {
                const e4 = h2;
                if (this.activeRhythm && this.activeRhythm === e4) this.abstractInstructions.splice(i3, 1);
                else if (this.activeRhythm = e4, this.abstractInstructions.splice(i3, 1), this.currentMeasure) for (let i4 = this.inSourceMeasureInstrumentIndex; i4 < this.inSourceMeasureInstrumentIndex + t3; i4++) {
                  const t4 = e4;
                  let s3;
                  this.currentMeasure.FirstInstructionsStaffEntries[i4] ? (s3 = this.currentMeasure.FirstInstructionsStaffEntries[i4], s3.removeFirstInstructionOfTypeRhythmInstruction()) : (s3 = new r.SourceStaffEntry(void 0, void 0), this.currentMeasure.FirstInstructionsStaffEntries[i4] = s3), t4.Parent = s3, s3.Instructions.push(t4);
                }
              }
            }
          }
          saveClefInstructionAtEndOfMeasure() {
            for (let t3 = this.abstractInstructions.length - 1; t3 >= 0; t3--) {
              const e3 = this.abstractInstructions[t3][0], i3 = this.abstractInstructions[t3][1];
              if (i3 instanceof o.ClefInstruction) {
                const s2 = i3;
                if (!this.activeClefs[e3 - 1] || s2.ClefType !== this.activeClefs[e3 - 1].ClefType || s2.ClefType === this.activeClefs[e3 - 1].ClefType && s2.Line !== this.activeClefs[e3 - 1].Line) {
                  const i4 = new r.SourceStaffEntry(void 0, void 0);
                  this.currentMeasure.LastInstructionsStaffEntries[this.inSourceMeasureInstrumentIndex + e3 - 1] = i4;
                  const n2 = s2;
                  n2.Parent = i4, i4.Instructions.push(n2), this.activeClefs[e3 - 1] = s2, this.abstractInstructions.splice(t3, 1);
                }
              }
            }
          }
          getNoteDurationForTuplet(t3) {
            const e3 = t3.element("duration"), i3 = Number.parseInt(e3.value, 10);
            return new h.Fraction(i3, 4 * this.divisions);
          }
          readExpressionStaffNumber(t3) {
            let e3 = 1;
            if (t3.element("staff")) {
              const i3 = t3.element("staff");
              if (i3) try {
                e3 = parseInt(i3.value, 10);
              } catch (t4) {
                const i4 = c.ITextTranslation.translateText("ReaderErrorMessages/ExpressionStaffError", "Invalid Expression staff number. Set to default.");
                this.musicSheet.SheetErrors.pushMeasureError(i4), e3 = 1, p.default.debug("InstrumentReader.readExpressionStaffNumber", i4, t4);
              }
            }
            return e3;
          }
          readDivisionsFromNotes() {
            let t3 = 0, e3 = this.currentXmlMeasureIndex, i3 = false;
            for (; !i3; ) {
              const s2 = this.xmlMeasureList[e3].elements();
              for (let e4 = 0, n2 = s2.length; e4 < n2; ++e4) {
                const n3 = s2[e4];
                if ("note" === n3.name && !n3.element("time-modification")) {
                  const e5 = n3.element("duration"), i4 = n3.element("type");
                  if (void 0 !== e5 && i4) {
                    const s3 = i4.value;
                    let n4 = 0;
                    try {
                      n4 = parseInt(e5.value, 10);
                    } catch (t4) {
                      p.default.debug("InstrumentReader.readDivisionsFromNotes", t4);
                      continue;
                    }
                    switch (s3) {
                      case "1024th":
                        t3 = n4 / 4 * 1024;
                        break;
                      case "512th":
                        t3 = n4 / 4 * 512;
                        break;
                      case "256th":
                        t3 = n4 / 4 * 256;
                        break;
                      case "128th":
                        t3 = n4 / 4 * 128;
                        break;
                      case "64th":
                        t3 = n4 / 4 * 64;
                        break;
                      case "32nd":
                        t3 = n4 / 4 * 32;
                        break;
                      case "16th":
                        t3 = n4 / 4 * 16;
                        break;
                      case "eighth":
                        t3 = n4 / 4 * 8;
                        break;
                      case "quarter":
                        t3 = n4 / 4 * 4;
                        break;
                      case "half":
                        t3 = n4 / 4 * 2;
                        break;
                      case "whole":
                        t3 = n4 / 4;
                        break;
                      case "breve":
                        t3 = n4 / 4 / 2;
                        break;
                      case "long":
                        t3 = n4 / 4 / 4;
                        break;
                      case "maxima":
                        t3 = n4 / 4 / 8;
                    }
                  }
                }
                if (t3 > 0) {
                  i3 = true;
                  break;
                }
              }
              if (0 === t3 && (e3++, e3 === this.xmlMeasureList.length)) {
                const t4 = c.ITextTranslation.translateText("ReaderErrorMEssages/DivisionsError", "Invalid divisions value at Instrument: ");
                throw new u.MusicSheetReadingException(t4 + this.instrument.Name);
              }
            }
            return t3;
          }
          getCueNoteAndNoteTypeXml(t3) {
            let e3 = false;
            t3.element("cue") && (e3 = true);
            const i3 = t3.element("type");
            let s2 = x.NoteType.UNDEFINED;
            if (i3) {
              const t4 = i3.attribute("size");
              "cue" === (t4 == null ? void 0 : t4.value) && (e3 = true), s2 = x.NoteTypeHandler.StringToNoteType(i3.value);
            }
            return [e3, s2];
          }
          getStemDirectionType(t3) {
            switch (t3.value) {
              case "down":
                return E.StemDirectionType.Down;
              case "up":
                return E.StemDirectionType.Up;
              case "double":
                return E.StemDirectionType.Double;
              case "none":
                return E.StemDirectionType.None;
              default:
                return E.StemDirectionType.Undefined;
            }
          }
          getNoteHeadColorXml(t3) {
            const e3 = t3.element("notehead");
            if (e3) {
              const t4 = e3.attribute("color");
              if (t4) return this.parseXmlColor(t4.value);
            }
            return null;
          }
          getNoteColorXml(t3) {
            const e3 = t3.attribute("color");
            return e3 ? this.parseXmlColor(e3.value) : null;
          }
          getTremoloInfo(t3) {
            let e3, i3;
            const s2 = t3.element("tremolo");
            if (s2) {
              const t4 = s2.attribute("type");
              if (t4) {
                if ("single" === t4.value) {
                  const t5 = parseInt(s2.value, 10);
                  t5 > 0 && (e3 = t5);
                } else e3 = 0;
                "unmeasured" === t4.value && (i3 = true);
              }
            }
            return { tremoloStrokes: e3, tremoloUnmeasured: i3 };
          }
          getVibratoStrokes(t3) {
            const e3 = t3.element("wavy-line");
            if (void 0 !== e3) {
              const t4 = e3.attribute("type");
              if (t4 && "start" === t4.value) return true;
            }
            return false;
          }
          getNoteStaff(t3) {
            let e3 = 1;
            return this.instrument.Staves.length > 1 && t3.element("staff") && (e3 = parseInt(t3.element("staff").value, 10), isNaN(e3) && (p.default.debug("InstrumentReader.readNextXmlMeasure.get staff number"), e3 = 1)), e3;
          }
        };
      }, 1325: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MappingSourceMusicPart = void 0, e2.MappingSourceMusicPart = class {
          constructor(t3, e3, i2, s = -1, n = false) {
            this.repetitionRun = -1, this.sourceMusicPart = t3, this.parentPartListEntry = i2, this.startTimestamp = e3.clone(), this.repetitionRun = s, this.parentRepetition = i2, this.isEnding = n;
          }
          get IsRepetition() {
            return void 0 !== this.parentRepetition;
          }
          get IsEnding() {
            return this.isEnding;
          }
          get IsLastRepetitionRun() {
            return this.IsRepetition && this.repetitionRun + 1 === this.parentRepetition.UserNumberOfRepetitions;
          }
          get RepetitionRun() {
            return this.repetitionRun;
          }
          get ParentPartListEntry() {
            return this.parentPartListEntry;
          }
          get SourceMusicPart() {
            return this.sourceMusicPart;
          }
          get StartTimestamp() {
            return this.startTimestamp;
          }
          CompareTo(t3) {
            return t3 ? this.startTimestamp.CompareTo(t3.startTimestamp) : 1;
          }
        };
      }, 1327: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SkyBottomLineBatchCalculator = void 0;
        const n = i2(5955), r = i2(735), o = i2(3508), a = s(i2(3065)), l = i2(813);
        e2.SkyBottomLineBatchCalculator = class {
          constructor(t3, e3) {
            const i3 = /* @__PURE__ */ new Map();
            for (const e4 of t3) {
              const t4 = e4.ParentMusicSystem.rules;
              (() => {
                if (i3.has(t4)) return i3.get(t4);
                {
                  const e5 = [];
                  return i3.set(t4, e5), e5;
                }
              })().push({ skyBottomLineCalculator: e4.SkyBottomLineCalculator, measures: e4.Measures });
            }
            this.batches = /* @__PURE__ */ new Map();
            for (const [t4, s2] of i3.entries()) {
              const i4 = l.CollectionUtil.flat(s2.map((t5) => t5.measures)), h = (() => {
                if (e3 === n.SkyBottomLineBatchCalculatorBackendType.Plain) return new r.PlainSkyBottomLineBatchCalculatorBackend(t4, i4).initialize();
                try {
                  return new o.WebGLSkyBottomLineBatchCalculatorBackend(t4, i4).initialize();
                } catch {
                  return a.default.info("Couldn't create WebGLBackend for Skyline. Using fallback."), new r.PlainSkyBottomLineBatchCalculatorBackend(t4, i4).initialize();
                }
              })();
              h.initialize(), this.batches.set(t4, { backend: h, entries: s2 });
            }
          }
          calculateLines() {
            for (const [, { backend: t3, entries: e3 }] of this.batches) {
              const i3 = t3.calculateLines();
              let s2 = 0;
              for (const { skyBottomLineCalculator: t4, measures: n2 } of e3) {
                const e4 = s2 + n2.length;
                t4.updateLines(i3.slice(s2, e4)), s2 = e4;
              }
            }
          }
        };
      }, 1336: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.StemDirectionType = e2.ArticulationEnum = e2.VoiceEntry = void 0;
        const s = i2(2561), n = i2(1850), r = i2(8233), o = i2(8215), a = i2(8233), l = i2(3263);
        class h {
          constructor(t3, e3, i3, s2 = false, n2 = false, r2 = false) {
            if (this.notes = [], this.articulations = [], this.technicalInstructions = [], this.lyricsEntries = new l.Dictionary(), this.wantedStemDirection = u.Undefined, this.stemDirectionXml = u.Undefined, this.stemDirection = u.Undefined, this.timestamp = t3, this.parentVoice = e3, this.parentSourceStaffEntry = i3, this.isGrace = s2, this.graceAfterMainNote = false, this.graceNoteSlash = n2, this.graceSlur = r2, void 0 !== i3) {
              const t4 = i3.VoiceEntries;
              -1 === t4.indexOf(this) && t4.push(this);
            }
          }
          get ParentSourceStaffEntry() {
            return this.parentSourceStaffEntry;
          }
          get ParentVoice() {
            return this.parentVoice;
          }
          get Timestamp() {
            return this.timestamp;
          }
          set Timestamp(t3) {
            this.timestamp = t3;
          }
          get Notes() {
            return this.notes;
          }
          get IsGrace() {
            return this.isGrace;
          }
          set IsGrace(t3) {
            this.isGrace = t3;
          }
          get GraceAfterMainNote() {
            return this.graceAfterMainNote;
          }
          set GraceAfterMainNote(t3) {
            this.graceAfterMainNote = t3;
          }
          get GraceNoteSlash() {
            return this.graceNoteSlash;
          }
          set GraceNoteSlash(t3) {
            this.graceNoteSlash = t3;
          }
          get GraceSlur() {
            return this.graceSlur;
          }
          set GraceSlur(t3) {
            this.graceSlur = t3;
          }
          get Articulations() {
            return this.articulations;
          }
          set Articulations(t3) {
            this.articulations = t3;
          }
          get TechnicalInstructions() {
            return this.technicalInstructions;
          }
          get LyricsEntries() {
            return this.lyricsEntries;
          }
          get Arpeggio() {
            return this.arpeggio;
          }
          set Arpeggio(t3) {
            this.arpeggio = t3;
          }
          get OrnamentContainer() {
            return this.ornamentContainer;
          }
          set OrnamentContainer(t3) {
            this.ornamentContainer = t3;
          }
          set WantedStemDirection(t3) {
            this.wantedStemDirection = t3;
          }
          get WantedStemDirection() {
            return this.wantedStemDirection;
          }
          set StemDirectionXml(t3) {
            this.stemDirectionXml = t3;
          }
          get StemDirectionXml() {
            return this.stemDirectionXml;
          }
          set StemDirection(t3) {
            this.stemDirection = t3;
          }
          get StemDirection() {
            return this.stemDirection;
          }
          get StemColorXml() {
            return this.stemColorXml;
          }
          set StemColorXml(t3) {
            this.stemColorXml = t3;
          }
          get StemColor() {
            return this.stemColor;
          }
          set StemColor(t3) {
            this.stemColor = t3;
          }
          hasArticulation(t3) {
            for (const e3 of this.articulations) if (e3.Equals(t3)) return true;
            return false;
          }
          static isSupportedArticulation(t3) {
            switch (t3) {
              case c.accent:
              case c.strongaccent:
              case c.softaccent:
              case c.invertedstrongaccent:
              case c.staccato:
              case c.staccatissimo:
              case c.spiccato:
              case c.tenuto:
              case c.fermata:
              case c.invertedfermata:
              case c.breathmark:
              case c.caesura:
              case c.lefthandpizzicato:
              case c.naturalharmonic:
              case c.snappizzicato:
              case c.upbow:
              case c.downbow:
              case c.bend:
                return true;
              default:
                return false;
            }
          }
          hasTie() {
            for (let t3 = 0, e3 = this.Notes.length; t3 < e3; ++t3) if (this.Notes[t3].NoteTie) return true;
            return false;
          }
          hasSlur() {
            for (let t3 = 0, e3 = this.Notes.length; t3 < e3; ++t3) if (this.Notes[t3].NoteSlurs.length > 0) return true;
            return false;
          }
          isStaccato() {
            for (const t3 of this.Articulations) if (t3.articulationEnum === c.staccato) return true;
            return false;
          }
          isAccent() {
            for (const t3 of this.Articulations) if (t3.articulationEnum === c.accent || t3.articulationEnum === c.strongaccent) return true;
            return false;
          }
          getVerseNumberForLyricEntry(t3) {
            let e3 = "1";
            return this.lyricsEntries.forEach((i3, s2) => {
              t3 === s2 && (e3 = i3);
            }), e3;
          }
          createVoiceEntriesForOrnament(t3, e3) {
            t3 || (t3 = this);
            const i3 = [];
            if (!t3.ornamentContainer) return;
            const n2 = this.notes[0], r2 = n2.Length, l2 = t3.ParentVoice, h2 = t3.Timestamp;
            let c2 = s.Fraction.createFromFraction(h2);
            switch (t3.ornamentContainer.GetOrnament) {
              case o.OrnamentEnum.Trill: {
                const o2 = new s.Fraction(r2.Numerator, 8 * r2.Denominator), u2 = n2.Pitch.getTransposedPitch(1);
                let d = e3.getAlterationForPitch(u2);
                t3.OrnamentContainer.AccidentalAbove !== a.AccidentalEnum.NONE && (d = t3.ornamentContainer.AccidentalAbove);
                for (let t4 = 0; t4 < 8; t4++) c2 = s.Fraction.plus(h2, new s.Fraction(t4 * o2.Numerator, o2.Denominator)), t4 % 2 == 0 ? this.createBaseVoiceEntry(c2, o2, l2, n2, i3) : this.createAlteratedVoiceEntry(c2, o2, l2, n2.SourceMeasure, u2, d, i3);
                break;
              }
              case o.OrnamentEnum.Turn: {
                const t4 = new s.Fraction(r2.Numerator, 4 * r2.Denominator), o2 = n2.Pitch.getTransposedPitch(-1), a2 = e3.getAlterationForPitch(o2), h3 = n2.Pitch.getTransposedPitch(1), u2 = e3.getAlterationForPitch(h3);
                this.createAlteratedVoiceEntry(c2, t4, l2, n2.SourceMeasure, h3, u2, i3), c2.Add(t4), this.createBaseVoiceEntry(c2, t4, l2, n2, i3), c2.Add(t4), this.createAlteratedVoiceEntry(c2, t4, l2, n2.SourceMeasure, o2, a2, i3), c2.Add(t4), this.createBaseVoiceEntry(c2, t4, l2, n2, i3);
                break;
              }
              case o.OrnamentEnum.InvertedTurn: {
                const t4 = new s.Fraction(r2.Numerator, 4 * r2.Denominator), o2 = n2.Pitch.getTransposedPitch(-1), a2 = e3.getAlterationForPitch(o2), h3 = n2.Pitch.getTransposedPitch(1), u2 = e3.getAlterationForPitch(h3);
                this.createAlteratedVoiceEntry(c2, t4, l2, n2.SourceMeasure, o2, a2, i3), c2.Add(t4), this.createBaseVoiceEntry(c2, t4, l2, n2, i3), c2.Add(t4), this.createAlteratedVoiceEntry(c2, t4, l2, n2.SourceMeasure, h3, u2, i3), c2.Add(t4), this.createBaseVoiceEntry(c2, t4, l2, n2, i3);
                break;
              }
              case o.OrnamentEnum.DelayedTurn: {
                const t4 = new s.Fraction(r2.Numerator, 2 * r2.Denominator), o2 = n2.Pitch.getTransposedPitch(-1), a2 = e3.getAlterationForPitch(o2), u2 = n2.Pitch.getTransposedPitch(1), d = e3.getAlterationForPitch(u2);
                this.createBaseVoiceEntry(c2, t4, l2, n2, i3), c2 = s.Fraction.plus(h2, t4), t4.Denominator = 8 * r2.Denominator, this.createAlteratedVoiceEntry(c2, t4, l2, n2.SourceMeasure, u2, d, i3), c2.Add(t4), this.createBaseVoiceEntry(c2, t4, l2, n2, i3), c2.Add(t4), this.createAlteratedVoiceEntry(c2, t4, l2, n2.SourceMeasure, o2, a2, i3), c2.Add(t4), this.createBaseVoiceEntry(c2, t4, l2, n2, i3);
                break;
              }
              case o.OrnamentEnum.DelayedInvertedTurn: {
                const t4 = new s.Fraction(r2.Numerator, 2 * r2.Denominator), o2 = n2.Pitch.getTransposedPitch(-1), a2 = e3.getAlterationForPitch(o2), u2 = n2.Pitch.getTransposedPitch(1), d = e3.getAlterationForPitch(u2);
                this.createBaseVoiceEntry(c2, t4, l2, n2, i3), c2 = s.Fraction.plus(h2, t4), t4.Denominator = 8 * r2.Denominator, this.createAlteratedVoiceEntry(c2, t4, l2, n2.SourceMeasure, o2, a2, i3), c2.Add(t4), this.createBaseVoiceEntry(c2, t4, l2, n2, i3), c2.Add(t4), this.createAlteratedVoiceEntry(c2, t4, l2, n2.SourceMeasure, u2, d, i3), c2.Add(t4), this.createBaseVoiceEntry(c2, t4, l2, n2, i3);
                break;
              }
              case o.OrnamentEnum.Mordent: {
                const t4 = new s.Fraction(r2.Numerator, 4 * r2.Denominator), o2 = n2.Pitch.getTransposedPitch(1), a2 = e3.getAlterationForPitch(o2);
                this.createBaseVoiceEntry(c2, t4, l2, n2, i3), c2.Add(t4), this.createAlteratedVoiceEntry(c2, t4, l2, n2.SourceMeasure, o2, a2, i3), t4.Denominator = 2 * r2.Denominator, c2 = s.Fraction.plus(h2, t4), this.createBaseVoiceEntry(c2, t4, l2, n2, i3);
                break;
              }
              case o.OrnamentEnum.InvertedMordent: {
                const t4 = new s.Fraction(r2.Numerator, 4 * r2.Denominator), o2 = n2.Pitch.getTransposedPitch(-1), a2 = e3.getAlterationForPitch(o2);
                this.createBaseVoiceEntry(c2, t4, l2, n2, i3), c2.Add(t4), this.createAlteratedVoiceEntry(c2, t4, l2, n2.SourceMeasure, o2, a2, i3), t4.Denominator = 2 * r2.Denominator, c2 = s.Fraction.plus(h2, t4), this.createBaseVoiceEntry(c2, t4, l2, n2, i3);
                break;
              }
              default:
                throw new RangeError();
            }
            return i3;
          }
          createBaseVoiceEntry(t3, e3, i3, s2, o2) {
            const a2 = new h(t3, i3, s2.ParentStaffEntry), l2 = new r.Pitch(s2.Pitch.FundamentalNote, s2.Pitch.Octave, s2.Pitch.Accidental), c2 = new n.Note(a2, void 0, e3, l2, s2.SourceMeasure);
            a2.Notes.push(c2), o2.push(a2);
          }
          createAlteratedVoiceEntry(t3, e3, i3, s2, o2, a2, l2) {
            const c2 = new h(t3, i3, void 0), u2 = new r.Pitch(o2.FundamentalNote, o2.Octave, a2), d = new n.Note(c2, void 0, e3, u2, s2);
            c2.Notes.push(d), l2.push(c2);
          }
        }
        var c, u;
        e2.VoiceEntry = h, function(t3) {
          t3[t3.accent = 0] = "accent", t3[t3.strongaccent = 1] = "strongaccent", t3[t3.softaccent = 2] = "softaccent", t3[t3.marcatoup = 3] = "marcatoup", t3[t3.marcatodown = 4] = "marcatodown", t3[t3.invertedstrongaccent = 5] = "invertedstrongaccent", t3[t3.staccato = 6] = "staccato", t3[t3.staccatissimo = 7] = "staccatissimo", t3[t3.spiccato = 8] = "spiccato", t3[t3.tenuto = 9] = "tenuto", t3[t3.fermata = 10] = "fermata", t3[t3.invertedfermata = 11] = "invertedfermata", t3[t3.breathmark = 12] = "breathmark", t3[t3.caesura = 13] = "caesura", t3[t3.lefthandpizzicato = 14] = "lefthandpizzicato", t3[t3.naturalharmonic = 15] = "naturalharmonic", t3[t3.snappizzicato = 16] = "snappizzicato", t3[t3.upbow = 17] = "upbow", t3[t3.downbow = 18] = "downbow", t3[t3.scoop = 19] = "scoop", t3[t3.plop = 20] = "plop", t3[t3.doit = 21] = "doit", t3[t3.falloff = 22] = "falloff", t3[t3.stress = 23] = "stress", t3[t3.unstress = 24] = "unstress", t3[t3.detachedlegato = 25] = "detachedlegato", t3[t3.otherarticulation = 26] = "otherarticulation", t3[t3.bend = 27] = "bend";
        }(c || (e2.ArticulationEnum = c = {})), function(t3) {
          t3[t3.Undefined = -1] = "Undefined", t3[t3.Up = 0] = "Up", t3[t3.Down = 1] = "Down", t3[t3.None = 2] = "None", t3[t3.Double = 3] = "Double";
        }(u || (e2.StemDirectionType = u = {}));
      }, 1519: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalMarkedArea = void 0, e2.GraphicalMarkedArea = class {
          constructor(t3, e3 = void 0, i2 = void 0, s = void 0) {
            this.systemRectangle = t3, this.labelRectangle = e3, this.label = i2, this.settings = s;
          }
        };
      }, 1645: (t2, e2) => {
        "use strict";
        var i2, s;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.AlignmentType = e2.RepetitionInstructionEnum = e2.RepetitionInstruction = e2.RepetitionInstructionComparer = void 0, e2.RepetitionInstructionComparer = class {
          static Compare(t3, e3) {
            if (void 0 !== t3.parentRepetition && e3.parentRepetition) {
              if (t3.alignment === s.End && e3.alignment === s.End) {
                if (t3.parentRepetition.StartIndex < e3.parentRepetition.StartIndex) return 1;
                if (t3.parentRepetition.StartIndex > e3.parentRepetition.StartIndex) return -1;
              }
              if (t3.alignment === s.Begin && e3.alignment === s.Begin) {
                if (t3.parentRepetition.EndIndex < e3.parentRepetition.EndIndex) return 1;
                if (t3.parentRepetition.EndIndex > e3.parentRepetition.EndIndex) return -1;
              }
            }
            return 0;
          }
        }, e2.RepetitionInstruction = class {
          constructor(t3, e3, i3 = s.End, n = void 0, r = void 0) {
            this.endingIndices = void 0, this.measureIndex = t3, r && (this.endingIndices = r.slice()), this.type = e3, this.alignment = i3, this.parentRepetition = n;
          }
          CompareTo(t3) {
            const e3 = t3;
            if (this.measureIndex > e3.measureIndex) return 1;
            if (this.measureIndex < e3.measureIndex) return -1;
            if (this.alignment === s.Begin) {
              if (e3.alignment === s.End) return -1;
              switch (this.type) {
                case i2.Ending:
                  return 1;
                case i2.StartLine:
                  return e3.type === i2.Ending ? -1 : 1;
                case i2.Coda:
                case i2.Segno:
                  return e3.type === i2.Coda ? 1 : -1;
              }
            } else {
              if (e3.alignment === s.Begin) return 1;
              switch (this.type) {
                case i2.Ending:
                  return -1;
                case i2.Fine:
                case i2.ToCoda:
                  return e3.type === i2.Ending ? 1 : -1;
                case i2.ForwardJump:
                  switch (e3.type) {
                    case i2.Ending:
                    case i2.Fine:
                    case i2.ToCoda:
                      return 1;
                  }
                  return -1;
                case i2.DalSegnoAlFine:
                case i2.DaCapoAlFine:
                case i2.DalSegnoAlCoda:
                case i2.DaCapoAlCoda:
                case i2.DaCapo:
                case i2.DalSegno:
                case i2.BackJumpLine:
                  return 1;
              }
            }
            return 0;
          }
          equals(t3) {
            if (this.measureIndex !== t3.measureIndex || this.type !== t3.type || this.alignment !== t3.alignment) return false;
            if (this.endingIndices === t3.endingIndices) return true;
            if (!this.endingIndices || !t3.endingIndices || this.endingIndices.length !== t3.endingIndices.length) return false;
            for (let e3 = 0; e3 < this.endingIndices.length; e3++) if (this.endingIndices[e3] !== t3.endingIndices[e3]) return false;
            return true;
          }
        }, function(t3) {
          t3[t3.StartLine = 0] = "StartLine", t3[t3.ForwardJump = 1] = "ForwardJump", t3[t3.BackJumpLine = 2] = "BackJumpLine", t3[t3.Ending = 3] = "Ending", t3[t3.DaCapo = 4] = "DaCapo", t3[t3.DalSegno = 5] = "DalSegno", t3[t3.Fine = 6] = "Fine", t3[t3.ToCoda = 7] = "ToCoda", t3[t3.DalSegnoAlFine = 8] = "DalSegnoAlFine", t3[t3.DaCapoAlFine = 9] = "DaCapoAlFine", t3[t3.DalSegnoAlCoda = 10] = "DalSegnoAlCoda", t3[t3.DaCapoAlCoda = 11] = "DaCapoAlCoda", t3[t3.Coda = 12] = "Coda", t3[t3.Segno = 13] = "Segno", t3[t3.None = 14] = "None";
        }(i2 || (e2.RepetitionInstructionEnum = i2 = {})), function(t3) {
          t3[t3.Begin = 0] = "Begin", t3[t3.End = 1] = "End";
        }(s || (e2.AlignmentType = s = {}));
      }, 1710: (t2, e2, i2) => {
        t2.exports = function t3(e3, i3, s) {
          function n(o2, a) {
            if (!i3[o2]) {
              if (!e3[o2]) {
                if (r) return r(o2, true);
                var l = new Error("Cannot find module '" + o2 + "'");
                throw l.code = "MODULE_NOT_FOUND", l;
              }
              var h = i3[o2] = { exports: {} };
              e3[o2][0].call(h.exports, function(t4) {
                return n(e3[o2][1][t4] || t4);
              }, h, h.exports, t3, e3, i3, s);
            }
            return i3[o2].exports;
          }
          for (var r = void 0, o = 0; o < s.length; o++) n(s[o]);
          return n;
        }({ 1: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./utils"), n = t3("./support"), r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          i3.encode = function(t4) {
            for (var e4, i4, n2, o, a, l, h, c = [], u = 0, d = t4.length, f = d, m = "string" !== s.getTypeOf(t4); u < t4.length; ) f = d - u, n2 = m ? (e4 = t4[u++], i4 = u < d ? t4[u++] : 0, u < d ? t4[u++] : 0) : (e4 = t4.charCodeAt(u++), i4 = u < d ? t4.charCodeAt(u++) : 0, u < d ? t4.charCodeAt(u++) : 0), o = e4 >> 2, a = (3 & e4) << 4 | i4 >> 4, l = 1 < f ? (15 & i4) << 2 | n2 >> 6 : 64, h = 2 < f ? 63 & n2 : 64, c.push(r.charAt(o) + r.charAt(a) + r.charAt(l) + r.charAt(h));
            return c.join("");
          }, i3.decode = function(t4) {
            var e4, i4, s2, o, a, l, h = 0, c = 0, u = "data:";
            if (t4.substr(0, 5) === u) throw new Error("Invalid base64 input, it looks like a data url.");
            var d, f = 3 * (t4 = t4.replace(/[^A-Za-z0-9+/=]/g, "")).length / 4;
            if (t4.charAt(t4.length - 1) === r.charAt(64) && f--, t4.charAt(t4.length - 2) === r.charAt(64) && f--, f % 1 != 0) throw new Error("Invalid base64 input, bad content length.");
            for (d = n.uint8array ? new Uint8Array(0 | f) : new Array(0 | f); h < t4.length; ) e4 = r.indexOf(t4.charAt(h++)) << 2 | (o = r.indexOf(t4.charAt(h++))) >> 4, i4 = (15 & o) << 4 | (a = r.indexOf(t4.charAt(h++))) >> 2, s2 = (3 & a) << 6 | (l = r.indexOf(t4.charAt(h++))), d[c++] = e4, 64 !== a && (d[c++] = i4), 64 !== l && (d[c++] = s2);
            return d;
          };
        }, { "./support": 30, "./utils": 32 }], 2: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./external"), n = t3("./stream/DataWorker"), r = t3("./stream/Crc32Probe"), o = t3("./stream/DataLengthProbe");
          function a(t4, e4, i4, s2, n2) {
            this.compressedSize = t4, this.uncompressedSize = e4, this.crc32 = i4, this.compression = s2, this.compressedContent = n2;
          }
          a.prototype = { getContentWorker: function() {
            var t4 = new n(s.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")), e4 = this;
            return t4.on("end", function() {
              if (this.streamInfo.data_length !== e4.uncompressedSize) throw new Error("Bug : uncompressed data size mismatch");
            }), t4;
          }, getCompressedWorker: function() {
            return new n(s.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize", this.compressedSize).withStreamInfo("uncompressedSize", this.uncompressedSize).withStreamInfo("crc32", this.crc32).withStreamInfo("compression", this.compression);
          } }, a.createWorkerFrom = function(t4, e4, i4) {
            return t4.pipe(new r()).pipe(new o("uncompressedSize")).pipe(e4.compressWorker(i4)).pipe(new o("compressedSize")).withStreamInfo("compression", e4);
          }, e3.exports = a;
        }, { "./external": 6, "./stream/Crc32Probe": 25, "./stream/DataLengthProbe": 26, "./stream/DataWorker": 27 }], 3: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./stream/GenericWorker");
          i3.STORE = { magic: "\0\0", compressWorker: function() {
            return new s("STORE compression");
          }, uncompressWorker: function() {
            return new s("STORE decompression");
          } }, i3.DEFLATE = t3("./flate");
        }, { "./flate": 7, "./stream/GenericWorker": 28 }], 4: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./utils"), n = function() {
            for (var t4, e4 = [], i4 = 0; i4 < 256; i4++) {
              t4 = i4;
              for (var s2 = 0; s2 < 8; s2++) t4 = 1 & t4 ? 3988292384 ^ t4 >>> 1 : t4 >>> 1;
              e4[i4] = t4;
            }
            return e4;
          }();
          e3.exports = function(t4, e4) {
            return void 0 !== t4 && t4.length ? "string" !== s.getTypeOf(t4) ? function(t5, e5, i4) {
              var s2 = n, r = 0 + i4;
              t5 ^= -1;
              for (var o = 0; o < r; o++) t5 = t5 >>> 8 ^ s2[255 & (t5 ^ e5[o])];
              return ~t5;
            }(0 | e4, t4, t4.length) : function(t5, e5, i4) {
              var s2 = n, r = 0 + i4;
              t5 ^= -1;
              for (var o = 0; o < r; o++) t5 = t5 >>> 8 ^ s2[255 & (t5 ^ e5.charCodeAt(o))];
              return ~t5;
            }(0 | e4, t4, t4.length) : 0;
          };
        }, { "./utils": 32 }], 5: [function(t3, e3, i3) {
          "use strict";
          i3.base64 = false, i3.binary = false, i3.dir = false, i3.createFolders = true, i3.date = null, i3.compression = null, i3.compressionOptions = null, i3.comment = null, i3.unixPermissions = null, i3.dosPermissions = null;
        }, {}], 6: [function(t3, e3, i3) {
          "use strict";
          var s;
          s = "undefined" != typeof Promise ? Promise : t3("lie"), e3.exports = { Promise: s };
        }, { lie: 37 }], 7: [function(t3, e3, i3) {
          "use strict";
          var s = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Uint32Array, n = t3("pako"), r = t3("./utils"), o = t3("./stream/GenericWorker"), a = s ? "uint8array" : "array";
          function l(t4, e4) {
            o.call(this, "FlateWorker/" + t4), this._pako = null, this._pakoAction = t4, this._pakoOptions = e4, this.meta = {};
          }
          i3.magic = "\b\0", r.inherits(l, o), l.prototype.processChunk = function(t4) {
            this.meta = t4.meta, null === this._pako && this._createPako(), this._pako.push(r.transformTo(a, t4.data), false);
          }, l.prototype.flush = function() {
            o.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], true);
          }, l.prototype.cleanUp = function() {
            o.prototype.cleanUp.call(this), this._pako = null;
          }, l.prototype._createPako = function() {
            this._pako = new n[this._pakoAction]({ raw: true, level: this._pakoOptions.level || -1 });
            var t4 = this;
            this._pako.onData = function(e4) {
              t4.push({ data: e4, meta: t4.meta });
            };
          }, i3.compressWorker = function(t4) {
            return new l("Deflate", t4);
          }, i3.uncompressWorker = function() {
            return new l("Inflate", {});
          };
        }, { "./stream/GenericWorker": 28, "./utils": 32, pako: 38 }], 8: [function(t3, e3, i3) {
          "use strict";
          function s(t4, e4) {
            var i4, s2 = "";
            for (i4 = 0; i4 < e4; i4++) s2 += String.fromCharCode(255 & t4), t4 >>>= 8;
            return s2;
          }
          function n(t4, e4, i4, n2, o2, c2) {
            var u, d, f = t4.file, m = t4.compression, p = c2 !== a.utf8encode, g = r.transformTo("string", c2(f.name)), b = r.transformTo("string", a.utf8encode(f.name)), S = f.comment, y = r.transformTo("string", c2(S)), E = r.transformTo("string", a.utf8encode(S)), x = b.length !== f.name.length, v = E.length !== S.length, _ = "", M = "", w = "", P = f.dir, T = f.date, L = { crc32: 0, compressedSize: 0, uncompressedSize: 0 };
            e4 && !i4 || (L.crc32 = t4.crc32, L.compressedSize = t4.compressedSize, L.uncompressedSize = t4.uncompressedSize);
            var A = 0;
            e4 && (A |= 8), p || !x && !v || (A |= 2048);
            var C = 0, R = 0;
            P && (C |= 16), "UNIX" === o2 ? (R = 798, C |= function(t5, e5) {
              var i5 = t5;
              return t5 || (i5 = e5 ? 16893 : 33204), (65535 & i5) << 16;
            }(f.unixPermissions, P)) : (R = 20, C |= function(t5) {
              return 63 & (t5 || 0);
            }(f.dosPermissions)), u = T.getUTCHours(), u <<= 6, u |= T.getUTCMinutes(), u <<= 5, u |= T.getUTCSeconds() / 2, d = T.getUTCFullYear() - 1980, d <<= 4, d |= T.getUTCMonth() + 1, d <<= 5, d |= T.getUTCDate(), x && (M = s(1, 1) + s(l(g), 4) + b, _ += "up" + s(M.length, 2) + M), v && (w = s(1, 1) + s(l(y), 4) + E, _ += "uc" + s(w.length, 2) + w);
            var N = "";
            return N += "\n\0", N += s(A, 2), N += m.magic, N += s(u, 2), N += s(d, 2), N += s(L.crc32, 4), N += s(L.compressedSize, 4), N += s(L.uncompressedSize, 4), N += s(g.length, 2), N += s(_.length, 2), { fileRecord: h.LOCAL_FILE_HEADER + N + g + _, dirRecord: h.CENTRAL_FILE_HEADER + s(R, 2) + N + s(y.length, 2) + "\0\0\0\0" + s(C, 4) + s(n2, 4) + g + _ + y };
          }
          var r = t3("../utils"), o = t3("../stream/GenericWorker"), a = t3("../utf8"), l = t3("../crc32"), h = t3("../signature");
          function c(t4, e4, i4, s2) {
            o.call(this, "ZipFileWorker"), this.bytesWritten = 0, this.zipComment = e4, this.zipPlatform = i4, this.encodeFileName = s2, this.streamFiles = t4, this.accumulate = false, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];
          }
          r.inherits(c, o), c.prototype.push = function(t4) {
            var e4 = t4.meta.percent || 0, i4 = this.entriesCount, s2 = this._sources.length;
            this.accumulate ? this.contentBuffer.push(t4) : (this.bytesWritten += t4.data.length, o.prototype.push.call(this, { data: t4.data, meta: { currentFile: this.currentFile, percent: i4 ? (e4 + 100 * (i4 - s2 - 1)) / i4 : 100 } }));
          }, c.prototype.openedSource = function(t4) {
            this.currentSourceOffset = this.bytesWritten, this.currentFile = t4.file.name;
            var e4 = this.streamFiles && !t4.file.dir;
            if (e4) {
              var i4 = n(t4, e4, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
              this.push({ data: i4.fileRecord, meta: { percent: 0 } });
            } else this.accumulate = true;
          }, c.prototype.closedSource = function(t4) {
            this.accumulate = false;
            var e4 = this.streamFiles && !t4.file.dir, i4 = n(t4, e4, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
            if (this.dirRecords.push(i4.dirRecord), e4) this.push({ data: function(t5) {
              return h.DATA_DESCRIPTOR + s(t5.crc32, 4) + s(t5.compressedSize, 4) + s(t5.uncompressedSize, 4);
            }(t4), meta: { percent: 100 } });
            else for (this.push({ data: i4.fileRecord, meta: { percent: 0 } }); this.contentBuffer.length; ) this.push(this.contentBuffer.shift());
            this.currentFile = null;
          }, c.prototype.flush = function() {
            for (var t4 = this.bytesWritten, e4 = 0; e4 < this.dirRecords.length; e4++) this.push({ data: this.dirRecords[e4], meta: { percent: 100 } });
            var i4 = this.bytesWritten - t4, n2 = function(t5, e5, i5, n3, o2) {
              var a2 = r.transformTo("string", o2(n3));
              return h.CENTRAL_DIRECTORY_END + "\0\0\0\0" + s(t5, 2) + s(t5, 2) + s(e5, 4) + s(i5, 4) + s(a2.length, 2) + a2;
            }(this.dirRecords.length, i4, t4, this.zipComment, this.encodeFileName);
            this.push({ data: n2, meta: { percent: 100 } });
          }, c.prototype.prepareNextSource = function() {
            this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();
          }, c.prototype.registerPrevious = function(t4) {
            this._sources.push(t4);
            var e4 = this;
            return t4.on("data", function(t5) {
              e4.processChunk(t5);
            }), t4.on("end", function() {
              e4.closedSource(e4.previous.streamInfo), e4._sources.length ? e4.prepareNextSource() : e4.end();
            }), t4.on("error", function(t5) {
              e4.error(t5);
            }), this;
          }, c.prototype.resume = function() {
            return !!o.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), true) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), true));
          }, c.prototype.error = function(t4) {
            var e4 = this._sources;
            if (!o.prototype.error.call(this, t4)) return false;
            for (var i4 = 0; i4 < e4.length; i4++) try {
              e4[i4].error(t4);
            } catch (t5) {
            }
            return true;
          }, c.prototype.lock = function() {
            o.prototype.lock.call(this);
            for (var t4 = this._sources, e4 = 0; e4 < t4.length; e4++) t4[e4].lock();
          }, e3.exports = c;
        }, { "../crc32": 4, "../signature": 23, "../stream/GenericWorker": 28, "../utf8": 31, "../utils": 32 }], 9: [function(t3, e3, i3) {
          "use strict";
          var s = t3("../compressions"), n = t3("./ZipFileWorker");
          i3.generateWorker = function(t4, e4, i4) {
            var r = new n(e4.streamFiles, i4, e4.platform, e4.encodeFileName), o = 0;
            try {
              t4.forEach(function(t5, i5) {
                o++;
                var n2 = function(t6, e5) {
                  var i6 = t6 || e5, n3 = s[i6];
                  if (!n3) throw new Error(i6 + " is not a valid compression method !");
                  return n3;
                }(i5.options.compression, e4.compression), a = i5.options.compressionOptions || e4.compressionOptions || {}, l = i5.dir, h = i5.date;
                i5._compressWorker(n2, a).withStreamInfo("file", { name: t5, dir: l, date: h, comment: i5.comment || "", unixPermissions: i5.unixPermissions, dosPermissions: i5.dosPermissions }).pipe(r);
              }), r.entriesCount = o;
            } catch (t5) {
              r.error(t5);
            }
            return r;
          };
        }, { "../compressions": 3, "./ZipFileWorker": 8 }], 10: [function(t3, e3, i3) {
          "use strict";
          function s() {
            if (!(this instanceof s)) return new s();
            if (arguments.length) throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
            this.files = /* @__PURE__ */ Object.create(null), this.comment = null, this.root = "", this.clone = function() {
              var t4 = new s();
              for (var e4 in this) "function" != typeof this[e4] && (t4[e4] = this[e4]);
              return t4;
            };
          }
          (s.prototype = t3("./object")).loadAsync = t3("./load"), s.support = t3("./support"), s.defaults = t3("./defaults"), s.version = "3.10.1", s.loadAsync = function(t4, e4) {
            return new s().loadAsync(t4, e4);
          }, s.external = t3("./external"), e3.exports = s;
        }, { "./defaults": 5, "./external": 6, "./load": 11, "./object": 15, "./support": 30 }], 11: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./utils"), n = t3("./external"), r = t3("./utf8"), o = t3("./zipEntries"), a = t3("./stream/Crc32Probe"), l = t3("./nodejsUtils");
          function h(t4) {
            return new n.Promise(function(e4, i4) {
              var s2 = t4.decompressed.getContentWorker().pipe(new a());
              s2.on("error", function(t5) {
                i4(t5);
              }).on("end", function() {
                s2.streamInfo.crc32 !== t4.decompressed.crc32 ? i4(new Error("Corrupted zip : CRC32 mismatch")) : e4();
              }).resume();
            });
          }
          e3.exports = function(t4, e4) {
            var i4 = this;
            return e4 = s.extend(e4 || {}, { base64: false, checkCRC32: false, optimizedBinaryString: false, createFolders: false, decodeFileName: r.utf8decode }), l.isNode && l.isStream(t4) ? n.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")) : s.prepareContent("the loaded zip file", t4, true, e4.optimizedBinaryString, e4.base64).then(function(t5) {
              var i5 = new o(e4);
              return i5.load(t5), i5;
            }).then(function(t5) {
              var i5 = [n.Promise.resolve(t5)], s2 = t5.files;
              if (e4.checkCRC32) for (var r2 = 0; r2 < s2.length; r2++) i5.push(h(s2[r2]));
              return n.Promise.all(i5);
            }).then(function(t5) {
              for (var n2 = t5.shift(), r2 = n2.files, o2 = 0; o2 < r2.length; o2++) {
                var a2 = r2[o2], l2 = a2.fileNameStr, h2 = s.resolve(a2.fileNameStr);
                i4.file(h2, a2.decompressed, { binary: true, optimizedBinaryString: true, date: a2.date, dir: a2.dir, comment: a2.fileCommentStr.length ? a2.fileCommentStr : null, unixPermissions: a2.unixPermissions, dosPermissions: a2.dosPermissions, createFolders: e4.createFolders }), a2.dir || (i4.file(h2).unsafeOriginalName = l2);
              }
              return n2.zipComment.length && (i4.comment = n2.zipComment), i4;
            });
          };
        }, { "./external": 6, "./nodejsUtils": 14, "./stream/Crc32Probe": 25, "./utf8": 31, "./utils": 32, "./zipEntries": 33 }], 12: [function(t3, e3, i3) {
          "use strict";
          var s = t3("../utils"), n = t3("../stream/GenericWorker");
          function r(t4, e4) {
            n.call(this, "Nodejs stream input adapter for " + t4), this._upstreamEnded = false, this._bindStream(e4);
          }
          s.inherits(r, n), r.prototype._bindStream = function(t4) {
            var e4 = this;
            (this._stream = t4).pause(), t4.on("data", function(t5) {
              e4.push({ data: t5, meta: { percent: 0 } });
            }).on("error", function(t5) {
              e4.isPaused ? this.generatedError = t5 : e4.error(t5);
            }).on("end", function() {
              e4.isPaused ? e4._upstreamEnded = true : e4.end();
            });
          }, r.prototype.pause = function() {
            return !!n.prototype.pause.call(this) && (this._stream.pause(), true);
          }, r.prototype.resume = function() {
            return !!n.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), true);
          }, e3.exports = r;
        }, { "../stream/GenericWorker": 28, "../utils": 32 }], 13: [function(t3, e3, i3) {
          "use strict";
          var s = t3("readable-stream").Readable;
          function n(t4, e4, i4) {
            s.call(this, e4), this._helper = t4;
            var n2 = this;
            t4.on("data", function(t5, e5) {
              n2.push(t5) || n2._helper.pause(), i4 && i4(e5);
            }).on("error", function(t5) {
              n2.emit("error", t5);
            }).on("end", function() {
              n2.push(null);
            });
          }
          t3("../utils").inherits(n, s), n.prototype._read = function() {
            this._helper.resume();
          }, e3.exports = n;
        }, { "../utils": 32, "readable-stream": 16 }], 14: [function(t3, e3, i3) {
          "use strict";
          e3.exports = { isNode: "undefined" != typeof Buffer, newBufferFrom: function(t4, e4) {
            if (Buffer.from && Buffer.from !== Uint8Array.from) return Buffer.from(t4, e4);
            if ("number" == typeof t4) throw new Error('The "data" argument must not be a number');
            return new Buffer(t4, e4);
          }, allocBuffer: function(t4) {
            if (Buffer.alloc) return Buffer.alloc(t4);
            var e4 = new Buffer(t4);
            return e4.fill(0), e4;
          }, isBuffer: function(t4) {
            return Buffer.isBuffer(t4);
          }, isStream: function(t4) {
            return t4 && "function" == typeof t4.on && "function" == typeof t4.pause && "function" == typeof t4.resume;
          } };
        }, {}], 15: [function(t3, e3, i3) {
          "use strict";
          function s(t4, e4, i4) {
            var s2, n2 = r.getTypeOf(e4), a2 = r.extend(i4 || {}, l);
            a2.date = a2.date || /* @__PURE__ */ new Date(), null !== a2.compression && (a2.compression = a2.compression.toUpperCase()), "string" == typeof a2.unixPermissions && (a2.unixPermissions = parseInt(a2.unixPermissions, 8)), a2.unixPermissions && 16384 & a2.unixPermissions && (a2.dir = true), a2.dosPermissions && 16 & a2.dosPermissions && (a2.dir = true), a2.dir && (t4 = p(t4)), a2.createFolders && (s2 = m(t4)) && g.call(this, s2, true);
            var u2 = "string" === n2 && false === a2.binary && false === a2.base64;
            i4 && void 0 !== i4.binary || (a2.binary = !u2), (e4 instanceof h && 0 === e4.uncompressedSize || a2.dir || !e4 || 0 === e4.length) && (a2.base64 = false, a2.binary = true, e4 = "", a2.compression = "STORE", n2 = "string");
            var b2;
            b2 = e4 instanceof h || e4 instanceof o ? e4 : d.isNode && d.isStream(e4) ? new f(t4, e4) : r.prepareContent(t4, e4, a2.binary, a2.optimizedBinaryString, a2.base64);
            var S2 = new c(t4, b2, a2);
            this.files[t4] = S2;
          }
          var n = t3("./utf8"), r = t3("./utils"), o = t3("./stream/GenericWorker"), a = t3("./stream/StreamHelper"), l = t3("./defaults"), h = t3("./compressedObject"), c = t3("./zipObject"), u = t3("./generate"), d = t3("./nodejsUtils"), f = t3("./nodejs/NodejsStreamInputAdapter"), m = function(t4) {
            "/" === t4.slice(-1) && (t4 = t4.substring(0, t4.length - 1));
            var e4 = t4.lastIndexOf("/");
            return 0 < e4 ? t4.substring(0, e4) : "";
          }, p = function(t4) {
            return "/" !== t4.slice(-1) && (t4 += "/"), t4;
          }, g = function(t4, e4) {
            return e4 = void 0 !== e4 ? e4 : l.createFolders, t4 = p(t4), this.files[t4] || s.call(this, t4, null, { dir: true, createFolders: e4 }), this.files[t4];
          };
          function b(t4) {
            return "[object RegExp]" === Object.prototype.toString.call(t4);
          }
          var S = { load: function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, forEach: function(t4) {
            var e4, i4, s2;
            for (e4 in this.files) s2 = this.files[e4], (i4 = e4.slice(this.root.length, e4.length)) && e4.slice(0, this.root.length) === this.root && t4(i4, s2);
          }, filter: function(t4) {
            var e4 = [];
            return this.forEach(function(i4, s2) {
              t4(i4, s2) && e4.push(s2);
            }), e4;
          }, file: function(t4, e4, i4) {
            if (1 !== arguments.length) return t4 = this.root + t4, s.call(this, t4, e4, i4), this;
            if (b(t4)) {
              var n2 = t4;
              return this.filter(function(t5, e5) {
                return !e5.dir && n2.test(t5);
              });
            }
            var r2 = this.files[this.root + t4];
            return r2 && !r2.dir ? r2 : null;
          }, folder: function(t4) {
            if (!t4) return this;
            if (b(t4)) return this.filter(function(e5, i5) {
              return i5.dir && t4.test(e5);
            });
            var e4 = this.root + t4, i4 = g.call(this, e4), s2 = this.clone();
            return s2.root = i4.name, s2;
          }, remove: function(t4) {
            t4 = this.root + t4;
            var e4 = this.files[t4];
            if (e4 || ("/" !== t4.slice(-1) && (t4 += "/"), e4 = this.files[t4]), e4 && !e4.dir) delete this.files[t4];
            else for (var i4 = this.filter(function(e5, i5) {
              return i5.name.slice(0, t4.length) === t4;
            }), s2 = 0; s2 < i4.length; s2++) delete this.files[i4[s2].name];
            return this;
          }, generate: function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, generateInternalStream: function(t4) {
            var e4, i4 = {};
            try {
              if ((i4 = r.extend(t4 || {}, { streamFiles: false, compression: "STORE", compressionOptions: null, type: "", platform: "DOS", comment: null, mimeType: "application/zip", encodeFileName: n.utf8encode })).type = i4.type.toLowerCase(), i4.compression = i4.compression.toUpperCase(), "binarystring" === i4.type && (i4.type = "string"), !i4.type) throw new Error("No output type specified.");
              r.checkSupport(i4.type), "darwin" !== i4.platform && "freebsd" !== i4.platform && "linux" !== i4.platform && "sunos" !== i4.platform || (i4.platform = "UNIX"), "win32" === i4.platform && (i4.platform = "DOS");
              var s2 = i4.comment || this.comment || "";
              e4 = u.generateWorker(this, i4, s2);
            } catch (t5) {
              (e4 = new o("error")).error(t5);
            }
            return new a(e4, i4.type || "string", i4.mimeType);
          }, generateAsync: function(t4, e4) {
            return this.generateInternalStream(t4).accumulate(e4);
          }, generateNodeStream: function(t4, e4) {
            return (t4 = t4 || {}).type || (t4.type = "nodebuffer"), this.generateInternalStream(t4).toNodejsStream(e4);
          } };
          e3.exports = S;
        }, { "./compressedObject": 2, "./defaults": 5, "./generate": 9, "./nodejs/NodejsStreamInputAdapter": 12, "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31, "./utils": 32, "./zipObject": 35 }], 16: [function(t3, e3, i3) {
          "use strict";
          e3.exports = t3("stream");
        }, { stream: void 0 }], 17: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./DataReader");
          function n(t4) {
            s.call(this, t4);
            for (var e4 = 0; e4 < this.data.length; e4++) t4[e4] = 255 & t4[e4];
          }
          t3("../utils").inherits(n, s), n.prototype.byteAt = function(t4) {
            return this.data[this.zero + t4];
          }, n.prototype.lastIndexOfSignature = function(t4) {
            for (var e4 = t4.charCodeAt(0), i4 = t4.charCodeAt(1), s2 = t4.charCodeAt(2), n2 = t4.charCodeAt(3), r = this.length - 4; 0 <= r; --r) if (this.data[r] === e4 && this.data[r + 1] === i4 && this.data[r + 2] === s2 && this.data[r + 3] === n2) return r - this.zero;
            return -1;
          }, n.prototype.readAndCheckSignature = function(t4) {
            var e4 = t4.charCodeAt(0), i4 = t4.charCodeAt(1), s2 = t4.charCodeAt(2), n2 = t4.charCodeAt(3), r = this.readData(4);
            return e4 === r[0] && i4 === r[1] && s2 === r[2] && n2 === r[3];
          }, n.prototype.readData = function(t4) {
            if (this.checkOffset(t4), 0 === t4) return [];
            var e4 = this.data.slice(this.zero + this.index, this.zero + this.index + t4);
            return this.index += t4, e4;
          }, e3.exports = n;
        }, { "../utils": 32, "./DataReader": 18 }], 18: [function(t3, e3, i3) {
          "use strict";
          var s = t3("../utils");
          function n(t4) {
            this.data = t4, this.length = t4.length, this.index = 0, this.zero = 0;
          }
          n.prototype = { checkOffset: function(t4) {
            this.checkIndex(this.index + t4);
          }, checkIndex: function(t4) {
            if (this.length < this.zero + t4 || t4 < 0) throw new Error("End of data reached (data length = " + this.length + ", asked index = " + t4 + "). Corrupted zip ?");
          }, setIndex: function(t4) {
            this.checkIndex(t4), this.index = t4;
          }, skip: function(t4) {
            this.setIndex(this.index + t4);
          }, byteAt: function() {
          }, readInt: function(t4) {
            var e4, i4 = 0;
            for (this.checkOffset(t4), e4 = this.index + t4 - 1; e4 >= this.index; e4--) i4 = (i4 << 8) + this.byteAt(e4);
            return this.index += t4, i4;
          }, readString: function(t4) {
            return s.transformTo("string", this.readData(t4));
          }, readData: function() {
          }, lastIndexOfSignature: function() {
          }, readAndCheckSignature: function() {
          }, readDate: function() {
            var t4 = this.readInt(4);
            return new Date(Date.UTC(1980 + (t4 >> 25 & 127), (t4 >> 21 & 15) - 1, t4 >> 16 & 31, t4 >> 11 & 31, t4 >> 5 & 63, (31 & t4) << 1));
          } }, e3.exports = n;
        }, { "../utils": 32 }], 19: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./Uint8ArrayReader");
          function n(t4) {
            s.call(this, t4);
          }
          t3("../utils").inherits(n, s), n.prototype.readData = function(t4) {
            this.checkOffset(t4);
            var e4 = this.data.slice(this.zero + this.index, this.zero + this.index + t4);
            return this.index += t4, e4;
          }, e3.exports = n;
        }, { "../utils": 32, "./Uint8ArrayReader": 21 }], 20: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./DataReader");
          function n(t4) {
            s.call(this, t4);
          }
          t3("../utils").inherits(n, s), n.prototype.byteAt = function(t4) {
            return this.data.charCodeAt(this.zero + t4);
          }, n.prototype.lastIndexOfSignature = function(t4) {
            return this.data.lastIndexOf(t4) - this.zero;
          }, n.prototype.readAndCheckSignature = function(t4) {
            return t4 === this.readData(4);
          }, n.prototype.readData = function(t4) {
            this.checkOffset(t4);
            var e4 = this.data.slice(this.zero + this.index, this.zero + this.index + t4);
            return this.index += t4, e4;
          }, e3.exports = n;
        }, { "../utils": 32, "./DataReader": 18 }], 21: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./ArrayReader");
          function n(t4) {
            s.call(this, t4);
          }
          t3("../utils").inherits(n, s), n.prototype.readData = function(t4) {
            if (this.checkOffset(t4), 0 === t4) return new Uint8Array(0);
            var e4 = this.data.subarray(this.zero + this.index, this.zero + this.index + t4);
            return this.index += t4, e4;
          }, e3.exports = n;
        }, { "../utils": 32, "./ArrayReader": 17 }], 22: [function(t3, e3, i3) {
          "use strict";
          var s = t3("../utils"), n = t3("../support"), r = t3("./ArrayReader"), o = t3("./StringReader"), a = t3("./NodeBufferReader"), l = t3("./Uint8ArrayReader");
          e3.exports = function(t4) {
            var e4 = s.getTypeOf(t4);
            return s.checkSupport(e4), "string" !== e4 || n.uint8array ? "nodebuffer" === e4 ? new a(t4) : n.uint8array ? new l(s.transformTo("uint8array", t4)) : new r(s.transformTo("array", t4)) : new o(t4);
          };
        }, { "../support": 30, "../utils": 32, "./ArrayReader": 17, "./NodeBufferReader": 19, "./StringReader": 20, "./Uint8ArrayReader": 21 }], 23: [function(t3, e3, i3) {
          "use strict";
          i3.LOCAL_FILE_HEADER = "PK", i3.CENTRAL_FILE_HEADER = "PK", i3.CENTRAL_DIRECTORY_END = "PK", i3.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x07", i3.ZIP64_CENTRAL_DIRECTORY_END = "PK", i3.DATA_DESCRIPTOR = "PK\x07\b";
        }, {}], 24: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./GenericWorker"), n = t3("../utils");
          function r(t4) {
            s.call(this, "ConvertWorker to " + t4), this.destType = t4;
          }
          n.inherits(r, s), r.prototype.processChunk = function(t4) {
            this.push({ data: n.transformTo(this.destType, t4.data), meta: t4.meta });
          }, e3.exports = r;
        }, { "../utils": 32, "./GenericWorker": 28 }], 25: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./GenericWorker"), n = t3("../crc32");
          function r() {
            s.call(this, "Crc32Probe"), this.withStreamInfo("crc32", 0);
          }
          t3("../utils").inherits(r, s), r.prototype.processChunk = function(t4) {
            this.streamInfo.crc32 = n(t4.data, this.streamInfo.crc32 || 0), this.push(t4);
          }, e3.exports = r;
        }, { "../crc32": 4, "../utils": 32, "./GenericWorker": 28 }], 26: [function(t3, e3, i3) {
          "use strict";
          var s = t3("../utils"), n = t3("./GenericWorker");
          function r(t4) {
            n.call(this, "DataLengthProbe for " + t4), this.propName = t4, this.withStreamInfo(t4, 0);
          }
          s.inherits(r, n), r.prototype.processChunk = function(t4) {
            if (t4) {
              var e4 = this.streamInfo[this.propName] || 0;
              this.streamInfo[this.propName] = e4 + t4.data.length;
            }
            n.prototype.processChunk.call(this, t4);
          }, e3.exports = r;
        }, { "../utils": 32, "./GenericWorker": 28 }], 27: [function(t3, e3, i3) {
          "use strict";
          var s = t3("../utils"), n = t3("./GenericWorker");
          function r(t4) {
            n.call(this, "DataWorker");
            var e4 = this;
            this.dataIsReady = false, this.index = 0, this.max = 0, this.data = null, this.type = "", this._tickScheduled = false, t4.then(function(t5) {
              e4.dataIsReady = true, e4.data = t5, e4.max = t5 && t5.length || 0, e4.type = s.getTypeOf(t5), e4.isPaused || e4._tickAndRepeat();
            }, function(t5) {
              e4.error(t5);
            });
          }
          s.inherits(r, n), r.prototype.cleanUp = function() {
            n.prototype.cleanUp.call(this), this.data = null;
          }, r.prototype.resume = function() {
            return !!n.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = true, s.delay(this._tickAndRepeat, [], this)), true);
          }, r.prototype._tickAndRepeat = function() {
            this._tickScheduled = false, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (s.delay(this._tickAndRepeat, [], this), this._tickScheduled = true));
          }, r.prototype._tick = function() {
            if (this.isPaused || this.isFinished) return false;
            var t4 = null, e4 = Math.min(this.max, this.index + 16384);
            if (this.index >= this.max) return this.end();
            switch (this.type) {
              case "string":
                t4 = this.data.substring(this.index, e4);
                break;
              case "uint8array":
                t4 = this.data.subarray(this.index, e4);
                break;
              case "array":
              case "nodebuffer":
                t4 = this.data.slice(this.index, e4);
            }
            return this.index = e4, this.push({ data: t4, meta: { percent: this.max ? this.index / this.max * 100 : 0 } });
          }, e3.exports = r;
        }, { "../utils": 32, "./GenericWorker": 28 }], 28: [function(t3, e3, i3) {
          "use strict";
          function s(t4) {
            this.name = t4 || "default", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = true, this.isFinished = false, this.isLocked = false, this._listeners = { data: [], end: [], error: [] }, this.previous = null;
          }
          s.prototype = { push: function(t4) {
            this.emit("data", t4);
          }, end: function() {
            if (this.isFinished) return false;
            this.flush();
            try {
              this.emit("end"), this.cleanUp(), this.isFinished = true;
            } catch (t4) {
              this.emit("error", t4);
            }
            return true;
          }, error: function(t4) {
            return !this.isFinished && (this.isPaused ? this.generatedError = t4 : (this.isFinished = true, this.emit("error", t4), this.previous && this.previous.error(t4), this.cleanUp()), true);
          }, on: function(t4, e4) {
            return this._listeners[t4].push(e4), this;
          }, cleanUp: function() {
            this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];
          }, emit: function(t4, e4) {
            if (this._listeners[t4]) for (var i4 = 0; i4 < this._listeners[t4].length; i4++) this._listeners[t4][i4].call(this, e4);
          }, pipe: function(t4) {
            return t4.registerPrevious(this);
          }, registerPrevious: function(t4) {
            if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
            this.streamInfo = t4.streamInfo, this.mergeStreamInfo(), this.previous = t4;
            var e4 = this;
            return t4.on("data", function(t5) {
              e4.processChunk(t5);
            }), t4.on("end", function() {
              e4.end();
            }), t4.on("error", function(t5) {
              e4.error(t5);
            }), this;
          }, pause: function() {
            return !this.isPaused && !this.isFinished && (this.isPaused = true, this.previous && this.previous.pause(), true);
          }, resume: function() {
            if (!this.isPaused || this.isFinished) return false;
            var t4 = this.isPaused = false;
            return this.generatedError && (this.error(this.generatedError), t4 = true), this.previous && this.previous.resume(), !t4;
          }, flush: function() {
          }, processChunk: function(t4) {
            this.push(t4);
          }, withStreamInfo: function(t4, e4) {
            return this.extraStreamInfo[t4] = e4, this.mergeStreamInfo(), this;
          }, mergeStreamInfo: function() {
            for (var t4 in this.extraStreamInfo) Object.prototype.hasOwnProperty.call(this.extraStreamInfo, t4) && (this.streamInfo[t4] = this.extraStreamInfo[t4]);
          }, lock: function() {
            if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
            this.isLocked = true, this.previous && this.previous.lock();
          }, toString: function() {
            var t4 = "Worker " + this.name;
            return this.previous ? this.previous + " -> " + t4 : t4;
          } }, e3.exports = s;
        }, {}], 29: [function(t3, e3, i3) {
          "use strict";
          var s = t3("../utils"), n = t3("./ConvertWorker"), r = t3("./GenericWorker"), o = t3("../base64"), a = t3("../support"), l = t3("../external"), h = null;
          if (a.nodestream) try {
            h = t3("../nodejs/NodejsStreamOutputAdapter");
          } catch (t4) {
          }
          function c(t4, e4, i4) {
            var o2 = e4;
            switch (e4) {
              case "blob":
              case "arraybuffer":
                o2 = "uint8array";
                break;
              case "base64":
                o2 = "string";
            }
            try {
              this._internalType = o2, this._outputType = e4, this._mimeType = i4, s.checkSupport(o2), this._worker = t4.pipe(new n(o2)), t4.lock();
            } catch (t5) {
              this._worker = new r("error"), this._worker.error(t5);
            }
          }
          c.prototype = { accumulate: function(t4) {
            return function(t5, e4) {
              return new l.Promise(function(i4, n2) {
                var r2 = [], a2 = t5._internalType, l2 = t5._outputType, h2 = t5._mimeType;
                t5.on("data", function(t6, i5) {
                  r2.push(t6), e4 && e4(i5);
                }).on("error", function(t6) {
                  r2 = [], n2(t6);
                }).on("end", function() {
                  try {
                    var t6 = function(t7, e5, i5) {
                      switch (t7) {
                        case "blob":
                          return s.newBlob(s.transformTo("arraybuffer", e5), i5);
                        case "base64":
                          return o.encode(e5);
                        default:
                          return s.transformTo(t7, e5);
                      }
                    }(l2, function(t7, e5) {
                      var i5, s2 = 0, n3 = null, r3 = 0;
                      for (i5 = 0; i5 < e5.length; i5++) r3 += e5[i5].length;
                      switch (t7) {
                        case "string":
                          return e5.join("");
                        case "array":
                          return Array.prototype.concat.apply([], e5);
                        case "uint8array":
                          for (n3 = new Uint8Array(r3), i5 = 0; i5 < e5.length; i5++) n3.set(e5[i5], s2), s2 += e5[i5].length;
                          return n3;
                        case "nodebuffer":
                          return Buffer.concat(e5);
                        default:
                          throw new Error("concat : unsupported type '" + t7 + "'");
                      }
                    }(a2, r2), h2);
                    i4(t6);
                  } catch (t7) {
                    n2(t7);
                  }
                  r2 = [];
                }).resume();
              });
            }(this, t4);
          }, on: function(t4, e4) {
            var i4 = this;
            return "data" === t4 ? this._worker.on(t4, function(t5) {
              e4.call(i4, t5.data, t5.meta);
            }) : this._worker.on(t4, function() {
              s.delay(e4, arguments, i4);
            }), this;
          }, resume: function() {
            return s.delay(this._worker.resume, [], this._worker), this;
          }, pause: function() {
            return this._worker.pause(), this;
          }, toNodejsStream: function(t4) {
            if (s.checkSupport("nodestream"), "nodebuffer" !== this._outputType) throw new Error(this._outputType + " is not supported by this method");
            return new h(this, { objectMode: "nodebuffer" !== this._outputType }, t4);
          } }, e3.exports = c;
        }, { "../base64": 1, "../external": 6, "../nodejs/NodejsStreamOutputAdapter": 13, "../support": 30, "../utils": 32, "./ConvertWorker": 24, "./GenericWorker": 28 }], 30: [function(t3, e3, i3) {
          "use strict";
          if (i3.base64 = true, i3.array = true, i3.string = true, i3.arraybuffer = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array, i3.nodebuffer = "undefined" != typeof Buffer, i3.uint8array = "undefined" != typeof Uint8Array, "undefined" == typeof ArrayBuffer) i3.blob = false;
          else {
            var s = new ArrayBuffer(0);
            try {
              i3.blob = 0 === new Blob([s], { type: "application/zip" }).size;
            } catch (t4) {
              try {
                var n = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
                n.append(s), i3.blob = 0 === n.getBlob("application/zip").size;
              } catch (t5) {
                i3.blob = false;
              }
            }
          }
          try {
            i3.nodestream = !!t3("readable-stream").Readable;
          } catch (t4) {
            i3.nodestream = false;
          }
        }, { "readable-stream": 16 }], 31: [function(t3, e3, i3) {
          "use strict";
          for (var s = t3("./utils"), n = t3("./support"), r = t3("./nodejsUtils"), o = t3("./stream/GenericWorker"), a = new Array(256), l = 0; l < 256; l++) a[l] = 252 <= l ? 6 : 248 <= l ? 5 : 240 <= l ? 4 : 224 <= l ? 3 : 192 <= l ? 2 : 1;
          function h() {
            o.call(this, "utf-8 decode"), this.leftOver = null;
          }
          function c() {
            o.call(this, "utf-8 encode");
          }
          a[254] = a[254] = 1, i3.utf8encode = function(t4) {
            return n.nodebuffer ? r.newBufferFrom(t4, "utf-8") : function(t5) {
              var e4, i4, s2, r2, o2, a2 = t5.length, l2 = 0;
              for (r2 = 0; r2 < a2; r2++) 55296 == (64512 & (i4 = t5.charCodeAt(r2))) && r2 + 1 < a2 && 56320 == (64512 & (s2 = t5.charCodeAt(r2 + 1))) && (i4 = 65536 + (i4 - 55296 << 10) + (s2 - 56320), r2++), l2 += i4 < 128 ? 1 : i4 < 2048 ? 2 : i4 < 65536 ? 3 : 4;
              for (e4 = n.uint8array ? new Uint8Array(l2) : new Array(l2), r2 = o2 = 0; o2 < l2; r2++) 55296 == (64512 & (i4 = t5.charCodeAt(r2))) && r2 + 1 < a2 && 56320 == (64512 & (s2 = t5.charCodeAt(r2 + 1))) && (i4 = 65536 + (i4 - 55296 << 10) + (s2 - 56320), r2++), i4 < 128 ? e4[o2++] = i4 : (i4 < 2048 ? e4[o2++] = 192 | i4 >>> 6 : (i4 < 65536 ? e4[o2++] = 224 | i4 >>> 12 : (e4[o2++] = 240 | i4 >>> 18, e4[o2++] = 128 | i4 >>> 12 & 63), e4[o2++] = 128 | i4 >>> 6 & 63), e4[o2++] = 128 | 63 & i4);
              return e4;
            }(t4);
          }, i3.utf8decode = function(t4) {
            return n.nodebuffer ? s.transformTo("nodebuffer", t4).toString("utf-8") : function(t5) {
              var e4, i4, n2, r2, o2 = t5.length, l2 = new Array(2 * o2);
              for (e4 = i4 = 0; e4 < o2; ) if ((n2 = t5[e4++]) < 128) l2[i4++] = n2;
              else if (4 < (r2 = a[n2])) l2[i4++] = 65533, e4 += r2 - 1;
              else {
                for (n2 &= 2 === r2 ? 31 : 3 === r2 ? 15 : 7; 1 < r2 && e4 < o2; ) n2 = n2 << 6 | 63 & t5[e4++], r2--;
                1 < r2 ? l2[i4++] = 65533 : n2 < 65536 ? l2[i4++] = n2 : (n2 -= 65536, l2[i4++] = 55296 | n2 >> 10 & 1023, l2[i4++] = 56320 | 1023 & n2);
              }
              return l2.length !== i4 && (l2.subarray ? l2 = l2.subarray(0, i4) : l2.length = i4), s.applyFromCharCode(l2);
            }(t4 = s.transformTo(n.uint8array ? "uint8array" : "array", t4));
          }, s.inherits(h, o), h.prototype.processChunk = function(t4) {
            var e4 = s.transformTo(n.uint8array ? "uint8array" : "array", t4.data);
            if (this.leftOver && this.leftOver.length) {
              if (n.uint8array) {
                var r2 = e4;
                (e4 = new Uint8Array(r2.length + this.leftOver.length)).set(this.leftOver, 0), e4.set(r2, this.leftOver.length);
              } else e4 = this.leftOver.concat(e4);
              this.leftOver = null;
            }
            var o2 = function(t5, e5) {
              var i4;
              for ((e5 = e5 || t5.length) > t5.length && (e5 = t5.length), i4 = e5 - 1; 0 <= i4 && 128 == (192 & t5[i4]); ) i4--;
              return i4 < 0 || 0 === i4 ? e5 : i4 + a[t5[i4]] > e5 ? i4 : e5;
            }(e4), l2 = e4;
            o2 !== e4.length && (n.uint8array ? (l2 = e4.subarray(0, o2), this.leftOver = e4.subarray(o2, e4.length)) : (l2 = e4.slice(0, o2), this.leftOver = e4.slice(o2, e4.length))), this.push({ data: i3.utf8decode(l2), meta: t4.meta });
          }, h.prototype.flush = function() {
            this.leftOver && this.leftOver.length && (this.push({ data: i3.utf8decode(this.leftOver), meta: {} }), this.leftOver = null);
          }, i3.Utf8DecodeWorker = h, s.inherits(c, o), c.prototype.processChunk = function(t4) {
            this.push({ data: i3.utf8encode(t4.data), meta: t4.meta });
          }, i3.Utf8EncodeWorker = c;
        }, { "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./support": 30, "./utils": 32 }], 32: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./support"), n = t3("./base64"), r = t3("./nodejsUtils"), o = t3("./external");
          function a(t4) {
            return t4;
          }
          function l(t4, e4) {
            for (var i4 = 0; i4 < t4.length; ++i4) e4[i4] = 255 & t4.charCodeAt(i4);
            return e4;
          }
          t3("setimmediate"), i3.newBlob = function(t4, e4) {
            i3.checkSupport("blob");
            try {
              return new Blob([t4], { type: e4 });
            } catch (i4) {
              try {
                var s2 = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
                return s2.append(t4), s2.getBlob(e4);
              } catch (t5) {
                throw new Error("Bug : can't construct the Blob.");
              }
            }
          };
          var h = { stringifyByChunk: function(t4, e4, i4) {
            var s2 = [], n2 = 0, r2 = t4.length;
            if (r2 <= i4) return String.fromCharCode.apply(null, t4);
            for (; n2 < r2; ) "array" === e4 || "nodebuffer" === e4 ? s2.push(String.fromCharCode.apply(null, t4.slice(n2, Math.min(n2 + i4, r2)))) : s2.push(String.fromCharCode.apply(null, t4.subarray(n2, Math.min(n2 + i4, r2)))), n2 += i4;
            return s2.join("");
          }, stringifyByChar: function(t4) {
            for (var e4 = "", i4 = 0; i4 < t4.length; i4++) e4 += String.fromCharCode(t4[i4]);
            return e4;
          }, applyCanBeUsed: { uint8array: function() {
            try {
              return s.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;
            } catch (t4) {
              return false;
            }
          }(), nodebuffer: function() {
            try {
              return s.nodebuffer && 1 === String.fromCharCode.apply(null, r.allocBuffer(1)).length;
            } catch (t4) {
              return false;
            }
          }() } };
          function c(t4) {
            var e4 = 65536, s2 = i3.getTypeOf(t4), n2 = true;
            if ("uint8array" === s2 ? n2 = h.applyCanBeUsed.uint8array : "nodebuffer" === s2 && (n2 = h.applyCanBeUsed.nodebuffer), n2) for (; 1 < e4; ) try {
              return h.stringifyByChunk(t4, s2, e4);
            } catch (t5) {
              e4 = Math.floor(e4 / 2);
            }
            return h.stringifyByChar(t4);
          }
          function u(t4, e4) {
            for (var i4 = 0; i4 < t4.length; i4++) e4[i4] = t4[i4];
            return e4;
          }
          i3.applyFromCharCode = c;
          var d = {};
          d.string = { string: a, array: function(t4) {
            return l(t4, new Array(t4.length));
          }, arraybuffer: function(t4) {
            return d.string.uint8array(t4).buffer;
          }, uint8array: function(t4) {
            return l(t4, new Uint8Array(t4.length));
          }, nodebuffer: function(t4) {
            return l(t4, r.allocBuffer(t4.length));
          } }, d.array = { string: c, array: a, arraybuffer: function(t4) {
            return new Uint8Array(t4).buffer;
          }, uint8array: function(t4) {
            return new Uint8Array(t4);
          }, nodebuffer: function(t4) {
            return r.newBufferFrom(t4);
          } }, d.arraybuffer = { string: function(t4) {
            return c(new Uint8Array(t4));
          }, array: function(t4) {
            return u(new Uint8Array(t4), new Array(t4.byteLength));
          }, arraybuffer: a, uint8array: function(t4) {
            return new Uint8Array(t4);
          }, nodebuffer: function(t4) {
            return r.newBufferFrom(new Uint8Array(t4));
          } }, d.uint8array = { string: c, array: function(t4) {
            return u(t4, new Array(t4.length));
          }, arraybuffer: function(t4) {
            return t4.buffer;
          }, uint8array: a, nodebuffer: function(t4) {
            return r.newBufferFrom(t4);
          } }, d.nodebuffer = { string: c, array: function(t4) {
            return u(t4, new Array(t4.length));
          }, arraybuffer: function(t4) {
            return d.nodebuffer.uint8array(t4).buffer;
          }, uint8array: function(t4) {
            return u(t4, new Uint8Array(t4.length));
          }, nodebuffer: a }, i3.transformTo = function(t4, e4) {
            if (e4 = e4 || "", !t4) return e4;
            i3.checkSupport(t4);
            var s2 = i3.getTypeOf(e4);
            return d[s2][t4](e4);
          }, i3.resolve = function(t4) {
            for (var e4 = t4.split("/"), i4 = [], s2 = 0; s2 < e4.length; s2++) {
              var n2 = e4[s2];
              "." === n2 || "" === n2 && 0 !== s2 && s2 !== e4.length - 1 || (".." === n2 ? i4.pop() : i4.push(n2));
            }
            return i4.join("/");
          }, i3.getTypeOf = function(t4) {
            return "string" == typeof t4 ? "string" : "[object Array]" === Object.prototype.toString.call(t4) ? "array" : s.nodebuffer && r.isBuffer(t4) ? "nodebuffer" : s.uint8array && t4 instanceof Uint8Array ? "uint8array" : s.arraybuffer && t4 instanceof ArrayBuffer ? "arraybuffer" : void 0;
          }, i3.checkSupport = function(t4) {
            if (!s[t4.toLowerCase()]) throw new Error(t4 + " is not supported by this platform");
          }, i3.MAX_VALUE_16BITS = 65535, i3.MAX_VALUE_32BITS = -1, i3.pretty = function(t4) {
            var e4, i4, s2 = "";
            for (i4 = 0; i4 < (t4 || "").length; i4++) s2 += "\\x" + ((e4 = t4.charCodeAt(i4)) < 16 ? "0" : "") + e4.toString(16).toUpperCase();
            return s2;
          }, i3.delay = function(t4, e4, i4) {
            setImmediate(function() {
              t4.apply(i4 || null, e4 || []);
            });
          }, i3.inherits = function(t4, e4) {
            function i4() {
            }
            i4.prototype = e4.prototype, t4.prototype = new i4();
          }, i3.extend = function() {
            var t4, e4, i4 = {};
            for (t4 = 0; t4 < arguments.length; t4++) for (e4 in arguments[t4]) Object.prototype.hasOwnProperty.call(arguments[t4], e4) && void 0 === i4[e4] && (i4[e4] = arguments[t4][e4]);
            return i4;
          }, i3.prepareContent = function(t4, e4, r2, a2, h2) {
            return o.Promise.resolve(e4).then(function(t5) {
              return s.blob && (t5 instanceof Blob || -1 !== ["[object File]", "[object Blob]"].indexOf(Object.prototype.toString.call(t5))) && "undefined" != typeof FileReader ? new o.Promise(function(e5, i4) {
                var s2 = new FileReader();
                s2.onload = function(t6) {
                  e5(t6.target.result);
                }, s2.onerror = function(t6) {
                  i4(t6.target.error);
                }, s2.readAsArrayBuffer(t5);
              }) : t5;
            }).then(function(e5) {
              var c2 = i3.getTypeOf(e5);
              return c2 ? ("arraybuffer" === c2 ? e5 = i3.transformTo("uint8array", e5) : "string" === c2 && (h2 ? e5 = n.decode(e5) : r2 && true !== a2 && (e5 = function(t5) {
                return l(t5, s.uint8array ? new Uint8Array(t5.length) : new Array(t5.length));
              }(e5))), e5) : o.Promise.reject(new Error("Can't read the data of '" + t4 + "'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"));
            });
          };
        }, { "./base64": 1, "./external": 6, "./nodejsUtils": 14, "./support": 30, setimmediate: 54 }], 33: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./reader/readerFor"), n = t3("./utils"), r = t3("./signature"), o = t3("./zipEntry"), a = t3("./support");
          function l(t4) {
            this.files = [], this.loadOptions = t4;
          }
          l.prototype = { checkSignature: function(t4) {
            if (!this.reader.readAndCheckSignature(t4)) {
              this.reader.index -= 4;
              var e4 = this.reader.readString(4);
              throw new Error("Corrupted zip or bug: unexpected signature (" + n.pretty(e4) + ", expected " + n.pretty(t4) + ")");
            }
          }, isSignature: function(t4, e4) {
            var i4 = this.reader.index;
            this.reader.setIndex(t4);
            var s2 = this.reader.readString(4) === e4;
            return this.reader.setIndex(i4), s2;
          }, readBlockEndOfCentral: function() {
            this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);
            var t4 = this.reader.readData(this.zipCommentLength), e4 = a.uint8array ? "uint8array" : "array", i4 = n.transformTo(e4, t4);
            this.zipComment = this.loadOptions.decodeFileName(i4);
          }, readBlockZip64EndOfCentral: function() {
            this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};
            for (var t4, e4, i4, s2 = this.zip64EndOfCentralSize - 44; 0 < s2; ) t4 = this.reader.readInt(2), e4 = this.reader.readInt(4), i4 = this.reader.readData(e4), this.zip64ExtensibleData[t4] = { id: t4, length: e4, value: i4 };
          }, readBlockZip64EndOfCentralLocator: function() {
            if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount) throw new Error("Multi-volumes zip are not supported");
          }, readLocalFiles: function() {
            var t4, e4;
            for (t4 = 0; t4 < this.files.length; t4++) e4 = this.files[t4], this.reader.setIndex(e4.localHeaderOffset), this.checkSignature(r.LOCAL_FILE_HEADER), e4.readLocalPart(this.reader), e4.handleUTF8(), e4.processAttributes();
          }, readCentralDir: function() {
            var t4;
            for (this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(r.CENTRAL_FILE_HEADER); ) (t4 = new o({ zip64: this.zip64 }, this.loadOptions)).readCentralPart(this.reader), this.files.push(t4);
            if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length) throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
          }, readEndOfCentral: function() {
            var t4 = this.reader.lastIndexOfSignature(r.CENTRAL_DIRECTORY_END);
            if (t4 < 0) throw this.isSignature(0, r.LOCAL_FILE_HEADER) ? new Error("Corrupted zip: can't find end of central directory") : new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");
            this.reader.setIndex(t4);
            var e4 = t4;
            if (this.checkSignature(r.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === n.MAX_VALUE_16BITS || this.diskWithCentralDirStart === n.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === n.MAX_VALUE_16BITS || this.centralDirRecords === n.MAX_VALUE_16BITS || this.centralDirSize === n.MAX_VALUE_32BITS || this.centralDirOffset === n.MAX_VALUE_32BITS) {
              if (this.zip64 = true, (t4 = this.reader.lastIndexOfSignature(r.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");
              if (this.reader.setIndex(t4), this.checkSignature(r.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, r.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(r.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0)) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");
              this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(r.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();
            }
            var i4 = this.centralDirOffset + this.centralDirSize;
            this.zip64 && (i4 += 20, i4 += 12 + this.zip64EndOfCentralSize);
            var s2 = e4 - i4;
            if (0 < s2) this.isSignature(e4, r.CENTRAL_FILE_HEADER) || (this.reader.zero = s2);
            else if (s2 < 0) throw new Error("Corrupted zip: missing " + Math.abs(s2) + " bytes.");
          }, prepareReader: function(t4) {
            this.reader = s(t4);
          }, load: function(t4) {
            this.prepareReader(t4), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();
          } }, e3.exports = l;
        }, { "./reader/readerFor": 22, "./signature": 23, "./support": 30, "./utils": 32, "./zipEntry": 34 }], 34: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./reader/readerFor"), n = t3("./utils"), r = t3("./compressedObject"), o = t3("./crc32"), a = t3("./utf8"), l = t3("./compressions"), h = t3("./support");
          function c(t4, e4) {
            this.options = t4, this.loadOptions = e4;
          }
          c.prototype = { isEncrypted: function() {
            return !(1 & ~this.bitFlag);
          }, useUTF8: function() {
            return !(2048 & ~this.bitFlag);
          }, readLocalPart: function(t4) {
            var e4, i4;
            if (t4.skip(22), this.fileNameLength = t4.readInt(2), i4 = t4.readInt(2), this.fileName = t4.readData(this.fileNameLength), t4.skip(i4), -1 === this.compressedSize || -1 === this.uncompressedSize) throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");
            if (null === (e4 = function(t5) {
              for (var e5 in l) if (Object.prototype.hasOwnProperty.call(l, e5) && l[e5].magic === t5) return l[e5];
              return null;
            }(this.compressionMethod))) throw new Error("Corrupted zip : compression " + n.pretty(this.compressionMethod) + " unknown (inner file : " + n.transformTo("string", this.fileName) + ")");
            this.decompressed = new r(this.compressedSize, this.uncompressedSize, this.crc32, e4, t4.readData(this.compressedSize));
          }, readCentralPart: function(t4) {
            this.versionMadeBy = t4.readInt(2), t4.skip(2), this.bitFlag = t4.readInt(2), this.compressionMethod = t4.readString(2), this.date = t4.readDate(), this.crc32 = t4.readInt(4), this.compressedSize = t4.readInt(4), this.uncompressedSize = t4.readInt(4);
            var e4 = t4.readInt(2);
            if (this.extraFieldsLength = t4.readInt(2), this.fileCommentLength = t4.readInt(2), this.diskNumberStart = t4.readInt(2), this.internalFileAttributes = t4.readInt(2), this.externalFileAttributes = t4.readInt(4), this.localHeaderOffset = t4.readInt(4), this.isEncrypted()) throw new Error("Encrypted zip are not supported");
            t4.skip(e4), this.readExtraFields(t4), this.parseZIP64ExtraField(t4), this.fileComment = t4.readData(this.fileCommentLength);
          }, processAttributes: function() {
            this.unixPermissions = null, this.dosPermissions = null;
            var t4 = this.versionMadeBy >> 8;
            this.dir = !!(16 & this.externalFileAttributes), 0 == t4 && (this.dosPermissions = 63 & this.externalFileAttributes), 3 == t4 && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || "/" !== this.fileNameStr.slice(-1) || (this.dir = true);
          }, parseZIP64ExtraField: function() {
            if (this.extraFields[1]) {
              var t4 = s(this.extraFields[1].value);
              this.uncompressedSize === n.MAX_VALUE_32BITS && (this.uncompressedSize = t4.readInt(8)), this.compressedSize === n.MAX_VALUE_32BITS && (this.compressedSize = t4.readInt(8)), this.localHeaderOffset === n.MAX_VALUE_32BITS && (this.localHeaderOffset = t4.readInt(8)), this.diskNumberStart === n.MAX_VALUE_32BITS && (this.diskNumberStart = t4.readInt(4));
            }
          }, readExtraFields: function(t4) {
            var e4, i4, s2, n2 = t4.index + this.extraFieldsLength;
            for (this.extraFields || (this.extraFields = {}); t4.index + 4 < n2; ) e4 = t4.readInt(2), i4 = t4.readInt(2), s2 = t4.readData(i4), this.extraFields[e4] = { id: e4, length: i4, value: s2 };
            t4.setIndex(n2);
          }, handleUTF8: function() {
            var t4 = h.uint8array ? "uint8array" : "array";
            if (this.useUTF8()) this.fileNameStr = a.utf8decode(this.fileName), this.fileCommentStr = a.utf8decode(this.fileComment);
            else {
              var e4 = this.findExtraFieldUnicodePath();
              if (null !== e4) this.fileNameStr = e4;
              else {
                var i4 = n.transformTo(t4, this.fileName);
                this.fileNameStr = this.loadOptions.decodeFileName(i4);
              }
              var s2 = this.findExtraFieldUnicodeComment();
              if (null !== s2) this.fileCommentStr = s2;
              else {
                var r2 = n.transformTo(t4, this.fileComment);
                this.fileCommentStr = this.loadOptions.decodeFileName(r2);
              }
            }
          }, findExtraFieldUnicodePath: function() {
            var t4 = this.extraFields[28789];
            if (t4) {
              var e4 = s(t4.value);
              return 1 !== e4.readInt(1) || o(this.fileName) !== e4.readInt(4) ? null : a.utf8decode(e4.readData(t4.length - 5));
            }
            return null;
          }, findExtraFieldUnicodeComment: function() {
            var t4 = this.extraFields[25461];
            if (t4) {
              var e4 = s(t4.value);
              return 1 !== e4.readInt(1) || o(this.fileComment) !== e4.readInt(4) ? null : a.utf8decode(e4.readData(t4.length - 5));
            }
            return null;
          } }, e3.exports = c;
        }, { "./compressedObject": 2, "./compressions": 3, "./crc32": 4, "./reader/readerFor": 22, "./support": 30, "./utf8": 31, "./utils": 32 }], 35: [function(t3, e3, i3) {
          "use strict";
          function s(t4, e4, i4) {
            this.name = t4, this.dir = i4.dir, this.date = i4.date, this.comment = i4.comment, this.unixPermissions = i4.unixPermissions, this.dosPermissions = i4.dosPermissions, this._data = e4, this._dataBinary = i4.binary, this.options = { compression: i4.compression, compressionOptions: i4.compressionOptions };
          }
          var n = t3("./stream/StreamHelper"), r = t3("./stream/DataWorker"), o = t3("./utf8"), a = t3("./compressedObject"), l = t3("./stream/GenericWorker");
          s.prototype = { internalStream: function(t4) {
            var e4 = null, i4 = "string";
            try {
              if (!t4) throw new Error("No output type specified.");
              var s2 = "string" === (i4 = t4.toLowerCase()) || "text" === i4;
              "binarystring" !== i4 && "text" !== i4 || (i4 = "string"), e4 = this._decompressWorker();
              var r2 = !this._dataBinary;
              r2 && !s2 && (e4 = e4.pipe(new o.Utf8EncodeWorker())), !r2 && s2 && (e4 = e4.pipe(new o.Utf8DecodeWorker()));
            } catch (t5) {
              (e4 = new l("error")).error(t5);
            }
            return new n(e4, i4, "");
          }, async: function(t4, e4) {
            return this.internalStream(t4).accumulate(e4);
          }, nodeStream: function(t4, e4) {
            return this.internalStream(t4 || "nodebuffer").toNodejsStream(e4);
          }, _compressWorker: function(t4, e4) {
            if (this._data instanceof a && this._data.compression.magic === t4.magic) return this._data.getCompressedWorker();
            var i4 = this._decompressWorker();
            return this._dataBinary || (i4 = i4.pipe(new o.Utf8EncodeWorker())), a.createWorkerFrom(i4, t4, e4);
          }, _decompressWorker: function() {
            return this._data instanceof a ? this._data.getContentWorker() : this._data instanceof l ? this._data : new r(this._data);
          } };
          for (var h = ["asText", "asBinary", "asNodeBuffer", "asUint8Array", "asArrayBuffer"], c = function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, u = 0; u < h.length; u++) s.prototype[h[u]] = c;
          e3.exports = s;
        }, { "./compressedObject": 2, "./stream/DataWorker": 27, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31 }], 36: [function(t3, e3, s) {
          (function(t4) {
            "use strict";
            var i3, s2, n = t4.MutationObserver || t4.WebKitMutationObserver;
            if (n) {
              var r = 0, o = new n(c), a = t4.document.createTextNode("");
              o.observe(a, { characterData: true }), i3 = function() {
                a.data = r = ++r % 2;
              };
            } else if (t4.setImmediate || void 0 === t4.MessageChannel) i3 = "document" in t4 && "onreadystatechange" in t4.document.createElement("script") ? function() {
              var e4 = t4.document.createElement("script");
              e4.onreadystatechange = function() {
                c(), e4.onreadystatechange = null, e4.parentNode.removeChild(e4), e4 = null;
              }, t4.document.documentElement.appendChild(e4);
            } : function() {
              setTimeout(c, 0);
            };
            else {
              var l = new t4.MessageChannel();
              l.port1.onmessage = c, i3 = function() {
                l.port2.postMessage(0);
              };
            }
            var h = [];
            function c() {
              var t5, e4;
              s2 = true;
              for (var i4 = h.length; i4; ) {
                for (e4 = h, h = [], t5 = -1; ++t5 < i4; ) e4[t5]();
                i4 = h.length;
              }
              s2 = false;
            }
            e3.exports = function(t5) {
              1 !== h.push(t5) || s2 || i3();
            };
          }).call(this, void 0 !== i2.g ? i2.g : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
        }, {}], 37: [function(t3, e3, i3) {
          "use strict";
          var s = t3("immediate");
          function n() {
          }
          var r = {}, o = ["REJECTED"], a = ["FULFILLED"], l = ["PENDING"];
          function h(t4) {
            if ("function" != typeof t4) throw new TypeError("resolver must be a function");
            this.state = l, this.queue = [], this.outcome = void 0, t4 !== n && f(this, t4);
          }
          function c(t4, e4, i4) {
            this.promise = t4, "function" == typeof e4 && (this.onFulfilled = e4, this.callFulfilled = this.otherCallFulfilled), "function" == typeof i4 && (this.onRejected = i4, this.callRejected = this.otherCallRejected);
          }
          function u(t4, e4, i4) {
            s(function() {
              var s2;
              try {
                s2 = e4(i4);
              } catch (s3) {
                return r.reject(t4, s3);
              }
              s2 === t4 ? r.reject(t4, new TypeError("Cannot resolve promise with itself")) : r.resolve(t4, s2);
            });
          }
          function d(t4) {
            var e4 = t4 && t4.then;
            if (t4 && ("object" == typeof t4 || "function" == typeof t4) && "function" == typeof e4) return function() {
              e4.apply(t4, arguments);
            };
          }
          function f(t4, e4) {
            var i4 = false;
            function s2(e5) {
              i4 || (i4 = true, r.reject(t4, e5));
            }
            function n2(e5) {
              i4 || (i4 = true, r.resolve(t4, e5));
            }
            var o2 = m(function() {
              e4(n2, s2);
            });
            "error" === o2.status && s2(o2.value);
          }
          function m(t4, e4) {
            var i4 = {};
            try {
              i4.value = t4(e4), i4.status = "success";
            } catch (t5) {
              i4.status = "error", i4.value = t5;
            }
            return i4;
          }
          (e3.exports = h).prototype.finally = function(t4) {
            if ("function" != typeof t4) return this;
            var e4 = this.constructor;
            return this.then(function(i4) {
              return e4.resolve(t4()).then(function() {
                return i4;
              });
            }, function(i4) {
              return e4.resolve(t4()).then(function() {
                throw i4;
              });
            });
          }, h.prototype.catch = function(t4) {
            return this.then(null, t4);
          }, h.prototype.then = function(t4, e4) {
            if ("function" != typeof t4 && this.state === a || "function" != typeof e4 && this.state === o) return this;
            var i4 = new this.constructor(n);
            return this.state !== l ? u(i4, this.state === a ? t4 : e4, this.outcome) : this.queue.push(new c(i4, t4, e4)), i4;
          }, c.prototype.callFulfilled = function(t4) {
            r.resolve(this.promise, t4);
          }, c.prototype.otherCallFulfilled = function(t4) {
            u(this.promise, this.onFulfilled, t4);
          }, c.prototype.callRejected = function(t4) {
            r.reject(this.promise, t4);
          }, c.prototype.otherCallRejected = function(t4) {
            u(this.promise, this.onRejected, t4);
          }, r.resolve = function(t4, e4) {
            var i4 = m(d, e4);
            if ("error" === i4.status) return r.reject(t4, i4.value);
            var s2 = i4.value;
            if (s2) f(t4, s2);
            else {
              t4.state = a, t4.outcome = e4;
              for (var n2 = -1, o2 = t4.queue.length; ++n2 < o2; ) t4.queue[n2].callFulfilled(e4);
            }
            return t4;
          }, r.reject = function(t4, e4) {
            t4.state = o, t4.outcome = e4;
            for (var i4 = -1, s2 = t4.queue.length; ++i4 < s2; ) t4.queue[i4].callRejected(e4);
            return t4;
          }, h.resolve = function(t4) {
            return t4 instanceof this ? t4 : r.resolve(new this(n), t4);
          }, h.reject = function(t4) {
            var e4 = new this(n);
            return r.reject(e4, t4);
          }, h.all = function(t4) {
            var e4 = this;
            if ("[object Array]" !== Object.prototype.toString.call(t4)) return this.reject(new TypeError("must be an array"));
            var i4 = t4.length, s2 = false;
            if (!i4) return this.resolve([]);
            for (var o2 = new Array(i4), a2 = 0, l2 = -1, h2 = new this(n); ++l2 < i4; ) c2(t4[l2], l2);
            return h2;
            function c2(t5, n2) {
              e4.resolve(t5).then(function(t6) {
                o2[n2] = t6, ++a2 !== i4 || s2 || (s2 = true, r.resolve(h2, o2));
              }, function(t6) {
                s2 || (s2 = true, r.reject(h2, t6));
              });
            }
          }, h.race = function(t4) {
            if ("[object Array]" !== Object.prototype.toString.call(t4)) return this.reject(new TypeError("must be an array"));
            var e4 = t4.length, i4 = false;
            if (!e4) return this.resolve([]);
            for (var s2, o2 = -1, a2 = new this(n); ++o2 < e4; ) s2 = t4[o2], this.resolve(s2).then(function(t5) {
              i4 || (i4 = true, r.resolve(a2, t5));
            }, function(t5) {
              i4 || (i4 = true, r.reject(a2, t5));
            });
            return a2;
          };
        }, { immediate: 36 }], 38: [function(t3, e3, i3) {
          "use strict";
          var s = {};
          (0, t3("./lib/utils/common").assign)(s, t3("./lib/deflate"), t3("./lib/inflate"), t3("./lib/zlib/constants")), e3.exports = s;
        }, { "./lib/deflate": 39, "./lib/inflate": 40, "./lib/utils/common": 41, "./lib/zlib/constants": 44 }], 39: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./zlib/deflate"), n = t3("./utils/common"), r = t3("./utils/strings"), o = t3("./zlib/messages"), a = t3("./zlib/zstream"), l = Object.prototype.toString;
          function h(t4) {
            if (!(this instanceof h)) return new h(t4);
            this.options = n.assign({ level: -1, method: 8, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: 0, to: "" }, t4 || {});
            var e4 = this.options;
            e4.raw && 0 < e4.windowBits ? e4.windowBits = -e4.windowBits : e4.gzip && 0 < e4.windowBits && e4.windowBits < 16 && (e4.windowBits += 16), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new a(), this.strm.avail_out = 0;
            var i4 = s.deflateInit2(this.strm, e4.level, e4.method, e4.windowBits, e4.memLevel, e4.strategy);
            if (0 !== i4) throw new Error(o[i4]);
            if (e4.header && s.deflateSetHeader(this.strm, e4.header), e4.dictionary) {
              var c2;
              if (c2 = "string" == typeof e4.dictionary ? r.string2buf(e4.dictionary) : "[object ArrayBuffer]" === l.call(e4.dictionary) ? new Uint8Array(e4.dictionary) : e4.dictionary, 0 !== (i4 = s.deflateSetDictionary(this.strm, c2))) throw new Error(o[i4]);
              this._dict_set = true;
            }
          }
          function c(t4, e4) {
            var i4 = new h(e4);
            if (i4.push(t4, true), i4.err) throw i4.msg || o[i4.err];
            return i4.result;
          }
          h.prototype.push = function(t4, e4) {
            var i4, o2, a2 = this.strm, h2 = this.options.chunkSize;
            if (this.ended) return false;
            o2 = e4 === ~~e4 ? e4 : true === e4 ? 4 : 0, "string" == typeof t4 ? a2.input = r.string2buf(t4) : "[object ArrayBuffer]" === l.call(t4) ? a2.input = new Uint8Array(t4) : a2.input = t4, a2.next_in = 0, a2.avail_in = a2.input.length;
            do {
              if (0 === a2.avail_out && (a2.output = new n.Buf8(h2), a2.next_out = 0, a2.avail_out = h2), 1 !== (i4 = s.deflate(a2, o2)) && 0 !== i4) return this.onEnd(i4), !(this.ended = true);
              0 !== a2.avail_out && (0 !== a2.avail_in || 4 !== o2 && 2 !== o2) || ("string" === this.options.to ? this.onData(r.buf2binstring(n.shrinkBuf(a2.output, a2.next_out))) : this.onData(n.shrinkBuf(a2.output, a2.next_out)));
            } while ((0 < a2.avail_in || 0 === a2.avail_out) && 1 !== i4);
            return 4 === o2 ? (i4 = s.deflateEnd(this.strm), this.onEnd(i4), this.ended = true, 0 === i4) : 2 !== o2 || (this.onEnd(0), !(a2.avail_out = 0));
          }, h.prototype.onData = function(t4) {
            this.chunks.push(t4);
          }, h.prototype.onEnd = function(t4) {
            0 === t4 && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = n.flattenChunks(this.chunks)), this.chunks = [], this.err = t4, this.msg = this.strm.msg;
          }, i3.Deflate = h, i3.deflate = c, i3.deflateRaw = function(t4, e4) {
            return (e4 = e4 || {}).raw = true, c(t4, e4);
          }, i3.gzip = function(t4, e4) {
            return (e4 = e4 || {}).gzip = true, c(t4, e4);
          };
        }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/deflate": 46, "./zlib/messages": 51, "./zlib/zstream": 53 }], 40: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./zlib/inflate"), n = t3("./utils/common"), r = t3("./utils/strings"), o = t3("./zlib/constants"), a = t3("./zlib/messages"), l = t3("./zlib/zstream"), h = t3("./zlib/gzheader"), c = Object.prototype.toString;
          function u(t4) {
            if (!(this instanceof u)) return new u(t4);
            this.options = n.assign({ chunkSize: 16384, windowBits: 0, to: "" }, t4 || {});
            var e4 = this.options;
            e4.raw && 0 <= e4.windowBits && e4.windowBits < 16 && (e4.windowBits = -e4.windowBits, 0 === e4.windowBits && (e4.windowBits = -15)), !(0 <= e4.windowBits && e4.windowBits < 16) || t4 && t4.windowBits || (e4.windowBits += 32), 15 < e4.windowBits && e4.windowBits < 48 && !(15 & e4.windowBits) && (e4.windowBits |= 15), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new l(), this.strm.avail_out = 0;
            var i4 = s.inflateInit2(this.strm, e4.windowBits);
            if (i4 !== o.Z_OK) throw new Error(a[i4]);
            this.header = new h(), s.inflateGetHeader(this.strm, this.header);
          }
          function d(t4, e4) {
            var i4 = new u(e4);
            if (i4.push(t4, true), i4.err) throw i4.msg || a[i4.err];
            return i4.result;
          }
          u.prototype.push = function(t4, e4) {
            var i4, a2, l2, h2, u2, d2, f = this.strm, m = this.options.chunkSize, p = this.options.dictionary, g = false;
            if (this.ended) return false;
            a2 = e4 === ~~e4 ? e4 : true === e4 ? o.Z_FINISH : o.Z_NO_FLUSH, "string" == typeof t4 ? f.input = r.binstring2buf(t4) : "[object ArrayBuffer]" === c.call(t4) ? f.input = new Uint8Array(t4) : f.input = t4, f.next_in = 0, f.avail_in = f.input.length;
            do {
              if (0 === f.avail_out && (f.output = new n.Buf8(m), f.next_out = 0, f.avail_out = m), (i4 = s.inflate(f, o.Z_NO_FLUSH)) === o.Z_NEED_DICT && p && (d2 = "string" == typeof p ? r.string2buf(p) : "[object ArrayBuffer]" === c.call(p) ? new Uint8Array(p) : p, i4 = s.inflateSetDictionary(this.strm, d2)), i4 === o.Z_BUF_ERROR && true === g && (i4 = o.Z_OK, g = false), i4 !== o.Z_STREAM_END && i4 !== o.Z_OK) return this.onEnd(i4), !(this.ended = true);
              f.next_out && (0 !== f.avail_out && i4 !== o.Z_STREAM_END && (0 !== f.avail_in || a2 !== o.Z_FINISH && a2 !== o.Z_SYNC_FLUSH) || ("string" === this.options.to ? (l2 = r.utf8border(f.output, f.next_out), h2 = f.next_out - l2, u2 = r.buf2string(f.output, l2), f.next_out = h2, f.avail_out = m - h2, h2 && n.arraySet(f.output, f.output, l2, h2, 0), this.onData(u2)) : this.onData(n.shrinkBuf(f.output, f.next_out)))), 0 === f.avail_in && 0 === f.avail_out && (g = true);
            } while ((0 < f.avail_in || 0 === f.avail_out) && i4 !== o.Z_STREAM_END);
            return i4 === o.Z_STREAM_END && (a2 = o.Z_FINISH), a2 === o.Z_FINISH ? (i4 = s.inflateEnd(this.strm), this.onEnd(i4), this.ended = true, i4 === o.Z_OK) : a2 !== o.Z_SYNC_FLUSH || (this.onEnd(o.Z_OK), !(f.avail_out = 0));
          }, u.prototype.onData = function(t4) {
            this.chunks.push(t4);
          }, u.prototype.onEnd = function(t4) {
            t4 === o.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = n.flattenChunks(this.chunks)), this.chunks = [], this.err = t4, this.msg = this.strm.msg;
          }, i3.Inflate = u, i3.inflate = d, i3.inflateRaw = function(t4, e4) {
            return (e4 = e4 || {}).raw = true, d(t4, e4);
          }, i3.ungzip = d;
        }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/constants": 44, "./zlib/gzheader": 47, "./zlib/inflate": 49, "./zlib/messages": 51, "./zlib/zstream": 53 }], 41: [function(t3, e3, i3) {
          "use strict";
          var s = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
          i3.assign = function(t4) {
            for (var e4 = Array.prototype.slice.call(arguments, 1); e4.length; ) {
              var i4 = e4.shift();
              if (i4) {
                if ("object" != typeof i4) throw new TypeError(i4 + "must be non-object");
                for (var s2 in i4) i4.hasOwnProperty(s2) && (t4[s2] = i4[s2]);
              }
            }
            return t4;
          }, i3.shrinkBuf = function(t4, e4) {
            return t4.length === e4 ? t4 : t4.subarray ? t4.subarray(0, e4) : (t4.length = e4, t4);
          };
          var n = { arraySet: function(t4, e4, i4, s2, n2) {
            if (e4.subarray && t4.subarray) t4.set(e4.subarray(i4, i4 + s2), n2);
            else for (var r2 = 0; r2 < s2; r2++) t4[n2 + r2] = e4[i4 + r2];
          }, flattenChunks: function(t4) {
            var e4, i4, s2, n2, r2, o;
            for (e4 = s2 = 0, i4 = t4.length; e4 < i4; e4++) s2 += t4[e4].length;
            for (o = new Uint8Array(s2), e4 = n2 = 0, i4 = t4.length; e4 < i4; e4++) r2 = t4[e4], o.set(r2, n2), n2 += r2.length;
            return o;
          } }, r = { arraySet: function(t4, e4, i4, s2, n2) {
            for (var r2 = 0; r2 < s2; r2++) t4[n2 + r2] = e4[i4 + r2];
          }, flattenChunks: function(t4) {
            return [].concat.apply([], t4);
          } };
          i3.setTyped = function(t4) {
            t4 ? (i3.Buf8 = Uint8Array, i3.Buf16 = Uint16Array, i3.Buf32 = Int32Array, i3.assign(i3, n)) : (i3.Buf8 = Array, i3.Buf16 = Array, i3.Buf32 = Array, i3.assign(i3, r));
          }, i3.setTyped(s);
        }, {}], 42: [function(t3, e3, i3) {
          "use strict";
          var s = t3("./common"), n = true, r = true;
          try {
            String.fromCharCode.apply(null, [0]);
          } catch (t4) {
            n = false;
          }
          try {
            String.fromCharCode.apply(null, new Uint8Array(1));
          } catch (t4) {
            r = false;
          }
          for (var o = new s.Buf8(256), a = 0; a < 256; a++) o[a] = 252 <= a ? 6 : 248 <= a ? 5 : 240 <= a ? 4 : 224 <= a ? 3 : 192 <= a ? 2 : 1;
          function l(t4, e4) {
            if (e4 < 65537 && (t4.subarray && r || !t4.subarray && n)) return String.fromCharCode.apply(null, s.shrinkBuf(t4, e4));
            for (var i4 = "", o2 = 0; o2 < e4; o2++) i4 += String.fromCharCode(t4[o2]);
            return i4;
          }
          o[254] = o[254] = 1, i3.string2buf = function(t4) {
            var e4, i4, n2, r2, o2, a2 = t4.length, l2 = 0;
            for (r2 = 0; r2 < a2; r2++) 55296 == (64512 & (i4 = t4.charCodeAt(r2))) && r2 + 1 < a2 && 56320 == (64512 & (n2 = t4.charCodeAt(r2 + 1))) && (i4 = 65536 + (i4 - 55296 << 10) + (n2 - 56320), r2++), l2 += i4 < 128 ? 1 : i4 < 2048 ? 2 : i4 < 65536 ? 3 : 4;
            for (e4 = new s.Buf8(l2), r2 = o2 = 0; o2 < l2; r2++) 55296 == (64512 & (i4 = t4.charCodeAt(r2))) && r2 + 1 < a2 && 56320 == (64512 & (n2 = t4.charCodeAt(r2 + 1))) && (i4 = 65536 + (i4 - 55296 << 10) + (n2 - 56320), r2++), i4 < 128 ? e4[o2++] = i4 : (i4 < 2048 ? e4[o2++] = 192 | i4 >>> 6 : (i4 < 65536 ? e4[o2++] = 224 | i4 >>> 12 : (e4[o2++] = 240 | i4 >>> 18, e4[o2++] = 128 | i4 >>> 12 & 63), e4[o2++] = 128 | i4 >>> 6 & 63), e4[o2++] = 128 | 63 & i4);
            return e4;
          }, i3.buf2binstring = function(t4) {
            return l(t4, t4.length);
          }, i3.binstring2buf = function(t4) {
            for (var e4 = new s.Buf8(t4.length), i4 = 0, n2 = e4.length; i4 < n2; i4++) e4[i4] = t4.charCodeAt(i4);
            return e4;
          }, i3.buf2string = function(t4, e4) {
            var i4, s2, n2, r2, a2 = e4 || t4.length, h = new Array(2 * a2);
            for (i4 = s2 = 0; i4 < a2; ) if ((n2 = t4[i4++]) < 128) h[s2++] = n2;
            else if (4 < (r2 = o[n2])) h[s2++] = 65533, i4 += r2 - 1;
            else {
              for (n2 &= 2 === r2 ? 31 : 3 === r2 ? 15 : 7; 1 < r2 && i4 < a2; ) n2 = n2 << 6 | 63 & t4[i4++], r2--;
              1 < r2 ? h[s2++] = 65533 : n2 < 65536 ? h[s2++] = n2 : (n2 -= 65536, h[s2++] = 55296 | n2 >> 10 & 1023, h[s2++] = 56320 | 1023 & n2);
            }
            return l(h, s2);
          }, i3.utf8border = function(t4, e4) {
            var i4;
            for ((e4 = e4 || t4.length) > t4.length && (e4 = t4.length), i4 = e4 - 1; 0 <= i4 && 128 == (192 & t4[i4]); ) i4--;
            return i4 < 0 || 0 === i4 ? e4 : i4 + o[t4[i4]] > e4 ? i4 : e4;
          };
        }, { "./common": 41 }], 43: [function(t3, e3, i3) {
          "use strict";
          e3.exports = function(t4, e4, i4, s) {
            for (var n = 65535 & t4, r = t4 >>> 16 & 65535, o = 0; 0 !== i4; ) {
              for (i4 -= o = 2e3 < i4 ? 2e3 : i4; r = r + (n = n + e4[s++] | 0) | 0, --o; ) ;
              n %= 65521, r %= 65521;
            }
            return n | r << 16;
          };
        }, {}], 44: [function(t3, e3, i3) {
          "use strict";
          e3.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
        }, {}], 45: [function(t3, e3, i3) {
          "use strict";
          var s = function() {
            for (var t4, e4 = [], i4 = 0; i4 < 256; i4++) {
              t4 = i4;
              for (var s2 = 0; s2 < 8; s2++) t4 = 1 & t4 ? 3988292384 ^ t4 >>> 1 : t4 >>> 1;
              e4[i4] = t4;
            }
            return e4;
          }();
          e3.exports = function(t4, e4, i4, n) {
            var r = s, o = n + i4;
            t4 ^= -1;
            for (var a = n; a < o; a++) t4 = t4 >>> 8 ^ r[255 & (t4 ^ e4[a])];
            return ~t4;
          };
        }, {}], 46: [function(t3, e3, i3) {
          "use strict";
          var s, n = t3("../utils/common"), r = t3("./trees"), o = t3("./adler32"), a = t3("./crc32"), l = t3("./messages"), h = -2, c = 258, u = 262, d = 113;
          function f(t4, e4) {
            return t4.msg = l[e4], e4;
          }
          function m(t4) {
            return (t4 << 1) - (4 < t4 ? 9 : 0);
          }
          function p(t4) {
            for (var e4 = t4.length; 0 <= --e4; ) t4[e4] = 0;
          }
          function g(t4) {
            var e4 = t4.state, i4 = e4.pending;
            i4 > t4.avail_out && (i4 = t4.avail_out), 0 !== i4 && (n.arraySet(t4.output, e4.pending_buf, e4.pending_out, i4, t4.next_out), t4.next_out += i4, e4.pending_out += i4, t4.total_out += i4, t4.avail_out -= i4, e4.pending -= i4, 0 === e4.pending && (e4.pending_out = 0));
          }
          function b(t4, e4) {
            r._tr_flush_block(t4, 0 <= t4.block_start ? t4.block_start : -1, t4.strstart - t4.block_start, e4), t4.block_start = t4.strstart, g(t4.strm);
          }
          function S(t4, e4) {
            t4.pending_buf[t4.pending++] = e4;
          }
          function y(t4, e4) {
            t4.pending_buf[t4.pending++] = e4 >>> 8 & 255, t4.pending_buf[t4.pending++] = 255 & e4;
          }
          function E(t4, e4) {
            var i4, s2, n2 = t4.max_chain_length, r2 = t4.strstart, o2 = t4.prev_length, a2 = t4.nice_match, l2 = t4.strstart > t4.w_size - u ? t4.strstart - (t4.w_size - u) : 0, h2 = t4.window, d2 = t4.w_mask, f2 = t4.prev, m2 = t4.strstart + c, p2 = h2[r2 + o2 - 1], g2 = h2[r2 + o2];
            t4.prev_length >= t4.good_match && (n2 >>= 2), a2 > t4.lookahead && (a2 = t4.lookahead);
            do {
              if (h2[(i4 = e4) + o2] === g2 && h2[i4 + o2 - 1] === p2 && h2[i4] === h2[r2] && h2[++i4] === h2[r2 + 1]) {
                r2 += 2, i4++;
                do {
                } while (h2[++r2] === h2[++i4] && h2[++r2] === h2[++i4] && h2[++r2] === h2[++i4] && h2[++r2] === h2[++i4] && h2[++r2] === h2[++i4] && h2[++r2] === h2[++i4] && h2[++r2] === h2[++i4] && h2[++r2] === h2[++i4] && r2 < m2);
                if (s2 = c - (m2 - r2), r2 = m2 - c, o2 < s2) {
                  if (t4.match_start = e4, a2 <= (o2 = s2)) break;
                  p2 = h2[r2 + o2 - 1], g2 = h2[r2 + o2];
                }
              }
            } while ((e4 = f2[e4 & d2]) > l2 && 0 != --n2);
            return o2 <= t4.lookahead ? o2 : t4.lookahead;
          }
          function x(t4) {
            var e4, i4, s2, r2, l2, h2, c2, d2, f2, m2, p2 = t4.w_size;
            do {
              if (r2 = t4.window_size - t4.lookahead - t4.strstart, t4.strstart >= p2 + (p2 - u)) {
                for (n.arraySet(t4.window, t4.window, p2, p2, 0), t4.match_start -= p2, t4.strstart -= p2, t4.block_start -= p2, e4 = i4 = t4.hash_size; s2 = t4.head[--e4], t4.head[e4] = p2 <= s2 ? s2 - p2 : 0, --i4; ) ;
                for (e4 = i4 = p2; s2 = t4.prev[--e4], t4.prev[e4] = p2 <= s2 ? s2 - p2 : 0, --i4; ) ;
                r2 += p2;
              }
              if (0 === t4.strm.avail_in) break;
              if (h2 = t4.strm, c2 = t4.window, d2 = t4.strstart + t4.lookahead, m2 = void 0, (f2 = r2) < (m2 = h2.avail_in) && (m2 = f2), i4 = 0 === m2 ? 0 : (h2.avail_in -= m2, n.arraySet(c2, h2.input, h2.next_in, m2, d2), 1 === h2.state.wrap ? h2.adler = o(h2.adler, c2, m2, d2) : 2 === h2.state.wrap && (h2.adler = a(h2.adler, c2, m2, d2)), h2.next_in += m2, h2.total_in += m2, m2), t4.lookahead += i4, t4.lookahead + t4.insert >= 3) for (l2 = t4.strstart - t4.insert, t4.ins_h = t4.window[l2], t4.ins_h = (t4.ins_h << t4.hash_shift ^ t4.window[l2 + 1]) & t4.hash_mask; t4.insert && (t4.ins_h = (t4.ins_h << t4.hash_shift ^ t4.window[l2 + 3 - 1]) & t4.hash_mask, t4.prev[l2 & t4.w_mask] = t4.head[t4.ins_h], t4.head[t4.ins_h] = l2, l2++, t4.insert--, !(t4.lookahead + t4.insert < 3)); ) ;
            } while (t4.lookahead < u && 0 !== t4.strm.avail_in);
          }
          function v(t4, e4) {
            for (var i4, s2; ; ) {
              if (t4.lookahead < u) {
                if (x(t4), t4.lookahead < u && 0 === e4) return 1;
                if (0 === t4.lookahead) break;
              }
              if (i4 = 0, t4.lookahead >= 3 && (t4.ins_h = (t4.ins_h << t4.hash_shift ^ t4.window[t4.strstart + 3 - 1]) & t4.hash_mask, i4 = t4.prev[t4.strstart & t4.w_mask] = t4.head[t4.ins_h], t4.head[t4.ins_h] = t4.strstart), 0 !== i4 && t4.strstart - i4 <= t4.w_size - u && (t4.match_length = E(t4, i4)), t4.match_length >= 3) if (s2 = r._tr_tally(t4, t4.strstart - t4.match_start, t4.match_length - 3), t4.lookahead -= t4.match_length, t4.match_length <= t4.max_lazy_match && t4.lookahead >= 3) {
                for (t4.match_length--; t4.strstart++, t4.ins_h = (t4.ins_h << t4.hash_shift ^ t4.window[t4.strstart + 3 - 1]) & t4.hash_mask, i4 = t4.prev[t4.strstart & t4.w_mask] = t4.head[t4.ins_h], t4.head[t4.ins_h] = t4.strstart, 0 != --t4.match_length; ) ;
                t4.strstart++;
              } else t4.strstart += t4.match_length, t4.match_length = 0, t4.ins_h = t4.window[t4.strstart], t4.ins_h = (t4.ins_h << t4.hash_shift ^ t4.window[t4.strstart + 1]) & t4.hash_mask;
              else s2 = r._tr_tally(t4, 0, t4.window[t4.strstart]), t4.lookahead--, t4.strstart++;
              if (s2 && (b(t4, false), 0 === t4.strm.avail_out)) return 1;
            }
            return t4.insert = t4.strstart < 2 ? t4.strstart : 2, 4 === e4 ? (b(t4, true), 0 === t4.strm.avail_out ? 3 : 4) : t4.last_lit && (b(t4, false), 0 === t4.strm.avail_out) ? 1 : 2;
          }
          function _(t4, e4) {
            for (var i4, s2, n2; ; ) {
              if (t4.lookahead < u) {
                if (x(t4), t4.lookahead < u && 0 === e4) return 1;
                if (0 === t4.lookahead) break;
              }
              if (i4 = 0, t4.lookahead >= 3 && (t4.ins_h = (t4.ins_h << t4.hash_shift ^ t4.window[t4.strstart + 3 - 1]) & t4.hash_mask, i4 = t4.prev[t4.strstart & t4.w_mask] = t4.head[t4.ins_h], t4.head[t4.ins_h] = t4.strstart), t4.prev_length = t4.match_length, t4.prev_match = t4.match_start, t4.match_length = 2, 0 !== i4 && t4.prev_length < t4.max_lazy_match && t4.strstart - i4 <= t4.w_size - u && (t4.match_length = E(t4, i4), t4.match_length <= 5 && (1 === t4.strategy || 3 === t4.match_length && 4096 < t4.strstart - t4.match_start) && (t4.match_length = 2)), t4.prev_length >= 3 && t4.match_length <= t4.prev_length) {
                for (n2 = t4.strstart + t4.lookahead - 3, s2 = r._tr_tally(t4, t4.strstart - 1 - t4.prev_match, t4.prev_length - 3), t4.lookahead -= t4.prev_length - 1, t4.prev_length -= 2; ++t4.strstart <= n2 && (t4.ins_h = (t4.ins_h << t4.hash_shift ^ t4.window[t4.strstart + 3 - 1]) & t4.hash_mask, i4 = t4.prev[t4.strstart & t4.w_mask] = t4.head[t4.ins_h], t4.head[t4.ins_h] = t4.strstart), 0 != --t4.prev_length; ) ;
                if (t4.match_available = 0, t4.match_length = 2, t4.strstart++, s2 && (b(t4, false), 0 === t4.strm.avail_out)) return 1;
              } else if (t4.match_available) {
                if ((s2 = r._tr_tally(t4, 0, t4.window[t4.strstart - 1])) && b(t4, false), t4.strstart++, t4.lookahead--, 0 === t4.strm.avail_out) return 1;
              } else t4.match_available = 1, t4.strstart++, t4.lookahead--;
            }
            return t4.match_available && (s2 = r._tr_tally(t4, 0, t4.window[t4.strstart - 1]), t4.match_available = 0), t4.insert = t4.strstart < 2 ? t4.strstart : 2, 4 === e4 ? (b(t4, true), 0 === t4.strm.avail_out ? 3 : 4) : t4.last_lit && (b(t4, false), 0 === t4.strm.avail_out) ? 1 : 2;
          }
          function M(t4, e4, i4, s2, n2) {
            this.good_length = t4, this.max_lazy = e4, this.nice_length = i4, this.max_chain = s2, this.func = n2;
          }
          function w() {
            this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = 8, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new n.Buf16(1146), this.dyn_dtree = new n.Buf16(122), this.bl_tree = new n.Buf16(78), p(this.dyn_ltree), p(this.dyn_dtree), p(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new n.Buf16(16), this.heap = new n.Buf16(573), p(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new n.Buf16(573), p(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
          }
          function P(t4) {
            var e4;
            return t4 && t4.state ? (t4.total_in = t4.total_out = 0, t4.data_type = 2, (e4 = t4.state).pending = 0, e4.pending_out = 0, e4.wrap < 0 && (e4.wrap = -e4.wrap), e4.status = e4.wrap ? 42 : d, t4.adler = 2 === e4.wrap ? 0 : 1, e4.last_flush = 0, r._tr_init(e4), 0) : f(t4, h);
          }
          function T(t4) {
            var e4 = P(t4);
            return 0 === e4 && function(t5) {
              t5.window_size = 2 * t5.w_size, p(t5.head), t5.max_lazy_match = s[t5.level].max_lazy, t5.good_match = s[t5.level].good_length, t5.nice_match = s[t5.level].nice_length, t5.max_chain_length = s[t5.level].max_chain, t5.strstart = 0, t5.block_start = 0, t5.lookahead = 0, t5.insert = 0, t5.match_length = t5.prev_length = 2, t5.match_available = 0, t5.ins_h = 0;
            }(t4.state), e4;
          }
          function L(t4, e4, i4, s2, r2, o2) {
            if (!t4) return h;
            var a2 = 1;
            if (-1 === e4 && (e4 = 6), s2 < 0 ? (a2 = 0, s2 = -s2) : 15 < s2 && (a2 = 2, s2 -= 16), r2 < 1 || 9 < r2 || 8 !== i4 || s2 < 8 || 15 < s2 || e4 < 0 || 9 < e4 || o2 < 0 || 4 < o2) return f(t4, h);
            8 === s2 && (s2 = 9);
            var l2 = new w();
            return (t4.state = l2).strm = t4, l2.wrap = a2, l2.gzhead = null, l2.w_bits = s2, l2.w_size = 1 << l2.w_bits, l2.w_mask = l2.w_size - 1, l2.hash_bits = r2 + 7, l2.hash_size = 1 << l2.hash_bits, l2.hash_mask = l2.hash_size - 1, l2.hash_shift = ~~((l2.hash_bits + 3 - 1) / 3), l2.window = new n.Buf8(2 * l2.w_size), l2.head = new n.Buf16(l2.hash_size), l2.prev = new n.Buf16(l2.w_size), l2.lit_bufsize = 1 << r2 + 6, l2.pending_buf_size = 4 * l2.lit_bufsize, l2.pending_buf = new n.Buf8(l2.pending_buf_size), l2.d_buf = 1 * l2.lit_bufsize, l2.l_buf = 3 * l2.lit_bufsize, l2.level = e4, l2.strategy = o2, l2.method = i4, T(t4);
          }
          s = [new M(0, 0, 0, 0, function(t4, e4) {
            var i4 = 65535;
            for (i4 > t4.pending_buf_size - 5 && (i4 = t4.pending_buf_size - 5); ; ) {
              if (t4.lookahead <= 1) {
                if (x(t4), 0 === t4.lookahead && 0 === e4) return 1;
                if (0 === t4.lookahead) break;
              }
              t4.strstart += t4.lookahead, t4.lookahead = 0;
              var s2 = t4.block_start + i4;
              if ((0 === t4.strstart || t4.strstart >= s2) && (t4.lookahead = t4.strstart - s2, t4.strstart = s2, b(t4, false), 0 === t4.strm.avail_out)) return 1;
              if (t4.strstart - t4.block_start >= t4.w_size - u && (b(t4, false), 0 === t4.strm.avail_out)) return 1;
            }
            return t4.insert = 0, 4 === e4 ? (b(t4, true), 0 === t4.strm.avail_out ? 3 : 4) : (t4.strstart > t4.block_start && (b(t4, false), t4.strm.avail_out), 1);
          }), new M(4, 4, 8, 4, v), new M(4, 5, 16, 8, v), new M(4, 6, 32, 32, v), new M(4, 4, 16, 16, _), new M(8, 16, 32, 32, _), new M(8, 16, 128, 128, _), new M(8, 32, 128, 256, _), new M(32, 128, 258, 1024, _), new M(32, 258, 258, 4096, _)], i3.deflateInit = function(t4, e4) {
            return L(t4, e4, 8, 15, 8, 0);
          }, i3.deflateInit2 = L, i3.deflateReset = T, i3.deflateResetKeep = P, i3.deflateSetHeader = function(t4, e4) {
            return t4 && t4.state ? 2 !== t4.state.wrap ? h : (t4.state.gzhead = e4, 0) : h;
          }, i3.deflate = function(t4, e4) {
            var i4, n2, o2, l2;
            if (!t4 || !t4.state || 5 < e4 || e4 < 0) return t4 ? f(t4, h) : h;
            if (n2 = t4.state, !t4.output || !t4.input && 0 !== t4.avail_in || 666 === n2.status && 4 !== e4) return f(t4, 0 === t4.avail_out ? -5 : h);
            if (n2.strm = t4, i4 = n2.last_flush, n2.last_flush = e4, 42 === n2.status) if (2 === n2.wrap) t4.adler = 0, S(n2, 31), S(n2, 139), S(n2, 8), n2.gzhead ? (S(n2, (n2.gzhead.text ? 1 : 0) + (n2.gzhead.hcrc ? 2 : 0) + (n2.gzhead.extra ? 4 : 0) + (n2.gzhead.name ? 8 : 0) + (n2.gzhead.comment ? 16 : 0)), S(n2, 255 & n2.gzhead.time), S(n2, n2.gzhead.time >> 8 & 255), S(n2, n2.gzhead.time >> 16 & 255), S(n2, n2.gzhead.time >> 24 & 255), S(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), S(n2, 255 & n2.gzhead.os), n2.gzhead.extra && n2.gzhead.extra.length && (S(n2, 255 & n2.gzhead.extra.length), S(n2, n2.gzhead.extra.length >> 8 & 255)), n2.gzhead.hcrc && (t4.adler = a(t4.adler, n2.pending_buf, n2.pending, 0)), n2.gzindex = 0, n2.status = 69) : (S(n2, 0), S(n2, 0), S(n2, 0), S(n2, 0), S(n2, 0), S(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), S(n2, 3), n2.status = d);
            else {
              var u2 = 8 + (n2.w_bits - 8 << 4) << 8;
              u2 |= (2 <= n2.strategy || n2.level < 2 ? 0 : n2.level < 6 ? 1 : 6 === n2.level ? 2 : 3) << 6, 0 !== n2.strstart && (u2 |= 32), u2 += 31 - u2 % 31, n2.status = d, y(n2, u2), 0 !== n2.strstart && (y(n2, t4.adler >>> 16), y(n2, 65535 & t4.adler)), t4.adler = 1;
            }
            if (69 === n2.status) if (n2.gzhead.extra) {
              for (o2 = n2.pending; n2.gzindex < (65535 & n2.gzhead.extra.length) && (n2.pending !== n2.pending_buf_size || (n2.gzhead.hcrc && n2.pending > o2 && (t4.adler = a(t4.adler, n2.pending_buf, n2.pending - o2, o2)), g(t4), o2 = n2.pending, n2.pending !== n2.pending_buf_size)); ) S(n2, 255 & n2.gzhead.extra[n2.gzindex]), n2.gzindex++;
              n2.gzhead.hcrc && n2.pending > o2 && (t4.adler = a(t4.adler, n2.pending_buf, n2.pending - o2, o2)), n2.gzindex === n2.gzhead.extra.length && (n2.gzindex = 0, n2.status = 73);
            } else n2.status = 73;
            if (73 === n2.status) if (n2.gzhead.name) {
              o2 = n2.pending;
              do {
                if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > o2 && (t4.adler = a(t4.adler, n2.pending_buf, n2.pending - o2, o2)), g(t4), o2 = n2.pending, n2.pending === n2.pending_buf_size)) {
                  l2 = 1;
                  break;
                }
                l2 = n2.gzindex < n2.gzhead.name.length ? 255 & n2.gzhead.name.charCodeAt(n2.gzindex++) : 0, S(n2, l2);
              } while (0 !== l2);
              n2.gzhead.hcrc && n2.pending > o2 && (t4.adler = a(t4.adler, n2.pending_buf, n2.pending - o2, o2)), 0 === l2 && (n2.gzindex = 0, n2.status = 91);
            } else n2.status = 91;
            if (91 === n2.status) if (n2.gzhead.comment) {
              o2 = n2.pending;
              do {
                if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > o2 && (t4.adler = a(t4.adler, n2.pending_buf, n2.pending - o2, o2)), g(t4), o2 = n2.pending, n2.pending === n2.pending_buf_size)) {
                  l2 = 1;
                  break;
                }
                l2 = n2.gzindex < n2.gzhead.comment.length ? 255 & n2.gzhead.comment.charCodeAt(n2.gzindex++) : 0, S(n2, l2);
              } while (0 !== l2);
              n2.gzhead.hcrc && n2.pending > o2 && (t4.adler = a(t4.adler, n2.pending_buf, n2.pending - o2, o2)), 0 === l2 && (n2.status = 103);
            } else n2.status = 103;
            if (103 === n2.status && (n2.gzhead.hcrc ? (n2.pending + 2 > n2.pending_buf_size && g(t4), n2.pending + 2 <= n2.pending_buf_size && (S(n2, 255 & t4.adler), S(n2, t4.adler >> 8 & 255), t4.adler = 0, n2.status = d)) : n2.status = d), 0 !== n2.pending) {
              if (g(t4), 0 === t4.avail_out) return n2.last_flush = -1, 0;
            } else if (0 === t4.avail_in && m(e4) <= m(i4) && 4 !== e4) return f(t4, -5);
            if (666 === n2.status && 0 !== t4.avail_in) return f(t4, -5);
            if (0 !== t4.avail_in || 0 !== n2.lookahead || 0 !== e4 && 666 !== n2.status) {
              var E2 = 2 === n2.strategy ? function(t5, e5) {
                for (var i5; ; ) {
                  if (0 === t5.lookahead && (x(t5), 0 === t5.lookahead)) {
                    if (0 === e5) return 1;
                    break;
                  }
                  if (t5.match_length = 0, i5 = r._tr_tally(t5, 0, t5.window[t5.strstart]), t5.lookahead--, t5.strstart++, i5 && (b(t5, false), 0 === t5.strm.avail_out)) return 1;
                }
                return t5.insert = 0, 4 === e5 ? (b(t5, true), 0 === t5.strm.avail_out ? 3 : 4) : t5.last_lit && (b(t5, false), 0 === t5.strm.avail_out) ? 1 : 2;
              }(n2, e4) : 3 === n2.strategy ? function(t5, e5) {
                for (var i5, s2, n3, o3, a2 = t5.window; ; ) {
                  if (t5.lookahead <= c) {
                    if (x(t5), t5.lookahead <= c && 0 === e5) return 1;
                    if (0 === t5.lookahead) break;
                  }
                  if (t5.match_length = 0, t5.lookahead >= 3 && 0 < t5.strstart && (s2 = a2[n3 = t5.strstart - 1]) === a2[++n3] && s2 === a2[++n3] && s2 === a2[++n3]) {
                    o3 = t5.strstart + c;
                    do {
                    } while (s2 === a2[++n3] && s2 === a2[++n3] && s2 === a2[++n3] && s2 === a2[++n3] && s2 === a2[++n3] && s2 === a2[++n3] && s2 === a2[++n3] && s2 === a2[++n3] && n3 < o3);
                    t5.match_length = c - (o3 - n3), t5.match_length > t5.lookahead && (t5.match_length = t5.lookahead);
                  }
                  if (t5.match_length >= 3 ? (i5 = r._tr_tally(t5, 1, t5.match_length - 3), t5.lookahead -= t5.match_length, t5.strstart += t5.match_length, t5.match_length = 0) : (i5 = r._tr_tally(t5, 0, t5.window[t5.strstart]), t5.lookahead--, t5.strstart++), i5 && (b(t5, false), 0 === t5.strm.avail_out)) return 1;
                }
                return t5.insert = 0, 4 === e5 ? (b(t5, true), 0 === t5.strm.avail_out ? 3 : 4) : t5.last_lit && (b(t5, false), 0 === t5.strm.avail_out) ? 1 : 2;
              }(n2, e4) : s[n2.level].func(n2, e4);
              if (3 !== E2 && 4 !== E2 || (n2.status = 666), 1 === E2 || 3 === E2) return 0 === t4.avail_out && (n2.last_flush = -1), 0;
              if (2 === E2 && (1 === e4 ? r._tr_align(n2) : 5 !== e4 && (r._tr_stored_block(n2, 0, 0, false), 3 === e4 && (p(n2.head), 0 === n2.lookahead && (n2.strstart = 0, n2.block_start = 0, n2.insert = 0))), g(t4), 0 === t4.avail_out)) return n2.last_flush = -1, 0;
            }
            return 4 !== e4 ? 0 : n2.wrap <= 0 ? 1 : (2 === n2.wrap ? (S(n2, 255 & t4.adler), S(n2, t4.adler >> 8 & 255), S(n2, t4.adler >> 16 & 255), S(n2, t4.adler >> 24 & 255), S(n2, 255 & t4.total_in), S(n2, t4.total_in >> 8 & 255), S(n2, t4.total_in >> 16 & 255), S(n2, t4.total_in >> 24 & 255)) : (y(n2, t4.adler >>> 16), y(n2, 65535 & t4.adler)), g(t4), 0 < n2.wrap && (n2.wrap = -n2.wrap), 0 !== n2.pending ? 0 : 1);
          }, i3.deflateEnd = function(t4) {
            var e4;
            return t4 && t4.state ? 42 !== (e4 = t4.state.status) && 69 !== e4 && 73 !== e4 && 91 !== e4 && 103 !== e4 && e4 !== d && 666 !== e4 ? f(t4, h) : (t4.state = null, e4 === d ? f(t4, -3) : 0) : h;
          }, i3.deflateSetDictionary = function(t4, e4) {
            var i4, s2, r2, a2, l2, c2, u2, d2, f2 = e4.length;
            if (!t4 || !t4.state) return h;
            if (2 === (a2 = (i4 = t4.state).wrap) || 1 === a2 && 42 !== i4.status || i4.lookahead) return h;
            for (1 === a2 && (t4.adler = o(t4.adler, e4, f2, 0)), i4.wrap = 0, f2 >= i4.w_size && (0 === a2 && (p(i4.head), i4.strstart = 0, i4.block_start = 0, i4.insert = 0), d2 = new n.Buf8(i4.w_size), n.arraySet(d2, e4, f2 - i4.w_size, i4.w_size, 0), e4 = d2, f2 = i4.w_size), l2 = t4.avail_in, c2 = t4.next_in, u2 = t4.input, t4.avail_in = f2, t4.next_in = 0, t4.input = e4, x(i4); i4.lookahead >= 3; ) {
              for (s2 = i4.strstart, r2 = i4.lookahead - 2; i4.ins_h = (i4.ins_h << i4.hash_shift ^ i4.window[s2 + 3 - 1]) & i4.hash_mask, i4.prev[s2 & i4.w_mask] = i4.head[i4.ins_h], i4.head[i4.ins_h] = s2, s2++, --r2; ) ;
              i4.strstart = s2, i4.lookahead = 2, x(i4);
            }
            return i4.strstart += i4.lookahead, i4.block_start = i4.strstart, i4.insert = i4.lookahead, i4.lookahead = 0, i4.match_length = i4.prev_length = 2, i4.match_available = 0, t4.next_in = c2, t4.input = u2, t4.avail_in = l2, i4.wrap = a2, 0;
          }, i3.deflateInfo = "pako deflate (from Nodeca project)";
        }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./messages": 51, "./trees": 52 }], 47: [function(t3, e3, i3) {
          "use strict";
          e3.exports = function() {
            this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
          };
        }, {}], 48: [function(t3, e3, i3) {
          "use strict";
          e3.exports = function(t4, e4) {
            var i4, s, n, r, o, a, l, h, c, u, d, f, m, p, g, b, S, y, E, x, v, _, M, w, P;
            i4 = t4.state, s = t4.next_in, w = t4.input, n = s + (t4.avail_in - 5), r = t4.next_out, P = t4.output, o = r - (e4 - t4.avail_out), a = r + (t4.avail_out - 257), l = i4.dmax, h = i4.wsize, c = i4.whave, u = i4.wnext, d = i4.window, f = i4.hold, m = i4.bits, p = i4.lencode, g = i4.distcode, b = (1 << i4.lenbits) - 1, S = (1 << i4.distbits) - 1;
            t: do {
              m < 15 && (f += w[s++] << m, m += 8, f += w[s++] << m, m += 8), y = p[f & b];
              e: for (; ; ) {
                if (f >>>= E = y >>> 24, m -= E, 0 == (E = y >>> 16 & 255)) P[r++] = 65535 & y;
                else {
                  if (!(16 & E)) {
                    if (!(64 & E)) {
                      y = p[(65535 & y) + (f & (1 << E) - 1)];
                      continue e;
                    }
                    if (32 & E) {
                      i4.mode = 12;
                      break t;
                    }
                    t4.msg = "invalid literal/length code", i4.mode = 30;
                    break t;
                  }
                  x = 65535 & y, (E &= 15) && (m < E && (f += w[s++] << m, m += 8), x += f & (1 << E) - 1, f >>>= E, m -= E), m < 15 && (f += w[s++] << m, m += 8, f += w[s++] << m, m += 8), y = g[f & S];
                  i: for (; ; ) {
                    if (f >>>= E = y >>> 24, m -= E, !(16 & (E = y >>> 16 & 255))) {
                      if (!(64 & E)) {
                        y = g[(65535 & y) + (f & (1 << E) - 1)];
                        continue i;
                      }
                      t4.msg = "invalid distance code", i4.mode = 30;
                      break t;
                    }
                    if (v = 65535 & y, m < (E &= 15) && (f += w[s++] << m, (m += 8) < E && (f += w[s++] << m, m += 8)), l < (v += f & (1 << E) - 1)) {
                      t4.msg = "invalid distance too far back", i4.mode = 30;
                      break t;
                    }
                    if (f >>>= E, m -= E, (E = r - o) < v) {
                      if (c < (E = v - E) && i4.sane) {
                        t4.msg = "invalid distance too far back", i4.mode = 30;
                        break t;
                      }
                      if (M = d, (_ = 0) === u) {
                        if (_ += h - E, E < x) {
                          for (x -= E; P[r++] = d[_++], --E; ) ;
                          _ = r - v, M = P;
                        }
                      } else if (u < E) {
                        if (_ += h + u - E, (E -= u) < x) {
                          for (x -= E; P[r++] = d[_++], --E; ) ;
                          if (_ = 0, u < x) {
                            for (x -= E = u; P[r++] = d[_++], --E; ) ;
                            _ = r - v, M = P;
                          }
                        }
                      } else if (_ += u - E, E < x) {
                        for (x -= E; P[r++] = d[_++], --E; ) ;
                        _ = r - v, M = P;
                      }
                      for (; 2 < x; ) P[r++] = M[_++], P[r++] = M[_++], P[r++] = M[_++], x -= 3;
                      x && (P[r++] = M[_++], 1 < x && (P[r++] = M[_++]));
                    } else {
                      for (_ = r - v; P[r++] = P[_++], P[r++] = P[_++], P[r++] = P[_++], 2 < (x -= 3); ) ;
                      x && (P[r++] = P[_++], 1 < x && (P[r++] = P[_++]));
                    }
                    break;
                  }
                }
                break;
              }
            } while (s < n && r < a);
            s -= x = m >> 3, f &= (1 << (m -= x << 3)) - 1, t4.next_in = s, t4.next_out = r, t4.avail_in = s < n ? n - s + 5 : 5 - (s - n), t4.avail_out = r < a ? a - r + 257 : 257 - (r - a), i4.hold = f, i4.bits = m;
          };
        }, {}], 49: [function(t3, e3, i3) {
          "use strict";
          var s = t3("../utils/common"), n = t3("./adler32"), r = t3("./crc32"), o = t3("./inffast"), a = t3("./inftrees"), l = -2;
          function h(t4) {
            return (t4 >>> 24 & 255) + (t4 >>> 8 & 65280) + ((65280 & t4) << 8) + ((255 & t4) << 24);
          }
          function c() {
            this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new s.Buf16(320), this.work = new s.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
          }
          function u(t4) {
            var e4;
            return t4 && t4.state ? (e4 = t4.state, t4.total_in = t4.total_out = e4.total = 0, t4.msg = "", e4.wrap && (t4.adler = 1 & e4.wrap), e4.mode = 1, e4.last = 0, e4.havedict = 0, e4.dmax = 32768, e4.head = null, e4.hold = 0, e4.bits = 0, e4.lencode = e4.lendyn = new s.Buf32(852), e4.distcode = e4.distdyn = new s.Buf32(592), e4.sane = 1, e4.back = -1, 0) : l;
          }
          function d(t4) {
            var e4;
            return t4 && t4.state ? ((e4 = t4.state).wsize = 0, e4.whave = 0, e4.wnext = 0, u(t4)) : l;
          }
          function f(t4, e4) {
            var i4, s2;
            return t4 && t4.state ? (s2 = t4.state, e4 < 0 ? (i4 = 0, e4 = -e4) : (i4 = 1 + (e4 >> 4), e4 < 48 && (e4 &= 15)), e4 && (e4 < 8 || 15 < e4) ? l : (null !== s2.window && s2.wbits !== e4 && (s2.window = null), s2.wrap = i4, s2.wbits = e4, d(t4))) : l;
          }
          function m(t4, e4) {
            var i4, s2;
            return t4 ? (s2 = new c(), (t4.state = s2).window = null, 0 !== (i4 = f(t4, e4)) && (t4.state = null), i4) : l;
          }
          var p, g, b = true;
          function S(t4) {
            if (b) {
              var e4;
              for (p = new s.Buf32(512), g = new s.Buf32(32), e4 = 0; e4 < 144; ) t4.lens[e4++] = 8;
              for (; e4 < 256; ) t4.lens[e4++] = 9;
              for (; e4 < 280; ) t4.lens[e4++] = 7;
              for (; e4 < 288; ) t4.lens[e4++] = 8;
              for (a(1, t4.lens, 0, 288, p, 0, t4.work, { bits: 9 }), e4 = 0; e4 < 32; ) t4.lens[e4++] = 5;
              a(2, t4.lens, 0, 32, g, 0, t4.work, { bits: 5 }), b = false;
            }
            t4.lencode = p, t4.lenbits = 9, t4.distcode = g, t4.distbits = 5;
          }
          function y(t4, e4, i4, n2) {
            var r2, o2 = t4.state;
            return null === o2.window && (o2.wsize = 1 << o2.wbits, o2.wnext = 0, o2.whave = 0, o2.window = new s.Buf8(o2.wsize)), n2 >= o2.wsize ? (s.arraySet(o2.window, e4, i4 - o2.wsize, o2.wsize, 0), o2.wnext = 0, o2.whave = o2.wsize) : (n2 < (r2 = o2.wsize - o2.wnext) && (r2 = n2), s.arraySet(o2.window, e4, i4 - n2, r2, o2.wnext), (n2 -= r2) ? (s.arraySet(o2.window, e4, i4 - n2, n2, 0), o2.wnext = n2, o2.whave = o2.wsize) : (o2.wnext += r2, o2.wnext === o2.wsize && (o2.wnext = 0), o2.whave < o2.wsize && (o2.whave += r2))), 0;
          }
          i3.inflateReset = d, i3.inflateReset2 = f, i3.inflateResetKeep = u, i3.inflateInit = function(t4) {
            return m(t4, 15);
          }, i3.inflateInit2 = m, i3.inflate = function(t4, e4) {
            var i4, c2, u2, d2, f2, m2, p2, g2, b2, E, x, v, _, M, w, P, T, L, A, C, R, N, I, B, F = 0, D = new s.Buf8(4), O = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
            if (!t4 || !t4.state || !t4.output || !t4.input && 0 !== t4.avail_in) return l;
            12 === (i4 = t4.state).mode && (i4.mode = 13), f2 = t4.next_out, u2 = t4.output, p2 = t4.avail_out, d2 = t4.next_in, c2 = t4.input, m2 = t4.avail_in, g2 = i4.hold, b2 = i4.bits, E = m2, x = p2, N = 0;
            t: for (; ; ) switch (i4.mode) {
              case 1:
                if (0 === i4.wrap) {
                  i4.mode = 13;
                  break;
                }
                for (; b2 < 16; ) {
                  if (0 === m2) break t;
                  m2--, g2 += c2[d2++] << b2, b2 += 8;
                }
                if (2 & i4.wrap && 35615 === g2) {
                  D[i4.check = 0] = 255 & g2, D[1] = g2 >>> 8 & 255, i4.check = r(i4.check, D, 2, 0), b2 = g2 = 0, i4.mode = 2;
                  break;
                }
                if (i4.flags = 0, i4.head && (i4.head.done = false), !(1 & i4.wrap) || (((255 & g2) << 8) + (g2 >> 8)) % 31) {
                  t4.msg = "incorrect header check", i4.mode = 30;
                  break;
                }
                if (8 != (15 & g2)) {
                  t4.msg = "unknown compression method", i4.mode = 30;
                  break;
                }
                if (b2 -= 4, R = 8 + (15 & (g2 >>>= 4)), 0 === i4.wbits) i4.wbits = R;
                else if (R > i4.wbits) {
                  t4.msg = "invalid window size", i4.mode = 30;
                  break;
                }
                i4.dmax = 1 << R, t4.adler = i4.check = 1, i4.mode = 512 & g2 ? 10 : 12, b2 = g2 = 0;
                break;
              case 2:
                for (; b2 < 16; ) {
                  if (0 === m2) break t;
                  m2--, g2 += c2[d2++] << b2, b2 += 8;
                }
                if (i4.flags = g2, 8 != (255 & i4.flags)) {
                  t4.msg = "unknown compression method", i4.mode = 30;
                  break;
                }
                if (57344 & i4.flags) {
                  t4.msg = "unknown header flags set", i4.mode = 30;
                  break;
                }
                i4.head && (i4.head.text = g2 >> 8 & 1), 512 & i4.flags && (D[0] = 255 & g2, D[1] = g2 >>> 8 & 255, i4.check = r(i4.check, D, 2, 0)), b2 = g2 = 0, i4.mode = 3;
              case 3:
                for (; b2 < 32; ) {
                  if (0 === m2) break t;
                  m2--, g2 += c2[d2++] << b2, b2 += 8;
                }
                i4.head && (i4.head.time = g2), 512 & i4.flags && (D[0] = 255 & g2, D[1] = g2 >>> 8 & 255, D[2] = g2 >>> 16 & 255, D[3] = g2 >>> 24 & 255, i4.check = r(i4.check, D, 4, 0)), b2 = g2 = 0, i4.mode = 4;
              case 4:
                for (; b2 < 16; ) {
                  if (0 === m2) break t;
                  m2--, g2 += c2[d2++] << b2, b2 += 8;
                }
                i4.head && (i4.head.xflags = 255 & g2, i4.head.os = g2 >> 8), 512 & i4.flags && (D[0] = 255 & g2, D[1] = g2 >>> 8 & 255, i4.check = r(i4.check, D, 2, 0)), b2 = g2 = 0, i4.mode = 5;
              case 5:
                if (1024 & i4.flags) {
                  for (; b2 < 16; ) {
                    if (0 === m2) break t;
                    m2--, g2 += c2[d2++] << b2, b2 += 8;
                  }
                  i4.length = g2, i4.head && (i4.head.extra_len = g2), 512 & i4.flags && (D[0] = 255 & g2, D[1] = g2 >>> 8 & 255, i4.check = r(i4.check, D, 2, 0)), b2 = g2 = 0;
                } else i4.head && (i4.head.extra = null);
                i4.mode = 6;
              case 6:
                if (1024 & i4.flags && (m2 < (v = i4.length) && (v = m2), v && (i4.head && (R = i4.head.extra_len - i4.length, i4.head.extra || (i4.head.extra = new Array(i4.head.extra_len)), s.arraySet(i4.head.extra, c2, d2, v, R)), 512 & i4.flags && (i4.check = r(i4.check, c2, v, d2)), m2 -= v, d2 += v, i4.length -= v), i4.length)) break t;
                i4.length = 0, i4.mode = 7;
              case 7:
                if (2048 & i4.flags) {
                  if (0 === m2) break t;
                  for (v = 0; R = c2[d2 + v++], i4.head && R && i4.length < 65536 && (i4.head.name += String.fromCharCode(R)), R && v < m2; ) ;
                  if (512 & i4.flags && (i4.check = r(i4.check, c2, v, d2)), m2 -= v, d2 += v, R) break t;
                } else i4.head && (i4.head.name = null);
                i4.length = 0, i4.mode = 8;
              case 8:
                if (4096 & i4.flags) {
                  if (0 === m2) break t;
                  for (v = 0; R = c2[d2 + v++], i4.head && R && i4.length < 65536 && (i4.head.comment += String.fromCharCode(R)), R && v < m2; ) ;
                  if (512 & i4.flags && (i4.check = r(i4.check, c2, v, d2)), m2 -= v, d2 += v, R) break t;
                } else i4.head && (i4.head.comment = null);
                i4.mode = 9;
              case 9:
                if (512 & i4.flags) {
                  for (; b2 < 16; ) {
                    if (0 === m2) break t;
                    m2--, g2 += c2[d2++] << b2, b2 += 8;
                  }
                  if (g2 !== (65535 & i4.check)) {
                    t4.msg = "header crc mismatch", i4.mode = 30;
                    break;
                  }
                  b2 = g2 = 0;
                }
                i4.head && (i4.head.hcrc = i4.flags >> 9 & 1, i4.head.done = true), t4.adler = i4.check = 0, i4.mode = 12;
                break;
              case 10:
                for (; b2 < 32; ) {
                  if (0 === m2) break t;
                  m2--, g2 += c2[d2++] << b2, b2 += 8;
                }
                t4.adler = i4.check = h(g2), b2 = g2 = 0, i4.mode = 11;
              case 11:
                if (0 === i4.havedict) return t4.next_out = f2, t4.avail_out = p2, t4.next_in = d2, t4.avail_in = m2, i4.hold = g2, i4.bits = b2, 2;
                t4.adler = i4.check = 1, i4.mode = 12;
              case 12:
                if (5 === e4 || 6 === e4) break t;
              case 13:
                if (i4.last) {
                  g2 >>>= 7 & b2, b2 -= 7 & b2, i4.mode = 27;
                  break;
                }
                for (; b2 < 3; ) {
                  if (0 === m2) break t;
                  m2--, g2 += c2[d2++] << b2, b2 += 8;
                }
                switch (i4.last = 1 & g2, b2 -= 1, 3 & (g2 >>>= 1)) {
                  case 0:
                    i4.mode = 14;
                    break;
                  case 1:
                    if (S(i4), i4.mode = 20, 6 !== e4) break;
                    g2 >>>= 2, b2 -= 2;
                    break t;
                  case 2:
                    i4.mode = 17;
                    break;
                  case 3:
                    t4.msg = "invalid block type", i4.mode = 30;
                }
                g2 >>>= 2, b2 -= 2;
                break;
              case 14:
                for (g2 >>>= 7 & b2, b2 -= 7 & b2; b2 < 32; ) {
                  if (0 === m2) break t;
                  m2--, g2 += c2[d2++] << b2, b2 += 8;
                }
                if ((65535 & g2) != (g2 >>> 16 ^ 65535)) {
                  t4.msg = "invalid stored block lengths", i4.mode = 30;
                  break;
                }
                if (i4.length = 65535 & g2, b2 = g2 = 0, i4.mode = 15, 6 === e4) break t;
              case 15:
                i4.mode = 16;
              case 16:
                if (v = i4.length) {
                  if (m2 < v && (v = m2), p2 < v && (v = p2), 0 === v) break t;
                  s.arraySet(u2, c2, d2, v, f2), m2 -= v, d2 += v, p2 -= v, f2 += v, i4.length -= v;
                  break;
                }
                i4.mode = 12;
                break;
              case 17:
                for (; b2 < 14; ) {
                  if (0 === m2) break t;
                  m2--, g2 += c2[d2++] << b2, b2 += 8;
                }
                if (i4.nlen = 257 + (31 & g2), g2 >>>= 5, b2 -= 5, i4.ndist = 1 + (31 & g2), g2 >>>= 5, b2 -= 5, i4.ncode = 4 + (15 & g2), g2 >>>= 4, b2 -= 4, 286 < i4.nlen || 30 < i4.ndist) {
                  t4.msg = "too many length or distance symbols", i4.mode = 30;
                  break;
                }
                i4.have = 0, i4.mode = 18;
              case 18:
                for (; i4.have < i4.ncode; ) {
                  for (; b2 < 3; ) {
                    if (0 === m2) break t;
                    m2--, g2 += c2[d2++] << b2, b2 += 8;
                  }
                  i4.lens[O[i4.have++]] = 7 & g2, g2 >>>= 3, b2 -= 3;
                }
                for (; i4.have < 19; ) i4.lens[O[i4.have++]] = 0;
                if (i4.lencode = i4.lendyn, i4.lenbits = 7, I = { bits: i4.lenbits }, N = a(0, i4.lens, 0, 19, i4.lencode, 0, i4.work, I), i4.lenbits = I.bits, N) {
                  t4.msg = "invalid code lengths set", i4.mode = 30;
                  break;
                }
                i4.have = 0, i4.mode = 19;
              case 19:
                for (; i4.have < i4.nlen + i4.ndist; ) {
                  for (; P = (F = i4.lencode[g2 & (1 << i4.lenbits) - 1]) >>> 16 & 255, T = 65535 & F, !((w = F >>> 24) <= b2); ) {
                    if (0 === m2) break t;
                    m2--, g2 += c2[d2++] << b2, b2 += 8;
                  }
                  if (T < 16) g2 >>>= w, b2 -= w, i4.lens[i4.have++] = T;
                  else {
                    if (16 === T) {
                      for (B = w + 2; b2 < B; ) {
                        if (0 === m2) break t;
                        m2--, g2 += c2[d2++] << b2, b2 += 8;
                      }
                      if (g2 >>>= w, b2 -= w, 0 === i4.have) {
                        t4.msg = "invalid bit length repeat", i4.mode = 30;
                        break;
                      }
                      R = i4.lens[i4.have - 1], v = 3 + (3 & g2), g2 >>>= 2, b2 -= 2;
                    } else if (17 === T) {
                      for (B = w + 3; b2 < B; ) {
                        if (0 === m2) break t;
                        m2--, g2 += c2[d2++] << b2, b2 += 8;
                      }
                      b2 -= w, R = 0, v = 3 + (7 & (g2 >>>= w)), g2 >>>= 3, b2 -= 3;
                    } else {
                      for (B = w + 7; b2 < B; ) {
                        if (0 === m2) break t;
                        m2--, g2 += c2[d2++] << b2, b2 += 8;
                      }
                      b2 -= w, R = 0, v = 11 + (127 & (g2 >>>= w)), g2 >>>= 7, b2 -= 7;
                    }
                    if (i4.have + v > i4.nlen + i4.ndist) {
                      t4.msg = "invalid bit length repeat", i4.mode = 30;
                      break;
                    }
                    for (; v--; ) i4.lens[i4.have++] = R;
                  }
                }
                if (30 === i4.mode) break;
                if (0 === i4.lens[256]) {
                  t4.msg = "invalid code -- missing end-of-block", i4.mode = 30;
                  break;
                }
                if (i4.lenbits = 9, I = { bits: i4.lenbits }, N = a(1, i4.lens, 0, i4.nlen, i4.lencode, 0, i4.work, I), i4.lenbits = I.bits, N) {
                  t4.msg = "invalid literal/lengths set", i4.mode = 30;
                  break;
                }
                if (i4.distbits = 6, i4.distcode = i4.distdyn, I = { bits: i4.distbits }, N = a(2, i4.lens, i4.nlen, i4.ndist, i4.distcode, 0, i4.work, I), i4.distbits = I.bits, N) {
                  t4.msg = "invalid distances set", i4.mode = 30;
                  break;
                }
                if (i4.mode = 20, 6 === e4) break t;
              case 20:
                i4.mode = 21;
              case 21:
                if (6 <= m2 && 258 <= p2) {
                  t4.next_out = f2, t4.avail_out = p2, t4.next_in = d2, t4.avail_in = m2, i4.hold = g2, i4.bits = b2, o(t4, x), f2 = t4.next_out, u2 = t4.output, p2 = t4.avail_out, d2 = t4.next_in, c2 = t4.input, m2 = t4.avail_in, g2 = i4.hold, b2 = i4.bits, 12 === i4.mode && (i4.back = -1);
                  break;
                }
                for (i4.back = 0; P = (F = i4.lencode[g2 & (1 << i4.lenbits) - 1]) >>> 16 & 255, T = 65535 & F, !((w = F >>> 24) <= b2); ) {
                  if (0 === m2) break t;
                  m2--, g2 += c2[d2++] << b2, b2 += 8;
                }
                if (P && !(240 & P)) {
                  for (L = w, A = P, C = T; P = (F = i4.lencode[C + ((g2 & (1 << L + A) - 1) >> L)]) >>> 16 & 255, T = 65535 & F, !(L + (w = F >>> 24) <= b2); ) {
                    if (0 === m2) break t;
                    m2--, g2 += c2[d2++] << b2, b2 += 8;
                  }
                  g2 >>>= L, b2 -= L, i4.back += L;
                }
                if (g2 >>>= w, b2 -= w, i4.back += w, i4.length = T, 0 === P) {
                  i4.mode = 26;
                  break;
                }
                if (32 & P) {
                  i4.back = -1, i4.mode = 12;
                  break;
                }
                if (64 & P) {
                  t4.msg = "invalid literal/length code", i4.mode = 30;
                  break;
                }
                i4.extra = 15 & P, i4.mode = 22;
              case 22:
                if (i4.extra) {
                  for (B = i4.extra; b2 < B; ) {
                    if (0 === m2) break t;
                    m2--, g2 += c2[d2++] << b2, b2 += 8;
                  }
                  i4.length += g2 & (1 << i4.extra) - 1, g2 >>>= i4.extra, b2 -= i4.extra, i4.back += i4.extra;
                }
                i4.was = i4.length, i4.mode = 23;
              case 23:
                for (; P = (F = i4.distcode[g2 & (1 << i4.distbits) - 1]) >>> 16 & 255, T = 65535 & F, !((w = F >>> 24) <= b2); ) {
                  if (0 === m2) break t;
                  m2--, g2 += c2[d2++] << b2, b2 += 8;
                }
                if (!(240 & P)) {
                  for (L = w, A = P, C = T; P = (F = i4.distcode[C + ((g2 & (1 << L + A) - 1) >> L)]) >>> 16 & 255, T = 65535 & F, !(L + (w = F >>> 24) <= b2); ) {
                    if (0 === m2) break t;
                    m2--, g2 += c2[d2++] << b2, b2 += 8;
                  }
                  g2 >>>= L, b2 -= L, i4.back += L;
                }
                if (g2 >>>= w, b2 -= w, i4.back += w, 64 & P) {
                  t4.msg = "invalid distance code", i4.mode = 30;
                  break;
                }
                i4.offset = T, i4.extra = 15 & P, i4.mode = 24;
              case 24:
                if (i4.extra) {
                  for (B = i4.extra; b2 < B; ) {
                    if (0 === m2) break t;
                    m2--, g2 += c2[d2++] << b2, b2 += 8;
                  }
                  i4.offset += g2 & (1 << i4.extra) - 1, g2 >>>= i4.extra, b2 -= i4.extra, i4.back += i4.extra;
                }
                if (i4.offset > i4.dmax) {
                  t4.msg = "invalid distance too far back", i4.mode = 30;
                  break;
                }
                i4.mode = 25;
              case 25:
                if (0 === p2) break t;
                if (v = x - p2, i4.offset > v) {
                  if ((v = i4.offset - v) > i4.whave && i4.sane) {
                    t4.msg = "invalid distance too far back", i4.mode = 30;
                    break;
                  }
                  _ = v > i4.wnext ? (v -= i4.wnext, i4.wsize - v) : i4.wnext - v, v > i4.length && (v = i4.length), M = i4.window;
                } else M = u2, _ = f2 - i4.offset, v = i4.length;
                for (p2 < v && (v = p2), p2 -= v, i4.length -= v; u2[f2++] = M[_++], --v; ) ;
                0 === i4.length && (i4.mode = 21);
                break;
              case 26:
                if (0 === p2) break t;
                u2[f2++] = i4.length, p2--, i4.mode = 21;
                break;
              case 27:
                if (i4.wrap) {
                  for (; b2 < 32; ) {
                    if (0 === m2) break t;
                    m2--, g2 |= c2[d2++] << b2, b2 += 8;
                  }
                  if (x -= p2, t4.total_out += x, i4.total += x, x && (t4.adler = i4.check = i4.flags ? r(i4.check, u2, x, f2 - x) : n(i4.check, u2, x, f2 - x)), x = p2, (i4.flags ? g2 : h(g2)) !== i4.check) {
                    t4.msg = "incorrect data check", i4.mode = 30;
                    break;
                  }
                  b2 = g2 = 0;
                }
                i4.mode = 28;
              case 28:
                if (i4.wrap && i4.flags) {
                  for (; b2 < 32; ) {
                    if (0 === m2) break t;
                    m2--, g2 += c2[d2++] << b2, b2 += 8;
                  }
                  if (g2 !== (4294967295 & i4.total)) {
                    t4.msg = "incorrect length check", i4.mode = 30;
                    break;
                  }
                  b2 = g2 = 0;
                }
                i4.mode = 29;
              case 29:
                N = 1;
                break t;
              case 30:
                N = -3;
                break t;
              case 31:
                return -4;
              default:
                return l;
            }
            return t4.next_out = f2, t4.avail_out = p2, t4.next_in = d2, t4.avail_in = m2, i4.hold = g2, i4.bits = b2, (i4.wsize || x !== t4.avail_out && i4.mode < 30 && (i4.mode < 27 || 4 !== e4)) && y(t4, t4.output, t4.next_out, x - t4.avail_out) ? (i4.mode = 31, -4) : (E -= t4.avail_in, x -= t4.avail_out, t4.total_in += E, t4.total_out += x, i4.total += x, i4.wrap && x && (t4.adler = i4.check = i4.flags ? r(i4.check, u2, x, t4.next_out - x) : n(i4.check, u2, x, t4.next_out - x)), t4.data_type = i4.bits + (i4.last ? 64 : 0) + (12 === i4.mode ? 128 : 0) + (20 === i4.mode || 15 === i4.mode ? 256 : 0), (0 == E && 0 === x || 4 === e4) && 0 === N && (N = -5), N);
          }, i3.inflateEnd = function(t4) {
            if (!t4 || !t4.state) return l;
            var e4 = t4.state;
            return e4.window && (e4.window = null), t4.state = null, 0;
          }, i3.inflateGetHeader = function(t4, e4) {
            var i4;
            return t4 && t4.state && 2 & (i4 = t4.state).wrap ? ((i4.head = e4).done = false, 0) : l;
          }, i3.inflateSetDictionary = function(t4, e4) {
            var i4, s2 = e4.length;
            return t4 && t4.state ? 0 !== (i4 = t4.state).wrap && 11 !== i4.mode ? l : 11 === i4.mode && n(1, e4, s2, 0) !== i4.check ? -3 : y(t4, e4, s2, s2) ? (i4.mode = 31, -4) : (i4.havedict = 1, 0) : l;
          }, i3.inflateInfo = "pako inflate (from Nodeca project)";
        }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./inffast": 48, "./inftrees": 50 }], 50: [function(t3, e3, i3) {
          "use strict";
          var s = t3("../utils/common"), n = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], r = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], o = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], a = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
          e3.exports = function(t4, e4, i4, l, h, c, u, d) {
            var f, m, p, g, b, S, y, E, x, v = d.bits, _ = 0, M = 0, w = 0, P = 0, T = 0, L = 0, A = 0, C = 0, R = 0, N = 0, I = null, B = 0, F = new s.Buf16(16), D = new s.Buf16(16), O = null, k = 0;
            for (_ = 0; _ <= 15; _++) F[_] = 0;
            for (M = 0; M < l; M++) F[e4[i4 + M]]++;
            for (T = v, P = 15; 1 <= P && 0 === F[P]; P--) ;
            if (P < T && (T = P), 0 === P) return h[c++] = 20971520, h[c++] = 20971520, d.bits = 1, 0;
            for (w = 1; w < P && 0 === F[w]; w++) ;
            for (T < w && (T = w), _ = C = 1; _ <= 15; _++) if (C <<= 1, (C -= F[_]) < 0) return -1;
            if (0 < C && (0 === t4 || 1 !== P)) return -1;
            for (D[1] = 0, _ = 1; _ < 15; _++) D[_ + 1] = D[_] + F[_];
            for (M = 0; M < l; M++) 0 !== e4[i4 + M] && (u[D[e4[i4 + M]]++] = M);
            if (S = 0 === t4 ? (I = O = u, 19) : 1 === t4 ? (I = n, B -= 257, O = r, k -= 257, 256) : (I = o, O = a, -1), _ = w, b = c, A = M = N = 0, p = -1, g = (R = 1 << (L = T)) - 1, 1 === t4 && 852 < R || 2 === t4 && 592 < R) return 1;
            for (; ; ) {
              for (y = _ - A, x = u[M] < S ? (E = 0, u[M]) : u[M] > S ? (E = O[k + u[M]], I[B + u[M]]) : (E = 96, 0), f = 1 << _ - A, w = m = 1 << L; h[b + (N >> A) + (m -= f)] = y << 24 | E << 16 | x, 0 !== m; ) ;
              for (f = 1 << _ - 1; N & f; ) f >>= 1;
              if (0 !== f ? (N &= f - 1, N += f) : N = 0, M++, 0 == --F[_]) {
                if (_ === P) break;
                _ = e4[i4 + u[M]];
              }
              if (T < _ && (N & g) !== p) {
                for (0 === A && (A = T), b += w, C = 1 << (L = _ - A); L + A < P && !((C -= F[L + A]) <= 0); ) L++, C <<= 1;
                if (R += 1 << L, 1 === t4 && 852 < R || 2 === t4 && 592 < R) return 1;
                h[p = N & g] = T << 24 | L << 16 | b - c;
              }
            }
            return 0 !== N && (h[b + N] = _ - A << 24 | 64 << 16), d.bits = T, 0;
          };
        }, { "../utils/common": 41 }], 51: [function(t3, e3, i3) {
          "use strict";
          e3.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
        }, {}], 52: [function(t3, e3, i3) {
          "use strict";
          var s = t3("../utils/common");
          function n(t4) {
            for (var e4 = t4.length; 0 <= --e4; ) t4[e4] = 0;
          }
          var r = 256, o = 286, a = 30, l = 15, h = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], c = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], u = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], d = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], f = new Array(576);
          n(f);
          var m = new Array(60);
          n(m);
          var p = new Array(512);
          n(p);
          var g = new Array(256);
          n(g);
          var b = new Array(29);
          n(b);
          var S, y, E, x = new Array(a);
          function v(t4, e4, i4, s2, n2) {
            this.static_tree = t4, this.extra_bits = e4, this.extra_base = i4, this.elems = s2, this.max_length = n2, this.has_stree = t4 && t4.length;
          }
          function _(t4, e4) {
            this.dyn_tree = t4, this.max_code = 0, this.stat_desc = e4;
          }
          function M(t4) {
            return t4 < 256 ? p[t4] : p[256 + (t4 >>> 7)];
          }
          function w(t4, e4) {
            t4.pending_buf[t4.pending++] = 255 & e4, t4.pending_buf[t4.pending++] = e4 >>> 8 & 255;
          }
          function P(t4, e4, i4) {
            t4.bi_valid > 16 - i4 ? (t4.bi_buf |= e4 << t4.bi_valid & 65535, w(t4, t4.bi_buf), t4.bi_buf = e4 >> 16 - t4.bi_valid, t4.bi_valid += i4 - 16) : (t4.bi_buf |= e4 << t4.bi_valid & 65535, t4.bi_valid += i4);
          }
          function T(t4, e4, i4) {
            P(t4, i4[2 * e4], i4[2 * e4 + 1]);
          }
          function L(t4, e4) {
            for (var i4 = 0; i4 |= 1 & t4, t4 >>>= 1, i4 <<= 1, 0 < --e4; ) ;
            return i4 >>> 1;
          }
          function A(t4, e4, i4) {
            var s2, n2, r2 = new Array(16), o2 = 0;
            for (s2 = 1; s2 <= l; s2++) r2[s2] = o2 = o2 + i4[s2 - 1] << 1;
            for (n2 = 0; n2 <= e4; n2++) {
              var a2 = t4[2 * n2 + 1];
              0 !== a2 && (t4[2 * n2] = L(r2[a2]++, a2));
            }
          }
          function C(t4) {
            var e4;
            for (e4 = 0; e4 < o; e4++) t4.dyn_ltree[2 * e4] = 0;
            for (e4 = 0; e4 < a; e4++) t4.dyn_dtree[2 * e4] = 0;
            for (e4 = 0; e4 < 19; e4++) t4.bl_tree[2 * e4] = 0;
            t4.dyn_ltree[512] = 1, t4.opt_len = t4.static_len = 0, t4.last_lit = t4.matches = 0;
          }
          function R(t4) {
            8 < t4.bi_valid ? w(t4, t4.bi_buf) : 0 < t4.bi_valid && (t4.pending_buf[t4.pending++] = t4.bi_buf), t4.bi_buf = 0, t4.bi_valid = 0;
          }
          function N(t4, e4, i4, s2) {
            var n2 = 2 * e4, r2 = 2 * i4;
            return t4[n2] < t4[r2] || t4[n2] === t4[r2] && s2[e4] <= s2[i4];
          }
          function I(t4, e4, i4) {
            for (var s2 = t4.heap[i4], n2 = i4 << 1; n2 <= t4.heap_len && (n2 < t4.heap_len && N(e4, t4.heap[n2 + 1], t4.heap[n2], t4.depth) && n2++, !N(e4, s2, t4.heap[n2], t4.depth)); ) t4.heap[i4] = t4.heap[n2], i4 = n2, n2 <<= 1;
            t4.heap[i4] = s2;
          }
          function B(t4, e4, i4) {
            var s2, n2, o2, a2, l2 = 0;
            if (0 !== t4.last_lit) for (; s2 = t4.pending_buf[t4.d_buf + 2 * l2] << 8 | t4.pending_buf[t4.d_buf + 2 * l2 + 1], n2 = t4.pending_buf[t4.l_buf + l2], l2++, 0 === s2 ? T(t4, n2, e4) : (T(t4, (o2 = g[n2]) + r + 1, e4), 0 !== (a2 = h[o2]) && P(t4, n2 -= b[o2], a2), T(t4, o2 = M(--s2), i4), 0 !== (a2 = c[o2]) && P(t4, s2 -= x[o2], a2)), l2 < t4.last_lit; ) ;
            T(t4, 256, e4);
          }
          function F(t4, e4) {
            var i4, s2, n2, r2 = e4.dyn_tree, o2 = e4.stat_desc.static_tree, a2 = e4.stat_desc.has_stree, h2 = e4.stat_desc.elems, c2 = -1;
            for (t4.heap_len = 0, t4.heap_max = 573, i4 = 0; i4 < h2; i4++) 0 !== r2[2 * i4] ? (t4.heap[++t4.heap_len] = c2 = i4, t4.depth[i4] = 0) : r2[2 * i4 + 1] = 0;
            for (; t4.heap_len < 2; ) r2[2 * (n2 = t4.heap[++t4.heap_len] = c2 < 2 ? ++c2 : 0)] = 1, t4.depth[n2] = 0, t4.opt_len--, a2 && (t4.static_len -= o2[2 * n2 + 1]);
            for (e4.max_code = c2, i4 = t4.heap_len >> 1; 1 <= i4; i4--) I(t4, r2, i4);
            for (n2 = h2; i4 = t4.heap[1], t4.heap[1] = t4.heap[t4.heap_len--], I(t4, r2, 1), s2 = t4.heap[1], t4.heap[--t4.heap_max] = i4, t4.heap[--t4.heap_max] = s2, r2[2 * n2] = r2[2 * i4] + r2[2 * s2], t4.depth[n2] = (t4.depth[i4] >= t4.depth[s2] ? t4.depth[i4] : t4.depth[s2]) + 1, r2[2 * i4 + 1] = r2[2 * s2 + 1] = n2, t4.heap[1] = n2++, I(t4, r2, 1), 2 <= t4.heap_len; ) ;
            t4.heap[--t4.heap_max] = t4.heap[1], function(t5, e5) {
              var i5, s3, n3, r3, o3, a3, h3 = e5.dyn_tree, c3 = e5.max_code, u2 = e5.stat_desc.static_tree, d2 = e5.stat_desc.has_stree, f2 = e5.stat_desc.extra_bits, m2 = e5.stat_desc.extra_base, p2 = e5.stat_desc.max_length, g2 = 0;
              for (r3 = 0; r3 <= l; r3++) t5.bl_count[r3] = 0;
              for (h3[2 * t5.heap[t5.heap_max] + 1] = 0, i5 = t5.heap_max + 1; i5 < 573; i5++) p2 < (r3 = h3[2 * h3[2 * (s3 = t5.heap[i5]) + 1] + 1] + 1) && (r3 = p2, g2++), h3[2 * s3 + 1] = r3, c3 < s3 || (t5.bl_count[r3]++, o3 = 0, m2 <= s3 && (o3 = f2[s3 - m2]), a3 = h3[2 * s3], t5.opt_len += a3 * (r3 + o3), d2 && (t5.static_len += a3 * (u2[2 * s3 + 1] + o3)));
              if (0 !== g2) {
                do {
                  for (r3 = p2 - 1; 0 === t5.bl_count[r3]; ) r3--;
                  t5.bl_count[r3]--, t5.bl_count[r3 + 1] += 2, t5.bl_count[p2]--, g2 -= 2;
                } while (0 < g2);
                for (r3 = p2; 0 !== r3; r3--) for (s3 = t5.bl_count[r3]; 0 !== s3; ) c3 < (n3 = t5.heap[--i5]) || (h3[2 * n3 + 1] !== r3 && (t5.opt_len += (r3 - h3[2 * n3 + 1]) * h3[2 * n3], h3[2 * n3 + 1] = r3), s3--);
              }
            }(t4, e4), A(r2, c2, t4.bl_count);
          }
          function D(t4, e4, i4) {
            var s2, n2, r2 = -1, o2 = e4[1], a2 = 0, l2 = 7, h2 = 4;
            for (0 === o2 && (l2 = 138, h2 = 3), e4[2 * (i4 + 1) + 1] = 65535, s2 = 0; s2 <= i4; s2++) n2 = o2, o2 = e4[2 * (s2 + 1) + 1], ++a2 < l2 && n2 === o2 || (a2 < h2 ? t4.bl_tree[2 * n2] += a2 : 0 !== n2 ? (n2 !== r2 && t4.bl_tree[2 * n2]++, t4.bl_tree[32]++) : a2 <= 10 ? t4.bl_tree[34]++ : t4.bl_tree[36]++, r2 = n2, h2 = (a2 = 0) === o2 ? (l2 = 138, 3) : n2 === o2 ? (l2 = 6, 3) : (l2 = 7, 4));
          }
          function O(t4, e4, i4) {
            var s2, n2, r2 = -1, o2 = e4[1], a2 = 0, l2 = 7, h2 = 4;
            for (0 === o2 && (l2 = 138, h2 = 3), s2 = 0; s2 <= i4; s2++) if (n2 = o2, o2 = e4[2 * (s2 + 1) + 1], !(++a2 < l2 && n2 === o2)) {
              if (a2 < h2) for (; T(t4, n2, t4.bl_tree), 0 != --a2; ) ;
              else 0 !== n2 ? (n2 !== r2 && (T(t4, n2, t4.bl_tree), a2--), T(t4, 16, t4.bl_tree), P(t4, a2 - 3, 2)) : a2 <= 10 ? (T(t4, 17, t4.bl_tree), P(t4, a2 - 3, 3)) : (T(t4, 18, t4.bl_tree), P(t4, a2 - 11, 7));
              r2 = n2, h2 = (a2 = 0) === o2 ? (l2 = 138, 3) : n2 === o2 ? (l2 = 6, 3) : (l2 = 7, 4);
            }
          }
          n(x);
          var k = false;
          function V(t4, e4, i4, n2) {
            P(t4, 0 + (n2 ? 1 : 0), 3), function(t5, e5, i5) {
              R(t5), w(t5, i5), w(t5, ~i5), s.arraySet(t5.pending_buf, t5.window, e5, i5, t5.pending), t5.pending += i5;
            }(t4, e4, i4);
          }
          i3._tr_init = function(t4) {
            k || (function() {
              var t5, e4, i4, s2, n2, r2 = new Array(16);
              for (s2 = i4 = 0; s2 < 28; s2++) for (b[s2] = i4, t5 = 0; t5 < 1 << h[s2]; t5++) g[i4++] = s2;
              for (g[i4 - 1] = s2, s2 = n2 = 0; s2 < 16; s2++) for (x[s2] = n2, t5 = 0; t5 < 1 << c[s2]; t5++) p[n2++] = s2;
              for (n2 >>= 7; s2 < a; s2++) for (x[s2] = n2 << 7, t5 = 0; t5 < 1 << c[s2] - 7; t5++) p[256 + n2++] = s2;
              for (e4 = 0; e4 <= l; e4++) r2[e4] = 0;
              for (t5 = 0; t5 <= 143; ) f[2 * t5 + 1] = 8, t5++, r2[8]++;
              for (; t5 <= 255; ) f[2 * t5 + 1] = 9, t5++, r2[9]++;
              for (; t5 <= 279; ) f[2 * t5 + 1] = 7, t5++, r2[7]++;
              for (; t5 <= 287; ) f[2 * t5 + 1] = 8, t5++, r2[8]++;
              for (A(f, 287, r2), t5 = 0; t5 < a; t5++) m[2 * t5 + 1] = 5, m[2 * t5] = L(t5, 5);
              S = new v(f, h, 257, o, l), y = new v(m, c, 0, a, l), E = new v(new Array(0), u, 0, 19, 7);
            }(), k = true), t4.l_desc = new _(t4.dyn_ltree, S), t4.d_desc = new _(t4.dyn_dtree, y), t4.bl_desc = new _(t4.bl_tree, E), t4.bi_buf = 0, t4.bi_valid = 0, C(t4);
          }, i3._tr_stored_block = V, i3._tr_flush_block = function(t4, e4, i4, s2) {
            var n2, o2, a2 = 0;
            0 < t4.level ? (2 === t4.strm.data_type && (t4.strm.data_type = function(t5) {
              var e5, i5 = 4093624447;
              for (e5 = 0; e5 <= 31; e5++, i5 >>>= 1) if (1 & i5 && 0 !== t5.dyn_ltree[2 * e5]) return 0;
              if (0 !== t5.dyn_ltree[18] || 0 !== t5.dyn_ltree[20] || 0 !== t5.dyn_ltree[26]) return 1;
              for (e5 = 32; e5 < r; e5++) if (0 !== t5.dyn_ltree[2 * e5]) return 1;
              return 0;
            }(t4)), F(t4, t4.l_desc), F(t4, t4.d_desc), a2 = function(t5) {
              var e5;
              for (D(t5, t5.dyn_ltree, t5.l_desc.max_code), D(t5, t5.dyn_dtree, t5.d_desc.max_code), F(t5, t5.bl_desc), e5 = 18; 3 <= e5 && 0 === t5.bl_tree[2 * d[e5] + 1]; e5--) ;
              return t5.opt_len += 3 * (e5 + 1) + 5 + 5 + 4, e5;
            }(t4), n2 = t4.opt_len + 3 + 7 >>> 3, (o2 = t4.static_len + 3 + 7 >>> 3) <= n2 && (n2 = o2)) : n2 = o2 = i4 + 5, i4 + 4 <= n2 && -1 !== e4 ? V(t4, e4, i4, s2) : 4 === t4.strategy || o2 === n2 ? (P(t4, 2 + (s2 ? 1 : 0), 3), B(t4, f, m)) : (P(t4, 4 + (s2 ? 1 : 0), 3), function(t5, e5, i5, s3) {
              var n3;
              for (P(t5, e5 - 257, 5), P(t5, i5 - 1, 5), P(t5, s3 - 4, 4), n3 = 0; n3 < s3; n3++) P(t5, t5.bl_tree[2 * d[n3] + 1], 3);
              O(t5, t5.dyn_ltree, e5 - 1), O(t5, t5.dyn_dtree, i5 - 1);
            }(t4, t4.l_desc.max_code + 1, t4.d_desc.max_code + 1, a2 + 1), B(t4, t4.dyn_ltree, t4.dyn_dtree)), C(t4), s2 && R(t4);
          }, i3._tr_tally = function(t4, e4, i4) {
            return t4.pending_buf[t4.d_buf + 2 * t4.last_lit] = e4 >>> 8 & 255, t4.pending_buf[t4.d_buf + 2 * t4.last_lit + 1] = 255 & e4, t4.pending_buf[t4.l_buf + t4.last_lit] = 255 & i4, t4.last_lit++, 0 === e4 ? t4.dyn_ltree[2 * i4]++ : (t4.matches++, e4--, t4.dyn_ltree[2 * (g[i4] + r + 1)]++, t4.dyn_dtree[2 * M(e4)]++), t4.last_lit === t4.lit_bufsize - 1;
          }, i3._tr_align = function(t4) {
            P(t4, 2, 3), T(t4, 256, f), function(t5) {
              16 === t5.bi_valid ? (w(t5, t5.bi_buf), t5.bi_buf = 0, t5.bi_valid = 0) : 8 <= t5.bi_valid && (t5.pending_buf[t5.pending++] = 255 & t5.bi_buf, t5.bi_buf >>= 8, t5.bi_valid -= 8);
            }(t4);
          };
        }, { "../utils/common": 41 }], 53: [function(t3, e3, i3) {
          "use strict";
          e3.exports = function() {
            this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
          };
        }, {}], 54: [function(t3, e3, s) {
          (function(t4) {
            !function(t5) {
              "use strict";
              if (!t5.setImmediate) {
                var e4, i3, s2, n, r = 1, o = {}, a = false, l = t5.document, h = Object.getPrototypeOf && Object.getPrototypeOf(t5);
                h = h && h.setTimeout ? h : t5, e4 = "[object process]" === {}.toString.call(t5.process) ? function(t6) {
                  process.nextTick(function() {
                    u(t6);
                  });
                } : function() {
                  if (t5.postMessage && !t5.importScripts) {
                    var e5 = true, i4 = t5.onmessage;
                    return t5.onmessage = function() {
                      e5 = false;
                    }, t5.postMessage("", "*"), t5.onmessage = i4, e5;
                  }
                }() ? (n = "setImmediate$" + Math.random() + "$", t5.addEventListener ? t5.addEventListener("message", d, false) : t5.attachEvent("onmessage", d), function(e5) {
                  t5.postMessage(n + e5, "*");
                }) : t5.MessageChannel ? ((s2 = new MessageChannel()).port1.onmessage = function(t6) {
                  u(t6.data);
                }, function(t6) {
                  s2.port2.postMessage(t6);
                }) : l && "onreadystatechange" in l.createElement("script") ? (i3 = l.documentElement, function(t6) {
                  var e5 = l.createElement("script");
                  e5.onreadystatechange = function() {
                    u(t6), e5.onreadystatechange = null, i3.removeChild(e5), e5 = null;
                  }, i3.appendChild(e5);
                }) : function(t6) {
                  setTimeout(u, 0, t6);
                }, h.setImmediate = function(t6) {
                  "function" != typeof t6 && (t6 = new Function("" + t6));
                  for (var i4 = new Array(arguments.length - 1), s3 = 0; s3 < i4.length; s3++) i4[s3] = arguments[s3 + 1];
                  var n2 = { callback: t6, args: i4 };
                  return o[r] = n2, e4(r), r++;
                }, h.clearImmediate = c;
              }
              function c(t6) {
                delete o[t6];
              }
              function u(t6) {
                if (a) setTimeout(u, 0, t6);
                else {
                  var e5 = o[t6];
                  if (e5) {
                    a = true;
                    try {
                      !function(t7) {
                        var e6 = t7.callback, i4 = t7.args;
                        switch (i4.length) {
                          case 0:
                            e6();
                            break;
                          case 1:
                            e6(i4[0]);
                            break;
                          case 2:
                            e6(i4[0], i4[1]);
                            break;
                          case 3:
                            e6(i4[0], i4[1], i4[2]);
                            break;
                          default:
                            e6.apply(void 0, i4);
                        }
                      }(e5);
                    } finally {
                      c(t6), a = false;
                    }
                  }
                }
              }
              function d(e5) {
                e5.source === t5 && "string" == typeof e5.data && 0 === e5.data.indexOf(n) && u(+e5.data.slice(n.length));
              }
            }("undefined" == typeof self ? void 0 === t4 ? this : t4 : self);
          }).call(this, void 0 !== i2.g ? i2.g : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
        }, {}] }, {}, [10])(10);
      }, 1745: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(7307), e2), n(i2(9252), e2), n(i2(7586), e2), n(i2(7435), e2), n(i2(427), e2), n(i2(5294), e2), n(i2(7456), e2), n(i2(4076), e2), n(i2(1121), e2), n(i2(6352), e2), n(i2(899), e2), n(i2(2870), e2);
      }, 1846: function(t2, e2, i2) {
        "use strict";
        var s, n = this && this.__extends || (s = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var i3 in e3) e3.hasOwnProperty(i3) && (t3[i3] = e3[i3]);
        }, function(t3, e3) {
          function i3() {
            this.constructor = t3;
          }
          s(t3, e3), t3.prototype = null === e3 ? Object.create(e3) : (i3.prototype = e3.prototype, new i3());
        });
        Object.defineProperty(e2, "__esModule", { value: true });
        var r = i2(6119), o = i2(4831), a = function() {
          function t3(t4, e3) {
            this.key = t4, this.value = e3;
          }
          return t3.prototype.unlink = function() {
            this.prev.next = this.next, this.next.prev = this.prev;
          }, t3;
        }(), l = function() {
          function t3() {
            this.key = null, this.value = null;
          }
          return t3.prototype.unlink = function() {
            this.prev.next = this.next, this.next.prev = this.prev;
          }, t3;
        }(), h = function(t3) {
          function e3(e4) {
            var i3 = t3.call(this, e4) || this;
            return i3.head = new l(), i3.tail = new l(), i3.head.next = i3.tail, i3.tail.prev = i3.head, i3;
          }
          return n(e3, t3), e3.prototype.appendToTail = function(t4) {
            var e4 = this.tail.prev;
            e4.next = t4, t4.prev = e4, t4.next = this.tail, this.tail.prev = t4;
          }, e3.prototype.getLinkedDictionaryPair = function(t4) {
            if (!o.isUndefined(t4)) {
              var e4 = "$" + this.toStr(t4);
              return this.table[e4];
            }
          }, e3.prototype.getValue = function(t4) {
            var e4 = this.getLinkedDictionaryPair(t4);
            if (!o.isUndefined(e4)) return e4.value;
          }, e3.prototype.remove = function(e4) {
            var i3 = this.getLinkedDictionaryPair(e4);
            if (!o.isUndefined(i3)) return t3.prototype.remove.call(this, e4), i3.unlink(), i3.value;
          }, e3.prototype.clear = function() {
            t3.prototype.clear.call(this), this.head.next = this.tail, this.tail.prev = this.head;
          }, e3.prototype.replace = function(t4, e4) {
            var i3 = "$" + this.toStr(e4.key);
            e4.next = t4.next, e4.prev = t4.prev, this.remove(t4.key), e4.prev.next = e4, e4.next.prev = e4, this.table[i3] = e4, ++this.nElements;
          }, e3.prototype.setValue = function(t4, e4) {
            if (!o.isUndefined(t4) && !o.isUndefined(e4)) {
              var i3 = this.getLinkedDictionaryPair(t4), s2 = new a(t4, e4), n2 = "$" + this.toStr(t4);
              return o.isUndefined(i3) ? (this.appendToTail(s2), this.table[n2] = s2, void ++this.nElements) : (this.replace(i3, s2), i3.value);
            }
          }, e3.prototype.keys = function() {
            var t4 = [];
            return this.forEach(function(e4, i3) {
              t4.push(e4);
            }), t4;
          }, e3.prototype.values = function() {
            var t4 = [];
            return this.forEach(function(e4, i3) {
              t4.push(i3);
            }), t4;
          }, e3.prototype.forEach = function(t4) {
            for (var e4 = this.head.next; e4.next; ) {
              if (false === t4(e4.key, e4.value)) return;
              e4 = e4.next;
            }
          }, e3;
        }(r.default);
        e2.default = h;
      }, 1850: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Appearance = e2.Note = void 0;
        const s = i2(2561);
        var n;
        e2.Note = class {
          constructor(t3, e3, i3, s2, n2, r) {
            this.slurs = [], this.playbackInstrumentId = void 0, this.notehead = void 0, this.printObject = true, this.voiceEntry = t3, this.parentStaffEntry = e3, this.length = i3, this.pitch = s2, this.sourceMeasure = n2, this.isRestFlag = r ?? false, this.halfTone = s2 ? s2.getHalfTone() : 0;
          }
          get NoteAsString() {
            return this.pitch.toString();
          }
          ToStringShort(t3 = 0) {
            var _a;
            return !this.Pitch || this.isRest() ? "rest" : (_a = this.Pitch) == null ? void 0 : _a.ToStringShort(t3);
          }
          get ToStringShortGet() {
            return this.ToStringShort(0);
          }
          get ParentVoiceEntry() {
            return this.voiceEntry;
          }
          set ParentVoiceEntry(t3) {
            this.voiceEntry = t3;
          }
          get ParentStaffEntry() {
            return this.parentStaffEntry;
          }
          get ParentStaff() {
            return this.parentStaffEntry.ParentStaff;
          }
          get Length() {
            return this.length;
          }
          set Length(t3) {
            this.length = t3;
          }
          get SourceMeasure() {
            return this.sourceMeasure;
          }
          get TypeLength() {
            return this.typeLength;
          }
          set TypeLength(t3) {
            this.typeLength = t3;
          }
          get NoteTypeXml() {
            return this.noteTypeXml;
          }
          set NoteTypeXml(t3) {
            this.noteTypeXml = t3;
          }
          get NormalNotes() {
            return this.normalNotes;
          }
          set NormalNotes(t3) {
            this.normalNotes = t3;
          }
          get Pitch() {
            return this.pitch;
          }
          get NoteBeam() {
            return this.beam;
          }
          set NoteBeam(t3) {
            this.beam = t3;
          }
          set Notehead(t3) {
            this.notehead = t3;
          }
          get Notehead() {
            return this.notehead;
          }
          get NoteTuplet() {
            return this.tuplet;
          }
          set NoteTuplet(t3) {
            this.tuplet = t3;
          }
          get NoteGlissando() {
            return this.glissando;
          }
          set NoteGlissando(t3) {
            this.glissando = t3;
          }
          get NoteTie() {
            return this.tie;
          }
          set NoteTie(t3) {
            this.tie = t3;
          }
          get NoteSlurs() {
            return this.slurs;
          }
          set NoteSlurs(t3) {
            this.slurs = t3;
          }
          get PlaybackInstrumentId() {
            return this.playbackInstrumentId;
          }
          set PlaybackInstrumentId(t3) {
            this.playbackInstrumentId = t3;
          }
          get PrintObject() {
            return this.printObject;
          }
          set PrintObject(t3) {
            this.printObject = t3;
          }
          get Arpeggio() {
            return this.arpeggio;
          }
          set Arpeggio(t3) {
            this.arpeggio = t3;
          }
          get IsCueNote() {
            return this.isCueNote;
          }
          set IsCueNote(t3) {
            this.isCueNote = t3;
          }
          get StemDirectionXml() {
            return this.stemDirectionXml;
          }
          set StemDirectionXml(t3) {
            this.stemDirectionXml = t3;
          }
          get TremoloStrokes() {
            var _a;
            return (_a = this.TremoloInfo) == null ? void 0 : _a.tremoloStrokes;
          }
          get StemColorXml() {
            return this.stemColorXml;
          }
          set StemColorXml(t3) {
            this.stemColorXml = t3;
          }
          get NoteheadColorXml() {
            return this.noteheadColorXml;
          }
          set NoteheadColorXml(t3) {
            this.noteheadColorXml = t3;
          }
          get NoteheadColor() {
            return this.noteheadColor;
          }
          set NoteheadColor(t3) {
            this.noteheadColor = t3;
          }
          get NoteheadColorCurrentlyRendered() {
            return this.noteheadColorCurrentlyRendered;
          }
          set NoteheadColorCurrentlyRendered(t3) {
            this.noteheadColorCurrentlyRendered = t3;
          }
          isRest() {
            return this.isRestFlag;
          }
          isWholeRest() {
            return this.isRest() && this.Length.RealValue === this.sourceMeasure.ActiveTimeSignature.RealValue;
          }
          isWholeMeasureNote() {
            return this.Length.RealValue === this.sourceMeasure.ActiveTimeSignature.RealValue;
          }
          ToString() {
            return this.pitch ? this.Pitch.ToString() + ", length: " + this.length.toString() : "rest note, length: " + this.length.toString();
          }
          getAbsoluteTimestamp() {
            return s.Fraction.plus(this.voiceEntry.Timestamp, this.sourceMeasure.AbsoluteTimestamp);
          }
          isDuplicateSlur(t3) {
            for (let e3 = 0, i3 = this.slurs.length; e3 < i3; ++e3) {
              const i4 = this.slurs[e3];
              if (void 0 !== i4.StartNote && void 0 !== i4.EndNote && void 0 !== t3.StartNote && t3.StartNote === i4.StartNote && i4.EndNote === this && t3.PlacementXml === i4.PlacementXml) return true;
            }
            return false;
          }
          hasTabEffects() {
            return false;
          }
        }, function(t3) {
          t3[t3.Normal = 0] = "Normal", t3[t3.Grace = 1] = "Grace", t3[t3.Cue = 2] = "Cue";
        }(n || (e2.Appearance = n = {}));
      }, 1888: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.PagePlacementEnum = e2.GraphicalMusicPage = void 0;
        const s = i2(6438), n = i2(7741), r = i2(9409);
        class o extends n.GraphicalObject {
          constructor(t3) {
            super(), this.musicSystems = [], this.labels = [], this.parent = t3, this.boundingBox = new s.BoundingBox(this, void 0);
          }
          get MusicSystems() {
            return this.musicSystems;
          }
          set MusicSystems(t3) {
            this.musicSystems = t3;
          }
          get Labels() {
            return this.labels;
          }
          set Labels(t3) {
            this.labels = t3;
          }
          get Parent() {
            return this.parent;
          }
          set Parent(t3) {
            this.parent = t3;
          }
          get PageNumber() {
            return this.pageNumber;
          }
          set PageNumber(t3) {
            this.pageNumber = t3;
          }
          setMusicPageAbsolutePosition(t3, e3) {
            return new r.PointF2D(0, 0);
          }
        }
        var a;
        e2.GraphicalMusicPage = o, function(t3) {
          t3[t3.Down = 0] = "Down", t3[t3.Right = 1] = "Right", t3[t3.RightDown = 2] = "RightDown";
        }(a || (e2.PagePlacementEnum = a = {}));
      }, 1902: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowBackend = e2.VexFlowBackends = void 0;
        var n = s(i2(3206)).default.Flow;
        e2.VexFlowBackends = class {
        }, e2.VexFlowBackend = class {
          getInnerElement() {
            return this.inner;
          }
          getCanvas() {
            return this.canvas;
          }
          getRenderElement() {
            let t3 = this.canvas;
            return this.getVexflowBackendType() === n.Renderer.Backends.CANVAS && (t3 = this.inner), t3;
          }
          getRenderer() {
            return this.renderer;
          }
          removeAllChildrenFromContainer(t3) {
            for (; 0 !== t3.children.length; ) t3.removeChild(t3.children.item(0));
          }
          removeFromContainer(t3) {
            const e3 = this.getRenderElement();
            for (let i3 = 0; i3 < t3.children.length; i3++) if (t3.children.item(i3) === e3) {
              t3.removeChild(e3);
              break;
            }
          }
          resize(t3, e3) {
            this.renderer.resize(t3, e3), this.width = t3, this.height = e3;
          }
        };
      }, 1910: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Staff = void 0, e2.Staff = class {
          constructor(t3, e3) {
            this.isTab = false, this.voices = [], this.volume = 1, this.stafflineCount = 5, this.hasLyrics = false, this.openTieDict = {}, this.parentInstrument = t3, this.id = e3, this.audible = true, this.following = true;
          }
          get ParentInstrument() {
            return this.parentInstrument;
          }
          set ParentInstrument(t3) {
            this.parentInstrument = t3;
          }
          get Voices() {
            return this.voices;
          }
          get Id() {
            return this.id;
          }
          get Volume() {
            return this.volume;
          }
          set Volume(t3) {
            this.volume = t3;
          }
          get StafflineCount() {
            return this.stafflineCount;
          }
          set StafflineCount(t3) {
            this.stafflineCount = t3;
          }
        };
      }, 1932: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MusicSheetDrawer = void 0;
        const s = i2(6438), n = i2(2683), r = i2(6452), o = i2(200), a = i2(9409), l = i2(8254), h = i2(7435), c = i2(7533), u = i2(7307), d = i2(4284), f = i2(512), m = i2(242), p = i2(7499), g = i2(298);
        e2.MusicSheetDrawer = class {
          constructor(t3, e3) {
            this.drawableBoundingBoxElement = "None", this.skyLineVisible = false, this.bottomLineVisible = false, this.phonicScoreMode = m.PhonicScoreModes.Manual, this.textMeasurer = t3, this.splitScreenLineColor = -1, this.drawingParameters = e3, this.rules = e3.Rules;
          }
          set Mode(t3) {
            this.phonicScoreMode = t3;
          }
          drawSheet(t3) {
            if (this.graphicalMusicSheet = t3, this.rules = t3.ParentMusicSheet.Rules, this.drawSplitScreenLine(), this.drawingParameters.drawCursors) for (const e4 of t3.Cursors) {
              if (!e4) continue;
              const t4 = new s.BoundingBox(e4);
              t4.AbsolutePosition = e4.Start, t4.BorderBottom = e4.End.y - e4.Start.y, t4.BorderRight = e4.Width / 2, t4.BorderLeft = -e4.Width / 2, this.isVisible(t4) && this.drawLineAsVerticalRectangle(e4, n.GraphicalLayers.Cursor);
            }
            this.drawingParameters.drawScrollIndicator && this.drawScrollIndicator();
            const e3 = Math.min(this.graphicalMusicSheet.MusicPages.length, this.rules.MaxPageToDrawNumber);
            for (let t4 = 0; t4 < e3; t4++) {
              const e4 = this.graphicalMusicSheet.MusicPages[t4];
              this.drawPage(e4);
            }
          }
          drawLineAsHorizontalRectangle(t3, e3) {
            let i3 = new o.RectangleF2D(t3.Start.x, t3.End.y - t3.Width / 2, t3.End.x - t3.Start.x, t3.Width);
            i3 = this.applyScreenTransformationForRect(i3), this.renderRectangle(i3, e3, t3.styleId, t3.colorHex);
          }
          drawLineAsVerticalRectangle(t3, e3) {
            const i3 = t3.Start, s2 = t3.Width;
            let n2 = new o.RectangleF2D(i3.x - s2 / 2, i3.y, s2, t3.End.y - i3.y);
            n2 = this.applyScreenTransformationForRect(n2), this.renderRectangle(n2, e3, t3.styleId);
          }
          drawLineAsHorizontalRectangleWithOffset(t3, e3, i3) {
            const s2 = new a.PointF2D(t3.Start.x + e3.x, t3.Start.y + e3.y), n2 = new a.PointF2D(t3.End.x + e3.x, t3.End.y + e3.y), r2 = t3.Width;
            let l2 = new o.RectangleF2D(s2.x, n2.y - r2 / 2, n2.x - s2.x, r2);
            l2 = this.applyScreenTransformationForRect(l2), this.renderRectangle(l2, i3, t3.styleId);
          }
          drawLineAsVerticalRectangleWithOffset(t3, e3, i3) {
            const s2 = new a.PointF2D(t3.Start.x + e3.x, t3.Start.y + e3.y), n2 = new a.PointF2D(t3.End.x + e3.x, t3.End.y + e3.y), r2 = t3.Width;
            let l2 = new o.RectangleF2D(s2.x, s2.y, r2, n2.y - s2.y);
            l2 = this.applyScreenTransformationForRect(l2), this.renderRectangle(l2, i3, t3.styleId);
          }
          drawRectangle(t3, e3) {
            const i3 = t3.PositionAndShape;
            let s2 = new o.RectangleF2D(i3.AbsolutePosition.x, i3.AbsolutePosition.y, i3.BorderRight, i3.BorderBottom);
            s2 = this.applyScreenTransformationForRect(s2), this.renderRectangle(s2, e3, t3.style);
          }
          calculatePixelDistance(t3) {
            throw new Error("not implemented");
          }
          drawLabel(t3, e3) {
            if (!this.isVisible(t3.PositionAndShape)) return;
            const i3 = t3.Label;
            if ("" === i3.text.trim()) return;
            const s2 = this.applyScreenTransformation(t3.PositionAndShape.AbsolutePosition), n2 = this.calculatePixelDistance(i3.fontHeight), r2 = this.calculatePixelDistance(t3.PositionAndShape.Size.width), o2 = Math.ceil(r2), a2 = Math.ceil(n2 * (0.2 + t3.TextLines.length));
            switch (i3.textAlignment) {
              case c.TextAlignmentEnum.LeftTop:
                break;
              case c.TextAlignmentEnum.LeftCenter:
                s2.y -= a2 / 2;
                break;
              case c.TextAlignmentEnum.LeftBottom:
                s2.y -= a2;
                break;
              case c.TextAlignmentEnum.CenterTop:
                s2.x -= o2 / 2;
                break;
              case c.TextAlignmentEnum.CenterCenter:
                s2.x -= o2 / 2, s2.y -= a2 / 2;
                break;
              case c.TextAlignmentEnum.CenterBottom:
                s2.x -= o2 / 2, s2.y -= a2;
                break;
              case c.TextAlignmentEnum.RightTop:
                s2.x -= o2;
                break;
              case c.TextAlignmentEnum.RightCenter:
                s2.x -= o2, s2.y -= a2 / 2;
                break;
              case c.TextAlignmentEnum.RightBottom:
                s2.x -= o2, s2.y -= a2;
                break;
              default:
                throw new u.ArgumentOutOfRangeException("");
            }
            return this.renderLabel(t3, e3, o2, a2, n2, s2);
          }
          applyScreenTransformation(t3) {
            throw new Error("not implemented");
          }
          applyScreenTransformations(t3) {
            const e3 = [];
            for (const i3 of t3) e3.push(this.applyScreenTransformation(i3));
            return e3;
          }
          applyScreenTransformationForRect(t3) {
            throw new Error("not implemented");
          }
          drawSplitScreenLine() {
          }
          renderRectangle(t3, e3, i3, s2 = void 0, n2 = 1) {
            throw new Error("not implemented");
          }
          drawScrollIndicator() {
          }
          drawSelectionStartSymbol(t3) {
          }
          drawSelectionEndSymbol(t3) {
          }
          renderLabel(t3, e3, i3, s2, n2, r2) {
            throw new Error("not implemented");
          }
          renderSystemToScreen(t3, e3, i3) {
          }
          drawMeasure(t3) {
            throw new Error("not implemented");
          }
          drawSkyLine(t3) {
          }
          drawBottomLine(t3) {
          }
          drawInstrumentBrace(t3, e3) {
          }
          drawGroupBracket(t3, e3) {
          }
          isVisible(t3) {
            return true;
          }
          drawMusicSystem(t3) {
            const e3 = this.getSystemAbsBoundingRect(t3), i3 = this.getSytemBoundingBoxInPixels(e3);
            this.drawMusicSystemComponents(t3, i3, e3);
          }
          getSytemBoundingBoxInPixels(t3) {
            const e3 = this.applyScreenTransformationForRect(t3);
            return e3.x = Math.round(e3.x), e3.y = Math.round(e3.y), e3;
          }
          getSystemAbsBoundingRect(t3) {
            const e3 = t3.PositionAndShape.BoundingRectangle;
            return new o.RectangleF2D(t3.PositionAndShape.AbsolutePosition.x + t3.PositionAndShape.BorderLeft - 1, t3.PositionAndShape.AbsolutePosition.y + t3.PositionAndShape.BorderTop - 1, e3.width + 6, e3.height + 2);
          }
          drawMusicSystemComponents(t3, e3, i3) {
            const s2 = this.graphicalMusicSheet.SelectionStartSymbol, r2 = this.graphicalMusicSheet.SelectionEndSymbol;
            this.drawingParameters.drawSelectionStartSymbol && void 0 !== s2 && this.isVisible(s2.PositionAndShape) && this.drawSelectionStartSymbol(s2), this.drawingParameters.drawSelectionEndSymbol && void 0 !== r2 && this.isVisible(r2.PositionAndShape) && this.drawSelectionEndSymbol(r2);
            for (const e4 of t3.StaffLines) this.drawStaffLine(e4), this.rules.RenderLyrics && (e4.LyricsDashes.length > 0 && this.drawDashes(e4.LyricsDashes), e4.LyricLines.length > 0 && this.drawLyricLines(e4.LyricLines, e4));
            for (const e4 of t3.SystemLines) this.drawSystemLineObject(e4);
            if (this.rules.RenderSystemLabelsAfterFirstPage || t3.Parent === t3.Parent.Parent.MusicPages[0]) for (const e4 of t3.Labels) e4.SVGNode = this.drawLabel(e4, n.GraphicalLayers.Notes);
            const o2 = this.graphicalMusicSheet.ParentMusicSheet.Instruments, a2 = o2.filter((t4) => t4.Visible).length;
            for (const e4 of t3.InstrumentBrackets) this.drawInstrumentBrace(e4, t3);
            if (o2.length > 0) if (a2 > 1) for (const e4 of t3.GroupBrackets) this.drawGroupBracket(e4, t3);
            else for (const e4 of t3.GroupBrackets) e4.Visible = false;
            if (!this.leadSheet) for (const e4 of t3.MeasureNumberLabels) e4.SVGNode = this.drawLabel(e4, n.GraphicalLayers.Notes);
            for (const e4 of t3.StaffLines) this.drawStaffLineSymbols(e4);
            this.drawingParameters.drawMarkedAreas && this.drawMarkedAreas(t3), this.drawingParameters.drawComments && this.drawComment(t3);
          }
          activateSystemRendering(t3, e3, i3, s2) {
            return true;
          }
          drawSystemLineObject(t3) {
          }
          drawStaffLine(t3) {
            for (const e3 of t3.Measures) this.drawMeasure(e3);
            this.rules.RenderLyrics && t3.LyricsDashes.length > 0 && this.drawDashes(t3.LyricsDashes), this.drawOctaveShifts(t3), this.drawPedals(t3), this.drawExpressions(t3), this.skyLineVisible && this.drawSkyLine(t3), this.bottomLineVisible && this.drawBottomLine(t3);
          }
          drawLyricLines(t3, e3) {
            e3.LyricLines.forEach((t4) => {
              t4.Start.y += e3.PositionAndShape.AbsolutePosition.y, t4.End.y += e3.PositionAndShape.AbsolutePosition.y, t4.Start.x += e3.PositionAndShape.AbsolutePosition.x, t4.End.x += e3.PositionAndShape.AbsolutePosition.x, this.drawGraphicalLine(t4, this.rules.LyricUnderscoreLineWidth, t4.colorHex);
            });
          }
          drawExpressions(t3) {
          }
          drawGraphicalLine(t3, e3, i3 = "black") {
            return this.drawLine(t3.Start, t3.End, i3, e3);
          }
          drawLine(t3, e3, i3 = "#FF0000FF", s2) {
          }
          drawDashes(t3) {
            t3.forEach((t4) => {
              var _a;
              t4.SVGNode = this.drawLabel(t4, n.GraphicalLayers.Notes), (_a = t4.SVGNode) == null ? void 0 : _a.classList.add("dash");
            });
          }
          drawOctaveShifts(t3) {
          }
          drawStaffLines(t3) {
            if (t3.StaffLines) {
              const e3 = t3.PositionAndShape.AbsolutePosition;
              for (let i3 = 0; i3 < 5; i3++) this.drawLineAsHorizontalRectangleWithOffset(t3.StaffLines[i3], e3, n.GraphicalLayers.Notes);
            }
          }
          drawInstantaneousDynamic(t3) {
            throw new Error("not implemented");
          }
          drawContinuousDynamic(t3) {
            throw new Error("not implemented");
          }
          drawSymbol(t3, e3, i3, s2 = 1, r2 = n.GraphicalLayers.Notes) {
          }
          get leadSheet() {
            return this.graphicalMusicSheet.LeadSheet;
          }
          set leadSheet(t3) {
            this.graphicalMusicSheet.LeadSheet = t3;
          }
          drawPage(t3) {
            if (this.isVisible(t3.PositionAndShape)) {
              for (const e3 of t3.MusicSystems) this.isVisible(e3.PositionAndShape) && this.drawMusicSystem(e3);
              if (t3 === t3.Parent.MusicPages[0]) for (const e3 of t3.Labels) e3.SVGNode = this.drawLabel(e3, n.GraphicalLayers.Notes);
              this.drawableBoundingBoxElement && this.drawBoundingBoxes(t3.PositionAndShape, 0, this.drawableBoundingBoxElement);
            }
          }
          drawBoundingBoxes(t3, e3 = 0, i3 = "all", s2 = false) {
            const n2 = t3.DataObject.constructor.name;
            let r2 = false;
            if ("all" === i3 ? r2 = true : "VexFlowStaffEntry" === i3 ? r2 = t3.DataObject instanceof p.VexFlowStaffEntry : "VexFlowMeasure" === i3 ? r2 = t3.DataObject instanceof p.VexFlowMeasure : "VexFlowGraphicalNote" === i3 ? r2 = t3.DataObject instanceof p.VexFlowGraphicalNote : "VexFlowVoiceEntry" === i3 ? r2 = t3.DataObject instanceof p.VexFlowVoiceEntry : "GraphicalLabel" === i3 ? r2 = t3.DataObject instanceof l.GraphicalLabel : "VexFlowStaffLine" === i3 ? r2 = t3.DataObject instanceof p.VexFlowStaffLine : "SystemLine" === i3 ? r2 = t3.DataObject instanceof d.SystemLine : "StaffLineActivitySymbol" === i3 ? r2 = t3.DataObject instanceof g.StaffLineActivitySymbol : "VexFlowContinuousDynamicExpression" === i3 && (r2 = t3.DataObject instanceof p.VexFlowContinuousDynamicExpression), r2 || n2 === i3) {
              let i4;
              s2 && (i4 = n2), this.drawBoundingBox(t3, void 0, true, i4, e3);
            }
            e3++, t3.ChildElements.forEach((t4) => this.drawBoundingBoxes(t4, e3, i3));
          }
          drawBoundingBox(t3, e3 = void 0, i3 = false, s2 = void 0, u2 = 0) {
            let d2 = new o.RectangleF2D(t3.AbsolutePosition.x + t3.BorderMarginLeft, t3.AbsolutePosition.y + t3.BorderMarginTop, t3.BorderMarginRight - t3.BorderMarginLeft, t3.BorderMarginBottom - t3.BorderMarginTop);
            i3 && (this.drawLineAsHorizontalRectangle(new r.GraphicalLine(new a.PointF2D(t3.AbsolutePosition.x - 1, t3.AbsolutePosition.y), new a.PointF2D(t3.AbsolutePosition.x + 1, t3.AbsolutePosition.y), 0.1, n.OutlineAndFillStyleEnum.BaseWritingColor, e3), u2 - 1), this.drawLineAsVerticalRectangle(new r.GraphicalLine(new a.PointF2D(t3.AbsolutePosition.x, t3.AbsolutePosition.y - 1), new a.PointF2D(t3.AbsolutePosition.x, t3.AbsolutePosition.y + 1), 0.1, n.OutlineAndFillStyleEnum.BaseWritingColor, e3), u2 - 1)), d2 = this.applyScreenTransformationForRect(d2);
            const f2 = this.renderRectangle(d2, n.GraphicalLayers.Background, u2, e3, 0.5);
            if (s2) {
              const t4 = new h.Label(s2), e4 = new l.GraphicalLabel(t4, 0.8, c.TextAlignmentEnum.CenterCenter, this.rules);
              e4.setLabelPositionAndShapeBorders(), this.renderLabel(e4, u2, d2.width, d2.height, d2.height, new a.PointF2D(d2.x, d2.y + 12));
            }
            return f2;
          }
          drawMarkedAreas(t3) {
            for (const e3 of t3.GraphicalMarkedAreas) e3 && (e3.systemRectangle && this.drawRectangle(e3.systemRectangle, n.GraphicalLayers.Background), e3.settings && (e3.settings.SVGNode = this.drawLabel(e3.settings, n.GraphicalLayers.Comment)), e3.labelRectangle && this.drawRectangle(e3.labelRectangle, n.GraphicalLayers.Background), e3.label && (e3.label.SVGNode = this.drawLabel(e3.label, n.GraphicalLayers.Comment)));
          }
          drawComment(t3) {
            for (const e3 of t3.GraphicalComments) e3 && (e3.settings && (e3.settings.SVGNode = this.drawLabel(e3.settings, n.GraphicalLayers.Comment)), e3.label && (e3.label.SVGNode = this.drawLabel(e3.label, n.GraphicalLayers.Comment)));
          }
          drawStaffLineSymbols(t3) {
            const e3 = t3.ParentStaff.ParentInstrument, i3 = t3.PositionAndShape.AbsolutePosition.x, s2 = t3.PositionAndShape.AbsolutePosition.y + 2, o2 = t3.PositionAndShape.BorderRight;
            e3.highlight && this.drawingParameters.drawHighlights && this.drawLineAsHorizontalRectangle(new r.GraphicalLine(new a.PointF2D(i3, s2), new a.PointF2D(i3 + o2, s2), 4, n.OutlineAndFillStyleEnum.Highlighted), n.GraphicalLayers.Highlight);
            let l2 = m.MusicSymbolDrawingStyle.Disabled, h2 = f.MusicSymbol.PLAY, c2 = this.drawingParameters.drawActivitySymbols;
            switch (this.phonicScoreMode) {
              case m.PhonicScoreModes.Midi:
                h2 = f.MusicSymbol.PLAY, this.midiPlaybackAvailable && t3.ParentStaff.audible && (l2 = m.MusicSymbolDrawingStyle.PlaybackSymbols);
                break;
              case m.PhonicScoreModes.Following:
                h2 = f.MusicSymbol.MIC, t3.ParentStaff.following && (l2 = m.MusicSymbolDrawingStyle.FollowSymbols);
                break;
              default:
                c2 = false;
            }
            if (c2) {
              const t4 = new a.PointF2D(i3 + o2 + 2, s2);
              this.drawSymbol(h2, l2, t4);
            }
            if (this.drawingParameters.drawErrors) for (const e4 of t3.Measures) {
              const t4 = e4.PositionAndShape, i4 = t4.AbsolutePosition.x, s3 = t4.AbsolutePosition.y + 2;
              e4.hasError && this.graphicalMusicSheet.ParentMusicSheet.DrawErroneousMeasures && this.drawLineAsHorizontalRectangle(new r.GraphicalLine(new a.PointF2D(i4, s3), new a.PointF2D(i4 + t4.BorderRight, s3), 4, n.OutlineAndFillStyleEnum.ErrorUnderlay), n.GraphicalLayers.MeasureError);
            }
          }
        };
      }, 1974: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.AbstractGraphicalInstruction = void 0;
        const s = i2(7741);
        class n extends s.GraphicalObject {
          constructor(t3) {
            super(), this.parent = t3;
          }
          get Parent() {
            return this.parent;
          }
          set Parent(t3) {
            this.parent = t3;
          }
        }
        e2.AbstractGraphicalInstruction = n;
      }, 2002: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), function(t3) {
          t3[t3.BEFORE = 0] = "BEFORE", t3[t3.AFTER = 1] = "AFTER", t3[t3.INSIDE_AT_END = 2] = "INSIDE_AT_END", t3[t3.INSIDE_AT_START = 3] = "INSIDE_AT_START";
        }(i2 || (i2 = {}));
        var s = function() {
          function t3(t4, e3) {
            void 0 === t4 && (t4 = []), void 0 === e3 && (e3 = {}), this.rootIds = t4, this.nodes = e3, this.initRootIds(), this.initNodes();
          }
          return t3.prototype.initRootIds = function() {
            for (var t4 = 0, e3 = this.rootIds; t4 < e3.length; t4++) {
              var i3 = e3[t4];
              this.createEmptyNodeIfNotExist(i3);
            }
          }, t3.prototype.initNodes = function() {
            for (var t4 in this.nodes) if (this.nodes.hasOwnProperty(t4)) for (var e3 = 0, i3 = this.nodes[t4]; e3 < i3.length; e3++) {
              var s2 = i3[e3];
              this.createEmptyNodeIfNotExist(s2);
            }
          }, t3.prototype.createEmptyNodeIfNotExist = function(t4) {
            this.nodes[t4] || (this.nodes[t4] = []);
          }, t3.prototype.getRootIds = function() {
            return this.rootIds.slice();
          }, t3.prototype.getNodes = function() {
            var t4 = {};
            for (var e3 in this.nodes) this.nodes.hasOwnProperty(e3) && (t4[e3] = this.nodes[e3].slice());
            return t4;
          }, t3.prototype.getObject = function() {
            return { rootIds: this.getRootIds(), nodes: this.getNodes() };
          }, t3.prototype.toObject = function() {
            return this.getObject();
          }, t3.prototype.flatten = function() {
            for (var t4 = this, e3 = [], i3 = 0; i3 < this.rootIds.length; i3++) {
              var s2 = this.rootIds[i3];
              e3.push({ id: s2, level: 0, hasParent: false, childrenCount: 0 }), l(s2, this.nodes, e3, 0);
            }
            for (var n = 0, r = e3; n < r.length; n++) {
              var o = r[n];
              o.childrenCount = (a = o.id, t4.nodes[a] ? t4.nodes[a].length : 0);
            }
            var a;
            return e3;
            function l(t5, e4, i4, s3) {
              if (void 0 === s3 && (s3 = 0), t5 && e4 && i4 && e4[t5]) {
                s3++;
                for (var n2 = e4[t5], r2 = 0; r2 < n2.length; r2++) {
                  var o2 = n2[r2];
                  i4.push({ id: o2, level: s3, hasParent: true }), l(o2, e4, i4, s3);
                }
                s3--;
              }
            }
          }, t3.prototype.moveIdBeforeId = function(t4, e3) {
            return this.moveId(t4, e3, i2.BEFORE);
          }, t3.prototype.moveIdAfterId = function(t4, e3) {
            return this.moveId(t4, e3, i2.AFTER);
          }, t3.prototype.moveIdIntoId = function(t4, e3, s2) {
            return void 0 === s2 && (s2 = true), s2 ? this.moveId(t4, e3, i2.INSIDE_AT_START) : this.moveId(t4, e3, i2.INSIDE_AT_END);
          }, t3.prototype.swapRootIdWithRootId = function(t4, e3) {
            var i3 = this.findRootId(t4), s2 = this.findRootId(e3);
            this.swapRootPositionWithRootPosition(i3, s2);
          }, t3.prototype.swapRootPositionWithRootPosition = function(t4, e3) {
            var i3 = this.rootIds[e3];
            this.rootIds[e3] = this.rootIds[t4], this.rootIds[t4] = i3;
          }, t3.prototype.deleteId = function(t4) {
            this.rootDeleteId(t4), this.nodeAndSubNodesDelete(t4), this.nodeRefrencesDelete(t4);
          }, t3.prototype.insertIdBeforeId = function(t4, e3) {
            var i3 = this.findRootId(t4);
            for (var s2 in i3 > -1 && this.insertIdIntoRoot(e3, i3), this.nodes) if (this.nodes.hasOwnProperty(s2)) {
              var n = this.findNodeId(s2, t4);
              n > -1 && this.insertIdIntoNode(s2, e3, n);
            }
          }, t3.prototype.insertIdAfterId = function(t4, e3) {
            var i3 = this.findRootId(t4);
            for (var s2 in i3 > -1 && this.insertIdIntoRoot(e3, i3 + 1), this.nodes) if (this.nodes.hasOwnProperty(s2)) {
              var n = this.findNodeId(s2, t4);
              n > -1 && this.insertIdIntoNode(s2, e3, n + 1);
            }
          }, t3.prototype.insertIdIntoId = function(t4, e3) {
            this.nodeInsertAtEnd(t4, e3), this.nodes[e3] = [];
          }, t3.prototype.insertIdIntoRoot = function(t4, e3) {
            if (void 0 === e3) this.rootInsertAtEnd(t4);
            else if (e3 < 0) {
              var i3 = this.rootIds.length;
              this.rootIds.splice(e3 + i3 + 1, 0, t4);
            } else this.rootIds.splice(e3, 0, t4);
            this.nodes[t4] = this.nodes[t4] || [];
          }, t3.prototype.insertIdIntoNode = function(t4, e3, i3) {
            if (this.nodes[t4] = this.nodes[t4] || [], this.nodes[e3] = this.nodes[e3] || [], void 0 === i3) this.nodeInsertAtEnd(t4, e3);
            else if (i3 < 0) {
              var s2 = this.nodes[t4].length;
              this.nodes[t4].splice(i3 + s2 + 1, 0, e3);
            } else this.nodes[t4].splice(i3, 0, e3);
          }, t3.prototype.moveId = function(t4, e3, s2) {
            var n = t4, r = this.findRootId(n);
            for (var o in this.nodes[e3], this.nodes) if (this.nodes.hasOwnProperty(o)) {
              this.findNodeId(o, e3);
              break;
            }
            var a = e3, l = this.findRootId(a);
            for (var o in this.nodes[e3], this.nodes) if (this.nodes.hasOwnProperty(o)) {
              this.findNodeId(o, e3);
              break;
            }
            if (r > -1) {
              if (l > -1) switch (this.rootDelete(r), l > r && l--, s2) {
                case i2.BEFORE:
                  this.insertIdIntoRoot(n, l);
                  break;
                case i2.AFTER:
                  this.insertIdIntoRoot(n, l + 1);
                  break;
                case i2.INSIDE_AT_START:
                  this.nodeInsertAtStart(a, n);
                  break;
                case i2.INSIDE_AT_END:
                  this.nodeInsertAtEnd(a, n);
              }
              else for (var o in this.rootDelete(r), this.nodes) if (this.nodes.hasOwnProperty(o) && (h = this.findNodeId(o, a)) > -1) {
                switch (s2) {
                  case i2.BEFORE:
                    this.insertIdIntoNode(o, n, h);
                    break;
                  case i2.AFTER:
                    this.insertIdIntoNode(o, n, h + 1);
                    break;
                  case i2.INSIDE_AT_START:
                    this.nodeInsertAtStart(a, n);
                    break;
                  case i2.INSIDE_AT_END:
                    this.nodeInsertAtEnd(a, n);
                }
                break;
              }
            } else if (l > -1) {
              for (var o in this.nodes) if (this.nodes.hasOwnProperty(o) && (h = this.findNodeId(o, n)) > -1) {
                this.nodeDeleteAtIndex(o, h);
                break;
              }
              switch (s2) {
                case i2.BEFORE:
                  this.insertIdIntoRoot(n, l);
                  break;
                case i2.AFTER:
                  this.insertIdIntoRoot(n, l + 1);
                  break;
                case i2.INSIDE_AT_START:
                  this.nodeInsertAtStart(a, n);
                  break;
                case i2.INSIDE_AT_END:
                  this.nodeInsertAtEnd(a, n);
              }
            } else {
              for (var o in this.nodes) if (this.nodes.hasOwnProperty(o) && (h = this.findNodeId(o, n)) > -1) {
                this.nodeDeleteAtIndex(o, h);
                break;
              }
              for (var o in this.nodes) {
                var h;
                if (this.nodes.hasOwnProperty(o) && (h = this.findNodeId(o, a)) > -1) {
                  switch (s2) {
                    case i2.BEFORE:
                      this.insertIdIntoNode(o, n, h);
                      break;
                    case i2.AFTER:
                      this.insertIdIntoNode(o, n, h + 1);
                      break;
                    case i2.INSIDE_AT_START:
                      this.nodeInsertAtStart(a, n);
                      break;
                    case i2.INSIDE_AT_END:
                      this.nodeInsertAtEnd(a, n);
                  }
                  break;
                }
              }
            }
          }, t3.prototype.swapArrayElements = function(t4, e3, i3) {
            var s2 = t4[e3];
            return t4[e3] = t4[i3], t4[i3] = s2, t4;
          }, t3.prototype.rootDeleteId = function(t4) {
            var e3 = this.findRootId(t4);
            e3 > -1 && this.rootDelete(e3);
          }, t3.prototype.nodeAndSubNodesDelete = function(t4) {
            for (var e3 = [], i3 = 0; i3 < this.nodes[t4].length; i3++) {
              var s2 = this.nodes[t4][i3];
              this.nodeAndSubNodesDelete(s2), e3.push(t4);
            }
            for (this.nodeDelete(t4), i3 = 0; i3 < e3.length; i3++) this.nodeDelete(e3[i3]);
          }, t3.prototype.nodeRefrencesDelete = function(t4) {
            for (var e3 in this.nodes) if (this.nodes.hasOwnProperty(e3)) for (var i3 = 0; i3 < this.nodes[e3].length; i3++) this.nodes[e3][i3] === t4 && this.nodeDeleteAtIndex(e3, i3);
          }, t3.prototype.nodeDelete = function(t4) {
            delete this.nodes[t4];
          }, t3.prototype.findRootId = function(t4) {
            return this.rootIds.indexOf(t4);
          }, t3.prototype.findNodeId = function(t4, e3) {
            return this.nodes[t4].indexOf(e3);
          }, t3.prototype.findNode = function(t4) {
            return this.nodes[t4];
          }, t3.prototype.nodeInsertAtStart = function(t4, e3) {
            this.nodes[t4].unshift(e3);
          }, t3.prototype.nodeInsertAtEnd = function(t4, e3) {
            this.nodes[t4].push(e3);
          }, t3.prototype.rootDelete = function(t4) {
            this.rootIds.splice(t4, 1);
          }, t3.prototype.nodeDeleteAtIndex = function(t4, e3) {
            this.nodes[t4].splice(e3, 1);
          }, t3.prototype.rootInsertAtStart = function(t4) {
            this.rootIds.unshift(t4);
          }, t3.prototype.rootInsertAtEnd = function(t4) {
            this.rootIds.push(t4);
          }, t3;
        }();
        e2.default = s;
      }, 2083: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4538), n = function() {
          function t3() {
            this.list = new s.default();
          }
          return t3.prototype.push = function(t4) {
            return this.list.add(t4, 0);
          }, t3.prototype.add = function(t4) {
            return this.list.add(t4, 0);
          }, t3.prototype.pop = function() {
            return this.list.removeElementAtIndex(0);
          }, t3.prototype.peek = function() {
            return this.list.first();
          }, t3.prototype.size = function() {
            return this.list.size();
          }, t3.prototype.contains = function(t4, e3) {
            return this.list.contains(t4, e3);
          }, t3.prototype.isEmpty = function() {
            return this.list.isEmpty();
          }, t3.prototype.clear = function() {
            this.list.clear();
          }, t3.prototype.forEach = function(t4) {
            this.list.forEach(t4);
          }, t3;
        }();
        e2.default = n;
      }, 2091: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4831), n = i2(4713), r = i2(6119), o = function() {
          function t3(t4) {
            this.dictionary = new r.default(t4);
          }
          return t3.prototype.contains = function(t4) {
            return this.dictionary.containsKey(t4);
          }, t3.prototype.add = function(t4) {
            return !this.contains(t4) && !s.isUndefined(t4) && (this.dictionary.setValue(t4, t4), true);
          }, t3.prototype.intersection = function(t4) {
            var e3 = this;
            this.forEach(function(i3) {
              return t4.contains(i3) || e3.remove(i3), true;
            });
          }, t3.prototype.union = function(t4) {
            var e3 = this;
            t4.forEach(function(t5) {
              return e3.add(t5), true;
            });
          }, t3.prototype.difference = function(t4) {
            var e3 = this;
            t4.forEach(function(t5) {
              return e3.remove(t5), true;
            });
          }, t3.prototype.isSubsetOf = function(t4) {
            if (this.size() > t4.size()) return false;
            var e3 = true;
            return this.forEach(function(i3) {
              return !!t4.contains(i3) || (e3 = false, false);
            }), e3;
          }, t3.prototype.remove = function(t4) {
            return !!this.contains(t4) && (this.dictionary.remove(t4), true);
          }, t3.prototype.forEach = function(t4) {
            this.dictionary.forEach(function(e3, i3) {
              return t4(i3);
            });
          }, t3.prototype.toArray = function() {
            return this.dictionary.values();
          }, t3.prototype.isEmpty = function() {
            return this.dictionary.isEmpty();
          }, t3.prototype.size = function() {
            return this.dictionary.size();
          }, t3.prototype.clear = function() {
            this.dictionary.clear();
          }, t3.prototype.toString = function() {
            return n.toString(this.toArray());
          }, t3;
        }();
        e2.default = o;
      }, 2148: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.ITextTranslation = void 0, e2.ITextTranslation = class {
          static translateText(t3, e3) {
            if (!this.defaultTextTranslation) return e3;
          }
        };
      }, 2221: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.ContinuousTempoType = e2.ContinuousTempoExpression = void 0;
        const s = i2(2561), n = i2(9147);
        class r extends n.AbstractTempoExpression {
          constructor(t3, e3, i3, s2) {
            super(t3, e3, i3, s2), this.setTempoType();
          }
          static isInputStringContinuousTempo(t3) {
            return !!t3 && (r.isStringInStringList(r.listContinuousTempoFaster, t3) || r.isStringInStringList(r.listContinuousTempoSlower, t3));
          }
          static isIncreasingTempo(t3) {
            return t3 <= o.piuMosso;
          }
          static isDecreasingTempo(t3) {
            return t3 >= o.allargando && t3 <= o.ritenuto;
          }
          get TempoType() {
            return this.tempoType;
          }
          set TempoType(t3) {
            this.tempoType = t3;
          }
          get StartTempo() {
            return this.startTempo;
          }
          set StartTempo(t3) {
            this.startTempo = t3;
          }
          get EndTempo() {
            return this.endTempo;
          }
          set EndTempo(t3) {
            this.endTempo = t3;
          }
          get AbsoluteEndTimestamp() {
            return this.absoluteEndTimestamp;
          }
          set AbsoluteEndTimestamp(t3) {
            this.absoluteEndTimestamp = t3;
          }
          get AbsoluteTimestamp() {
            return this.ParentMultiTempoExpression.AbsoluteTimestamp;
          }
          getAbsoluteFloatTimestamp() {
            return this.ParentMultiTempoExpression.AbsoluteTimestamp.RealValue;
          }
          getInterpolatedTempo(t3) {
            const e3 = s.Fraction.plus(this.parentMultiTempoExpression.SourceMeasureParent.AbsoluteTimestamp, this.parentMultiTempoExpression.Timestamp);
            if (t3.lt(e3)) return -1;
            if (this.absoluteEndTimestamp.lt(t3)) return -2;
            const i3 = s.Fraction.minus(t3, e3).RealValue / s.Fraction.minus(this.absoluteEndTimestamp, e3).RealValue;
            return Math.max(0, Math.min(250, this.startTempo + (this.endTempo - this.startTempo) * i3));
          }
          setTempoType() {
            r.isStringInStringList(r.listContinuousTempoFaster, this.label) ? this.tempoType = o.accelerando : r.isStringInStringList(r.listContinuousTempoSlower, this.label) && (this.tempoType = o.ritardando);
          }
        }
        var o;
        e2.ContinuousTempoExpression = r, r.listContinuousTempoFaster = ["accelerando", "piu mosso", "poco piu", "stretto"], r.listContinuousTempoSlower = ["poco meno", "meno mosso", "piu lento", "calando", "allargando", "rallentando", "ritardando", "ritenuto", "ritard.", "ritard", "rit.", "rit", "riten.", "riten"], function(t3) {
          t3[t3.accelerando = 0] = "accelerando", t3[t3.stretto = 1] = "stretto", t3[t3.stringendo = 2] = "stringendo", t3[t3.mosso = 3] = "mosso", t3[t3.piuMosso = 4] = "piuMosso", t3[t3.allargando = 5] = "allargando", t3[t3.calando = 6] = "calando", t3[t3.menoMosso = 7] = "menoMosso", t3[t3.rallentando = 8] = "rallentando", t3[t3.ritardando = 9] = "ritardando", t3[t3.ritard = 10] = "ritard", t3[t3.rit = 11] = "rit", t3[t3.ritenuto = 12] = "ritenuto", t3[t3.rubato = 13] = "rubato", t3[t3.precipitando = 14] = "precipitando";
        }(o || (e2.ContinuousTempoType = o = {}));
      }, 2257: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(4434), e2), n(i2(4146), e2), n(i2(2570), e2), n(i2(5951), e2), n(i2(7533), e2), n(i2(2514), e2);
      }, 2317: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.LyricsEntry = void 0;
        const s = i2(2570);
        e2.LyricsEntry = class {
          constructor(t3, e3, i3, s2, n = -1) {
            this.text = t3, this.word = i3, this.parent = s2, this.verseNumber = e3, n >= 0 && (this.syllableIndex = n);
          }
          get Text() {
            return this.text;
          }
          set Text(t3) {
            this.text = t3;
          }
          get Word() {
            return this.word;
          }
          get Parent() {
            return this.parent;
          }
          set Parent(t3) {
            this.parent = t3;
          }
          get VerseNumber() {
            return this.verseNumber;
          }
          get SyllableIndex() {
            return this.syllableIndex;
          }
          get IsTranslation() {
            return this.VerseNumber.endsWith("translation");
          }
          get IsChorus() {
            return this.VerseNumber.startsWith("chorus");
          }
          get FontStyle() {
            return this.IsChorus || this.IsTranslation ? s.FontStyles.Italic : s.FontStyles.Regular;
          }
        };
      }, 2338: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4831), n = i2(6119), r = i2(4713), o = function() {
          function t3(t4, e3, i3) {
            void 0 === i3 && (i3 = false), this.dict = new n.default(t4), this.equalsF = e3 || s.defaultEquals, this.allowDuplicate = i3;
          }
          return t3.prototype.getValue = function(t4) {
            var e3 = this.dict.getValue(t4);
            return s.isUndefined(e3) ? [] : r.copy(e3);
          }, t3.prototype.setValue = function(t4, e3) {
            if (s.isUndefined(t4) || s.isUndefined(e3)) return false;
            var i3 = this.dict.getValue(t4);
            return s.isUndefined(i3) ? (this.dict.setValue(t4, [e3]), true) : !(!this.allowDuplicate && r.contains(i3, e3, this.equalsF) || (i3.push(e3), 0));
          }, t3.prototype.remove = function(t4, e3) {
            if (s.isUndefined(e3)) {
              var i3 = this.dict.remove(t4);
              return !s.isUndefined(i3);
            }
            var n2 = this.dict.getValue(t4);
            return !(s.isUndefined(n2) || !r.remove(n2, e3, this.equalsF) || (0 === n2.length && this.dict.remove(t4), 0));
          }, t3.prototype.keys = function() {
            return this.dict.keys();
          }, t3.prototype.values = function() {
            for (var t4 = [], e3 = 0, i3 = this.dict.values(); e3 < i3.length; e3++) for (var s2 = 0, n2 = i3[e3]; s2 < n2.length; s2++) {
              var r2 = n2[s2];
              t4.push(r2);
            }
            return t4;
          }, t3.prototype.containsKey = function(t4) {
            return this.dict.containsKey(t4);
          }, t3.prototype.clear = function() {
            this.dict.clear();
          }, t3.prototype.size = function() {
            return this.dict.size();
          }, t3.prototype.isEmpty = function() {
            return this.dict.isEmpty();
          }, t3;
        }();
        e2.default = o;
      }, 2369: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SourceStaffEntry = void 0;
        const s = i2(2561), n = i2(164), r = i2(4543), o = i2(9288);
        e2.SourceStaffEntry = class {
          constructor(t3, e3) {
            this.voiceEntries = [], this.instructions = [], this.chordSymbolContainers = [], this.verticalContainerParent = t3, this.parentStaff = e3;
          }
          get ParentStaff() {
            return this.parentStaff;
          }
          get VerticalContainerParent() {
            return this.verticalContainerParent;
          }
          get Timestamp() {
            if (this.VerticalContainerParent) return this.VerticalContainerParent.Timestamp;
          }
          get AbsoluteTimestamp() {
            if (this.VerticalContainerParent) return s.Fraction.plus(this.VerticalContainerParent.ParentMeasure.AbsoluteTimestamp, this.VerticalContainerParent.Timestamp);
          }
          get VoiceEntries() {
            return this.voiceEntries;
          }
          set VoiceEntries(t3) {
            this.voiceEntries = t3;
          }
          get Link() {
            return this.staffEntryLink;
          }
          set Link(t3) {
            this.staffEntryLink = t3;
          }
          get Instructions() {
            return this.instructions;
          }
          set Instructions(t3) {
            this.instructions = t3;
          }
          get ChordContainers() {
            return this.chordSymbolContainers;
          }
          set ChordContainers(t3) {
            this.chordSymbolContainers = t3;
          }
          removeAllInstructionsOfTypeClefInstruction() {
            let t3 = 0, e3 = 0;
            for (; t3 < this.instructions.length; ) this.instructions[t3] instanceof n.ClefInstruction ? (this.instructions.splice(t3, 1), e3++) : t3++;
            return e3;
          }
          removeFirstInstructionOfTypeClefInstruction() {
            for (let t3 = 0; t3 < this.instructions.length; t3++) if (this.instructions[t3] instanceof n.ClefInstruction) return this.instructions.splice(t3, 1), true;
            return false;
          }
          removeAllInstructionsOfTypeKeyInstruction() {
            let t3 = 0, e3 = 0;
            for (; t3 < this.instructions.length; ) this.instructions[t3] instanceof r.KeyInstruction ? (this.instructions.splice(t3, 1), e3++) : t3++;
            return e3;
          }
          removeFirstInstructionOfTypeKeyInstruction() {
            for (let t3 = 0; t3 < this.instructions.length; t3++) if (this.instructions[t3] instanceof r.KeyInstruction) return this.instructions.splice(t3, 1), true;
            return false;
          }
          removeAllInstructionsOfTypeRhythmInstruction() {
            let t3 = 0, e3 = 0;
            for (; t3 < this.instructions.length; ) this.instructions[t3] instanceof o.RhythmInstruction ? (this.instructions.splice(t3, 1), e3++) : t3++;
            return e3;
          }
          removeFirstInstructionOfTypeRhythmInstruction() {
            for (let t3 = 0; t3 < this.instructions.length; t3++) if (this.instructions[t3] instanceof o.RhythmInstruction) return this.instructions.splice(t3, 1), true;
            return false;
          }
          calculateMinNoteLength() {
            let t3 = new s.Fraction(Number.MAX_VALUE, 1);
            for (let e3 = 0, i3 = this.VoiceEntries.length; e3 < i3; ++e3) {
              const i4 = this.VoiceEntries[e3];
              for (let e4 = 0, s2 = i4.Notes.length; e4 < s2; ++e4) {
                const s3 = i4.Notes[e4];
                s3.Length.lt(t3) && (t3 = s3.Length);
              }
            }
            return t3;
          }
          calculateMaxNoteLength(t3 = true) {
            let e3 = new s.Fraction(0, 1);
            for (let i3 = 0, n2 = this.VoiceEntries.length; i3 < n2; ++i3) {
              const n3 = this.VoiceEntries[i3];
              for (let i4 = 0, r2 = n3.Notes.length; i4 < r2; ++i4) {
                const r3 = n3.Notes[i4];
                if (t3 && r3.NoteTie) {
                  const t4 = s.Fraction.createFromFraction(r3.Length);
                  let i5 = false;
                  for (const e4 of r3.NoteTie.Notes) e4 !== r3 ? i5 && t4.Add(e4.Length) : i5 = true;
                  e3.lt(t4) && (e3 = t4);
                } else e3.lt(r3.Length) && (e3 = r3.Length);
              }
            }
            return e3;
          }
          hasNotes() {
            for (let t3 = 0, e3 = this.VoiceEntries.length; t3 < e3; ++t3) if (this.VoiceEntries[t3].Notes.length > 0) return true;
            return false;
          }
          hasTie() {
            for (let t3 = 0, e3 = this.VoiceEntries.length; t3 < e3; ++t3) if (this.VoiceEntries[t3].hasTie()) return true;
            return false;
          }
          findLinkedNotes(t3) {
            for (let e3 = 0, i3 = this.voiceEntries.length; e3 < i3; ++e3) {
              const i4 = this.voiceEntries[e3];
              for (let e4 = 0, s2 = i4.Notes.length; e4 < s2; ++e4) {
                const s3 = i4.Notes[e4];
                s3.ParentStaffEntry === this && t3.push(s3);
              }
            }
          }
          get hasOnlyRests() {
            for (const t3 of this.voiceEntries) for (const e3 of t3.Notes) if (!e3.isRest()) return false;
            return true;
          }
        };
      }, 2395: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalLyricEntry = void 0;
        const s = i2(8254), n = i2(7435), r = i2(9409), o = i2(7533);
        e2.GraphicalLyricEntry = class {
          constructor(t3, e3, i3, a) {
            this.lyricsEntry = t3, this.graphicalStaffEntry = e3;
            const l = e3.parentMeasure.parentSourceMeasure.Rules.LyricsAlignmentStandard;
            t3.Text.length >= 4 && t3.Parent.Notes[0].Length.Denominator > 4 && o.TextAlignmentEnum.LeftBottom;
            const h = new n.Label(t3.Text), c = this.graphicalStaffEntry.parentMeasure.parentSourceMeasure.Rules;
            this.graphicalLabel = new s.GraphicalLabel(h, i3, l, c, e3.PositionAndShape), this.graphicalLabel.Label.colorDefault = c.DefaultColorLyrics, this.graphicalLabel.PositionAndShape.RelativePosition = new r.PointF2D(0, a), this.graphicalLabel.setLabelPositionAndShapeBorders(), this.graphicalLabel.PositionAndShape.Size.width < c.LyricsExtraXShiftForShortLyricsWidthThreshold && (this.graphicalLabel.PositionAndShape.RelativePosition.x += c.LyricsExtraXShiftForShortLyrics, this.graphicalLabel.CenteringXShift = c.LyricsExtraXShiftForShortLyrics), l === o.TextAlignmentEnum.LeftBottom && (this.graphicalLabel.PositionAndShape.RelativePosition.x -= 1);
          }
          hasDashFromLyricWord() {
            if (!this.ParentLyricWord) return false;
            const t3 = this.ParentLyricWord.GraphicalLyricsEntries.indexOf(this);
            return this.ParentLyricWord.GraphicalLyricsEntries.length > 1 && t3 < this.ParentLyricWord.GraphicalLyricsEntries.length - 1;
          }
          get LyricsEntry() {
            return this.lyricsEntry;
          }
          get ParentLyricWord() {
            return this.graphicalLyricWord;
          }
          set ParentLyricWord(t3) {
            this.graphicalLyricWord = t3;
          }
          get GraphicalLabel() {
            return this.graphicalLabel;
          }
          set GraphicalLabel(t3) {
            this.graphicalLabel = t3;
          }
          get StaffEntryParent() {
            return this.graphicalStaffEntry;
          }
          set StaffEntryParent(t3) {
            this.graphicalStaffEntry = t3;
          }
        };
      }, 2400: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowContinuousDynamicExpression = void 0;
        const s = i2(1066), n = i2(8254), r = i2(7435), o = i2(7533), a = i2(2570);
        class l extends s.GraphicalContinuousDynamicExpression {
          constructor(t3, e3, i3, s2) {
            if (super(t3, e3, i3), this.IsVerbal) {
              const e4 = new r.Label(t3.Label);
              this.label = new n.GraphicalLabel(e4, s2 || this.rules.ContinuousDynamicTextHeight, o.TextAlignmentEnum.LeftCenter, this.rules, this.PositionAndShape), this.label.Label.fontStyle = a.FontStyles.Italic, this.label.setLabelPositionAndShapeBorders(), this.PositionAndShape.calculateBoundingBox();
            }
          }
        }
        e2.VexFlowContinuousDynamicExpression = l;
      }, 2514: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.TieTypes = void 0, function(t3) {
          t3.SIMPLE = "", t3.HAMMERON = "H", t3.PULLOFF = "P", t3.SLIDE = "S", t3.TAPPING = "T";
        }(i2 || (e2.TieTypes = i2 = {}));
      }, 2552: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(9735), e2), n(i2(2257), e2), n(i2(599), e2);
      }, 2561: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Fraction = void 0;
        class i2 {
          static max(t3, e3) {
            return t3.RealValue > e3.RealValue ? t3 : e3;
          }
          static Equal(t3, e3) {
            return t3.wholeValue === e3.wholeValue && t3.Denominator === e3.Denominator && t3.Numerator === e3.Numerator;
          }
          static createFromFraction(t3) {
            return new i2(t3.numerator, t3.denominator, t3.wholeValue, false);
          }
          static plus(t3, e3) {
            const i3 = t3.clone();
            return i3.Add(e3), i3;
          }
          static minus(t3, e3) {
            const i3 = t3.clone();
            return i3.Sub(e3), i3;
          }
          static multiply(t3, e3) {
            return new i2((t3.wholeValue * t3.denominator + t3.numerator) * (e3.wholeValue * e3.denominator + e3.numerator), t3.denominator * e3.denominator);
          }
          static greatestCommonDenominator(t3, e3) {
            if (0 === t3) return e3;
            if (1 === e3) return 1;
            for (; Math.abs(e3) >= 1 && Math.abs(t3) >= 1; ) t3 > e3 ? t3 -= e3 : e3 -= t3;
            const i3 = Math.round(t3);
            return Math.max(i3, 1);
          }
          constructor(t3 = 0, e3 = 1, i3 = 0, s = true) {
            this.numerator = 0, this.denominator = 1, this.wholeValue = 0, this.numerator = t3, this.denominator = e3, this.wholeValue = i3, s && this.simplify(), this.setRealValue();
          }
          toString() {
            let t3 = this.numerator + "/" + this.denominator;
            return 0 !== this.wholeValue && (t3 = this.wholeValue + " " + t3), t3;
          }
          clone() {
            return new i2(this.numerator, this.denominator, this.wholeValue, false);
          }
          get Numerator() {
            return this.numerator;
          }
          set Numerator(t3) {
            this.numerator !== t3 && (this.numerator = t3, this.simplify(), this.setRealValue());
          }
          get Denominator() {
            return this.denominator;
          }
          set Denominator(t3) {
            this.denominator !== t3 && (this.denominator = t3, 0 !== this.numerator && this.simplify(), this.setRealValue());
          }
          get WholeValue() {
            return this.wholeValue;
          }
          set WholeValue(t3) {
            this.wholeValue !== t3 && (this.wholeValue = t3, this.setRealValue());
          }
          GetExpandedNumerator() {
            return this.wholeValue * this.denominator + this.numerator;
          }
          calculateNumberOfNeededDots() {
            let t3 = 1, e3 = 2;
            const i3 = this.GetExpandedNumerator();
            for (; e3 < i3; ) t3++, e3 = Math.pow(2, t3);
            return Math.min(3, t3 - 1);
          }
          IsNegative() {
            return this.realValue < 0;
          }
          get RealValue() {
            return this.realValue;
          }
          expand(t3) {
            this.numerator *= t3, this.denominator *= t3, 0 !== this.wholeValue && (this.numerator += this.wholeValue * this.denominator, this.wholeValue = 0);
          }
          Add(t3) {
            return this.numerator = (this.wholeValue * this.denominator + this.numerator) * t3.denominator + (t3.wholeValue * t3.denominator + t3.numerator) * this.denominator, this.denominator = this.denominator * t3.denominator, this.wholeValue = 0, this.simplify(), this.setRealValue(), this;
          }
          Sub(t3) {
            return this.numerator = (this.wholeValue * this.denominator + this.numerator) * t3.denominator - (t3.wholeValue * t3.denominator + t3.numerator) * this.denominator, this.denominator = this.denominator * t3.denominator, this.wholeValue = 0, this.simplify(), this.setRealValue(), this;
          }
          Quantize(t3) {
            if (this.denominator <= t3) return this;
            const e3 = new i2(this.numerator + 1, this.denominator, this.wholeValue);
            for (; e3.Denominator > t3; ) e3.Numerator++;
            if (this.numerator > this.denominator) {
              const s = new i2(this.numerator - 1, this.denominator, this.wholeValue);
              for (; s.Denominator > t3; ) s.Numerator--;
              if (s.Denominator < e3.Denominator) return s;
            }
            return e3;
          }
          Equals(t3) {
            return this.realValue === (t3 == null ? void 0 : t3.realValue);
          }
          CompareTo(t3) {
            const e3 = this.realValue - t3.realValue;
            return e3 ? e3 < 0 ? -1 : 1 : 0;
          }
          lt(t3) {
            return this.realValue < t3.realValue;
          }
          lte(t3) {
            return this.realValue <= t3.realValue;
          }
          gt(t3) {
            return !this.lte(t3);
          }
          gte(t3) {
            return !this.lt(t3);
          }
          setRealValue() {
            this.realValue = this.wholeValue + this.numerator / this.denominator;
          }
          simplify() {
            if (0 === this.numerator) return void (this.denominator = 1);
            const t3 = i2.greatestCommonDenominator(Math.abs(this.numerator), Math.abs(this.denominator));
            this.numerator /= t3, this.denominator /= t3;
            const e3 = Math.floor(this.numerator / this.denominator);
            if (0 !== e3 && (this.wholeValue += e3, this.numerator -= e3 * this.denominator, 0 === this.numerator && (this.denominator = 1)), this.denominator > i2.maximumAllowedNumber) {
              const t4 = this.denominator / i2.maximumAllowedNumber;
              this.numerator = Math.round(this.numerator / t4), this.denominator = Math.round(this.denominator / t4);
            }
            if (this.numerator > i2.maximumAllowedNumber) {
              const t4 = this.numerator / i2.maximumAllowedNumber;
              this.numerator = Math.round(this.numerator / t4), this.denominator = Math.round(this.denominator / t4);
            }
          }
          isOnBeat(t3) {
            const e3 = this.distanceFromBeat(t3);
            return Math.abs(e3) < i2.FloatInaccuracyTolerance;
          }
          distanceFromBeat(t3) {
            const e3 = new i2(1, t3.Denominator);
            return this.RealValue % e3.RealValue;
          }
        }
        e2.Fraction = i2, i2.maximumAllowedNumber = 46340, i2.FloatInaccuracyTolerance = 1e-4;
      }, 2570: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.FontStyles = void 0, function(t3) {
          t3[t3.Regular = 0] = "Regular", t3[t3.Bold = 1] = "Bold", t3[t3.Italic = 2] = "Italic", t3[t3.BoldItalic = 3] = "BoldItalic", t3[t3.Underlined = 4] = "Underlined";
        }(i2 || (e2.FontStyles = i2 = {}));
      }, 2683: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.AutoColorSet = e2.NoteState = e2.GraphicalLayers = e2.StyleSets = e2.OUTLINE_AND_FILL_STYLE_DICT = e2.OutlineAndFillStyleEnum = void 0;
        const s = i2(3263);
        var n, r, o, a, l;
        !function(t3) {
          t3[t3.BaseWritingColor = 0] = "BaseWritingColor", t3[t3.FollowingCursor = 1] = "FollowingCursor", t3[t3.AlternativeFollowingCursor = 2] = "AlternativeFollowingCursor", t3[t3.PlaybackCursor = 3] = "PlaybackCursor", t3[t3.Highlighted = 4] = "Highlighted", t3[t3.ErrorUnderlay = 5] = "ErrorUnderlay", t3[t3.Selected = 6] = "Selected", t3[t3.SelectionSymbol = 7] = "SelectionSymbol", t3[t3.DebugColor1 = 8] = "DebugColor1", t3[t3.DebugColor2 = 9] = "DebugColor2", t3[t3.DebugColor3 = 10] = "DebugColor3", t3[t3.SplitScreenDivision = 11] = "SplitScreenDivision", t3[t3.GreyTransparentOverlay = 12] = "GreyTransparentOverlay", t3[t3.MarkedArea1 = 13] = "MarkedArea1", t3[t3.MarkedArea2 = 14] = "MarkedArea2", t3[t3.MarkedArea3 = 15] = "MarkedArea3", t3[t3.MarkedArea4 = 16] = "MarkedArea4", t3[t3.MarkedArea5 = 17] = "MarkedArea5", t3[t3.MarkedArea6 = 18] = "MarkedArea6", t3[t3.MarkedArea7 = 19] = "MarkedArea7", t3[t3.MarkedArea8 = 20] = "MarkedArea8", t3[t3.MarkedArea9 = 21] = "MarkedArea9", t3[t3.MarkedArea10 = 22] = "MarkedArea10", t3[t3.Comment1 = 23] = "Comment1", t3[t3.Comment2 = 24] = "Comment2", t3[t3.Comment3 = 25] = "Comment3", t3[t3.Comment4 = 26] = "Comment4", t3[t3.Comment5 = 27] = "Comment5", t3[t3.Comment6 = 28] = "Comment6", t3[t3.Comment7 = 29] = "Comment7", t3[t3.Comment8 = 30] = "Comment8", t3[t3.Comment9 = 31] = "Comment9", t3[t3.Comment10 = 32] = "Comment10";
        }(n || (e2.OutlineAndFillStyleEnum = n = {})), e2.OUTLINE_AND_FILL_STYLE_DICT = new s.Dictionary(), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.BaseWritingColor, "Thistle"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.FollowingCursor, "Aqua"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.AlternativeFollowingCursor, "Azure"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.PlaybackCursor, "Bisque"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Highlighted, "CadetBlue"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.ErrorUnderlay, "DarkBlue"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Selected, "DarkGoldenRod"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.SelectionSymbol, "BlanchedAlmond"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.DebugColor1, "Chartreuse"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.DebugColor2, "DarkGreen"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.DebugColor3, "DarkOrange"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.SplitScreenDivision, "FireBrick"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.GreyTransparentOverlay, "DarkSalmon"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.MarkedArea1, "DarkSeaGreen"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.MarkedArea2, "DarkOrchid"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.MarkedArea3, "Aquamarine"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.MarkedArea4, "DarkKhaki"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.MarkedArea5, "ForestGreen"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.MarkedArea6, "AliceBlue"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.MarkedArea7, "DeepPink"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.MarkedArea8, "Coral"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.MarkedArea9, "DarkOliveGreen"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.MarkedArea10, "Chocolate"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Comment1, "DodgerBlue"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Comment2, "Blue"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Comment3, "Beige"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Comment4, "Crimson"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Comment5, "Fuchsia"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Comment6, "Brown"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Comment7, "BlanchedAlmond"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Comment8, "CornflowerBlue"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Comment9, "Cornsilk"), e2.OUTLINE_AND_FILL_STYLE_DICT.setValue(n.Comment10, "DarkGrey"), function(t3) {
          t3[t3.MarkedArea = 0] = "MarkedArea", t3[t3.Comment = 1] = "Comment";
        }(r || (e2.StyleSets = r = {})), function(t3) {
          t3[t3.Background = 0] = "Background", t3[t3.Highlight = 1] = "Highlight", t3[t3.MeasureError = 2] = "MeasureError", t3[t3.SelectionSymbol = 3] = "SelectionSymbol", t3[t3.Cursor = 4] = "Cursor", t3[t3.PSI_Debug = 5] = "PSI_Debug", t3[t3.Notes = 6] = "Notes", t3[t3.Comment = 7] = "Comment", t3[t3.Debug_above = 8] = "Debug_above";
        }(o || (e2.GraphicalLayers = o = {})), function(t3) {
          t3[t3.Normal = 0] = "Normal", t3[t3.Selected = 1] = "Selected", t3[t3.Follow_Confirmed = 2] = "Follow_Confirmed", t3[t3.QFeedback_NotFound = 3] = "QFeedback_NotFound", t3[t3.QFeedback_OK = 4] = "QFeedback_OK", t3[t3.QFeedback_Perfect = 5] = "QFeedback_Perfect", t3[t3.Debug1 = 6] = "Debug1", t3[t3.Debug2 = 7] = "Debug2", t3[t3.Debug3 = 8] = "Debug3";
        }(a || (e2.NoteState = a = {})), function(t3) {
          t3.C = "#d82c6b", t3.D = "#F89D15", t3.E = "#FFE21A", t3.F = "#4dbd5c", t3.G = "#009D96", t3.A = "#43469d", t3.B = "#76429c", t3.Rest = "#000000";
        }(l || (e2.AutoColorSet = l = {}));
      }, 2768: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalOctaveShift = void 0;
        const s = i2(7741), n = i2(437), r = i2(6438), o = i2(512), a = i2(7307);
        class l extends s.GraphicalObject {
          constructor(t3, e3) {
            super(), this.getOctaveShift = t3, this.setSymbol(), this.PositionAndShape = new r.BoundingBox(this, e3);
          }
          setSymbol() {
            switch (this.getOctaveShift.Type) {
              case n.OctaveEnum.VA8:
                this.octaveSymbol = o.MusicSymbol.VA8;
                break;
              case n.OctaveEnum.VB8:
                this.octaveSymbol = o.MusicSymbol.VB8;
                break;
              case n.OctaveEnum.MA15:
                this.octaveSymbol = o.MusicSymbol.MA15;
                break;
              case n.OctaveEnum.MB15:
                this.octaveSymbol = o.MusicSymbol.MB15;
                break;
              default:
                throw new a.ArgumentOutOfRangeException("");
            }
          }
        }
        e2.GraphicalOctaveShift = l;
      }, 2774: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.PSMath = void 0;
        class i2 {
          static log(t3, e3) {
            return Math.log(e3) / Math.log(t3);
          }
          static log10(t3) {
            return i2.log(10, t3);
          }
          static meanSimple(t3) {
            let e3 = 0;
            for (let i3 = 0; i3 < t3.length; i3++) e3 += t3[i3];
            return e3 / t3.length;
          }
          static meanWeighted(t3, e3) {
            if (t3.length !== e3.length || 0 === t3.length) return 0;
            let i3 = 0, s = 0;
            for (let n = 0; n < t3.length; n++) {
              const r = e3[n];
              i3 += t3[n] * r, s += r;
            }
            return i3 / s;
          }
        }
        e2.PSMath = i2;
      }, 2779: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SkyBottomLineCalculator = void 0;
        i2(9409);
        const n = i2(9479), r = s(i2(3065)), o = i2(5479), a = i2(9834);
        e2.SkyBottomLineCalculator = class {
          constructor(t3) {
            this.mStaffLineParent = t3, this.mRules = t3.ParentMusicSystem.rules;
          }
          updateLines(t3) {
            const e3 = this.StaffLineParent.Measures;
            if (t3.length !== e3.length) if (r.default.warn("SkyBottomLineCalculator: lengths of calculation result array and measure array do not match"), t3.length < e3.length) for (; t3.length < e3.length; ) t3.push(new o.SkyBottomLineCalculationResult([], []));
            else t3 = t3.slice(0, e3.length);
            const i3 = Math.max(Math.ceil(this.StaffLineParent.PositionAndShape.Size.width * this.SamplingUnit), 1);
            this.mSkyLine = [], this.mBottomLine = [];
            for (const { skyLine: e4, bottomLine: i4 } of t3) this.mSkyLine.push(...e4), this.mBottomLine.push(...i4);
            const s2 = this.mSkyLine.length / i3, a2 = [], l = [];
            for (let t4 = 0; t4 < this.mSkyLine.length && a2.length !== i3; t4 += s2) {
              const e4 = Math.min(this.mSkyLine.length, t4 + s2);
              let i4 = this.mSkyLine.slice(t4, e4 + 1);
              a2.push(Math.min(...i4)), i4 = this.mBottomLine.slice(t4, e4 + 1), l.push(Math.max(...i4));
            }
            this.mSkyLine = a2, this.mBottomLine = l, this.mSkyLine.length !== i3 && r.default.debug(`SkyLine calculation was not correct (${this.mSkyLine.length} instead of ${i3})`);
            const h = Math.max(...this.mSkyLine);
            this.mSkyLine = this.mSkyLine.map((t4) => (t4 - h) / n.unitInPixels + this.StaffLineParent.TopLineOffset);
            const c = Math.min(...this.mBottomLine);
            this.mBottomLine = this.mBottomLine.map((t4) => (t4 - c) / n.unitInPixels + this.StaffLineParent.BottomLineOffset);
          }
          calculateLines() {
            const t3 = this.mRules.SamplingUnit, e3 = [], i3 = new a.CanvasVexFlowBackend(this.mRules);
            for (const s2 of this.StaffLineParent.Measures) {
              s2.PositionAndShape.calculateAbsolutePositionsRecursive(0, 0);
              const n2 = s2.getVFStave();
              let a2 = n2.getWidth();
              a2 > 0 || s2.IsExtraGraphicalMeasure || (r.default.warn("SkyBottomLineCalculator: width not > 0 in measure " + s2.MeasureNumber), a2 = 50), i3.initializeHeadless(a2);
              const l = i3.getContext(), h = i3.getCanvas();
              a2 = h.width;
              const c = h.height;
              n2.setY(n2.y + 100);
              const u = n2.getWidth();
              n2.setWidth(a2), s2.format(), n2.setWidth(u);
              try {
                s2.draw(l);
              } catch (t4) {
                r.default.warn("SkyBottomLineCalculator.calculateLines.draw", t4);
              }
              const d = l.getImageData(0, 0, a2, c), f = 4, m = Math.max(Math.ceil(s2.PositionAndShape.Size.width * t3), 1), p = new Array(m), g = new Array(m);
              for (let t4 = 0; t4 < a2; t4++) {
                for (let e4 = 0; e4 < c; e4++) {
                  const i4 = e4 * a2 * f + t4 * f;
                  if (d.data[i4 + 3] > 0) {
                    p[t4] = e4;
                    break;
                  }
                }
                for (let e4 = c; e4 > 0; e4--) {
                  const i4 = e4 * a2 * f + t4 * f;
                  if (d.data[i4 + 3] > 0) {
                    g[t4] = e4;
                    break;
                  }
                }
              }
              for (let t4 = 0; t4 < p.length; t4++) void 0 === p[t4] && (p[t4] = Math.max(this.findPreviousValidNumber(t4, p), this.findNextValidNumber(t4, p)));
              for (let t4 = 0; t4 < g.length; t4++) void 0 === g[t4] && (g[t4] = Math.max(this.findPreviousValidNumber(t4, g), this.findNextValidNumber(t4, g)));
              e3.push(new o.SkyBottomLineCalculationResult(p, g)), i3.clear();
            }
            this.updateLines(e3);
          }
          updateSkyLineWithLine(t3, e3, i3) {
            const s2 = Math.floor(t3.x * this.SamplingUnit), n2 = Math.ceil(e3.x * this.SamplingUnit);
            for (let t4 = s2 + 1; t4 < Math.min(n2, this.SkyLine.length); t4++) this.SkyLine[t4] = i3;
          }
          updateSkyLineWithWedge(t3, e3) {
            let i3 = Math.floor(t3.x * this.SamplingUnit), s2 = Math.ceil(e3.x * this.SamplingUnit), n2 = (e3.y - t3.y) / (e3.x - t3.x);
            s2 - i3 <= 1 && (s2++, n2 = 0), i3 < 0 && (i3 = 0), i3 >= this.BottomLine.length && (i3 = this.BottomLine.length - 1), s2 < 0 && (s2 = 0), s2 >= this.BottomLine.length && (s2 = this.BottomLine.length), this.SkyLine[i3] = t3.y;
            for (let t4 = i3 + 1; t4 < Math.min(s2, this.SkyLine.length); t4++) this.SkyLine[t4] = this.SkyLine[t4 - 1] + n2 / this.SamplingUnit;
          }
          updateBottomLineWithWedge(t3, e3) {
            let i3 = Math.floor(t3.x * this.SamplingUnit), s2 = Math.ceil(e3.x * this.SamplingUnit), n2 = (e3.y - t3.y) / (e3.x - t3.x);
            s2 - i3 <= 1 && (s2++, n2 = 0), i3 < 0 && (i3 = 0), i3 >= this.BottomLine.length && (i3 = this.BottomLine.length - 1), s2 < 0 && (s2 = 0), s2 >= this.BottomLine.length && (s2 = this.BottomLine.length), this.BottomLine[i3] = t3.y;
            for (let t4 = i3 + 1; t4 < s2; t4++) this.BottomLine[t4] = this.BottomLine[t4 - 1] + n2 / this.SamplingUnit;
          }
          updateSkyLineInRange(t3, e3, i3) {
            this.updateInRange(this.mSkyLine, t3, e3, i3);
          }
          updateBottomLineInRange(t3, e3, i3) {
            this.updateInRange(this.BottomLine, t3, e3, i3);
          }
          resetSkyLineInRange(t3, e3) {
            this.updateInRange(this.SkyLine, t3, e3);
          }
          resetBottomLineInRange(t3, e3) {
            this.setInRange(this.BottomLine, t3, e3);
          }
          setSkyLineWithValue(t3) {
            this.SkyLine.forEach((e3) => t3);
          }
          setBottomLineWithValue(t3) {
            this.BottomLine.forEach((e3) => t3);
          }
          getLeftIndexForPointX(t3, e3) {
            const i3 = Math.floor(t3 * this.SamplingUnit);
            return i3 < 0 ? 0 : i3 >= e3 ? e3 - 1 : i3;
          }
          getRightIndexForPointX(t3, e3) {
            const i3 = Math.ceil(t3 * this.SamplingUnit);
            return i3 < 0 ? 0 : i3 >= e3 ? e3 - 1 : i3;
          }
          updateStaffLineBorders() {
            this.mStaffLineParent.PositionAndShape.BorderTop = this.getSkyLineMin(), this.mStaffLineParent.PositionAndShape.BorderMarginTop = this.getSkyLineMin(), this.mStaffLineParent.PositionAndShape.BorderBottom = this.getBottomLineMax(), this.mStaffLineParent.PositionAndShape.BorderMarginBottom = this.getBottomLineMax();
          }
          getSkyLineMin() {
            return Math.min(...this.SkyLine.filter((t3) => !isNaN(t3)));
          }
          getSkyLineMinAtPoint(t3) {
            const e3 = Math.round(t3 * this.SamplingUnit);
            return this.mSkyLine[e3];
          }
          getSkyLineMinInRange(t3, e3) {
            return this.getMinInRange(this.SkyLine, t3, e3);
          }
          getBottomLineMax() {
            return Math.max(...this.BottomLine.filter((t3) => !isNaN(t3)));
          }
          getBottomLineMaxAtPoint(t3) {
            const e3 = Math.round(t3 * this.SamplingUnit);
            return this.mBottomLine[e3];
          }
          getBottomLineMaxInRange(t3, e3) {
            return this.getMaxInRange(this.BottomLine, t3, e3);
          }
          getBottomLineMaxInBoundingBox(t3) {
            const e3 = Math.floor(t3.AbsolutePosition.x + t3.BorderLeft), i3 = Math.ceil(t3.AbsolutePosition.x + t3.BorderRight);
            return this.getMaxInRange(this.mBottomLine, e3, i3);
          }
          updateWithBoundingBoxRecursively(t3) {
            if (t3.ChildElements && t3.ChildElements.length > 0) this.updateWithBoundingBoxRecursively(t3);
            else {
              const e3 = t3.BorderTop + t3.AbsolutePosition.y, i3 = t3.BorderBottom + t3.AbsolutePosition.y;
              if (e3 < 0) {
                const i4 = Math.floor(t3.AbsolutePosition.x + t3.BorderLeft), s2 = Math.ceil(t3.AbsolutePosition.x + t3.BorderRight);
                this.updateInRange(this.mSkyLine, i4, s2, e3);
              } else if (i3 > this.StaffLineParent.StaffHeight) {
                const e4 = Math.floor(t3.AbsolutePosition.x + t3.BorderLeft), s2 = Math.ceil(t3.AbsolutePosition.x + t3.BorderRight);
                this.updateInRange(this.mBottomLine, e4, s2, i3);
              }
            }
          }
          findPreviousValidNumber(t3, e3) {
            for (let i3 = t3; i3 >= 0; i3--) if (!isNaN(e3[i3])) return e3[i3];
            return 0;
          }
          findNextValidNumber(t3, e3) {
            if (t3 >= e3.length) return e3[t3 - 1];
            for (let i3 = t3; i3 < e3.length; i3++) if (!isNaN(e3[i3])) return e3[i3];
            return 0;
          }
          drawPixel(t3, e3, i3 = "#FF0000FF") {
            const s2 = e3.getContext(), n2 = s2.fillStyle;
            s2.fillStyle = i3, s2.fillRect(t3.x, t3.y, 2, 2), s2.fillStyle = n2;
          }
          updateInRange(t3, e3 = 0, i3 = t3.length, s2 = 0) {
            if (e3 = Math.floor(e3 * this.SamplingUnit), (i3 = Math.ceil(i3 * this.SamplingUnit)) < e3) throw new Error("start index of line is greater than the end index");
            e3 < 0 && (e3 = 0), i3 > t3.length && (i3 = t3.length);
            for (let n2 = e3; n2 < i3; n2++) t3[n2] = Math.abs(s2) > Math.abs(t3[n2]) ? s2 : t3[n2];
          }
          setInRange(t3, e3 = 0, i3 = t3.length, s2 = 0) {
            if (e3 = Math.floor(e3 * this.SamplingUnit), (i3 = Math.ceil(i3 * this.SamplingUnit)) < e3) throw new Error("start index of line is greater then the end index");
            e3 < 0 && (e3 = 0), i3 > t3.length && (i3 = t3.length);
            for (let n2 = e3; n2 < i3; n2++) t3[n2] = s2;
          }
          getMinInRange(t3, e3, i3) {
            return e3 = Math.floor(e3 * this.SamplingUnit), i3 = Math.ceil(i3 * this.SamplingUnit), t3 ? (e3 < 0 && (e3 = 0), e3 >= t3.length && (e3 = t3.length - 1), i3 < 0 && (i3 = 0), i3 >= t3.length && (i3 = t3.length), e3 >= 0 && i3 <= t3.length ? Math.min(...t3.slice(e3, i3 + 1)) : void 0) : Number.MAX_VALUE;
          }
          getMaxInRange(t3, e3, i3) {
            return e3 = Math.floor(e3 * this.SamplingUnit), i3 = Math.ceil(i3 * this.SamplingUnit), t3 ? (e3 < 0 && (e3 = 0), e3 >= t3.length && (e3 = t3.length - 1), i3 < 0 && (i3 = 0), i3 >= t3.length && (i3 = t3.length), e3 >= 0 && i3 <= t3.length ? Math.max(...t3.slice(e3, i3 + 1)) : void 0) : Number.MIN_VALUE;
          }
          get SamplingUnit() {
            return this.mRules.SamplingUnit;
          }
          get StaffLineParent() {
            return this.mStaffLineParent;
          }
          get SkyLine() {
            return this.mSkyLine;
          }
          get BottomLine() {
            return this.mBottomLine;
          }
        };
      }, 2870: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(5678), e2), n(i2(8900), e2), n(i2(6703), e2), n(i2(6332), e2), n(i2(2148), e2), n(i2(9990), e2), n(i2(4864), e2), n(i2(7791), e2), n(i2(5377), e2);
      }, 2909: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4831), n = i2(6119), r = i2(2091), o = function() {
          function t3(t4) {
            this.toStrF = t4 || s.defaultToString, this.dictionary = new n.default(this.toStrF), this.nElements = 0;
          }
          return t3.prototype.add = function(t4, e3) {
            if (void 0 === e3 && (e3 = 1), s.isUndefined(t4) || e3 <= 0) return false;
            if (this.contains(t4)) this.dictionary.getValue(t4).copies += e3;
            else {
              var i3 = { value: t4, copies: e3 };
              this.dictionary.setValue(t4, i3);
            }
            return this.nElements += e3, true;
          }, t3.prototype.count = function(t4) {
            return this.contains(t4) ? this.dictionary.getValue(t4).copies : 0;
          }, t3.prototype.contains = function(t4) {
            return this.dictionary.containsKey(t4);
          }, t3.prototype.remove = function(t4, e3) {
            if (void 0 === e3 && (e3 = 1), s.isUndefined(t4) || e3 <= 0) return false;
            if (this.contains(t4)) {
              var i3 = this.dictionary.getValue(t4);
              return e3 > i3.copies ? this.nElements -= i3.copies : this.nElements -= e3, i3.copies -= e3, i3.copies <= 0 && this.dictionary.remove(t4), true;
            }
            return false;
          }, t3.prototype.toArray = function() {
            for (var t4 = [], e3 = 0, i3 = this.dictionary.values(); e3 < i3.length; e3++) for (var s2 = i3[e3], n2 = s2.value, r2 = s2.copies, o2 = 0; o2 < r2; o2++) t4.push(n2);
            return t4;
          }, t3.prototype.toSet = function() {
            for (var t4 = new r.default(this.toStrF), e3 = 0, i3 = this.dictionary.values(); e3 < i3.length; e3++) {
              var s2 = i3[e3].value;
              t4.add(s2);
            }
            return t4;
          }, t3.prototype.forEach = function(t4) {
            this.dictionary.forEach(function(e3, i3) {
              for (var s2 = i3.value, n2 = i3.copies, r2 = 0; r2 < n2; r2++) if (false === t4(s2)) return false;
              return true;
            });
          }, t3.prototype.size = function() {
            return this.nElements;
          }, t3.prototype.isEmpty = function() {
            return 0 === this.nElements;
          }, t3.prototype.clear = function() {
            this.nElements = 0, this.dictionary.clear();
          }, t3;
        }();
        e2.default = o;
      }, 2919: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.StaffLine = void 0;
        const s = i2(6438), n = i2(7741), r = i2(298), o = i2(9409), a = i2(2779);
        class l extends n.GraphicalObject {
          constructor(t3, e3) {
            super(), this.measures = [], this.staffLines = new Array(5), this.octaveShifts = [], this.lyricLines = [], this.lyricsDashes = [], this.abstractExpressions = [], this.graphicalSlurs = [], this.graphicalGlissandi = [], this.Pedals = [], this.parentMusicSystem = t3, this.parentStaff = e3, this.boundingBox = new s.BoundingBox(this, t3.PositionAndShape), this.skyBottomLine = new a.SkyBottomLineCalculator(this), this.staffHeight = this.parentMusicSystem.rules.StaffHeight, this.topLineOffset = 0, this.bottomLineOffset = 4, this.calculateStaffLineOffsets();
          }
          calculateStaffLineOffsets() {
            if (this.ParentStaff.isTab) 5 === this.ParentStaff.StafflineCount ? this.staffHeight = this.bottomLineOffset = 6 * this.ParentStaff.ParentInstrument.GetMusicSheet.Rules.TabStaffInterlineHeight : this.staffHeight = this.bottomLineOffset = this.ParentStaff.ParentInstrument.GetMusicSheet.Rules.TabStaffInterlineHeight * this.ParentStaff.StafflineCount;
            else switch (this.ParentStaff.StafflineCount) {
              case 4:
                this.bottomLineOffset = 1;
                break;
              case 3:
                this.topLineOffset = 1, this.bottomLineOffset = 1;
                break;
              case 2:
                this.topLineOffset = 2, this.bottomLineOffset = 1;
                break;
              case 1:
                this.topLineOffset = 2, this.bottomLineOffset = 2;
            }
          }
          get Measures() {
            return this.measures;
          }
          set Measures(t3) {
            this.measures = t3;
          }
          get StaffLines() {
            return this.staffLines;
          }
          set StaffLines(t3) {
            this.staffLines = t3;
          }
          get NextStaffLine() {
            const t3 = this.parentMusicSystem.StaffLines.indexOf(this);
            return t3 !== this.parentMusicSystem.StaffLines.length ? this.parentMusicSystem.StaffLines[t3 + 1] : void 0;
          }
          get LyricLines() {
            return this.lyricLines;
          }
          get AbstractExpressions() {
            return this.abstractExpressions;
          }
          set AbstractExpressions(t3) {
            this.abstractExpressions = t3;
          }
          set LyricLines(t3) {
            this.lyricLines = t3;
          }
          get LyricsDashes() {
            return this.lyricsDashes;
          }
          set LyricsDashes(t3) {
            this.lyricsDashes = t3;
          }
          get ParentMusicSystem() {
            return this.parentMusicSystem;
          }
          set ParentMusicSystem(t3) {
            this.parentMusicSystem = t3;
          }
          get ParentStaff() {
            return this.parentStaff;
          }
          set ParentStaff(t3) {
            this.parentStaff = t3;
          }
          get SkyBottomLineCalculator() {
            return this.skyBottomLine;
          }
          get SkyLine() {
            return this.skyBottomLine.SkyLine;
          }
          get BottomLine() {
            return this.skyBottomLine.BottomLine;
          }
          get OctaveShifts() {
            return this.octaveShifts;
          }
          set OctaveShifts(t3) {
            this.octaveShifts = t3;
          }
          get StaffHeight() {
            return this.staffHeight;
          }
          get TopLineOffset() {
            return this.topLineOffset;
          }
          get BottomLineOffset() {
            return this.bottomLineOffset;
          }
          get GraphicalSlurs() {
            return this.graphicalSlurs;
          }
          get GraphicalGlissandi() {
            return this.graphicalGlissandi;
          }
          addSlurToStaffline(t3) {
            this.graphicalSlurs.push(t3);
          }
          addGlissandoToStaffline(t3) {
            this.graphicalGlissandi.push(t3), t3.StaffLine = this;
          }
          addActivitySymbolClickArea() {
            const t3 = new r.StaffLineActivitySymbol(this), e3 = this.PositionAndShape;
            t3.PositionAndShape.RelativePosition = new o.PointF2D(e3.RelativePosition.x + e3.BorderRight + 0.5, e3.RelativePosition.y + 0.5), t3.PositionAndShape.Parent = this.parentMusicSystem.PositionAndShape;
          }
          isPartOfMultiStaffInstrument() {
            return this.parentStaff.ParentInstrument.Staves.length > 1;
          }
          findClosestStaffEntry(t3) {
            let e3;
            for (let i3 = 0, s2 = this.Measures.length; i3 < s2; ++i3) {
              const s3 = this.Measures[i3];
              for (let i4 = 0, n2 = s3.staffEntries.length; i4 < n2; ++i4) {
                const n3 = s3.staffEntries[i4];
                Math.abs(n3.PositionAndShape.RelativePosition.x - t3 + s3.PositionAndShape.RelativePosition.x) < 5 && (e3 = n3);
              }
            }
            return e3;
          }
        }
        e2.StaffLine = l;
      }, 3065: function(t2, e2, i2) {
        var s, n;
        !function() {
          "use strict";
          s = function() {
            var t3 = function() {
            }, e3 = "undefined", i3 = typeof window !== e3 && typeof window.navigator !== e3 && /Trident\/|MSIE /.test(window.navigator.userAgent), s2 = ["trace", "debug", "info", "warn", "error"], n2 = {}, r = null;
            function o(t4, e4) {
              var i4 = t4[e4];
              if ("function" == typeof i4.bind) return i4.bind(t4);
              try {
                return Function.prototype.bind.call(i4, t4);
              } catch (e5) {
                return function() {
                  return Function.prototype.apply.apply(i4, [t4, arguments]);
                };
              }
            }
            function a() {
              console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
            }
            function l() {
              for (var i4 = this.getLevel(), n3 = 0; n3 < s2.length; n3++) {
                var r2 = s2[n3];
                this[r2] = n3 < i4 ? t3 : this.methodFactory(r2, i4, this.name);
              }
              if (this.log = this.debug, typeof console === e3 && i4 < this.levels.SILENT) return "No console available for logging";
            }
            function h(t4) {
              return function() {
                typeof console !== e3 && (l.call(this), this[t4].apply(this, arguments));
              };
            }
            function c(s3, n3, r2) {
              return function(s4) {
                return "debug" === s4 && (s4 = "log"), typeof console !== e3 && ("trace" === s4 && i3 ? a : void 0 !== console[s4] ? o(console, s4) : void 0 !== console.log ? o(console, "log") : t3);
              }(s3) || h.apply(this, arguments);
            }
            function u(t4, i4) {
              var o2, a2, h2, u2 = this, d2 = "loglevel";
              function f() {
                var t5;
                if (typeof window !== e3 && d2) {
                  try {
                    t5 = window.localStorage[d2];
                  } catch (t6) {
                  }
                  if (typeof t5 === e3) try {
                    var i5 = window.document.cookie, s3 = encodeURIComponent(d2), n3 = i5.indexOf(s3 + "=");
                    -1 !== n3 && (t5 = /^([^;]+)/.exec(i5.slice(n3 + s3.length + 1))[1]);
                  } catch (t6) {
                  }
                  return void 0 === u2.levels[t5] && (t5 = void 0), t5;
                }
              }
              function m(t5) {
                var e4 = t5;
                if ("string" == typeof e4 && void 0 !== u2.levels[e4.toUpperCase()] && (e4 = u2.levels[e4.toUpperCase()]), "number" == typeof e4 && e4 >= 0 && e4 <= u2.levels.SILENT) return e4;
                throw new TypeError("log.setLevel() called with invalid level: " + t5);
              }
              "string" == typeof t4 ? d2 += ":" + t4 : "symbol" == typeof t4 && (d2 = void 0), u2.name = t4, u2.levels = { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 }, u2.methodFactory = i4 || c, u2.getLevel = function() {
                return null != h2 ? h2 : null != a2 ? a2 : o2;
              }, u2.setLevel = function(t5, i5) {
                return h2 = m(t5), false !== i5 && function(t6) {
                  var i6 = (s2[t6] || "silent").toUpperCase();
                  if (typeof window !== e3 && d2) {
                    try {
                      return void (window.localStorage[d2] = i6);
                    } catch (t7) {
                    }
                    try {
                      window.document.cookie = encodeURIComponent(d2) + "=" + i6 + ";";
                    } catch (t7) {
                    }
                  }
                }(h2), l.call(u2);
              }, u2.setDefaultLevel = function(t5) {
                a2 = m(t5), f() || u2.setLevel(t5, false);
              }, u2.resetLevel = function() {
                h2 = null, function() {
                  if (typeof window !== e3 && d2) {
                    try {
                      window.localStorage.removeItem(d2);
                    } catch (t5) {
                    }
                    try {
                      window.document.cookie = encodeURIComponent(d2) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
                    } catch (t5) {
                    }
                  }
                }(), l.call(u2);
              }, u2.enableAll = function(t5) {
                u2.setLevel(u2.levels.TRACE, t5);
              }, u2.disableAll = function(t5) {
                u2.setLevel(u2.levels.SILENT, t5);
              }, u2.rebuild = function() {
                if (r !== u2 && (o2 = m(r.getLevel())), l.call(u2), r === u2) for (var t5 in n2) n2[t5].rebuild();
              }, o2 = m(r ? r.getLevel() : "WARN");
              var p = f();
              null != p && (h2 = m(p)), l.call(u2);
            }
            (r = new u()).getLogger = function(t4) {
              if ("symbol" != typeof t4 && "string" != typeof t4 || "" === t4) throw new TypeError("You must supply a name when creating a logger.");
              var e4 = n2[t4];
              return e4 || (e4 = n2[t4] = new u(t4, r.methodFactory)), e4;
            };
            var d = typeof window !== e3 ? window.log : void 0;
            return r.noConflict = function() {
              return typeof window !== e3 && window.log === r && (window.log = d), r;
            }, r.getLoggers = function() {
              return n2;
            }, r.default = r, r;
          }, void 0 === (n = s.call(e2, i2, e2, t2)) || (t2.exports = n);
        }();
      }, 3109: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowInstrumentBracket = void 0;
        var n = s(i2(3206)).default.Flow;
        const r = i2(7741), o = i2(6438), a = i2(9479);
        class l extends r.GraphicalObject {
          constructor(t3, e3, i3 = 0) {
            super(), this.Visible = true, this.PositionAndShape = new o.BoundingBox(this, t3.ParentMusicSystem.PositionAndShape);
            const s2 = t3.Measures[0], r2 = e3.Measures[0];
            this.addConnector(s2.getVFStave(), r2.getVFStave(), n.StaveConnector.type.BRACKET, i3);
          }
          draw(t3) {
            this.Visible && this.vexflowConnector.setContext(t3).draw();
            const e3 = this.vexflowConnector, i3 = e3.top_stave.getYForLine(0), s2 = e3.bottom_stave.getYForLine(e3.bottom_stave.getNumLines() - 1) + e3.thickness;
            this.PositionAndShape.AbsolutePosition.x = (e3.top_stave.getX() - 2 + e3.x_shift) / a.unitInPixels, this.PositionAndShape.AbsolutePosition.y = i3 / a.unitInPixels, this.PositionAndShape.Size.height = (s2 - i3) / a.unitInPixels, this.PositionAndShape.Size.width = 12 / a.unitInPixels;
          }
          addConnector(t3, e3, i3, s2) {
            this.vexflowConnector = new n.StaveConnector(t3, e3).setType(i3).setXShift(-5 * s2);
          }
        }
        e2.VexFlowInstrumentBracket = l;
      }, 3123: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.TechnicalInstruction = e2.TechnicalInstructionType = void 0, function(t3) {
          t3[t3.Fingering = 0] = "Fingering", t3[t3.String = 1] = "String";
        }(i2 || (e2.TechnicalInstructionType = i2 = {})), e2.TechnicalInstruction = class {
        };
      }, 3173: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.AJAX = void 0, e2.AJAX = class {
          static ajax(t3, e3 = 9e3) {
            let i2;
            const s = t3.indexOf(".mxl") > -1 ? "text/plain; charset=x-user-defined" : "application/xml";
            if (XMLHttpRequest) i2 = new XMLHttpRequest();
            else {
              if (!ActiveXObject) return Promise.reject(new Error("XMLHttp not supported."));
              i2 = new ActiveXObject("Microsoft.XMLHTTP");
            }
            return i2.timeout = e3, new Promise((e4, n) => {
              i2.onreadystatechange = () => {
                i2.readyState === XMLHttpRequest.DONE && (200 === i2.status || 0 === i2.status && i2.responseText ? e4(i2.responseText) : n(new Error("Could not retrieve requested URL " + i2.status)));
              }, i2.ontimeout = (t4) => {
                n(new Error("Server request Timeout"));
              }, i2.overrideMimeType(s), i2.open("GET", t3, true), i2.send();
            });
          }
        };
      }, 3186: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SlurReader = void 0;
        const n = i2(6229), r = s(i2(3065)), o = i2(2148), a = i2(4980), l = i2(7718);
        e2.SlurReader = class {
          constructor(t3) {
            this.openSlurDict = {}, this.musicSheet = t3;
          }
          addSlur(t3, e3) {
            try {
              if (t3) {
                for (const i3 of t3) if (i3.attributes().length > 0) {
                  const t4 = i3.attribute("type").value;
                  let s2 = 1;
                  try {
                    i3.attribute("number") && (s2 = parseInt(i3.attribute("number").value, 10));
                  } catch (t5) {
                    r.default.debug("VoiceGenerator.addSlur number: ", t5);
                  }
                  let o2 = a.PlacementEnum.NotYetDefined;
                  const h = i3.attribute("placement");
                  h && h.value && ("above" === h.value ? o2 = a.PlacementEnum.Above : "below" === h.value && (o2 = a.PlacementEnum.Below));
                  const c = i3.attribute("orientation");
                  if (c && c.value && ("over" === c.value ? o2 = a.PlacementEnum.Above : "under" === c.value && (o2 = a.PlacementEnum.Below)), "start" === t4) {
                    let t5 = this.openSlurDict[s2];
                    t5 || (t5 = new n.Slur(), this.openSlurDict[s2] = t5), t5.StartNote = e3, t5.PlacementXml = o2;
                  } else if ("stop" === t4) {
                    const t5 = this.openSlurDict[s2];
                    if (t5) {
                      const n2 = i3.name;
                      if ("slide" === n2 || "glissando" === n2) {
                        const i4 = t5.StartNote, n3 = new l.Glissando(i4);
                        n3.AddNote(e3), n3.EndNote = e3, e3.NoteGlissando = n3, delete this.openSlurDict[s2];
                      } else t5.EndNote = e3, e3.isDuplicateSlur(t5) || (e3.NoteSlurs.push(t5), t5.StartNote.NoteSlurs.push(t5)), delete this.openSlurDict[s2];
                    }
                  }
                }
              }
            } catch (t4) {
              const e4 = o.ITextTranslation.translateText("ReaderErrorMessages/SlurError", "Error while reading slur.");
              this.musicSheet.SheetErrors.pushMeasureError(e4);
            }
          }
        };
      }, 3206: (t2, e2, i2) => {
        "use strict";
        i2.r(e2), i2.d(e2, { default: () => ue });
        const s = () => {
        };
        s.L = (t3, e3) => {
          if (!e3) return;
          const i3 = Array.prototype.slice.call(e3).join(" ");
          window.console.log(t3 + ": " + i3);
        }, s.MakeException = (t3) => class extends Error {
          constructor(e3, i3) {
            super(e3), this.name = t3, this.message = e3, this.data = i3;
          }
        }, s.RERR = s.RuntimeError = class {
          constructor(t3, e3) {
            this.code = t3, this.message = e3;
          }
          toString() {
            return "[RuntimeError] " + this.code + ":" + this.message;
          }
        }, s.Merge = (t3, e3) => {
          for (const i3 in e3) t3[i3] = e3[i3];
          return t3;
        }, s.Min = Math.min, s.Max = Math.max, s.forEach = (t3, e3) => {
          for (let i3 = 0; i3 < t3.length; i3++) e3(t3[i3], i3);
        }, s.RoundN = (t3, e3) => t3 % e3 >= e3 / 2 ? parseInt(t3 / e3, 10) * e3 + e3 : parseInt(t3 / e3, 10) * e3, s.MidLine = (t3, e3) => {
          let i3 = e3 + (t3 - e3) / 2;
          return i3 % 2 > 0 && (i3 = s.RoundN(10 * i3, 5) / 10), i3;
        }, s.SortAndUnique = (t3, e3, i3) => {
          if (t3.length > 1) {
            const s2 = [];
            let n2;
            t3.sort(e3);
            for (let e4 = 0; e4 < t3.length; ++e4) 0 !== e4 && i3(t3[e4], n2) || s2.push(t3[e4]), n2 = t3[e4];
            return s2;
          }
          return t3;
        }, s.Contains = (t3, e3) => {
          let i3 = t3.length;
          for (; i3--; ) if (t3[i3] === e3) return true;
          return false;
        }, s.getCanvasContext = (t3) => {
          if (!t3) throw new s.RERR("BadArgument", "Invalid canvas selector: " + t3);
          const e3 = document.getElementById(t3);
          if (!e3 || !e3.getContext) throw new s.RERR("UnsupportedBrowserError", "This browser does not support HTML5 Canvas");
          return e3.getContext("2d");
        }, s.drawDot = (t3, e3, i3, s2 = "#55") => {
          t3.save(), t3.setFillStyle(s2), t3.beginPath(), t3.arc(e3, i3, 3, 0, 2 * Math.PI, true), t3.closePath(), t3.fill(), t3.restore();
        }, s.BM = (t3, e3) => {
          const i3 = (/* @__PURE__ */ new Date()).getTime();
          e3();
          const n2 = (/* @__PURE__ */ new Date()).getTime() - i3;
          s.L(t3 + n2 + "ms");
        }, s.StackTrace = () => new Error().stack, s.W = (...t3) => {
          const e3 = t3.join(" ");
          window.console.log("Warning: ", e3, s.StackTrace());
        }, (s.Prefix = (t3) => s.Prefix.prefix + t3).prefix = "vf-";
        class n {
          static GCD(t3, e3) {
            if ("number" != typeof t3 || "number" != typeof e3) throw new s.RERR("BadArgument", `Invalid numbers: ${t3}, ${e3}`);
            let i3;
            for (; 0 !== e3; ) i3 = e3, e3 = t3 % e3, t3 = i3;
            return t3;
          }
          static LCM(t3, e3) {
            return t3 * e3 / n.GCD(t3, e3);
          }
          static LCMM(t3) {
            if (0 === t3.length) return 0;
            if (1 === t3.length) return t3[0];
            if (2 === t3.length) return n.LCM(t3[0], t3[1]);
            {
              const e3 = t3[0];
              return t3.shift(), n.LCM(e3, n.LCMM(t3));
            }
          }
          constructor(t3, e3) {
            this.set(t3, e3);
          }
          set(t3, e3) {
            return this.numerator = void 0 === t3 ? 1 : t3, this.denominator = void 0 === e3 ? 1 : e3, this;
          }
          value() {
            return this.numerator / this.denominator;
          }
          simplify() {
            let t3 = this.numerator, e3 = this.denominator;
            const i3 = n.GCD(t3, e3);
            return t3 /= i3, e3 /= i3, e3 < 0 && (e3 = -e3, t3 = -t3), this.set(t3, e3);
          }
          add(t3, e3) {
            let i3, s2;
            t3 instanceof n ? (i3 = t3.numerator, s2 = t3.denominator) : (i3 = void 0 !== t3 ? t3 : 0, s2 = void 0 !== e3 ? e3 : 1);
            const r2 = n.LCM(this.denominator, s2), o2 = r2 / this.denominator, a2 = r2 / s2, l2 = this.numerator * o2 + i3 * a2;
            return this.set(l2, r2);
          }
          subtract(t3, e3) {
            let i3, s2;
            t3 instanceof n ? (i3 = t3.numerator, s2 = t3.denominator) : (i3 = void 0 !== t3 ? t3 : 0, s2 = void 0 !== e3 ? e3 : 1);
            const r2 = n.LCM(this.denominator, s2), o2 = r2 / this.denominator, a2 = r2 / s2, l2 = this.numerator * o2 - i3 * a2;
            return this.set(l2, r2);
          }
          multiply(t3, e3) {
            let i3, s2;
            return t3 instanceof n ? (i3 = t3.numerator, s2 = t3.denominator) : (i3 = void 0 !== t3 ? t3 : 1, s2 = void 0 !== e3 ? e3 : 1), this.set(this.numerator * i3, this.denominator * s2);
          }
          divide(t3, e3) {
            let i3, s2;
            return t3 instanceof n ? (i3 = t3.numerator, s2 = t3.denominator) : (i3 = void 0 !== t3 ? t3 : 1, s2 = void 0 !== e3 ? e3 : 1), this.set(this.numerator * s2, this.denominator * i3);
          }
          equals(t3) {
            const e3 = n.__compareA.copy(t3).simplify(), i3 = n.__compareB.copy(this).simplify();
            return e3.numerator === i3.numerator && e3.denominator === i3.denominator;
          }
          greaterThan(t3) {
            const e3 = n.__compareB.copy(this);
            return e3.subtract(t3), e3.numerator > 0;
          }
          greaterThanEquals(t3) {
            const e3 = n.__compareB.copy(this);
            return e3.subtract(t3), e3.numerator >= 0;
          }
          lessThan(t3) {
            return !this.greaterThanEquals(t3);
          }
          lessThanEquals(t3) {
            return !this.greaterThan(t3);
          }
          clone() {
            return new n(this.numerator, this.denominator);
          }
          copy(t3) {
            return "number" == typeof t3 ? this.set(t3 || 0, 1) : this.set(t3.numerator, t3.denominator);
          }
          quotient() {
            return Math.floor(this.numerator / this.denominator);
          }
          fraction() {
            return this.numerator % this.denominator;
          }
          abs() {
            return this.denominator = Math.abs(this.denominator), this.numerator = Math.abs(this.numerator), this;
          }
          toString() {
            return this.numerator + "/" + this.denominator;
          }
          toSimplifiedString() {
            return n.__tmp.copy(this).simplify().toString();
          }
          toMixedString() {
            let t3 = "";
            const e3 = this.quotient(), i3 = n.__tmp.copy(this);
            return e3 < 0 ? i3.abs().fraction() : i3.fraction(), 0 !== e3 ? (t3 += e3, 0 !== i3.numerator && (t3 += " " + i3.toSimplifiedString())) : t3 = 0 === i3.numerator ? "0" : i3.toSimplifiedString(), t3;
          }
          parse(t3) {
            const e3 = t3.split("/"), i3 = parseInt(e3[0], 10), s2 = e3[1] ? parseInt(e3[1], 10) : 1;
            return this.set(i3, s2);
          }
        }
        n.__compareA = new n(), n.__compareB = new n(), n.__tmp = new n();
        const r = s.MakeException("RegistryError");
        function o(t3, e3, i3, s2, n2) {
          t3[e3][i3] || (t3[e3][i3] = {}), t3[e3][i3][s2] = n2;
        }
        class a {
          static get INDEXES() {
            return ["type"];
          }
          constructor() {
            this.clear();
          }
          static enableDefaultRegistry(t3) {
            a.defaultRegistry = t3;
          }
          static getDefaultRegistry() {
            return a.defaultRegistry;
          }
          static disableDefaultRegistry() {
            a.defaultRegistry = null;
          }
          clear() {
            return this.index = { id: {}, type: {}, class: {} }, this;
          }
          updateIndex({ id: t3, name: e3, value: i3, oldValue: s2 }) {
            const n2 = this.getElementById(t3);
            null !== s2 && this.index[e3][s2] && delete this.index[e3][s2][t3], null !== i3 && o(this.index, e3, i3, n2.getAttribute("id"), n2);
          }
          register(t3, e3) {
            if (!(e3 = e3 || t3.getAttribute("id"))) throw new r("Can't add element without `id` attribute to registry", t3);
            return t3.setAttribute("id", e3), o(this.index, "id", e3, e3, t3), a.INDEXES.forEach((i3) => {
              this.updateIndex({ id: e3, name: i3, value: t3.getAttribute(i3), oldValue: null });
            }), t3.onRegister(this), this;
          }
          getElementById(t3) {
            return this.index.id[t3] ? this.index.id[t3][t3] : null;
          }
          getElementsByAttribute(t3, e3) {
            const i3 = this.index[t3];
            return i3 && i3[e3] ? Object.keys(i3[e3]).map((t4) => i3[e3][t4]) : [];
          }
          getElementsByType(t3) {
            return this.getElementsByAttribute("type", t3);
          }
          getElementsByClass(t3) {
            return this.getElementsByAttribute("class", t3);
          }
          onUpdate({ id: t3, name: e3, value: i3, oldValue: s2 }) {
            return function(t4, e4) {
              return t4.filter((t5) => t5 === e4).length > 0;
            }(a.INDEXES.concat(["id", "class"]), e3) ? (this.updateIndex({ id: t3, name: e3, value: i3, oldValue: s2 }), this) : this;
          }
        }
        a.defaultRegistry = null;
        class l {
          static newID() {
            return "auto" + l.ID++;
          }
          constructor({ type: t3 } = {}) {
            this.attrs = { id: l.newID(), el: null, type: t3 || "Base", classes: {} }, this.boundingBox = null, this.context = null, this.rendered = false, a.getDefaultRegistry() && a.getDefaultRegistry().register(this);
          }
          setStyle(t3) {
            return this.style = t3, this;
          }
          getStyle() {
            return this.style;
          }
          applyStyle(t3 = this.context, e3 = this.getStyle()) {
            return e3 ? (t3.save(), e3.shadowColor && t3.setShadowColor(e3.shadowColor), e3.shadowBlur && t3.setShadowBlur(e3.shadowBlur), e3.fillStyle && t3.setFillStyle(e3.fillStyle), e3.strokeStyle && t3.setStrokeStyle(e3.strokeStyle), e3.lineWidth && t3.setLineWidth(e3.lineWidth), this) : this;
          }
          restoreStyle(t3 = this.context, e3 = this.getStyle()) {
            return e3 ? (t3.restore(), this) : this;
          }
          drawWithStyle() {
            this.checkContext(), this.applyStyle(), this.draw(), this.restoreStyle();
          }
          hasClass(t3) {
            return true === this.attrs.classes[t3];
          }
          addClass(t3) {
            return this.attrs.classes[t3] = true, this.registry && this.registry.onUpdate({ id: this.getAttribute("id"), name: "class", value: t3, oldValue: null }), this;
          }
          removeClass(t3) {
            return delete this.attrs.classes[t3], this.registry && this.registry.onUpdate({ id: this.getAttribute("id"), name: "class", value: null, oldValue: t3 }), this;
          }
          onRegister(t3) {
            return this.registry = t3, this;
          }
          isRendered() {
            return this.rendered;
          }
          setRendered(t3 = true) {
            return this.rendered = t3, this;
          }
          getAttributes() {
            return this.attrs;
          }
          getAttribute(t3) {
            return this.attrs[t3];
          }
          setAttribute(t3, e3) {
            const i3 = this.attrs.id, s2 = this.attrs[t3];
            return this.attrs[t3] = e3, this.registry && this.registry.onUpdate({ id: i3, name: t3, value: e3, oldValue: s2 }), this;
          }
          getContext() {
            return this.context;
          }
          setContext(t3) {
            return this.context = t3, this;
          }
          getBoundingBox() {
            return this.boundingBox;
          }
          checkContext() {
            if (!this.context) throw new s.RERR("NoContext", "No rendering context attached to instance");
            return this.context;
          }
        }
        l.ID = 1e3;
        class h {
          constructor(t3, e3, i3, s2) {
            this.x1 = Number.NaN, this.y1 = Number.NaN, this.x2 = Number.NaN, this.y2 = Number.NaN, this.addPoint(t3, e3), this.addPoint(i3, s2);
          }
          width() {
            return this.x2 - this.x1;
          }
          height() {
            return this.y2 - this.y1;
          }
          addPoint(t3, e3) {
            null != t3 && ((isNaN(this.x1) || isNaN(this.x2)) && (this.x1 = t3, this.x2 = t3), t3 < this.x1 && (this.x1 = t3), t3 > this.x2 && (this.x2 = t3)), null != e3 && ((isNaN(this.y1) || isNaN(this.y2)) && (this.y1 = e3, this.y2 = e3), e3 < this.y1 && (this.y1 = e3), e3 > this.y2 && (this.y2 = e3));
          }
          addX(t3) {
            this.addPoint(t3, null);
          }
          addY(t3) {
            this.addPoint(null, t3);
          }
          addQuadraticCurve(t3, e3, i3, s2, n2, r2) {
            const o2 = t3 + 2 / 3 * (i3 - t3), a2 = e3 + 2 / 3 * (s2 - e3), l2 = o2 + 1 / 3 * (n2 - t3), h2 = a2 + 1 / 3 * (r2 - e3);
            this.addBezierCurve(t3, e3, o2, a2, l2, h2, n2, r2);
          }
          addBezierCurve(t3, e3, i3, s2, n2, r2, o2, a2) {
            const l2 = [t3, e3], h2 = [i3, s2], c2 = [n2, r2], u2 = [o2, a2];
            let d2;
            this.addPoint(l2[0], l2[1]), this.addPoint(u2[0], u2[1]);
            const f2 = (t4, e4) => Math.pow(1 - t4, 3) * l2[e4] + 3 * Math.pow(1 - t4, 2) * t4 * h2[e4] + 3 * (1 - t4) * Math.pow(t4, 2) * c2[e4] + Math.pow(t4, 3) * u2[e4];
            for (d2 = 0; d2 <= 1; d2++) {
              const t4 = 6 * l2[d2] - 12 * h2[d2] + 6 * c2[d2], e4 = -3 * l2[d2] + 9 * h2[d2] - 9 * c2[d2] + 3 * u2[d2], i4 = 3 * h2[d2] - 3 * l2[d2];
              if (0 === e4) {
                if (0 === t4) continue;
                const e5 = -i4 / t4;
                0 < e5 && e5 < 1 && (0 === d2 && this.addX(f2(e5, d2)), 1 === d2 && this.addY(f2(e5, d2)));
                continue;
              }
              const s3 = Math.pow(t4, 2) - 4 * i4 * e4;
              if (s3 < 0) continue;
              const n3 = (-t4 + Math.sqrt(s3)) / (2 * e4);
              0 < n3 && n3 < 1 && (0 === d2 && this.addX(f2(n3, d2)), 1 === d2 && this.addY(f2(n3, d2)));
              const r3 = (-t4 - Math.sqrt(s3)) / (2 * e4);
              0 < r3 && r3 < 1 && (0 === d2 && this.addX(f2(r3, d2)), 1 === d2 && this.addY(f2(r3, d2)));
            }
          }
        }
        class c {
          static copy(t3) {
            return new c(t3.x, t3.y, t3.w, t3.h);
          }
          constructor(t3, e3, i3, s2) {
            this.x = t3, this.y = e3, this.w = i3, this.h = s2;
          }
          getX() {
            return this.x;
          }
          getY() {
            return this.y;
          }
          getW() {
            return this.w;
          }
          getH() {
            return this.h;
          }
          setX(t3) {
            return this.x = t3, this;
          }
          setY(t3) {
            return this.y = t3, this;
          }
          setW(t3) {
            return this.w = t3, this;
          }
          setH(t3) {
            return this.h = t3, this;
          }
          move(t3, e3) {
            this.x += t3, this.y += e3;
          }
          clone() {
            return c.copy(this);
          }
          mergeWith(t3, e3) {
            const i3 = t3, s2 = this.x < i3.x ? this.x : i3.x, n2 = this.y < i3.y ? this.y : i3.y, r2 = Math.max(this.x + this.w, i3.x + i3.w) - s2, o2 = Math.max(this.y + this.h, i3.y + i3.h) - n2;
            return this.x = s2, this.y = n2, this.w = r2, this.h = o2, e3 && this.draw(e3), this;
          }
          draw(t3, e3, i3) {
            e3 || (e3 = 0), i3 || (i3 = 0), t3.rect(this.x + e3, this.y + i3, this.w, this.h), t3.stroke();
          }
        }
        const u = { glyphs: { v0: { x_min: 0, x_max: 514.5, ha: 525, o: "m 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 " }, v1: { x_min: -1.359375, x_max: 344.359375, ha: 351, o: "m 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 " }, v2: { x_min: -1.359375, x_max: 458.6875, ha: 468, o: "m 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 " }, v3: { x_min: -1.359375, x_max: 409.6875, ha: 418, o: "m 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 " }, v4: { x_min: 0, x_max: 468.21875, ha: 478, o: "m 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 " }, v5: { x_min: 0, x_max: 409.6875, ha: 418, o: "m 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 " }, v6: { x_min: 0, x_max: 475.03125, ha: 485, o: "m 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 " }, v7: { x_min: 0, x_max: 442.359375, ha: 451, o: "m 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 " }, v8: { x_min: 0, x_max: 488.640625, ha: 499, o: "m 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 " }, v9: { x_min: 0, x_max: 475.03125, ha: 485, o: "m 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 " }, va: { x_min: -149.71875, x_max: 148.359375, ha: 151, o: "m -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 " }, vb: { x_min: 0, x_max: 428.75, ha: 438, o: "m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 " }, vc: { x_min: 0, x_max: 447.8125, ha: 457, o: "m 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 " }, vf: { x_min: 0, x_max: 370.21875, ha: 378, o: "m 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 " }, v10: { x_min: 0, x_max: 559.421875, ha: 571, o: "m 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 " }, v11: { x_min: -155.171875, x_max: 153.8125, ha: 157, o: "m -137 353 b -130 353 -136 353 -133 353 b -112 349 -125 353 -119 352 b -100 342 -110 347 -104 344 b 0 317 -69 326 -35 317 b 111 349 38 317 76 328 b 129 353 117 352 123 353 b 153 327 142 353 153 344 b 144 302 153 320 153 317 b 27 6 93 226 50 113 b 21 -13 24 -11 24 -11 b 0 -26 17 -22 8 -26 b -24 -12 -9 -26 -19 -22 b -28 5 -24 -9 -27 -2 b -145 302 -53 117 -95 224 b -155 327 -155 317 -155 320 b -137 353 -155 340 -148 349 " }, v18: { x_min: 0, x_max: 323.9375, ha: 331, o: "m 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 " }, v1b: { x_min: 0, x_max: 559.421875, ha: 571, o: "m 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 " }, v1d: { x_min: 0, x_max: 619.3125, ha: 632, o: "m 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 " }, v1e: { x_min: -402.890625, x_max: 401.53125, ha: 410, o: "m -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 " }, v1f: { x_min: -340.28125, x_max: 338.921875, ha: 346, o: "m -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 " }, v20: { x_min: -571.671875, x_max: 570.3125, ha: 582, o: "m -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 " }, v22: { x_min: 0, x_max: 432.828125, ha: 442, o: "m 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 " }, v23: { x_min: 0, x_max: 133.390625, ha: 136, o: "m 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 " }, v25: { x_min: 0, x_max: 318.5, ha: 325, o: "m 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 " }, v26: { x_min: -21.78125, x_max: 483.1875, ha: 493, o: "m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 " }, v27: { x_min: 0, x_max: 432.828125, ha: 442, o: "m 208 184 b 213 187 209 186 212 187 b 224 176 217 187 221 183 b 245 147 225 172 235 159 b 419 -1 288 90 347 38 b 431 -8 424 -4 431 -8 b 432 -12 432 -9 432 -11 b 430 -18 432 -13 432 -16 b 364 -61 424 -20 383 -47 b 225 -183 307 -102 250 -152 b 223 -187 224 -184 223 -187 b 220 -188 221 -188 220 -188 b 208 -176 216 -188 210 -184 b 187 -148 205 -173 197 -159 b 12 0 144 -90 84 -38 b 0 11 4 5 0 8 b 16 24 0 13 4 18 b 183 158 83 69 141 115 b 208 184 194 169 198 173 m 183 105 b 176 113 181 109 176 113 b 172 109 176 113 175 112 b 92 45 149 90 117 62 l 88 41 l 102 31 b 247 -105 160 -6 210 -55 l 254 -115 l 257 -112 l 269 -102 b 340 -45 287 -87 319 -61 l 344 -43 l 330 -33 b 183 105 272 6 221 54 " }, v28: { x_min: -73.5, x_max: 72.140625, ha: 74, o: "m -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 " }, v29: { x_min: -590.71875, x_max: 589.359375, ha: 601, o: "m 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 " }, v2a: { x_min: -21.78125, x_max: 366.140625, ha: 374, o: "m 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 " }, v2c: { x_min: -597.53125, x_max: 596.171875, ha: 608, o: "m -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 " }, v2d: { x_min: 0, x_max: 438.28125, ha: 447, o: "m 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 " }, v2f: { x_min: -1.359375, x_max: 680.5625, ha: 694, o: "m 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 " }, v30: { x_min: -21.78125, x_max: 367.5, ha: 375, o: "m 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 " }, v31: { x_min: 0, x_max: 386.5625, ha: 394, o: "m 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 " }, v33: { x_min: -423.3125, x_max: 421.9375, ha: 431, o: "m -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 " }, v34: { x_min: 0, x_max: 622.03125, ha: 635, o: "m 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 " }, v36: { x_min: -1.359375, x_max: 1064.390625, ha: 1086, o: "m 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 " }, v38: { x_min: -1.359375, x_max: 651.96875, ha: 665, o: "m 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 " }, v39: { x_min: -171.5, x_max: 251.8125, ha: 257, o: "m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 " }, v3b: { x_min: 0, x_max: 484.5625, ha: 494, o: "m 228 245 b 239 247 234 247 239 247 b 243 247 240 247 242 247 b 303 238 257 247 287 242 b 484 -2 417 208 484 104 b 412 -177 484 -65 461 -127 b 243 -248 363 -226 303 -248 b 6 -63 138 -248 36 -180 b 0 -1 1 -41 0 -20 b 228 245 0 127 98 240 m 255 181 b 240 183 247 183 245 183 b 232 181 238 183 235 183 b 142 152 200 180 168 170 l 138 149 l 190 97 l 242 44 l 294 97 l 345 149 l 340 152 b 255 181 315 169 284 180 m 147 -54 l 197 -1 l 147 51 l 95 104 l 91 99 b 62 -1 72 70 62 34 b 66 -43 62 -15 63 -29 b 91 -101 72 -63 80 -84 l 95 -106 l 147 -54 m 393 99 b 389 104 390 102 389 104 b 337 51 389 104 366 80 l 285 -1 l 337 -54 l 389 -106 l 393 -101 b 421 -1 412 -72 421 -36 b 393 99 421 34 412 69 m 294 -98 b 242 -45 265 -69 242 -45 b 190 -98 242 -45 219 -69 l 138 -151 l 142 -154 b 242 -184 172 -174 206 -184 b 340 -154 276 -184 311 -174 l 345 -151 l 294 -98 " }, v3c: { x_min: 0, x_max: 450.53125, ha: 460, o: "m 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 " }, v3e: { x_min: 0, x_max: 406.96875, ha: 415, o: "m 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 " }, v3f: { x_min: -24.5, x_max: 317.140625, ha: 324, o: "m -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 " }, v40: { x_min: -1.359375, x_max: 436.921875, ha: 446, o: "m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 " }, v41: { x_min: -1.359375, x_max: 556.6875, ha: 568, o: "m 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 " }, v42: { x_min: -348.4375, x_max: 24.5, ha: 25, o: "m -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 " }, v43: { x_min: -442.359375, x_max: 441, ha: 450, o: "m -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 " }, v44: { x_min: -21.78125, x_max: 251.8125, ha: 257, o: "m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 " }, v45: { x_min: -402.890625, x_max: 401.53125, ha: 410, o: "m -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 " }, v46: { x_min: 0, x_max: 627.46875, ha: 640, o: "m 306 190 b 314 191 308 191 311 191 b 326 184 318 191 322 190 l 336 173 b 510 52 377 127 442 80 b 515 49 513 51 515 49 b 611 16 537 40 579 24 b 627 0 624 13 627 9 b 607 -18 627 -11 624 -13 b 330 -181 490 -49 389 -109 b 314 -192 323 -190 319 -192 b 306 -191 311 -192 308 -192 b 294 -177 302 -188 302 -188 b 257 -140 287 -170 265 -148 b 19 -18 193 -84 114 -44 b 0 0 2 -13 0 -11 b 16 16 0 9 2 13 b 110 49 47 24 89 40 b 117 52 111 49 114 51 b 145 65 126 56 130 58 b 281 163 200 93 245 124 b 300 186 288 170 291 174 b 306 190 300 187 303 188 m 317 137 b 313 142 315 141 314 142 b 308 137 313 142 311 141 b 161 4 276 84 220 33 b 155 0 159 1 155 0 b 163 -4 155 0 159 -2 b 308 -138 220 -34 276 -84 b 313 -142 311 -141 313 -142 b 317 -138 314 -142 315 -141 b 464 -4 351 -84 406 -34 b 470 0 468 -2 470 0 b 464 4 470 0 468 1 b 317 137 406 33 351 84 " }, v47: { x_min: -24.5, x_max: 315.78125, ha: 322, o: "m -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 " }, v49: { x_min: 0, x_max: 630.203125, ha: 643, o: "m 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 " }, v4a: { x_min: 70.78125, x_max: 378.390625, ha: 315, o: "m 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 " }, v4b: { x_min: 0, x_max: 503.609375, ha: 514, o: "m 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 " }, v4d: { x_min: -311.6875, x_max: 310.328125, ha: 317, o: "m -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 " }, v4e: { x_min: 0, x_max: 239.5625, ha: 244, o: "m 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 " }, v51: { x_min: -1.359375, x_max: 455.96875, ha: 465, o: "m 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 " }, v52: { x_min: -10.890625, x_max: 298.078125, ha: 294, o: "m 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 " }, v53: { x_min: 0, x_max: 902.421875, ha: 921, o: "m 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 " }, v54: { x_min: -24.5, x_max: 317.140625, ha: 324, o: "m -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 " }, v55: { x_min: 0, x_max: 551.25, ha: 563, o: "m 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 " }, v58: { x_min: -21.78125, x_max: 367.5, ha: 375, o: "m 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 " }, v59: { x_min: 0, x_max: 464.140625, ha: 474, o: "m 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 " }, v5a: { x_min: -171.5, x_max: 170.140625, ha: 174, o: "m -6 566 b 0 567 -5 567 -2 567 b 14 556 6 567 12 563 b 92 285 14 555 50 433 b 170 13 166 33 170 19 b 168 13 170 13 170 13 b 161 1 168 8 167 4 l 159 0 l 122 0 l 84 0 l 81 1 b 21 195 76 5 78 -5 b -32 381 -8 297 -32 381 b -87 197 -32 381 -57 298 b -141 8 -115 94 -140 9 b -155 0 -142 2 -149 0 b -171 15 -163 0 -171 5 b -14 556 -171 18 -24 528 b -6 566 -14 560 -10 564 " }, v5b: { x_min: -441, x_max: 439.640625, ha: 449, o: "m -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 " }, v5c: { x_min: 0, x_max: 447.8125, ha: 457, o: "m 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 " }, v5d: { x_min: -1.359375, x_max: 592.078125, ha: 604, o: "m 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 " }, v60: { x_min: -590.71875, x_max: 589.359375, ha: 601, o: "m -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 " }, v62: { x_min: 46.28125, x_max: 669.671875, ha: 563, o: "m 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 " }, v68: { x_min: -597.53125, x_max: 596.171875, ha: 608, o: "m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 " }, v6c: { x_min: -1.359375, x_max: 193.28125, ha: 197, o: "m 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 " }, v6d: { x_min: -590.71875, x_max: 589.359375, ha: 601, o: "m 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 " }, v6f: { x_min: -80.3125, x_max: 78.9375, ha: 81, o: "m 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 " }, v70: { x_min: 0, x_max: 436.921875, ha: 446, o: "m 213 190 b 217 191 215 191 216 191 b 231 184 223 191 228 188 b 249 154 240 167 246 159 b 419 18 292 91 348 45 b 436 -1 435 11 436 8 b 424 -16 436 -9 434 -13 b 308 -87 394 -26 340 -59 b 231 -186 276 -117 257 -142 b 219 -192 228 -191 225 -192 b 198 -174 209 -192 208 -191 b 47 -33 161 -113 110 -63 b 10 -16 34 -26 17 -19 b 0 -1 2 -13 0 -9 b 17 18 0 8 1 11 b 198 173 95 48 156 101 b 213 190 206 187 208 188 " }, v72: { x_min: -423.3125, x_max: 421.9375, ha: 431, o: "m -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 " }, v74: { x_min: -206.890625, x_max: 428.75, ha: 438, o: "m 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 " }, v75: { x_min: -149.71875, x_max: 148.359375, ha: 151, o: "m -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 " }, v78: { x_min: 0, x_max: 193.28125, ha: 197, o: "m 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 " }, v79: { x_min: -1.359375, x_max: 899.703125, ha: 918, o: "m 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 " }, v7a: { x_min: -1.359375, x_max: 386.5625, ha: 394, o: "m 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 " }, v7c: { x_min: 0, x_max: 300.8125, ha: 307, o: "m 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 " }, v7d: { x_min: -1.359375, x_max: 436.921875, ha: 446, o: "m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 " }, v7f: { x_min: 0, x_max: 367.5, ha: 375, o: "m 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 " }, v80: { x_min: 29.9375, x_max: 420.578125, ha: 371, o: "m 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 " }, v81: { x_min: 0, x_max: 428.75, ha: 438, o: "m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 " }, v83: { x_min: -1.359375, x_max: 847.96875, ha: 865, o: "m 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 " }, v84: { x_min: 25.859375, x_max: 164.6875, ha: 168, o: "m 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 " }, v86: { x_min: -571.671875, x_max: 570.3125, ha: 582, o: "m -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 " }, v8a: { x_min: -170.140625, x_max: 168.78125, ha: 172, o: "m -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 " }, v8b: { x_min: 0, x_max: 319.859375, ha: 326, o: "m 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 " }, v8c: { x_min: -330.75, x_max: 329.390625, ha: 336, o: "m -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 " }, v8d: { x_min: -1.359375, x_max: 255.890625, ha: 261, o: "m 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 " }, v8f: { x_min: -21.78125, x_max: 362.0625, ha: 369, o: "m 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 " }, v90: { x_min: -171.5, x_max: 483.1875, ha: 493, o: "m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 " }, v92: { x_min: 0, x_max: 598.890625, ha: 611, o: "m 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 " }, v93: { x_min: 0, x_max: 438.28125, ha: 447, o: "m 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 " }, v94: { x_min: -149.71875, x_max: 148.359375, ha: 151, o: "m -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 " }, v95: { x_min: 0, x_max: 406.96875, ha: 415, o: "m 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 " }, v97: { x_min: -228.671875, x_max: 227.3125, ha: 232, o: "m -217 487 l -213 488 l 0 488 l 212 488 l 216 487 b 225 476 220 484 224 480 l 227 473 l 227 244 l 227 15 l 225 12 b 206 0 223 4 215 0 b 197 1 204 0 200 0 b 187 12 193 4 189 6 l 186 15 l 186 138 l 186 262 l -1 262 l -187 262 l -187 138 l -187 15 l -189 12 b -208 0 -193 4 -200 0 b -227 12 -216 0 -223 4 l -228 15 l -228 244 l -228 473 l -227 476 b -217 487 -225 480 -221 484 " }, v9a: { x_min: -21.78125, x_max: 367.5, ha: 375, o: "m 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 " }, v9b: { x_min: -24.5, x_max: 313.0625, ha: 319, o: "m -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 " }, v9c: { x_min: -166.0625, x_max: -25.859375, ha: 0, o: "m -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 " }, v9e: { x_min: 0, x_max: 607.0625, ha: 619, o: "m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 " }, va3: { x_min: 58.53125, x_max: 228.671875, ha: 294, o: "m 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 " }, va5: { x_min: 0, x_max: 349.8125, ha: 357, o: "m 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 " }, va9: { x_min: -24.5, x_max: 314.421875, ha: 321, o: "m -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 " }, vaa: { x_min: -1.359375, x_max: 752.703125, ha: 768, o: "m 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 " }, vab: { x_min: 0, x_max: 272.21875, ha: 278, o: "m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 " }, vad: { x_min: 0, x_max: 873.828125, ha: 892, o: "m 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 " }, vb1: { x_min: 78.9375, x_max: 485.921875, ha: 417, o: "m 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 " }, vb3: { x_min: 0, x_max: 227.3125, ha: 232, o: "m 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 " }, vb4: { x_min: -597.53125, x_max: 596.171875, ha: 608, o: "m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 " }, vb6: { x_min: 0, x_max: 556.6875, ha: 568, o: "m 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 " }, vb7: { x_min: -176.9375, x_max: 251.8125, ha: 257, o: "m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 " }, vb9: { x_min: -122.5, x_max: 121.140625, ha: 124, o: "m -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 " }, vba: { x_min: -118.421875, x_max: 597.53125, ha: 381, o: "m 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 " }, vbf: { x_min: -53.078125, x_max: 513.140625, ha: 485, o: "m 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 " }, vc3: { x_min: -10.890625, x_max: 299.4375, ha: 294, o: "m 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 " }, vd0: { x_min: -10.890625, x_max: 299.4375, ha: 294, o: "m 44 174 b 51 174 47 174 49 174 b 68 173 55 174 61 174 l 287 112 l 551 40 b 615 20 617 22 609 23 b 626 0 622 16 626 8 b 615 -22 626 -9 622 -18 b 613 -23 613 -23 613 -23 b 613 -23 613 -23 613 -23 b 287 -113 613 -24 597 -29 l 68 -174 b 53 -176 61 -176 57 -176 b 39 -172 47 -176 43 -174 b 27 -151 31 -167 27 -159 b 39 -129 27 -141 31 -133 b 230 -74 43 -124 20 -131 l 370 -36 l 468 -9 b 498 0 484 -4 498 -1 b 468 8 498 0 484 2 l 370 34 l 230 73 b 40 126 28 129 43 124 b 27 149 31 131 27 140 b 44 174 27 161 34 170 m 205 110 l 205 300 b 205 330 245 330 245 300 l 245 300 l 245 -300 b 245 -330 205 -330 205 -300 l 205 -300 l 205 110 l 345 90 m 345 90 l 345 330 b 345 360 385 360 385 330 l 385 330 l 385 -270 b 385 -300 345 -300 345 -270 l 345 -270 l 345 90 " }, vd1: { x_min: -20, x_max: 320, ha: 257, o: "m -8 200 b -8 210 8 200 16 200 l 20 148 -199 l 23 -615 b 0 -629 9 -629 6 -629 l -21 -612 l -21 -201 l -21 216 l -20 200 m 16 200 l 310 0 l 240 0 l 16 140 l 16 -120 l 240 0 l 310 0 l 16 -200 " }, vd2: { x_min: 0, x_max: 430.75, ha: 386, o: "m 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 " }, vd3: { x_min: 0, x_max: 430.75, ha: 386, o: "m 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 l 50 150 l 380 150 l 380 -150 l 50 -150 l 50 150 " }, vd4: { x_min: 0, x_max: 430.75, ha: 360, o: "m 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 " }, vd5: { x_min: 0, x_max: 430.75, ha: 360, o: "m 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 l 50 100 l 380 100 l 380 -100 l 50 -100 l 50 100" }, vd6: { x_min: 0, x_max: 430.75, ha: 360, o: "m -146 537 b -138 538 -143 538 -141 538 b -118 525 -129 538 -121 533 b -117 390 -117 522 -117 521 b -115 259 -117 268 -117 259 b -115 259 -115 259 -115 259 b -59 272 -104 263 -62 272 b -39 259 -50 272 -42 267 b -37 209 -38 257 -37 233 b -39 159 -37 185 -38 162 b -85 138 -43 149 -44 149 l -117 131 l -117 21 b -115 -88 -117 -80 -117 -88 b -115 -88 -115 -88 -115 -88 b -59 -75 -104 -84 -62 -75 b -44 -81 -52 -75 -48 -77 b -38 -124 -38 -87 -38 -85 b -38 -138 -38 -124 -38 -138 b -38 -152 -38 -138 -38 -152 b -44 -195 -38 -191 -38 -190 b -85 -209 -48 -200 -48 -200 l -117 -217 l -117 -349 b -118 -486 -117 -481 -117 -482 b -138 -499 -121 -494 -129 -499 b -153 -493 -143 -499 -149 -497 b -159 -415 -158 -487 -159 -496 b -159 -355 -159 -398 -159 -379 b -159 -227 -159 -284 -159 -227 b -205 -238 -159 -227 -180 -232 b -250 -249 -230 -244 -250 -249 b -251 -386 -251 -249 -251 -311 b -252 -525 -251 -521 -251 -522 b -272 -538 -255 -534 -264 -538 b -287 -532 -277 -538 -283 -536 b -293 -452 -292 -527 -293 -536 b -293 -391 -293 -436 -293 -415 b -294 -260 -293 -269 -293 -260 b -294 -260 -294 -260 -294 -260 b -348 -272 -306 -264 -345 -272 b -368 -259 -357 -272 -365 -267 b -369 -209 -369 -257 -369 -233 b -368 -159 -369 -185 -369 -162 b -323 -139 -364 -149 -362 -148 l -293 -131 l -293 -22 b -294 87 -293 80 -293 87 b -294 87 -294 87 -294 87 b -348 75 -306 84 -345 75 b -368 88 -357 75 -365 80 b -369 138 -369 91 -369 114 b -368 188 -369 162 -369 186 b -323 209 -364 198 -362 199 l -293 216 l -293 349 b -292 486 -293 481 -293 482 b -272 499 -288 494 -280 499 b -257 493 -266 499 -261 497 b -251 414 -251 487 -251 496 b -251 354 -251 398 -251 378 b -251 226 -251 284 -251 226 b -205 238 -250 226 -230 231 b -159 249 -180 244 -159 249 b -159 385 -159 249 -159 310 b -157 525 -159 521 -159 522 b -146 537 -156 530 -151 535 z m -159 11 b -159 120 -159 98 -159 120 l -159 120 b -175 116 -160 120 -167 119 b -221 105 -184 114 -204 109 l -251 98 l -251 -12 b -251 -121 -251 -72 -251 -121 b -205 -110 -250 -121 -230 -116 b -159 -99 -180 -104 -159 -99 b -159 11 -159 -99 -159 -49 z m 89 517 b 97 519 92 518 94 519 b 117 505 106 519 114 513 b 119 376 119 502 119 501 l 119 249 l 145 258 b 176 267 169 266 172 267 b 177 267 176 267 177 267 b 196 255 186 267 192 263 l 197 252 l 197 205 b 197 181 197 195 197 187 b 193 149 197 153 197 153 b 152 131 190 144 187 143 l 119 120 l 119 10 b 119 -100 119 -62 119 -100 b 145 -91 120 -100 131 -96 b 173 -82 159 -86 171 -82 b 176 -81 174 -81 175 -81 b 196 -94 185 -81 193 -87 b 198 -151 197 -97 198 -125 b 197 -194 198 -172 197 -192 b 153 -218 193 -203 192 -204 l 119 -230 l 119 -367 l 118 -504 l 117 -507 b 97 -519 113 -514 105 -519 b 82 -512 92 -519 87 -517 b 76 -434 77 -507 76 -516 b 76 -374 76 -418 76 -398 b 76 -245 76 -303 76 -245 b 52 -254 76 -245 65 -249 b 19 -263 34 -260 25 -263 b 6 -257 13 -263 10 -261 b 0 -214 0 -251 0 -253 b 0 -200 0 -210 0 -205 b 0 -188 0 -196 0 -192 b 6 -143 0 -147 0 -149 b 46 -126 10 -139 10 -139 l 76 -115 l 76 -5 b 76 106 76 56 76 106 b 51 98 76 106 64 102 b 18 89 34 92 25 89 b 6 95 13 89 10 91 b 0 139 0 101 0 99 b 0 153 0 143 0 148 b 0 179 0 163 0 172 b 44 225 0 215 3 211 l 76 236 l 76 369 b 78 505 76 501 76 502 b 89 517 80 510 85 515 z " }, vd7: { x_min: 0, x_max: 430.75, ha: 360, o: "m 283 633 b 291 634 286 634 289 634 b 311 621 300 634 308 629 b 313 505 313 618 313 617 b 313 393 313 443 313 393 b 378 425 313 393 343 407 l 443 458 l 448 458 b 449 458 449 458 449 458 b 471 437 462 458 471 448 b 469 429 471 434 470 432 b 387 382 466 421 469 423 l 313 344 l 313 247 l 313 150 l 315 152 b 433 201 353 184 394 201 b 479 193 448 201 464 198 b 549 86 524 177 549 135 b 526 1 549 59 541 29 b 395 -143 504 -39 475 -71 b 316 -214 351 -182 341 -191 b 292 -229 302 -228 300 -229 b 272 -216 283 -229 275 -224 b 271 55 271 -212 271 -212 b 270 323 271 203 270 323 b 205 291 270 323 241 308 l 140 258 l 135 258 b 134 258 135 258 134 258 b 112 279 121 258 112 267 b 114 287 112 281 113 284 b 196 334 117 295 114 293 l 271 371 l 271 495 b 272 621 271 617 271 618 b 283 633 274 626 279 631 z m 404 133 b 391 134 400 134 395 134 b 384 134 388 134 386 134 b 318 88 358 130 335 114 l 313 81 l 313 -37 l 313 -156 l 316 -152 b 439 83 391 -71 439 22 l 439 84 b 404 133 439 115 430 128 z m -8 633 l -8 633 b 0 634 -6 634 -3 634 b 20 621 8 634 17 629 b 21 384 21 618 21 617 l 21 150 l 24 152 b 141 201 62 184 102 201 b 187 193 157 201 172 198 b 257 86 232 177 257 135 b 234 1 257 59 250 29 b 103 -143 212 -39 183 -71 b 24 -214 60 -182 49 -191 b 0 -229 10 -228 8 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 203 l -21 618 l -20 621 b -8 633 -18 626 -13 631 z m 113 133 l 113 133 b 99 134 109 134 103 134 b 93 134 97 134 94 134 b 26 88 66 130 43 114 l 21 81 l 21 -37 l 21 -156 l 25 -152 b 148 83 99 -71 148 22 l 148 84 b 113 133 148 115 138 128 z " }, rwl: { x_min: 0, x_max: 737.71875, ha: 753, o: "m 9 13 b 208 15 10 15 51 15 b 368 15 251 15 304 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 660 -16 l 592 -16 l 592 -95 l 592 -174 l 368 -174 l 144 -174 l 144 -95 l 144 -16 l 77 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 9 13 0 5 2 11 " }, rhl: { x_min: 0, x_max: 737.71875, ha: 753, o: "m 144 94 l 144 173 l 368 173 l 592 173 l 592 94 l 592 15 l 660 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 368 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 6 12 0 4 1 9 l 9 15 l 77 15 l 144 15 l 144 94 " } }, cssFontWeight: "normal", ascender: 1903, underlinePosition: -125, cssFontStyle: "normal", boundingBox: { yMin: -2065.375, xMin: -695.53125, yMax: 1901.578125, xMax: 1159.671875 }, resolution: 1e3, descender: -2066, familyName: "VexFlow-18", lineHeight: 4093, underlineThickness: 50 };
        function d(t3, e3, i3, s2, n2, r2) {
          let o2, a2, l2, h2 = 0;
          function c2() {
            return e3 + t3[h2++] * s2;
          }
          function u2() {
            return i3 + t3[h2++] * n2;
          }
          for (; h2 < t3.length; ) switch (o2 = t3[h2++], o2) {
            case "m":
            case "l":
              r2[o2](c2(), u2());
              break;
            case "q":
              a2 = c2(), l2 = u2(), r2.q(c2(), u2(), a2, l2);
              break;
            case "b":
              a2 = c2(), l2 = u2(), r2.b(c2(), u2(), c2(), u2(), a2, l2);
          }
        }
        class f extends l {
          static loadMetrics(t3, e3, i3) {
            const n2 = t3.glyphs[e3];
            if (!n2) throw new s.RERR("BadGlyph", `Glyph ${e3} does not exist in font.`);
            const r2 = n2.x_min, o2 = n2.x_max, a2 = n2.ha;
            let l2;
            if (n2.o) return i3 ? n2.cached_outline ? l2 = n2.cached_outline : (l2 = n2.o.split(" "), n2.cached_outline = l2) : (n2.cached_outline && delete n2.cached_outline, l2 = n2.o.split(" ")), { x_min: r2, x_max: o2, ha: a2, outline: l2 };
            throw new s.RERR("BadGlyph", `Glyph ${e3} has no outline defined.`);
          }
          static renderGlyph(t3, e3, i3, s2, n2, r2) {
            const o2 = 72 * s2 / (100 * u.resolution), a2 = f.loadMetrics(u, n2, !r2);
            f.renderOutline(t3, a2.outline, o2, e3, i3);
          }
          static renderOutline(t3, e3, i3, s2, n2) {
            t3.beginPath(), t3.moveTo(s2, n2), d(e3, s2, n2, i3, -i3, { m: t3.moveTo.bind(t3), l: t3.lineTo.bind(t3), q: t3.quadraticCurveTo.bind(t3), b: t3.bezierCurveTo.bind(t3) }), t3.fill();
          }
          static getOutlineBoundingBox(t3, e3, i3, s2) {
            const n2 = new h();
            return d(t3, i3, s2, e3, -e3, { m: n2.addPoint.bind(n2), l: n2.addPoint.bind(n2), q: n2.addQuadraticCurve.bind(n2), b: n2.addBezierCurve.bind(n2) }), new c(n2.x1, n2.y1, n2.width(), n2.height());
          }
          constructor(t3, e3, i3) {
            super(), this.setAttribute("type", "Glyph"), this.code = t3, this.point = e3, this.options = { cache: true, font: u }, this.metrics = null, this.x_shift = 0, this.y_shift = 0, this.originShift = { x: 0, y: 0 }, i3 ? this.setOptions(i3) : this.reset();
          }
          setOptions(t3) {
            s.Merge(this.options, t3), this.reset();
          }
          setPoint(t3) {
            return this.point = t3, this;
          }
          setStave(t3) {
            return this.stave = t3, this;
          }
          setXShift(t3) {
            return this.x_shift = t3, this;
          }
          setYShift(t3) {
            return this.y_shift = t3, this;
          }
          reset() {
            this.scale = 72 * this.point / (100 * this.options.font.resolution), this.metrics = f.loadMetrics(this.options.font, this.code, this.options.cache), this.bbox = f.getOutlineBoundingBox(this.metrics.outline, this.scale, 0, 0);
          }
          getMetrics() {
            if (!this.metrics) throw new s.RuntimeError("BadGlyph", `Glyph ${this.code} is not initialized.`);
            return { x_min: this.metrics.x_min * this.scale, x_max: this.metrics.x_max * this.scale, width: this.bbox.getW(), height: this.bbox.getH() };
          }
          setOriginX(t3) {
            const { bbox: e3 } = this, i3 = (t3 - Math.abs(e3.getX() / e3.getW())) * e3.getW();
            this.originShift.x = -i3;
          }
          setOriginY(t3) {
            const { bbox: e3 } = this, i3 = (t3 - Math.abs(e3.getY() / e3.getH())) * e3.getH();
            this.originShift.y = -i3;
          }
          setOrigin(t3, e3) {
            this.setOriginX(t3), this.setOriginY(e3);
          }
          render(t3, e3, i3) {
            if (!this.metrics) throw new s.RuntimeError("BadGlyph", `Glyph ${this.code} is not initialized.`);
            const n2 = this.metrics.outline, r2 = this.scale;
            this.setRendered(), this.applyStyle(t3), f.renderOutline(t3, n2, r2, e3 + this.originShift.x, i3 + this.originShift.y), this.restoreStyle(t3);
          }
          renderToStave(t3) {
            if (this.checkContext(), !this.metrics) throw new s.RuntimeError("BadGlyph", `Glyph ${this.code} is not initialized.`);
            if (!this.stave) throw new s.RuntimeError("GlyphError", "No valid stave");
            const e3 = this.metrics.outline, i3 = this.scale;
            this.setRendered(), this.applyStyle(), f.renderOutline(this.context, e3, i3, t3 + this.x_shift, this.stave.getYForGlyphs() + this.y_shift), this.restoreStyle();
          }
        }
        const m = { STEM_WIDTH: 1.5, STEM_HEIGHT: 35, STAVE_LINE_THICKNESS: 1, RESOLUTION: 16384, DEFAULT_NOTATION_FONT_SCALE: 39, DEFAULT_TABLATURE_FONT_SCALE: 39, SLASH_NOTEHEAD_WIDTH: 15, TEXT_HEIGHT_OFFSET_HACK: 1, IsKerned: true, clefProperties: (t3) => {
          if (!t3) throw new s.RERR("BadArgument", "Invalid clef: " + t3);
          const e3 = m.clefProperties.values[t3];
          if (!e3) throw new s.RERR("BadArgument", "Invalid clef: " + t3);
          return e3;
        } };
        m.clefProperties.values = { treble: { line_shift: 0 }, bass: { line_shift: 6 }, tenor: { line_shift: 4 }, alto: { line_shift: 3 }, soprano: { line_shift: 1 }, percussion: { line_shift: 0 }, "mezzo-soprano": { line_shift: 2 }, "baritone-c": { line_shift: 5 }, "baritone-f": { line_shift: 5 }, subbass: { line_shift: 7 }, french: { line_shift: -1 } }, m.keyProperties = (t3, e3, i3) => {
          void 0 === e3 && (e3 = "treble");
          const n2 = { octave_shift: 0 };
          "object" == typeof i3 && s.Merge(n2, i3);
          const r2 = t3.split("/");
          if (r2.length < 2) throw new s.RERR("BadArguments", `Key must have note + octave and an optional glyph: ${t3}`);
          const o2 = r2[0].toUpperCase(), a2 = m.keyProperties.note_values[o2];
          if (!a2) throw new s.RERR("BadArguments", "Invalid key name: " + o2);
          a2.octave && (r2[1] = a2.octave);
          let l2 = parseInt(r2[1], 10);
          l2 -= n2.octave_shift;
          let h2 = (7 * l2 - 28 + a2.index) / 2;
          h2 += m.clefProperties(e3).line_shift;
          let c2 = 0;
          h2 <= 0 && 2 * h2 % 2 == 0 && (c2 = 1), h2 >= 6 && 2 * h2 % 2 == 0 && (c2 = -1);
          const u2 = void 0 !== a2.int_val ? 12 * l2 + a2.int_val : null, d2 = a2.code, f2 = a2.shift_right;
          let p2 = {};
          if (r2.length > 2 && r2[2]) {
            const t4 = r2[2].toUpperCase();
            p2 = m.keyProperties.customNoteHeads[t4] || {};
          }
          return { key: o2, octave: l2, line: h2, int_value: u2, accidental: a2.accidental, code: d2, stroke: c2, shift_right: f2, displaced: false, ...p2 };
        }, m.keyProperties.note_values = { C: { index: 0, int_val: 0, accidental: null }, CN: { index: 0, int_val: 0, accidental: "n" }, "C#": { index: 0, int_val: 1, accidental: "#" }, "C##": { index: 0, int_val: 2, accidental: "##" }, CB: { index: 0, int_val: -1, accidental: "b" }, CBB: { index: 0, int_val: -2, accidental: "bb" }, D: { index: 1, int_val: 2, accidental: null }, DN: { index: 1, int_val: 2, accidental: "n" }, "D#": { index: 1, int_val: 3, accidental: "#" }, "D##": { index: 1, int_val: 4, accidental: "##" }, DB: { index: 1, int_val: 1, accidental: "b" }, DBB: { index: 1, int_val: 0, accidental: "bb" }, E: { index: 2, int_val: 4, accidental: null }, EN: { index: 2, int_val: 4, accidental: "n" }, "E#": { index: 2, int_val: 5, accidental: "#" }, "E##": { index: 2, int_val: 6, accidental: "##" }, EB: { index: 2, int_val: 3, accidental: "b" }, EBB: { index: 2, int_val: 2, accidental: "bb" }, F: { index: 3, int_val: 5, accidental: null }, FN: { index: 3, int_val: 5, accidental: "n" }, "F#": { index: 3, int_val: 6, accidental: "#" }, "F##": { index: 3, int_val: 7, accidental: "##" }, FB: { index: 3, int_val: 4, accidental: "b" }, FBB: { index: 3, int_val: 3, accidental: "bb" }, G: { index: 4, int_val: 7, accidental: null }, GN: { index: 4, int_val: 7, accidental: "n" }, "G#": { index: 4, int_val: 8, accidental: "#" }, "G##": { index: 4, int_val: 9, accidental: "##" }, GB: { index: 4, int_val: 6, accidental: "b" }, GBB: { index: 4, int_val: 5, accidental: "bb" }, A: { index: 5, int_val: 9, accidental: null }, AN: { index: 5, int_val: 9, accidental: "n" }, "A#": { index: 5, int_val: 10, accidental: "#" }, "A##": { index: 5, int_val: 11, accidental: "##" }, AB: { index: 5, int_val: 8, accidental: "b" }, ABB: { index: 5, int_val: 7, accidental: "bb" }, B: { index: 6, int_val: 11, accidental: null }, BN: { index: 6, int_val: 11, accidental: "n" }, "B#": { index: 6, int_val: 12, accidental: "#" }, "B##": { index: 6, int_val: 13, accidental: "##" }, BB: { index: 6, int_val: 10, accidental: "b" }, BBB: { index: 6, int_val: 9, accidental: "bb" }, R: { index: 6, int_val: 9, rest: true }, X: { index: 6, accidental: "", octave: 4, code: "v3e", shift_right: 5.5 } }, m.keyProperties.customNoteHeads = { D0: { code: "v27", shift_right: 0, stem_up_x_offset: 0, stem_down_x_offset: 0, stem_up_y_offset: -1, stem_down_y_offset: 0 }, D1: { code: "v2d", shift_right: -0.5 }, D2: { code: "v22", shift_right: -0.5 }, D3: { code: "v70", shift_right: -0.5 }, T0: { code: "v49", shift_right: -2, stem_up_y_offset: -4, stem_down_y_offset: 4 }, T1: { code: "v93", shift_right: 0.5, stem_up_y_offset: -4, stem_down_y_offset: 4 }, T2: { code: "v40", shift_right: 0.5, stem_up_y_offset: -4, stem_down_y_offset: 4 }, T3: { code: "v7d", shift_right: 0.5, stem_up_y_offset: -4, stem_down_y_offset: 4 }, TI: { code: "v11", shift_right: 0, stem_up_y_shift: 5, stem_down_y_shift: 5, stem_up_x_offset: 6, stem_down_x_offset: 4 }, X0: { code: "v92", stem_up_x_offset: -2, stem_down_x_offset: 0, stem_up_y_offset: 4, stem_down_y_offset: 4 }, X1: { code: "v95", shift_right: -0.5, stem_up_y_offset: 4, stem_down_y_offset: 4 }, X2: { code: "v3e", shift_right: 0.5, stem_up_y_offset: 4, stem_down_y_offset: 4 }, X3: { code: "v3b", shift_right: 0, stem_up_x_offset: -1.2, stem_down_x_offset: 0, stem_up_y_offset: -1, stem_down_y_offset: 2 }, S1: { code: "vd3", shift_right: 0 }, S2: { code: "vd2", shift_right: 0 }, R1: { code: "vd5", shift_right: 0 }, R2: { code: "vd4", shift_right: 0 }, rwl: { code: "rwl", shift_right: 0 }, rhl: { code: "rhl", shift_right: 0 } }, m.integerToNote = (t3) => {
          if (void 0 === t3) throw new s.RERR("BadArguments", "Undefined integer for integerToNote");
          if (t3 < -2) throw new s.RERR("BadArguments", `integerToNote requires integer > -2: ${t3}`);
          const e3 = m.integerToNote.table[t3];
          if (!e3) throw new s.RERR("BadArguments", `Unknown note value for integer: ${t3}`);
          return e3;
        }, m.integerToNote.table = { 0: "C", 1: "C#", 2: "D", 3: "D#", 4: "E", 5: "F", 6: "F#", 7: "G", 8: "G#", 9: "A", 10: "A#", 11: "B" }, m.tabToGlyph = (t3, e3 = 1, i3 = false) => {
          let s2 = null, n2 = 0, r2 = 0;
          if ("X" === t3.toString().toUpperCase()) {
            s2 = "v7f", i3 && (s2 = "v3e");
            const t4 = new f(s2, m.DEFAULT_TABLATURE_FONT_SCALE * e3).getMetrics();
            n2 = t4.width, r2 = -t4.height / 2;
          } else n2 = m.textWidth(t3.toString());
          return { text: t3, code: s2, getWidth: () => n2 * e3, shift_y: r2 };
        }, m.textWidth = (t3) => 7 * t3.toString().length, m.articulationCodes = (t3) => m.articulationCodes.articulations[t3], m.articulationCodes.articulations = { "a.": { code: "v23", between_lines: true }, av: { code: "v28", between_lines: true }, "a>": { code: "v42", between_lines: true }, "a-": { code: "v25", between_lines: true }, "a^": { code: "va", between_lines: false }, "a+": { code: "v8b", between_lines: false }, ao: { code: "v94", between_lines: false }, ah: { code: "vb9", between_lines: false }, "a@a": { code: "v43", between_lines: false }, "a@u": { code: "v5b", between_lines: false }, "a|": { code: "v75", between_lines: false }, am: { code: "v97", between_lines: false }, "a,": { code: "vb3", between_lines: false } }, m.accidentalCodes = (t3) => m.accidentalCodes.accidentals[t3], m.accidentalCodes.accidentals = { "#": { code: "v18", parenRightPaddingAdjustment: -1 }, "##": { code: "v7f", parenRightPaddingAdjustment: -1 }, b: { code: "v44", parenRightPaddingAdjustment: -2 }, bb: { code: "v26", parenRightPaddingAdjustment: -2 }, n: { code: "v4e", parenRightPaddingAdjustment: -1 }, "{": { code: "v9c", parenRightPaddingAdjustment: -1 }, "}": { code: "v84", parenRightPaddingAdjustment: -1 }, db: { code: "v9e", parenRightPaddingAdjustment: -1 }, d: { code: "vab", parenRightPaddingAdjustment: 0 }, bbs: { code: "v90", parenRightPaddingAdjustment: -1 }, "++": { code: "v51", parenRightPaddingAdjustment: -1 }, "+": { code: "v78", parenRightPaddingAdjustment: -1 }, "+-": { code: "v8d", parenRightPaddingAdjustment: -1 }, "++-": { code: "v7a", parenRightPaddingAdjustment: -1 }, bs: { code: "vb7", parenRightPaddingAdjustment: -1 }, bss: { code: "v39", parenRightPaddingAdjustment: -1 }, o: { code: "vd0", parenRightPaddingAdjustment: -1 }, k: { code: "vd1", parenRightPaddingAdjustment: -1 }, ashs: { code: "vd6", parenRightPaddingAdjustment: -1 }, afhf: { code: "vd7", parenRightPaddingAdjustment: -1 } }, m.accidentalColumnsTable = { 1: { a: [1], b: [1] }, 2: { a: [1, 2] }, 3: { a: [1, 3, 2], b: [1, 2, 1], second_on_bottom: [1, 2, 3] }, 4: { a: [1, 3, 4, 2], b: [1, 2, 3, 1], spaced_out_tetrachord: [1, 2, 1, 2] }, 5: { a: [1, 3, 5, 4, 2], b: [1, 2, 4, 3, 1], spaced_out_pentachord: [1, 2, 3, 2, 1], very_spaced_out_pentachord: [1, 2, 1, 2, 1] }, 6: { a: [1, 3, 5, 6, 4, 2], b: [1, 2, 4, 5, 3, 1], spaced_out_hexachord: [1, 3, 2, 1, 3, 2], very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2] } }, m.ornamentCodes = (t3) => m.ornamentCodes.ornaments[t3], m.ornamentCodes.ornaments = { mordent: { code: "v1e" }, mordent_inverted: { code: "v45" }, turn: { code: "v72" }, turn_inverted: { code: "v33" }, tr: { code: "v1f" }, upprall: { code: "v60" }, downprall: { code: "vb4" }, prallup: { code: "v6d" }, pralldown: { code: "v2c" }, upmordent: { code: "v29" }, downmordent: { code: "v68" }, lineprall: { code: "v20" }, prallprall: { code: "v86" } }, m.keySignature = (t3) => {
          const e3 = m.keySignature.keySpecs[t3];
          if (!e3) throw new s.RERR("BadKeySignature", `Bad key signature spec: '${t3}'`);
          if (!e3.acc) return [];
          const i3 = m.keySignature.accidentalList(e3.acc), n2 = [];
          for (let t4 = 0; t4 < e3.num; ++t4) {
            const s2 = i3[t4];
            n2.push({ type: e3.acc, line: s2 });
          }
          return n2;
        }, m.keySignature.keySpecs = { C: { acc: null, num: 0 }, Am: { acc: null, num: 0 }, F: { acc: "b", num: 1 }, Dm: { acc: "b", num: 1 }, Bb: { acc: "b", num: 2 }, Gm: { acc: "b", num: 2 }, Eb: { acc: "b", num: 3 }, Cm: { acc: "b", num: 3 }, Ab: { acc: "b", num: 4 }, Fm: { acc: "b", num: 4 }, Db: { acc: "b", num: 5 }, Bbm: { acc: "b", num: 5 }, Gb: { acc: "b", num: 6 }, Ebm: { acc: "b", num: 6 }, Cb: { acc: "b", num: 7 }, Abm: { acc: "b", num: 7 }, G: { acc: "#", num: 1 }, Em: { acc: "#", num: 1 }, D: { acc: "#", num: 2 }, Bm: { acc: "#", num: 2 }, A: { acc: "#", num: 3 }, "F#m": { acc: "#", num: 3 }, E: { acc: "#", num: 4 }, "C#m": { acc: "#", num: 4 }, B: { acc: "#", num: 5 }, "G#m": { acc: "#", num: 5 }, "F#": { acc: "#", num: 6 }, "D#m": { acc: "#", num: 6 }, "C#": { acc: "#", num: 7 }, "A#m": { acc: "#", num: 7 } }, m.unicode = { sharp: String.fromCharCode(parseInt("266F", 16)), flat: String.fromCharCode(parseInt("266D", 16)), natural: String.fromCharCode(parseInt("266E", 16)), triangle: String.fromCharCode(parseInt("25B3", 16)), "o-with-slash": String.fromCharCode(parseInt("00F8", 16)), degrees: String.fromCharCode(parseInt("00B0", 16)), circle: String.fromCharCode(parseInt("25CB", 16)) }, m.keySignature.accidentalList = (t3) => ({ b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5], "#": [0, 1.5, -0.5, 1, 2.5, 0.5, 2] })[t3], m.parseNoteDurationString = (t3) => {
          if ("string" != typeof t3) return null;
          const e3 = /(\d*\/?\d+|[a-z])(d*)([nrhms]|$)/.exec(t3);
          if (!e3) return null;
          const i3 = e3[1], s2 = e3[2].length;
          let n2 = e3[3];
          return 0 === n2.length && (n2 = "n"), { duration: i3, dots: s2, type: n2 };
        }, m.parseNoteStruct = (t3) => {
          const e3 = t3.duration, i3 = m.parseNoteDurationString(e3);
          if (!i3) return null;
          let s2 = m.durationToTicks(i3.duration);
          if (null == s2) return null;
          let n2 = t3.type;
          const r2 = [];
          if (n2) {
            if (!m.getGlyphProps.validTypes[n2]) return null;
          } else n2 = i3.type || "n", void 0 !== t3.keys && t3.keys.forEach((t4, e4) => {
            const i4 = t4.split("/");
            i4 && 3 === i4.length && (r2[e4] = i4[2]);
          });
          const o2 = t3.dots ? t3.dots : i3.dots;
          if ("number" != typeof o2) return null;
          let a2 = s2;
          for (let t4 = 0; t4 < o2; t4++) {
            if (a2 <= 1) return null;
            a2 /= 2, s2 += a2;
          }
          return { duration: i3.duration, type: n2, customTypes: r2, dots: o2, ticks: s2 };
        }, m.sanitizeDuration = (t3) => {
          const e3 = m.durationAliases[t3];
          if (void 0 !== e3 && (t3 = e3), void 0 === m.durationToTicks.durations[t3]) throw new s.RERR("BadArguments", `The provided duration is not valid: ${t3}`);
          return t3;
        }, m.durationToFraction = (t3) => new n().parse(m.sanitizeDuration(t3)), m.durationToNumber = (t3) => m.durationToFraction(t3).value(), m.durationToTicks = (t3) => {
          t3 = m.sanitizeDuration(t3);
          const e3 = m.durationToTicks.durations[t3];
          return void 0 === e3 ? null : e3;
        }, m.durationToTicks.durations = { "1/2": 2 * m.RESOLUTION, 1: m.RESOLUTION / 1, 2: m.RESOLUTION / 2, 4: m.RESOLUTION / 4, 8: m.RESOLUTION / 8, 16: m.RESOLUTION / 16, 32: m.RESOLUTION / 32, 64: m.RESOLUTION / 64, 128: m.RESOLUTION / 128, 256: m.RESOLUTION / 256 }, m.durationAliases = { w: "1", h: "2", q: "4", b: "256" }, m.getGlyphProps = (t3, e3) => {
          t3 = m.sanitizeDuration(t3);
          const i3 = m.getGlyphProps.duration_codes[t3];
          if (void 0 === i3) return null;
          e3 || (e3 = "n");
          let s2 = i3.type[e3];
          if (void 0 === s2) {
            const t4 = m.keyProperties.customNoteHeads[e3.toUpperCase()];
            if (void 0 === t4) return null;
            s2 = { code_head: t4.code, ...t4 };
          }
          return { ...i3.common, ...s2 };
        }, m.getGlyphProps.validTypes = { n: { name: "note" }, r: { name: "rest" }, h: { name: "harmonic" }, m: { name: "muted" }, s: { name: "slash" } }, m.getGlyphProps.duration_codes = { "1/2": { common: { getWidth(t3 = m.DEFAULT_NOTATION_FONT_SCALE) {
          return new f(this.code_head || "v53", t3).getMetrics().width;
        }, stem: false, stem_offset: 0, flag: false, stem_up_extension: -m.STEM_HEIGHT, stem_down_extension: -m.STEM_HEIGHT, tabnote_stem_up_extension: -m.STEM_HEIGHT, tabnote_stem_down_extension: -m.STEM_HEIGHT, dot_shiftY: 0, line_above: 0, line_below: 0 }, type: { n: { code_head: "v53" }, h: { code_head: "v59" }, m: { code_head: "vf", stem_offset: 0 }, r: { code_head: "v31", rest: true, position: "B/5", dot_shiftY: 0.5 }, s: { getWidth: () => m.SLASH_NOTEHEAD_WIDTH, position: "B/4" } } }, 1: { common: { getWidth(t3 = m.DEFAULT_NOTATION_FONT_SCALE) {
          return new f(this.code_head || "v1d", t3).getMetrics().width;
        }, stem: false, stem_offset: 0, flag: false, stem_up_extension: -m.STEM_HEIGHT, stem_down_extension: -m.STEM_HEIGHT, tabnote_stem_up_extension: -m.STEM_HEIGHT, tabnote_stem_down_extension: -m.STEM_HEIGHT, dot_shiftY: 0, line_above: 0, line_below: 0 }, type: { n: { code_head: "v1d" }, h: { code_head: "v46" }, m: { code_head: "v92", stem_offset: -3 }, r: { code_head: "v5c", rest: true, position: "D/5", dot_shiftY: 0.5 }, s: { getWidth: () => m.SLASH_NOTEHEAD_WIDTH, position: "B/4" } } }, 2: { common: { getWidth(t3 = m.DEFAULT_NOTATION_FONT_SCALE) {
          return new f(this.code_head || "v81", t3).getMetrics().width;
        }, stem: true, stem_offset: 0, flag: false, stem_up_extension: 0, stem_down_extension: 0, tabnote_stem_up_extension: 0, tabnote_stem_down_extension: 0, dot_shiftY: 0, line_above: 0, line_below: 0 }, type: { n: { code_head: "v81" }, h: { code_head: "v2d" }, m: { code_head: "v95", stem_offset: -3 }, r: { code_head: "vc", stem: false, rest: true, position: "B/4", dot_shiftY: -0.5 }, s: { getWidth: () => m.SLASH_NOTEHEAD_WIDTH, position: "B/4" } } }, 4: { common: { getWidth(t3 = m.DEFAULT_NOTATION_FONT_SCALE) {
          return new f(this.code_head || "vb", t3).getMetrics().width;
        }, stem: true, stem_offset: 0, flag: false, stem_up_extension: 0, stem_down_extension: 0, tabnote_stem_up_extension: 0, tabnote_stem_down_extension: 0, dot_shiftY: 0, line_above: 0, line_below: 0 }, type: { n: { code_head: "vb" }, h: { code_head: "v22" }, m: { code_head: "v3e", stem_offset: -3 }, r: { code_head: "v7c", stem: false, rest: true, position: "B/4", dot_shiftY: -0.5, line_above: 1.5, line_below: 1.5 }, s: { getWidth: () => m.SLASH_NOTEHEAD_WIDTH, position: "B/4" } } }, 8: { common: { getWidth(t3 = m.DEFAULT_NOTATION_FONT_SCALE) {
          return new f(this.code_head || "vb", t3).getMetrics().width;
        }, stem: true, stem_offset: 0, flag: true, beam_count: 1, code_flag_upstem: "v54", code_flag_downstem: "v9a", stem_up_extension: 0, stem_down_extension: 0, tabnote_stem_up_extension: 0, tabnote_stem_down_extension: 0, dot_shiftY: 0, line_above: 0, line_below: 0 }, type: { n: { code_head: "vb" }, h: { code_head: "v22" }, m: { code_head: "v3e" }, r: { code_head: "va5", stem: false, flag: false, rest: true, position: "B/4", dot_shiftY: -0.5, line_above: 1, line_below: 1 }, s: { getWidth: () => m.SLASH_NOTEHEAD_WIDTH, position: "B/4" } } }, 16: { common: { beam_count: 2, getWidth(t3 = m.DEFAULT_NOTATION_FONT_SCALE) {
          return new f(this.code_head || "vb", t3).getMetrics().width;
        }, stem: true, stem_offset: 0, flag: true, code_flag_upstem: "v3f", code_flag_downstem: "v8f", stem_up_extension: 0, stem_down_extension: 0, tabnote_stem_up_extension: 0, tabnote_stem_down_extension: 0, dot_shiftY: 0, line_above: 0, line_below: 0 }, type: { n: { code_head: "vb" }, h: { code_head: "v22" }, m: { code_head: "v3e" }, r: { code_head: "v3c", stem: false, flag: false, rest: true, position: "B/4", dot_shiftY: -0.5, line_above: 1, line_below: 2 }, s: { getWidth: () => m.SLASH_NOTEHEAD_WIDTH, position: "B/4" } } }, 32: { common: { beam_count: 3, getWidth(t3 = m.DEFAULT_NOTATION_FONT_SCALE) {
          return new f(this.code_head || "vb", t3).getMetrics().width;
        }, stem: true, stem_offset: 0, flag: true, code_flag_upstem: "v47", code_flag_downstem: "v2a", stem_up_extension: 9, stem_down_extension: 9, tabnote_stem_up_extension: 8, tabnote_stem_down_extension: 5, dot_shiftY: 0, line_above: 0, line_below: 0 }, type: { n: { code_head: "vb" }, h: { code_head: "v22" }, m: { code_head: "v3e" }, r: { code_head: "v55", stem: false, flag: false, rest: true, position: "B/4", dot_shiftY: -1.5, line_above: 2, line_below: 2 }, s: { getWidth: () => m.SLASH_NOTEHEAD_WIDTH, position: "B/4" } } }, 64: { common: { beam_count: 4, getWidth(t3 = m.DEFAULT_NOTATION_FONT_SCALE) {
          return new f(this.code_head || "vb", t3).getMetrics().width;
        }, stem: true, stem_offset: 0, flag: true, code_flag_upstem: "va9", code_flag_downstem: "v58", stem_up_extension: 13, stem_down_extension: 13, tabnote_stem_up_extension: 12, tabnote_stem_down_extension: 9, dot_shiftY: 0, line_above: 0, line_below: 0 }, type: { n: { code_head: "vb" }, h: { code_head: "v22" }, m: { code_head: "v3e" }, r: { code_head: "v38", stem: false, flag: false, rest: true, position: "B/4", dot_shiftY: -1.5, line_above: 2, line_below: 3 }, s: { getWidth: () => m.SLASH_NOTEHEAD_WIDTH, position: "B/4" } } }, 128: { common: { beam_count: 5, getWidth(t3 = m.DEFAULT_NOTATION_FONT_SCALE) {
          return new f(this.code_head || "vb", t3).getMetrics().width;
        }, stem: true, stem_offset: 0, flag: true, code_flag_upstem: "v9b", code_flag_downstem: "v30", stem_up_extension: 22, stem_down_extension: 22, tabnote_stem_up_extension: 21, tabnote_stem_down_extension: 18, dot_shiftY: 0, line_above: 0, line_below: 0 }, type: { n: { code_head: "vb" }, h: { code_head: "v22" }, m: { code_head: "v3e" }, r: { code_head: "vaa", stem: false, flag: false, rest: true, position: "B/4", dot_shiftY: 1.5, line_above: 3, line_below: 3 }, s: { getWidth: () => m.SLASH_NOTEHEAD_WIDTH, position: "B/4" } } } }, m.smufl = {}, m.smufl.to_code_points = { bracketTop: "v1b", bracketBottom: "v10", barlineTick: "v6f", segno: "v8c", coda: "v4d", gClef: "v83", cClef: "vad", fClef: "v79", unpitchedPercussionClef1: "v59", "6stringTabClef": "v2f", timeSig0: "v0", timeSig1: "v1", timeSig2: "v2", timeSig3: "v3", timeSig4: "v4", timeSig5: "v5", timeSig6: "v6", timeSig7: "v7", timeSig8: "v8", timeSig9: "v9", timeSigCommon: "v41", timeSigCutCommon: "vb6", noteheadDoubleWhole: "v53", noteheadWhole: "v1d", noteheadHalf: "v81", noteheadBlack: "vb", noteheadXWhole: "v92", noteheadXHalf: "v95", noteheadXBlack: "v3e", noteheadCircleX: "v3b", noteheadTriangleUpWhole: "v49", noteheadTriangleUpHalf: "v93", noteheadTriangleUpBlack: "v40", noteheadDiamondWhole: "v46", noteheadDiamondHalf: "v2d", noteheadDiamondBlack: "v22", augmentationDot: "v23", tremolo1: "v74", flag8thUp: "v54", flag8thDown: "v9a", flag16thUp: "v3f", flag16thDown: "v8f", flag32ndUp: "v47", flag32ndDown: "v2a", flag64thUp: "va9", flag64thDown: "v58", flag128thUp: "v9b", flag128thDown: "v30", accidentalFlat: "v44", accidentalNatural: "v4e", accidentalSharp: "v18", accidentalDoubleSharp: "v7f", accidentalDoubleFlat: "v26", accidentalParensLeft: "v9c", accidentalParensRight: "v84", accidentalQuarterToneFlatStein: "vab", accidentalThreeQuarterTonesFlatZimmermann: "v9e", accidentalQuarterToneSharpStein: "v78", accidentalThreeQuarterTonesSharpStein: "v51", accidentalBuyukMucennebFlat: "v39", accidentalBakiyeFlat: "vb7", accidentalKomaSharp: "v51", accidentalKucukMucennebSharp: "v8d", accidentalKoron: "vd1", accidentalSori: "vd0", articAccentAbove: "v42", articAccentBelow: "v42", articTenutoAbove: "v25", articTenutoBelow: "v25", articStaccatoAbove: "v23", articStaccatoBelow: "v23", articStaccatissimoAbove: "v28", articMarcatoAbove: "va", fermataAbove: "v43", fermataBelow: "v5b", breathMarkComma: "v6c", breathMarkUpbow: "v8a", caesura: "v34", caesuraCurved: "v4b", restMaxima: "v59", restDoubleWhole: "v31", restWhole: "v5c", restHalf: "vc", restQuarter: "v7c", rest8th: "va5", rest16th: "v3c", rest32nd: "v55", rest64th: "v38", rest128th: "vaa", dynamicPiano: "vbf", dynamicMezzo: "v62", dynamicForte: "vba", dynamicRinforzando: "vba", dynamicSforzando: "v4a", dynamicZ: "v80", ornamentTrill: "v1f", ornamentTurn: "v72", ornamentTurnSlash: "v33", ornamentMordent: "v45", ornamentMordentInverted: "v1e", ornamentTremblement: "v86", ornamentPrecompAppoggTrill: "v20", ornamentPrecompSlideTrillDAnglebert: "v60", ornamentPrecompSlideTrillBach: "v29", ornamentPrecompTrillSuffixDandrieu: "v6d", ornamentPrecompDoubleCadenceUpperPrefix: "vb4", ornamentPrecompDoubleCadenceUpperPrefixTurn: "v68", ornamentPrecompTrillLowerSuffix: "v2c", stringsDownBow: "v94", stringsUpBow: "v75", stringsHarmonic: "vb9", pluckedSnapPizzicatoAbove: "v94", pluckedLeftHandPizzicato: "v8b", keyboardPedalPed: "v36", keyboardPedalUp: "v5d", pictChokeCymbal: "vb3", wiggleArpeggiatoUp: "va3", arrowheadBlackUp: "vc3", arrowheadBlackDown: "v52" }, m.TIME4_4 = { num_beats: 4, beat_value: 4, resolution: m.RESOLUTION };
        class p {
          static get WIDTH() {
            return 600;
          }
          static get HEIGHT() {
            return 400;
          }
          static get CANVAS_BROWSER_SIZE_LIMIT() {
            return 32767;
          }
          static SanitizeCanvasDims(t3, e3) {
            return Math.max(t3, e3) > this.CANVAS_BROWSER_SIZE_LIMIT && (s.W("Canvas dimensions exceed browser limit. Cropping to " + this.CANVAS_BROWSER_SIZE_LIMIT), t3 > this.CANVAS_BROWSER_SIZE_LIMIT && (t3 = this.CANVAS_BROWSER_SIZE_LIMIT), e3 > this.CANVAS_BROWSER_SIZE_LIMIT && (e3 = this.CANVAS_BROWSER_SIZE_LIMIT)), [t3, e3];
          }
          constructor(t3) {
            this.vexFlowCanvasContext = t3, t3.canvas ? this.canvas = t3.canvas : this.canvas = { width: p.WIDTH, height: p.HEIGHT };
          }
          clear() {
            this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
          }
          openGroup() {
          }
          closeGroup() {
          }
          add() {
          }
          setFont(t3, e3, i3) {
            return this.vexFlowCanvasContext.font = (i3 || "") + " " + e3 + "pt " + t3, this;
          }
          setRawFont(t3) {
            return this.vexFlowCanvasContext.font = t3, this;
          }
          setFillStyle(t3) {
            return this.vexFlowCanvasContext.fillStyle = t3, this;
          }
          setBackgroundFillStyle(t3) {
            return this.background_fillStyle = t3, this;
          }
          setStrokeStyle(t3) {
            return this.vexFlowCanvasContext.strokeStyle = t3, this;
          }
          setShadowColor(t3) {
            return this.vexFlowCanvasContext.shadowColor = t3, this;
          }
          setShadowBlur(t3) {
            return this.vexFlowCanvasContext.shadowBlur = t3, this;
          }
          setLineWidth(t3) {
            return this.vexFlowCanvasContext.lineWidth = t3, this;
          }
          setLineCap(t3) {
            return this.vexFlowCanvasContext.lineCap = t3, this;
          }
          setLineDash(t3) {
            return this.vexFlowCanvasContext.lineDash = t3, this;
          }
          scale(t3, e3) {
            return this.vexFlowCanvasContext.scale(parseFloat(t3), parseFloat(e3));
          }
          resize(t3, e3) {
            return [t3, e3] = this.SanitizeCanvasDims(parseInt(t3, 10), parseInt(e3, 10)), this.vexFlowCanvasContext.resize(t3, e3);
          }
          rect(t3, e3, i3, s2) {
            return this.vexFlowCanvasContext.rect(t3, e3, i3, s2);
          }
          fillRect(t3, e3, i3, s2) {
            return this.vexFlowCanvasContext.fillRect(t3, e3, i3, s2);
          }
          clearRect(t3, e3, i3, s2) {
            return this.vexFlowCanvasContext.clearRect(t3, e3, i3, s2);
          }
          beginPath() {
            return this.vexFlowCanvasContext.beginPath();
          }
          moveTo(t3, e3) {
            return this.vexFlowCanvasContext.moveTo(t3, e3);
          }
          lineTo(t3, e3) {
            return this.vexFlowCanvasContext.lineTo(t3, e3);
          }
          bezierCurveTo(t3, e3, i3, s2, n2, r2) {
            return this.vexFlowCanvasContext.bezierCurveTo(t3, e3, i3, s2, n2, r2);
          }
          quadraticCurveTo(t3, e3, i3, s2) {
            return this.vexFlowCanvasContext.quadraticCurveTo(t3, e3, i3, s2);
          }
          arc(t3, e3, i3, s2, n2, r2) {
            return this.vexFlowCanvasContext.arc(t3, e3, i3, s2, n2, r2);
          }
          glow() {
            return this.vexFlowCanvasContext.glow();
          }
          fill() {
            return this.vexFlowCanvasContext.fill();
          }
          stroke() {
            return this.vexFlowCanvasContext.stroke();
          }
          closePath() {
            return this.vexFlowCanvasContext.closePath();
          }
          measureText(t3) {
            return this.vexFlowCanvasContext.measureText(t3);
          }
          fillText(t3, e3, i3) {
            return this.vexFlowCanvasContext.fillText(t3, e3, i3);
          }
          save() {
            return this.vexFlowCanvasContext.save();
          }
          restore() {
            return this.vexFlowCanvasContext.restore();
          }
        }
        class g {
          constructor(t3) {
            this.element = t3, this.paper = Raphael(t3), this.path = "", this.pen = { x: 0, y: 0 }, this.lineWidth = 1, this.state = { scale: { x: 1, y: 1 }, font_family: "Arial", font_size: 8, font_weight: 800 }, this.attributes = { "stroke-width": 0.3, fill: "black", stroke: "black", font: "10pt Arial" }, this.background_attributes = { "stroke-width": 0, fill: "white", stroke: "white", font: "10pt Arial" }, this.shadow_attributes = { width: 0, color: "black" }, this.state_stack = [];
          }
          openGroup() {
          }
          closeGroup() {
          }
          add() {
          }
          setFont(t3, e3, i3) {
            return this.state.font_family = t3, this.state.font_size = e3, this.state.font_weight = i3, this.attributes.font = (this.state.font_weight || "") + " " + this.state.font_size * this.state.scale.x + "pt " + this.state.font_family, this;
          }
          setRawFont(t3) {
            return this.attributes.font = t3, this;
          }
          setFillStyle(t3) {
            return this.attributes.fill = t3, this;
          }
          setBackgroundFillStyle(t3) {
            return this.background_attributes.fill = t3, this.background_attributes.stroke = t3, this;
          }
          setStrokeStyle(t3) {
            return this.attributes.stroke = t3, this;
          }
          setShadowColor(t3) {
            return this.shadow_attributes.color = t3, this;
          }
          setShadowBlur(t3) {
            return this.shadow_attributes.width = t3, this;
          }
          setLineWidth(t3) {
            this.attributes["stroke-width"] = t3, this.lineWidth = t3;
          }
          setLineDash() {
            return this;
          }
          setLineCap() {
            return this;
          }
          scale(t3, e3) {
            return this.state.scale = { x: t3, y: e3 }, this.attributes.transform = "S" + t3 + "," + e3 + ",0,0", this.attributes.scale = t3 + "," + e3 + ",0,0", this.attributes.font = this.state.font_size * this.state.scale.x + "pt " + this.state.font_family, this.background_attributes.transform = "S" + t3 + "," + e3 + ",0,0", this.background_attributes.font = this.state.font_size * this.state.scale.x + "pt " + this.state.font_family, this;
          }
          clear() {
            this.paper.clear();
          }
          resize(t3, e3) {
            return this.element.style.width = t3, this.paper.setSize(t3, e3), this;
          }
          setViewBox(t3) {
            this.paper.canvas.setAttribute("viewBox", t3);
          }
          rect(t3, e3, i3, s2) {
            return s2 < 0 && (e3 += s2, s2 = -s2), this.paper.rect(t3, e3, i3 - 0.5, s2 - 0.5).attr(this.attributes).attr("fill", "none").attr("stroke-width", this.lineWidth), this;
          }
          fillRect(t3, e3, i3, s2) {
            return s2 < 0 && (e3 += s2, s2 = -s2), this.paper.rect(t3, e3, i3 - 0.5, s2 - 0.5).attr(this.attributes), this;
          }
          clearRect(t3, e3, i3, s2) {
            return s2 < 0 && (e3 += s2, s2 = -s2), this.paper.rect(t3, e3, i3 - 0.5, s2 - 0.5).attr(this.background_attributes), this;
          }
          beginPath() {
            return this.path = "", this.pen.x = 0, this.pen.y = 0, this;
          }
          moveTo(t3, e3) {
            return this.path += "M" + t3 + "," + e3, this.pen.x = t3, this.pen.y = e3, this;
          }
          lineTo(t3, e3) {
            return this.path += "L" + t3 + "," + e3, this.pen.x = t3, this.pen.y = e3, this;
          }
          bezierCurveTo(t3, e3, i3, s2, n2, r2) {
            return this.path += "C" + t3 + "," + e3 + "," + i3 + "," + s2 + "," + n2 + "," + r2, this.pen.x = n2, this.pen.y = r2, this;
          }
          quadraticCurveTo(t3, e3, i3, s2) {
            return this.path += "Q" + t3 + "," + e3 + "," + i3 + "," + s2, this.pen.x = i3, this.pen.y = s2, this;
          }
          arc(t3, e3, i3, s2, n2, r2) {
            function o2(t4) {
              for (; t4 < 0; ) t4 += 2 * Math.PI;
              for (; t4 > 2 * Math.PI; ) t4 -= 2 * Math.PI;
              return t4;
            }
            if ((s2 = o2(s2)) > (n2 = o2(n2))) {
              const t4 = s2;
              s2 = n2, n2 = t4, r2 = !r2;
            }
            const a2 = n2 - s2;
            return a2 > Math.PI ? (this.arcHelper(t3, e3, i3, s2, s2 + a2 / 2, r2), this.arcHelper(t3, e3, i3, s2 + a2 / 2, n2, r2)) : this.arcHelper(t3, e3, i3, s2, n2, r2), this;
          }
          arcHelper(t3, e3, i3, s2, n2, r2) {
            const o2 = t3 + i3 * Math.cos(s2), a2 = e3 + i3 * Math.sin(s2), l2 = t3 + i3 * Math.cos(n2), h2 = e3 + i3 * Math.sin(n2);
            let c2 = 0, u2 = 0;
            r2 ? (u2 = 1, n2 - s2 < Math.PI && (c2 = 1)) : n2 - s2 > Math.PI && (c2 = 1), this.path += "M" + o2 + "," + a2 + ",A" + i3 + "," + i3 + ",0," + c2 + "," + u2 + "," + l2 + "," + h2 + "M" + this.pen.x + "," + this.pen.y;
          }
          glow() {
            const t3 = this.paper.set();
            if (this.shadow_attributes.width > 0) {
              const e3 = this.shadow_attributes, i3 = e3.width / 2;
              for (let s2 = 1; s2 <= i3; s2++) t3.push(this.paper.path(this.path).attr({ stroke: e3.color, "stroke-linejoin": "round", "stroke-linecap": "round", "stroke-width": +(e3.width / i3 * s2).toFixed(3), opacity: +((e3.opacity || 0.3) / i3).toFixed(3), transform: this.attributes.transform, scale: this.attributes.scale }));
            }
            return t3;
          }
          fill() {
            const t3 = this.paper.path(this.path).attr(this.attributes).attr("stroke-width", 0);
            return this.glow(t3), this;
          }
          stroke() {
            const t3 = this.lineWidth * (this.state.scale.x + this.state.scale.y) / 2, e3 = this.paper.path(this.path).attr(this.attributes).attr("fill", "none").attr("stroke-width", t3);
            return this.glow(e3), this;
          }
          closePath() {
            return this.path += "Z", this;
          }
          measureText(t3) {
            const e3 = this.paper.text(0, 0, t3).attr(this.attributes).attr("fill", "none").attr("stroke", "none"), i3 = e3.getBBox();
            return e3.remove(), { width: i3.width, height: i3.height };
          }
          fillText(t3, e3, i3) {
            return this.paper.text(e3 + this.measureText(t3).width / 2, i3 - this.state.font_size / (2.25 * this.state.scale.y), t3).attr(this.attributes), this;
          }
          save() {
            return this.state_stack.push({ state: { font_family: this.state.font_family }, attributes: { font: this.attributes.font, fill: this.attributes.fill, stroke: this.attributes.stroke, "stroke-width": this.attributes["stroke-width"] }, shadow_attributes: { width: this.shadow_attributes.width, color: this.shadow_attributes.color } }), this;
          }
          restore() {
            const t3 = this.state_stack.pop();
            return this.state.font_family = t3.state.font_family, this.attributes.font = t3.attributes.font, this.attributes.fill = t3.attributes.fill, this.attributes.stroke = t3.attributes.stroke, this.attributes["stroke-width"] = t3.attributes["stroke-width"], this.shadow_attributes.width = t3.shadow_attributes.width, this.shadow_attributes.color = t3.shadow_attributes.color, this;
          }
        }
        const b = { path: { x: true, y: true, width: true, height: true }, rect: {}, text: { width: true, height: true } };
        {
          const t3 = { "font-family": true, "font-weight": true, "font-style": true, "font-size": true };
          s.Merge(b.rect, t3), s.Merge(b.path, t3);
        }
        class S {
          constructor(t3) {
            this.element = t3, this.svgNS = "http://www.w3.org/2000/svg";
            const e3 = this.create("svg");
            this.element.appendChild(e3), this.svg = e3, this.groups = [this.svg], this.parent = this.svg, this.path = "", this.pen = { x: NaN, y: NaN }, this.lineWidth = 1, this.state = { scale: { x: 1, y: 1 }, "font-family": "Arial", "font-size": "8pt", "font-weight": "normal" }, this.attributes = { "stroke-width": 0.3, fill: "black", stroke: "black", "stroke-dasharray": "none", "font-family": "Arial", "font-size": "10pt", "font-weight": "normal", "font-style": "normal" }, this.background_attributes = { "stroke-width": 0, fill: "white", stroke: "white", "stroke-dasharray": "none", "font-family": "Arial", "font-size": "10pt", "font-weight": "normal", "font-style": "normal" }, this.shadow_attributes = { width: 0, color: "black" }, this.state_stack = [], this.iePolyfill();
          }
          create(t3) {
            return document.createElementNS(this.svgNS, t3);
          }
          openGroup(t3, e3, i3) {
            const n2 = this.create("g");
            return this.groups.push(n2), this.parent.appendChild(n2), this.parent = n2, t3 && n2.setAttribute("class", s.Prefix(t3)), e3 && n2.setAttribute("id", s.Prefix(e3)), i3 && i3.pointerBBox && n2.setAttribute("pointer-events", "bounding-box"), n2;
          }
          closeGroup() {
            this.groups.pop(), this.parent = this.groups[this.groups.length - 1];
          }
          add(t3) {
            this.parent.appendChild(t3);
          }
          iePolyfill() {
            "undefined" != typeof navigator && (this.ie = /MSIE 9/i.test(navigator.userAgent) || /MSIE 10/i.test(navigator.userAgent) || /rv:11\.0/i.test(navigator.userAgent) || /Trident/i.test(navigator.userAgent));
          }
          setFont(t3, e3, i3) {
            let n2 = false, r2 = false, o2 = "normal";
            "string" == typeof i3 && (-1 !== i3.indexOf("italic") && (i3 = i3.replace(/italic/g, ""), r2 = true), -1 !== i3.indexOf("bold") && (i3 = i3.replace(/bold/g, ""), n2 = true), i3 = i3.replace(/ /g, "")), o2 = r2 ? "italic" : o2;
            const a2 = { "font-family": t3, "font-size": e3 + "pt", "font-weight": i3 = void 0 === (i3 = n2 ? "bold" : i3) || "" === i3 ? "normal" : i3, "font-style": o2 };
            return this.fontSize = Number(e3), s.Merge(this.attributes, a2), s.Merge(this.state, a2), this;
          }
          setRawFont(t3) {
            const e3 = (t3 = t3.trim()).split(" ");
            return this.attributes["font-family"] = e3[1], this.state["font-family"] = e3[1], this.attributes["font-size"] = e3[0], this.state["font-size"] = e3[0], this.fontSize = Number(e3[0].match(/\d+/)), this;
          }
          setFillStyle(t3) {
            return this.attributes.fill = t3, this;
          }
          setBackgroundFillStyle(t3) {
            return this.background_attributes.fill = t3, this.background_attributes.stroke = t3, this;
          }
          setStrokeStyle(t3) {
            return this.attributes.stroke = t3, this;
          }
          setShadowColor(t3) {
            return this.shadow_attributes.color = t3, this;
          }
          setShadowBlur(t3) {
            return this.shadow_attributes.width = t3, this;
          }
          setLineWidth(t3) {
            this.attributes["stroke-width"] = t3, this.lineWidth = t3;
          }
          setLineDash(t3) {
            if ("[object Array]" === Object.prototype.toString.call(t3)) return t3 = t3.join(", "), this.attributes["stroke-dasharray"] = t3, this;
            throw new s.RERR("ArgumentError", "lineDash must be an array of integers.");
          }
          setLineCap(t3) {
            return this.attributes["stroke-linecap"] = t3, this;
          }
          resize(t3, e3) {
            this.width = t3, this.height = e3, this.element.style.width = t3;
            const i3 = { width: t3, height: e3 };
            return this.applyAttributes(this.svg, i3), this.scale(this.state.scale.x, this.state.scale.y), this;
          }
          scale(t3, e3) {
            this.state.scale = { x: t3, y: e3 };
            const i3 = this.width / t3, s2 = this.height / e3;
            return this.setViewBox(0, 0, i3, s2), this;
          }
          setViewBox(...t3) {
            if (1 === t3.length) {
              const [e3] = t3;
              this.svg.setAttribute("viewBox", e3);
            } else {
              const [e3, i3, s2, n2] = t3, r2 = e3 + " " + i3 + " " + s2 + " " + n2;
              this.svg.setAttribute("viewBox", r2);
            }
          }
          applyAttributes(t3, e3) {
            const i3 = b[t3.nodeName];
            return Object.keys(e3).forEach((s2) => {
              i3 && i3[s2] || t3.setAttributeNS(null, s2, e3[s2]);
            }), t3;
          }
          clear() {
            for (; this.svg.lastChild; ) this.svg.removeChild(this.svg.lastChild);
            this.scale(this.state.scale.x, this.state.scale.y);
          }
          rect(t3, e3, i3, n2, r2) {
            n2 < 0 && (e3 += n2, n2 *= -1);
            const o2 = this.create("rect");
            return void 0 === r2 && (r2 = { fill: "none", "stroke-width": this.lineWidth, stroke: this.attributes.stroke }), s.Merge(r2, { x: t3, y: e3, width: i3, height: n2 }), this.applyAttributes(o2, r2), this.add(o2), this;
          }
          fillRect(t3, e3, i3, s2) {
            return s2 < 0 && (e3 += s2, s2 *= -1), this.rect(t3, e3, i3, s2, this.attributes), this;
          }
          clearRect(t3, e3, i3, s2) {
            return this.rect(t3, e3, i3, s2, this.background_attributes), this;
          }
          beginPath() {
            return this.path = "", this.pen.x = NaN, this.pen.y = NaN, this;
          }
          moveTo(t3, e3) {
            return this.path += "M" + t3 + " " + e3, this.pen.x = t3, this.pen.y = e3, this;
          }
          lineTo(t3, e3) {
            return this.path += "L" + t3 + " " + e3, this.pen.x = t3, this.pen.y = e3, this;
          }
          bezierCurveTo(t3, e3, i3, s2, n2, r2) {
            return this.path += "C" + t3 + " " + e3 + "," + i3 + " " + s2 + "," + n2 + " " + r2, this.pen.x = n2, this.pen.y = r2, this;
          }
          quadraticCurveTo(t3, e3, i3, s2) {
            return this.path += "Q" + t3 + " " + e3 + "," + i3 + " " + s2, this.pen.x = i3, this.pen.y = s2, this;
          }
          arc(t3, e3, i3, s2, n2, r2) {
            function o2(t4) {
              for (; t4 < 0; ) t4 += 2 * Math.PI;
              for (; t4 > 2 * Math.PI; ) t4 -= 2 * Math.PI;
              return t4;
            }
            if ((s2 = o2(s2)) > (n2 = o2(n2))) {
              const t4 = s2;
              s2 = n2, n2 = t4, r2 = !r2;
            }
            const a2 = n2 - s2;
            return a2 > Math.PI ? (this.arcHelper(t3, e3, i3, s2, s2 + a2 / 2, r2), this.arcHelper(t3, e3, i3, s2 + a2 / 2, n2, r2)) : this.arcHelper(t3, e3, i3, s2, n2, r2), this;
          }
          arcHelper(t3, e3, i3, s2, n2, r2) {
            const o2 = t3 + i3 * Math.cos(s2), a2 = e3 + i3 * Math.sin(s2), l2 = t3 + i3 * Math.cos(n2), h2 = e3 + i3 * Math.sin(n2);
            let c2 = 0, u2 = 0;
            r2 ? (u2 = 1, n2 - s2 < Math.PI && (c2 = 1)) : n2 - s2 > Math.PI && (c2 = 1), this.path += "M" + o2 + " " + a2 + " A" + i3 + " " + i3 + " 0 " + c2 + " " + u2 + " " + l2 + " " + h2, isNaN(this.pen.x) || isNaN(this.pen.y) || (this.peth += "M" + this.pen.x + " " + this.pen.y);
          }
          closePath() {
            return this.path += "Z", this;
          }
          glow() {
            if (this.shadow_attributes.width > 0) {
              const t3 = this.shadow_attributes, e3 = t3.width / 2;
              for (let i3 = 1; i3 <= e3; i3++) {
                const s2 = { stroke: t3.color, "stroke-linejoin": "round", "stroke-linecap": "round", "stroke-width": +(0.4 * t3.width / e3 * i3).toFixed(3), opacity: +((t3.opacity || 0.3) / e3).toFixed(3) }, n2 = this.create("path");
                s2.d = this.path, this.applyAttributes(n2, s2), this.add(n2);
              }
            }
            return this;
          }
          fill(t3) {
            this.glow();
            const e3 = this.create("path");
            let i3 = t3;
            return void 0 === t3 ? (s.Merge(t3 = {}, this.attributes), t3.stroke = "none", i3 = t3) : (i3 = t3, s.Merge(i3, this.attributes), t3.class && (i3.class = t3.class), t3.id && (i3.id = t3.id)), t3.d = this.path, this.applyAttributes(e3, t3), this.add(e3), this;
          }
          stroke(t3 = void 0) {
            this.glow();
            const e3 = this.create("path"), i3 = {};
            return s.Merge(i3, this.attributes), t3 && s.Merge(i3, t3), i3.fill = "none", i3["stroke-width"] = this.lineWidth, i3.d = this.path, this.applyAttributes(e3, i3), this.add(e3), this;
          }
          measureText(t3) {
            const e3 = this.create("text");
            if ("function" != typeof e3.getBBox) return { x: 0, y: 0, width: 0, height: 0 };
            e3.textContent = t3, this.applyAttributes(e3, this.attributes), this.svg.appendChild(e3);
            let i3 = e3.getBBox();
            return this.ie && "" !== t3 && "italic" === this.attributes["font-style"] && (i3 = this.ieMeasureTextFix(i3, t3)), this.svg.removeChild(e3), i3;
          }
          ieMeasureTextFix(t3) {
            const e3 = 1.196 * Number(this.fontSize) + 1.9598, i3 = t3.width - e3, s2 = t3.height - 1.5;
            return { x: t3.x, y: t3.y, width: i3, height: s2 };
          }
          fillText(t3, e3, i3) {
            if (!t3 || t3.length <= 0) return;
            const n2 = {};
            s.Merge(n2, this.attributes), n2.stroke = "none", n2.x = e3, n2.y = i3;
            const r2 = this.create("text");
            r2.textContent = t3, this.applyAttributes(r2, n2), this.add(r2);
          }
          save() {
            return this.state_stack.push({ state: { "font-family": this.state["font-family"], "font-weight": this.state["font-weight"], "font-style": this.state["font-style"], "font-size": this.state["font-size"], scale: this.state.scale }, attributes: { "font-family": this.attributes["font-family"], "font-weight": this.attributes["font-weight"], "font-style": this.attributes["font-style"], "font-size": this.attributes["font-size"], fill: this.attributes.fill, stroke: this.attributes.stroke, "stroke-width": this.attributes["stroke-width"], "stroke-dasharray": this.attributes["stroke-dasharray"] }, shadow_attributes: { width: this.shadow_attributes.width, color: this.shadow_attributes.color }, lineWidth: this.lineWidth }), this;
          }
          restore() {
            const t3 = this.state_stack.pop();
            return this.state["font-family"] = t3.state["font-family"], this.state["font-weight"] = t3.state["font-weight"], this.state["font-style"] = t3.state["font-style"], this.state["font-size"] = t3.state["font-size"], this.state.scale = t3.state.scale, this.attributes["font-family"] = t3.attributes["font-family"], this.attributes["font-weight"] = t3.attributes["font-weight"], this.attributes["font-style"] = t3.attributes["font-style"], this.attributes["font-size"] = t3.attributes["font-size"], this.attributes.fill = t3.attributes.fill, this.attributes.stroke = t3.attributes.stroke, this.attributes["stroke-width"] = t3.attributes["stroke-width"], this.attributes["stroke-dasharray"] = t3.attributes["stroke-dasharray"], this.shadow_attributes.width = t3.shadow_attributes.width, this.shadow_attributes.color = t3.shadow_attributes.color, this.lineWidth = t3.lineWidth, this;
          }
        }
        let y = null;
        class E {
          static get Backends() {
            return { CANVAS: 1, RAPHAEL: 2, SVG: 3, VML: 4 };
          }
          static get LineEndType() {
            return { NONE: 1, UP: 2, DOWN: 3 };
          }
          static get USE_CANVAS_PROXY() {
            return false;
          }
          static get lastContext() {
            return y;
          }
          static set lastContext(t3) {
            y = t3;
          }
          static buildContext(t3, e3, i3, s2, n2) {
            const r2 = new E(t3, e3);
            i3 && s2 && r2.resize(i3, s2), n2 || (n2 = "#FFF");
            const o2 = r2.getContext();
            return o2.setBackgroundFillStyle(n2), E.lastContext = o2, o2;
          }
          static getCanvasContext(t3, e3, i3, s2) {
            return E.buildContext(t3, E.Backends.CANVAS, e3, i3, s2);
          }
          static getRaphaelContext(t3, e3, i3, s2) {
            return E.buildContext(t3, E.Backends.RAPHAEL, e3, i3, s2);
          }
          static getSVGContext(t3, e3, i3, s2) {
            return E.buildContext(t3, E.Backends.SVG, e3, i3, s2);
          }
          static bolsterCanvasContext(t3) {
            return E.USE_CANVAS_PROXY ? new p(t3) : (t3.vexFlowCanvasContext = t3, ["clear", "setFont", "setRawFont", "setFillStyle", "setBackgroundFillStyle", "setStrokeStyle", "setShadowColor", "setShadowBlur", "setLineWidth", "setLineCap", "setLineDash", "openGroup", "closeGroup", "getGroup"].forEach((e3) => {
              t3[e3] = t3[e3] || p.prototype[e3];
            }), t3);
          }
          static drawDashedLine(t3, e3, i3, s2, n2, r2) {
            t3.beginPath();
            const o2 = s2 - e3, a2 = n2 - i3, l2 = Math.atan2(a2, o2);
            let h2 = e3, c2 = i3;
            t3.moveTo(e3, i3);
            let u2 = 0, d2 = true;
            for (; !(o2 < 0 ? h2 <= s2 : h2 >= s2) || !(a2 < 0 ? c2 <= n2 : c2 >= n2); ) {
              const e4 = r2[u2++ % r2.length], i4 = h2 + Math.cos(l2) * e4;
              h2 = o2 < 0 ? Math.max(s2, i4) : Math.min(s2, i4);
              const f2 = c2 + Math.sin(l2) * e4;
              c2 = a2 < 0 ? Math.max(n2, f2) : Math.min(n2, f2), d2 ? t3.lineTo(h2, c2) : t3.moveTo(h2, c2), d2 = !d2;
            }
            t3.closePath(), t3.stroke();
          }
          constructor(t3, e3) {
            if (this.elementId = t3, !this.elementId) throw new s.RERR("BadArgument", "Invalid id for renderer.");
            if (this.element = document.getElementById(t3), this.element || (this.element = t3), this.ctx = null, this.paper = null, this.backend = e3, this.backend === E.Backends.CANVAS) {
              if (!this.element.getContext) throw new s.RERR("BadElement", `Can't get canvas context from element: ${t3}`);
              this.ctx = E.bolsterCanvasContext(this.element.getContext("2d", { willReadFrequently: true }));
            } else if (this.backend === E.Backends.RAPHAEL) this.ctx = new g(this.element);
            else {
              if (this.backend !== E.Backends.SVG) throw new s.RERR("InvalidBackend", `No support for backend: ${this.backend}`);
              this.ctx = new S(this.element);
            }
          }
          resize(t3, e3) {
            if (this.backend === E.Backends.CANVAS) {
              if (!this.element.getContext) throw new s.RERR("BadElement", `Can't get canvas context from element: ${this.elementId}`);
              [t3, e3] = p.SanitizeCanvasDims(t3, e3);
              const i3 = window.devicePixelRatio || 1;
              this.element.width = t3 * i3, this.element.height = e3 * i3, this.element.style.width = t3 + "px", this.element.style.height = e3 + "px", this.ctx = E.bolsterCanvasContext(this.element.getContext("2d", { willReadFrequently: true })), this.ctx.scale(i3, i3);
            } else this.ctx.resize(t3, e3);
            return this;
          }
          getContext() {
            return this.ctx;
          }
        }
        class x extends l {
          static get CATEGORY() {
            return "stem";
          }
          static get UP() {
            return 1;
          }
          static get DOWN() {
            return -1;
          }
          static get WIDTH() {
            return m.STEM_WIDTH;
          }
          static get HEIGHT() {
            return m.STEM_HEIGHT;
          }
          constructor(t3 = {}) {
            super(), this.setAttribute("type", "Stem"), this.x_begin = t3.x_begin || 0, this.x_end = t3.x_end || 0, this.y_top = t3.y_top || 0, this.y_bottom = t3.y_bottom || 0, this.stem_extension = t3.stem_extension || 0, this.stem_direction = t3.stem_direction || 0, this.hide = t3.hide || false, this.isStemlet = t3.isStemlet || false, this.stemletHeight = t3.stemletHeight || 0, this.renderHeightAdjustment = 0, this.setOptions(t3);
          }
          setOptions(t3) {
            this.stem_up_y_offset = t3.stem_up_y_offset || 0, this.stem_down_y_offset = t3.stem_down_y_offset || 0;
          }
          setNoteHeadXBounds(t3, e3) {
            return this.x_begin = t3, this.x_end = e3, this;
          }
          setDirection(t3) {
            this.stem_direction = t3;
          }
          setExtension(t3) {
            this.stem_extension = t3;
          }
          getExtension() {
            return this.stem_extension;
          }
          setYBounds(t3, e3) {
            this.y_top = t3, this.y_bottom = e3;
          }
          getCategory() {
            return x.CATEGORY;
          }
          getHeight() {
            const t3 = this.stem_direction === x.UP ? this.stem_up_y_offset : this.stem_down_y_offset;
            return (this.y_bottom - this.y_top) * this.stem_direction + (x.HEIGHT - t3 + this.stem_extension) * this.stem_direction;
          }
          getBoundingBox() {
            throw new s.RERR("NotImplemented", "getBoundingBox() not implemented.");
          }
          getExtents() {
            const t3 = this.stem_direction === x.UP, e3 = [this.y_top, this.y_bottom], i3 = x.HEIGHT + this.stem_extension, s2 = (t3 ? Math.min : Math.max)(...e3), n2 = (t3 ? Math.max : Math.min)(...e3);
            return { topY: s2 + i3 * -this.stem_direction, baseY: n2 };
          }
          setVisibility(t3) {
            return this.hide = !t3, this;
          }
          setStemlet(t3, e3) {
            return this.isStemlet = t3, this.stemletHeight = e3, this;
          }
          draw() {
            if (this.setRendered(), this.hide) return;
            const t3 = this.checkContext();
            let e3, i3;
            const n2 = this.stem_direction;
            n2 === x.DOWN ? (e3 = this.x_begin, i3 = this.y_top + this.stem_down_y_offset) : (e3 = this.x_end, i3 = this.y_bottom - this.stem_up_y_offset);
            const r2 = this.getHeight();
            !function(...t4) {
              x.DEBUG && s.L("Vex.Flow.Stem", t4);
            }("Rendering stem - ", "Top Y: ", this.y_top, "Bottom Y: ", this.y_bottom);
            const o2 = this.isStemlet ? r2 - this.stemletHeight * this.stem_direction : 0;
            if (t3.save(), this.applyStyle(t3), t3.beginPath(), t3.setLineWidth(x.WIDTH), t3.moveTo(e3, i3 - o2), t3.lineTo(e3, i3 - r2 - this.renderHeightAdjustment * n2), t3.svg) {
              const e4 = { class: s.Prefix("stem") };
              this.id && (e4.id = this.id), t3.stroke(e4);
            } else t3.stroke();
            this.restoreStyle(t3), t3.restore();
          }
        }
        class v extends l {
          static get LOCATION_TOP() {
            return 1;
          }
          static get LOCATION_BOTTOM() {
            return -1;
          }
          static get NESTING_OFFSET() {
            return 15;
          }
          constructor(t3, e3) {
            if (super(), this.setAttribute("type", "Tuplet"), !t3 || !t3.length) throw new s.RuntimeError("BadArguments", "No notes provided for tuplet.");
            this.options = s.Merge({}, e3), this.notes = t3, this.num_notes = "num_notes" in this.options ? this.options.num_notes : t3.length, this.options.beats_occupied && this.beatsOccupiedDeprecationWarning(), this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2, "bracketed" in this.options ? this.bracketed = this.options.bracketed : this.bracketed = t3.some((t4) => null === t4.beam), this.ratioed = "ratioed" in this.options ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1, this.point = 28, this.y_pos = 16, this.x_pos = 100, this.width = 200, this.location = this.options.location || v.LOCATION_TOP, ut.AlignRestsToNotes(t3, true, true), this.resolveGlyphs(), this.attach();
          }
          attach() {
            for (let t3 = 0; t3 < this.notes.length; t3++) this.notes[t3].setTuplet(this);
          }
          detach() {
            for (let t3 = 0; t3 < this.notes.length; t3++) this.notes[t3].resetTuplet(this);
          }
          setBracketed(t3) {
            return this.bracketed = !!t3, this;
          }
          setRatioed(t3) {
            return this.ratioed = !!t3, this;
          }
          setTupletLocation(t3) {
            if (t3) {
              if (t3 !== v.LOCATION_TOP && t3 !== v.LOCATION_BOTTOM) throw new s.RERR("BadArgument", "Invalid tuplet location: " + t3);
            } else t3 = v.LOCATION_TOP;
            return this.location = t3, this;
          }
          getNotes() {
            return this.notes;
          }
          getNoteCount() {
            return this.num_notes;
          }
          beatsOccupiedDeprecationWarning() {
            const t3 = ["beats_occupied has been deprecated as an ", "option for tuplets. Please use notes_occupied ", "instead. Calls to getBeatsOccupied and ", "setBeatsOccupied should now be routed to ", "getNotesOccupied and setNotesOccupied instead"].join("");
            console && console.warn ? console.warn(t3) : console && console.log(t3);
          }
          getBeatsOccupied() {
            return this.beatsOccupiedDeprecationWarning(), this.getNotesOccupied();
          }
          setBeatsOccupied(t3) {
            return this.beatsOccupiedDeprecationWarning(), this.setNotesOccupied(t3);
          }
          getNotesOccupied() {
            return this.notes_occupied;
          }
          setNotesOccupied(t3) {
            this.detach(), this.notes_occupied = t3, this.resolveGlyphs(), this.attach();
          }
          resolveGlyphs() {
            this.numerator_glyphs = [];
            let t3 = this.num_notes;
            for (; t3 >= 1; ) this.numerator_glyphs.unshift(new f("v" + t3 % 10, this.point)), t3 = parseInt(t3 / 10, 10);
            for (this.denom_glyphs = [], t3 = this.notes_occupied; t3 >= 1; ) this.denom_glyphs.unshift(new f("v" + t3 % 10, this.point)), t3 = parseInt(t3 / 10, 10);
          }
          getNestedTupletCount() {
            const t3 = this.location, e3 = this.notes[0];
            let i3 = n2(e3, t3), s2 = n2(e3, t3);
            function n2(t4, e4) {
              return t4.tupletStack.filter((t5) => t5.location === e4).length;
            }
            return this.notes.forEach((e4) => {
              const r2 = n2(e4, t3);
              i3 = r2 > i3 ? r2 : i3, s2 = r2 < s2 ? r2 : s2;
            }), i3 - s2;
          }
          getYPosition() {
            const t3 = this.getNestedTupletCount() * v.NESTING_OFFSET * -this.location, e3 = this.options.y_offset || 0, i3 = this.notes[0];
            let s2;
            if (this.location === v.LOCATION_TOP) {
              s2 = i3.getStave().getYForLine(0) - 15;
              for (let t4 = 0; t4 < this.notes.length; ++t4) {
                const e4 = this.notes[t4].getStemDirection() === x.UP ? this.notes[t4].getStemExtents().topY - 10 : this.notes[t4].getStemExtents().baseY - 20;
                e4 < s2 && (s2 = e4);
              }
            } else {
              s2 = i3.getStave().getYForLine(4) + 20;
              for (let t4 = 0; t4 < this.notes.length; ++t4) {
                const e4 = this.notes[t4].getStemDirection() === x.UP ? this.notes[t4].getStemExtents().baseY + 20 : this.notes[t4].getStemExtents().topY + 10;
                e4 > s2 && (s2 = e4);
              }
            }
            return s2 + t3 + e3;
          }
          draw() {
            this.checkContext(), this.setRendered();
            const t3 = this.notes[0], e3 = this.notes[this.notes.length - 1];
            this.bracketed ? (this.x_pos = t3.getTieLeftX() - 5, this.width = e3.getTieRightX() - this.x_pos + 5) : (this.x_pos = t3.getStemX(), this.width = e3.getStemX() - this.x_pos), this.y_pos = this.getYPosition();
            const i3 = (t4, e4) => t4 + e4.getMetrics().width;
            let s2 = this.numerator_glyphs.reduce(i3, 0);
            this.ratioed && (s2 = this.denom_glyphs.reduce(i3, s2), s2 += 0.32 * this.point);
            const n2 = this.x_pos + this.width / 2 - s2 / 2;
            if (this.bracketed) {
              const t4 = this.width / 2 - s2 / 2 - 5;
              t4 > 0 && (this.context.fillRect(this.x_pos, this.y_pos, t4, 1), this.context.fillRect(this.x_pos + this.width / 2 + s2 / 2 + 5, this.y_pos, t4, 1), this.context.fillRect(this.x_pos, this.y_pos + (this.location === v.LOCATION_BOTTOM), 1, 10 * this.location), this.context.fillRect(this.x_pos + this.width, this.y_pos + (this.location === v.LOCATION_BOTTOM), 1, 10 * this.location));
            }
            if (false !== this.RenderTupletNumber) {
              let t4 = 0;
              this.numerator_glyphs.forEach((e4) => {
                e4.render(this.context, n2 + t4, this.y_pos + this.point / 3 - 2), t4 += e4.getMetrics().width;
              });
            }
            if (this.ratioed) {
              const t4 = n2 + x_offset + 0.16 * this.point, e4 = 0.06 * this.point;
              this.context.beginPath(), this.context.arc(t4, this.y_pos - 0.08 * this.point, e4, 0, 2 * Math.PI, true), this.context.closePath(), this.context.fill(), this.context.beginPath(), this.context.arc(t4, this.y_pos + 0.12 * this.point, e4, 0, 2 * Math.PI, true), this.context.closePath(), this.context.fill(), x_offset += 0.32 * this.point, this.denom_glyphs.forEach((t5) => {
                t5.render(this.context, n2 + x_offset, this.y_pos + this.point / 3 - 2), x_offset += t5.getMetrics().width;
              });
            }
          }
        }
        function _(t3) {
          let e3 = 0;
          return t3.forEach((t4) => {
            t4.keyProps && t4.keyProps.forEach((t5) => {
              e3 += t5.line - 3;
            });
          }), e3 >= 0 ? x.DOWN : x.UP;
        }
        const M = "L", w = "B";
        class P extends l {
          static getDefaultBeamGroups(t3) {
            t3 && "c" !== t3 || (t3 = "4/4");
            const e3 = { "1/2": ["1/2"], "2/2": ["1/2"], "3/2": ["1/2"], "4/2": ["1/2"], "1/4": ["1/4"], "2/4": ["1/4"], "3/4": ["1/4"], "4/4": ["1/4"], "1/8": ["1/8"], "2/8": ["2/8"], "3/8": ["3/8"], "4/8": ["2/8"], "1/16": ["1/16"], "2/16": ["2/16"], "3/16": ["3/16"], "4/16": ["2/16"] }[t3];
            if (void 0 !== e3) return e3.map((t4) => new n().parse(t4));
            {
              const e4 = parseInt(t3.split("/")[0], 10), i3 = parseInt(t3.split("/")[1], 10);
              if (e4 % 3 == 0) return [new n(3, i3)];
              if (i3 > 4) return [new n(2, i3)];
              if (i3 <= 4) return [new n(1, i3)];
            }
            return [new n(1, 4)];
          }
          static applyAndGetBeams(t3, e3, i3) {
            return P.generateBeams(t3.getTickables(), { groups: i3, stem_direction: e3 });
          }
          static generateBeams(t3, e3) {
            e3 || (e3 = {}), e3.groups && e3.groups.length || (e3.groups = [new n(2, 8)]);
            const i3 = e3.groups.map((t4) => {
              if (!t4.multiply) throw new s.RuntimeError("InvalidBeamGroups", "The beam groups must be an array of Vex.Flow.Fractions");
              return t4.clone().multiply(m.RESOLUTION, 1);
            }), r2 = t3;
            let o2 = 0, a2 = [], l2 = [];
            function h2() {
              i3.length - 1 > o2 ? o2 += 1 : o2 = 0;
            }
            !function() {
              let t4 = [];
              r2.forEach((e4) => {
                if (t4 = [], e4.shouldIgnoreTicks()) return a2.push(l2), void (l2 = t4);
                l2.push(e4);
                const s2 = i3[o2].clone(), r3 = l2.reduce((t5, e5) => e5.getTicks().clone().add(t5), new n(0, 1)), c3 = m.durationToNumber(e4.duration) < 8;
                c3 && e4.tuplet && (s2.numerator *= 2), r3.greaterThan(s2) ? (c3 || t4.push(l2.pop()), a2.push(l2), l2 = t4, h2()) : r3.equals(s2) && (a2.push(l2), l2 = t4, h2());
              }), l2.length > 0 && a2.push(l2);
            }(), function() {
              const t4 = [];
              a2.forEach((i4) => {
                let s2 = [];
                i4.forEach((i5, n2, r3) => {
                  const o3 = 0 === n2 || n2 === r3.length - 1, a3 = r3[n2 - 1], l3 = !e3.beam_rests && i5.isRest(), h3 = e3.beam_rests && e3.beam_middle_only && i5.isRest() && o3;
                  let c3 = false;
                  if (e3.maintain_stem_directions && a3 && !i5.isRest() && !a3.isRest()) {
                    const t5 = a3.getStemDirection();
                    c3 = i5.getStemDirection() !== t5;
                  }
                  const u3 = parseInt(i5.duration, 10) < 8;
                  l3 || h3 || c3 || u3 ? (s2.length > 0 && t4.push(s2), s2 = c3 ? [i5] : []) : s2.push(i5);
                }), s2.length > 0 && t4.push(s2);
              }), a2 = t4;
            }(), a2.forEach((t4) => {
              let i4;
              if (e3.maintain_stem_directions) {
                const e4 = function(t5) {
                  for (let e5 = 0; e5 < t5.length; e5++) {
                    const i5 = t5[e5];
                    if (!i5.isRest()) return i5;
                  }
                  return false;
                }(t4);
                i4 = e4 ? e4.getStemDirection() : x.UP;
              } else i4 = e3.stem_direction ? e3.stem_direction : _(t4);
              !function(t5, e4) {
                t5.forEach((t6) => {
                  t6.setStemDirection(e4);
                });
              }(t4, i4);
            });
            const c2 = a2.filter((t4) => {
              if (t4.length > 1) {
                let e4 = true;
                return t4.forEach((t5) => {
                  t5.getIntrinsicTicks() >= m.durationToTicks("4") && (e4 = false);
                }), e4;
              }
              return false;
            }), u2 = function() {
              const t4 = [];
              return a2.forEach((e4) => {
                let i4 = null;
                e4.forEach((e5) => {
                  e5.tuplet && i4 !== e5.tuplet && (i4 = e5.tuplet, t4.push(i4));
                });
              }), t4;
            }(), d2 = [];
            return c2.forEach((t4) => {
              const i4 = new P(t4);
              e3.show_stemlets && (i4.render_options.show_stemlets = true), e3.secondary_breaks && (i4.render_options.secondary_break_ticks = m.durationToTicks(e3.secondary_breaks)), true === e3.flat_beams && (i4.render_options.flat_beams = true, i4.render_options.flat_beam_offset = e3.flat_beam_offset), d2.push(i4);
            }), u2.forEach((t4) => {
              const e4 = t4.notes[0].stem_direction === x.DOWN ? v.LOCATION_BOTTOM : v.LOCATION_TOP;
              t4.setTupletLocation(e4);
              let i4 = false;
              for (let e5 = 0; e5 < t4.notes.length; e5++) if (null === t4.notes[e5].beam) {
                i4 = true;
                break;
              }
              t4.setBracketed(i4);
            }), d2;
          }
          constructor(t3, e3) {
            if (super(), this.setAttribute("type", "Beam"), !t3 || t3 == []) throw new s.RuntimeError("BadArguments", "No notes provided for beam.");
            if (1 === t3.length) throw new s.RuntimeError("BadArguments", "Too few notes for beam.");
            if (this.ticks = t3[0].getIntrinsicTicks(), this.ticks >= m.durationToTicks("4")) throw new s.RuntimeError("BadArguments", "Beams can only be applied to notes shorter than a quarter note.");
            let i3, n2;
            for (this.stem_direction = x.UP, i3 = 0; i3 < t3.length; ++i3) if (n2 = t3[i3], n2.hasStem()) {
              this.stem_direction = n2.getStemDirection();
              break;
            }
            let r2 = this.stem_direction;
            if (e3 && "stavenotes" === t3[0].getCategory()) r2 = _(t3);
            else if (e3 && "tabnotes" === t3[0].getCategory()) {
              const e4 = t3.reduce((t4, e5) => t4 + e5.stem_direction, 0);
              r2 = e4 > -1 ? x.UP : x.DOWN;
            }
            for (i3 = 0; i3 < t3.length; ++i3) n2 = t3[i3], e3 && (n2.setStemDirection(r2), this.stem_direction = r2), n2.setBeam(this);
            this.postFormatted = false, this.notes = t3, this.beam_count = this.getBeamCount(), this.break_on_indices = [], this.render_options = { beam_width: 5, max_slope: 0.25, min_slope: -0.25, slope_iterations: 20, slope_cost: 100, show_stemlets: false, stemlet_extension: 7, partial_beam_length: 10, flat_beams: false, min_flat_beam_offset: 15 };
          }
          getNotes() {
            return this.notes;
          }
          getBeamCount() {
            return this.notes.map((t3) => t3.getGlyph().beam_count).reduce((t3, e3) => e3 > t3 ? e3 : t3);
          }
          breakSecondaryAt(t3) {
            return this.break_on_indices = t3, this;
          }
          getSlopeY(t3, e3, i3, s2) {
            return i3 + (t3 - e3) * s2;
          }
          calculateSlope() {
            const { notes: t3, stem_direction: e3, render_options: { max_slope: i3, min_slope: s2, slope_iterations: n2, slope_cost: r2 } } = this, o2 = t3[0], a2 = ((t4, e4) => {
              const i4 = t4.getStemExtents().topY, s3 = t4.getStemX();
              return (e4.getStemExtents().topY - i4) / (e4.getStemX() - s3);
            })(o2, t3[t3.length - 1]), l2 = (i3 - s2) / n2;
            let h2 = Number.MAX_VALUE, c2 = 0, u2 = 0;
            for (let n3 = s2; n3 <= i3; n3 += l2) {
              let i4 = 0, s3 = 0;
              for (let r3 = 1; r3 < t3.length; ++r3) {
                const a3 = t3[r3], l4 = this.getSlopeY(a3.getStemX(), o2.getStemX(), o2.getStemExtents().topY, n3) + s3, h3 = a3.getStemExtents().topY;
                if (h3 * e3 < l4 * e3) {
                  const t4 = Math.abs(h3 - l4);
                  s3 += t4 * -e3, i4 += t4 * r3;
                } else i4 += (h3 - l4) * e3;
              }
              const l3 = a2 / 2, d2 = r2 * Math.abs(l3 - n3) + Math.abs(i4);
              d2 < h2 && (h2 = d2, c2 = n3, u2 = s3);
            }
            this.slope = c2, this.y_shift = u2;
          }
          calculateFlatSlope() {
            const { notes: t3, stem_direction: e3, render_options: { beam_width: i3, min_flat_beam_offset: s2, flat_beam_offset: n2 } } = this;
            let r2 = 0, o2 = 0, a2 = 0, l2 = 0;
            for (let i4 = 0; i4 < t3.length; i4++) {
              const s3 = t3[i4], n3 = s3.getStemExtents().topY;
              r2 += n3, e3 === x.DOWN && l2 < n3 ? (l2 = n3, o2 = Math.max(...s3.getYs()), a2 = s3.getBeamCount()) : e3 === x.UP && (0 === l2 || l2 > n3) && (l2 = n3, o2 = Math.min(...s3.getYs()), a2 = s3.getBeamCount());
            }
            let h2 = r2 / t3.length;
            const c2 = s2 + a2 * (1.5 * i3), u2 = o2 + c2 * -e3;
            e3 === x.DOWN && h2 < u2 ? h2 = o2 + c2 : e3 === x.UP && h2 > u2 && (h2 = o2 - c2), n2 + this.render_options.flat_beam_offset_per_beam > 0 ? (e3 === x.DOWN && h2 > n2 && !this.render_options.flat_beams || e3 === x.UP && h2 < n2 && !this.render_options.flat_beams) && (this.render_options.flat_beam_offset = h2) : this.render_options.flat_beam_offset = h2, this.slope = 0, this.y_shift = 0;
          }
          getBeamYToDraw() {
            let t3 = this.notes[0].getStemExtents().topY;
            if (this.render_options.flat_beams && this.render_options.flat_beam_offset + this.render_options.flat_beam_offset_per_beam > 0) {
              let e3 = this.render_options.flat_beam_offset;
              this.render_options.flat_beam_offset_per_beam && (e3 += this.render_options.flat_beam_offset_per_beam * this.getBeamCount());
              let i3 = this.notes[0].note_heads[0].y;
              const s2 = this.stem_direction > 0 ? Math.min : Math.max;
              for (const t4 of this.notes) for (const e4 of t4.note_heads) i3 = s2(i3, e4.y);
              t3 = i3 + e3 * -this.stem_direction;
            }
            return t3;
          }
          applyStemExtensions() {
            const { notes: t3, slope: e3, y_shift: i3, stem_direction: s2, beam_count: n2, render_options: { show_stemlets: r2, stemlet_extension: o2, beam_width: a2 } } = this, l2 = t3[0], h2 = this.getBeamYToDraw(), c2 = l2.getStemX();
            for (let l3 = 0; l3 < t3.length; ++l3) {
              const u2 = t3[l3], d2 = u2.getStemX(), { topY: f2 } = u2.getStemExtents(), m2 = this.getSlopeY(d2, c2, h2, e3) + i3, p2 = u2.getStem().getExtension(), g2 = s2 === x.UP ? f2 - m2 : m2 - f2;
              if (u2.stem.setExtension(p2 + g2), u2.stem.renderHeightAdjustment = -x.WIDTH / 2, u2.isRest() && r2) {
                const t4 = (n2 - 1) * a2 * 1.5 + a2;
                u2.stem.setVisibility(true).setStemlet(true, t4 + o2);
              }
            }
          }
          lookupBeamDirection(t3, e3, i3, s2) {
            if ("4" === t3) return M;
            const n2 = "" + m.durationToNumber(t3) / 2, r2 = e3 < m.durationToTicks(n2), o2 = s2 < m.durationToTicks(n2), a2 = i3 < m.durationToTicks(n2);
            return r2 && o2 && a2 ? w : r2 && !o2 && a2 ? M : !r2 && o2 && a2 ? "R" : this.lookupBeamDirection(n2, e3, i3, s2);
          }
          getBeamLines(t3) {
            const e3 = m.durationToTicks(t3), i3 = [];
            let s2 = false, n2 = null;
            const r2 = this.render_options.partial_beam_length;
            let o2 = false, a2 = 0;
            for (let l3 = 0; l3 < this.notes.length; ++l3) {
              const h2 = this.notes[l3];
              a2 += h2.ticks.value();
              let c2 = false;
              parseInt(t3, 10) >= 8 && (c2 = -1 !== this.break_on_indices.indexOf(l3), this.render_options.secondary_break_ticks && a2 >= this.render_options.secondary_break_ticks && (a2 = 0, c2 = true));
              const u2 = h2.getIntrinsicTicks() < e3, d2 = h2.getStemX() - x.WIDTH / 2, f2 = this.notes[l3 - 1], m2 = this.notes[l3 + 1], p2 = m2 && m2.getIntrinsicTicks() < e3, g2 = f2 && f2.getIntrinsicTicks() < e3, b2 = f2 && m2 && u2 && !g2 && !p2;
              if (u2) if (s2) n2 = i3[i3.length - 1], n2.end = d2, c2 && (s2 = false, m2 && !p2 && null === n2.end && (n2.end = n2.start - r2));
              else {
                if (n2 = { start: d2, end: null, start_note: h2 }, s2 = true, b2) {
                  const e4 = f2.getIntrinsicTicks(), i4 = m2.getIntrinsicTicks(), s3 = h2.getIntrinsicTicks(), o3 = this.lookupBeamDirection(t3, e4, s3, i4);
                  [M, w].includes(o3) ? n2.end = n2.start - r2 : n2.end = n2.start + r2;
                } else p2 ? c2 && (n2.end = n2.start - r2, s2 = false) : n2.end = (o2 || 0 === l3) && m2 ? n2.start + r2 : n2.start - r2;
                i3.push(n2);
              }
              else s2 = false;
              o2 = c2;
            }
            const l2 = i3[i3.length - 1];
            return l2 && null === l2.end && (l2.end = l2.start - r2), i3;
          }
          drawStems() {
            this.notes.forEach((t3) => {
              t3.getStem() && (this.context.openGroup("stem", t3.getAttribute("id") + "-stem"), t3.getStem().setContext(this.context).draw(), this.context.closeGroup());
            }, this);
          }
          drawBeamLines() {
            this.checkContext();
            const t3 = ["4", "8", "16", "32", "64"], e3 = this.notes[0];
            let i3 = this.getBeamYToDraw();
            const s2 = e3.getStemX(), n2 = this.render_options.beam_width * this.stem_direction, r2 = {};
            for (const t4 of this.notes) r2[t4.getAttribute("id")] = 0;
            for (let e4 = 0; e4 < t3.length; ++e4) {
              const o2 = t3[e4], a2 = this.getBeamLines(o2);
              for (let t4 = 0; t4 < a2.length; ++t4) {
                const e5 = a2[t4], o3 = e5.start, l2 = e5.start_note.getAttribute("id"), h2 = r2[l2];
                r2[l2]++;
                const c2 = this.getSlopeY(o3, s2, i3, this.slope), u2 = e5.end, d2 = this.getSlopeY(u2, s2, i3, this.slope), f2 = l2;
                this.context.openGroup("beam", `${f2}-beam${h2}`), this.context.beginPath(), this.context.moveTo(o3, c2), this.context.lineTo(o3, c2 + n2), this.context.lineTo(u2 + 1, d2 + n2), this.context.lineTo(u2 + 1, d2), this.context.closePath(), this.context.fill(), this.context.closeGroup();
              }
              i3 += 1.5 * n2;
            }
          }
          preFormat() {
            return this;
          }
          postFormat() {
            this.postFormatted || ("tabnotes" === this.notes[0].getCategory() || this.render_options.flat_beams ? this.calculateFlatSlope() : this.calculateSlope(), this.applyStemExtensions(), this.postFormatted = true);
          }
          draw() {
            this.checkContext(), this.setRendered(), this.unbeamable || (this.postFormatted || this.postFormat(), this.drawStems(), this.applyStyle(), this.drawBeamLines(), this.restoreStyle());
          }
        }
        class T extends l {
          static get Mode() {
            return { STRICT: 1, SOFT: 2, FULL: 3 };
          }
          constructor(t3) {
            if (super(), this.setAttribute("type", "Voice"), "string" == typeof t3) {
              const e3 = t3.match(/(\d+)\/(\d+)/);
              e3 && (t3 = { num_beats: e3[1], beat_value: e3[2], resolution: m.RESOLUTION });
            }
            this.time = s.Merge({ num_beats: 4, beat_value: 4, resolution: m.RESOLUTION }, t3), this.totalTicks = new n(this.time.num_beats * (this.time.resolution / this.time.beat_value), 1), this.resolutionMultiplier = 1, this.tickables = [], this.ticksUsed = new n(0, 1), this.smallestTickCount = this.totalTicks.clone(), this.largestTickWidth = 0, this.stave = null, this.mode = T.Mode.STRICT, this.voiceGroup = null;
          }
          getTotalTicks() {
            return this.totalTicks;
          }
          getTicksUsed() {
            return this.ticksUsed;
          }
          getLargestTickWidth() {
            return this.largestTickWidth;
          }
          getSmallestTickCount() {
            return this.smallestTickCount;
          }
          getTickables() {
            return this.tickables;
          }
          getMode() {
            return this.mode;
          }
          setMode(t3) {
            return this.mode = t3, this;
          }
          getResolutionMultiplier() {
            return this.resolutionMultiplier;
          }
          getActualResolution() {
            return this.resolutionMultiplier * this.time.resolution;
          }
          setStave(t3) {
            return this.stave = t3, this.boundingBox = null, this;
          }
          getBoundingBox() {
            let t3, e3, i3, n2;
            if (!this.boundingBox) {
              if (!this.stave) throw new s.RERR("NoStave", "Can't get bounding box without stave.");
              for (t3 = this.stave, e3 = null, n2 = 0; n2 < this.tickables.length; ++n2) this.tickables[n2].setStave(t3), i3 = this.tickables[n2].getBoundingBox(), i3 && (e3 = e3 ? e3.mergeWith(i3) : i3);
              this.boundingBox = e3;
            }
            return this.boundingBox;
          }
          getVoiceGroup() {
            if (!this.voiceGroup) throw new s.RERR("NoVoiceGroup", "No voice group for voice.");
            return this.voiceGroup;
          }
          setVoiceGroup(t3) {
            return this.voiceGroup = t3, this;
          }
          setStrict(t3) {
            return this.mode = t3 ? T.Mode.STRICT : T.Mode.SOFT, this;
          }
          isComplete() {
            return this.mode !== T.Mode.STRICT && this.mode !== T.Mode.FULL || this.ticksUsed.equals(this.totalTicks);
          }
          addTickable(t3) {
            if (!t3.shouldIgnoreTicks()) {
              const e3 = t3.getTicks();
              if (this.ticksUsed.add(e3), (this.mode === T.Mode.STRICT || this.mode === T.Mode.FULL) && this.ticksUsed.greaterThan(this.totalTicks)) throw this.ticksUsed.subtract(e3), new s.RERR("BadArgument", "Too many ticks.");
              e3.lessThan(this.smallestTickCount) && (this.smallestTickCount = e3.clone()), this.resolutionMultiplier = this.ticksUsed.denominator, this.totalTicks.add(0, this.ticksUsed.denominator);
            }
            return this.tickables.push(t3), t3.setVoice(this), this;
          }
          addTickables(t3) {
            for (let e3 = 0; e3 < t3.length; ++e3) this.addTickable(t3[e3]);
            return this;
          }
          preFormat() {
            return this.preFormatted || (this.tickables.forEach((t3) => {
              t3.getStave() || t3.setStave(this.stave);
            }), this.preFormatted = true), this;
          }
          draw(t3 = this.context, e3 = this.stave) {
            this.setRendered();
            let i3 = null;
            for (let n2 = 0; n2 < this.tickables.length; ++n2) {
              const r2 = this.tickables[n2];
              if (e3 && r2.setStave(e3), !r2.getStave()) throw new s.RuntimeError("MissingStave", "The voice cannot draw tickables without staves.");
              if (0 === n2 && (i3 = r2.getBoundingBox()), n2 > 0 && i3) {
                const t4 = r2.getBoundingBox();
                t4 && i3.mergeWith(t4);
              }
              r2.setContext(t3), r2.drawWithStyle();
            }
            this.boundingBox = i3;
          }
        }
        function L(t3, e3, i3, n2, r2) {
          if (e3 !== A.type.BOLD_DOUBLE_LEFT && e3 !== A.type.BOLD_DOUBLE_RIGHT) throw new s.RERR("InvalidConnector", "A REPEAT_BEGIN or REPEAT_END type must be provided.");
          let o2 = 3, a2 = 3.5;
          e3 === A.type.BOLD_DOUBLE_RIGHT && (o2 = -5, a2 = 3), t3.fillRect(i3 + o2, n2, 1, r2 - n2), t3.fillRect(i3 - 2, n2, a2, r2 - n2);
        }
        class A extends l {
          static get type() {
            return { SINGLE_RIGHT: 0, SINGLE_LEFT: 1, SINGLE: 1, DOUBLE: 2, BRACE: 3, BRACKET: 4, BOLD_DOUBLE_LEFT: 5, BOLD_DOUBLE_RIGHT: 6, THIN_DOUBLE: 7, NONE: 8 };
          }
          static get typeString() {
            return { singleRight: A.type.SINGLE_RIGHT, singleLeft: A.type.SINGLE_LEFT, single: A.type.SINGLE, double: A.type.DOUBLE, brace: A.type.BRACE, bracket: A.type.BRACKET, boldDoubleLeft: A.type.BOLD_DOUBLE_LEFT, boldDoubleRight: A.type.BOLD_DOUBLE_RIGHT, thinDouble: A.type.THIN_DOUBLE, none: A.type.NONE };
          }
          constructor(t3, e3) {
            super(), this.setAttribute("type", "StaveConnector"), this.thickness = m.STAVE_LINE_THICKNESS, this.width = 3, this.top_stave = t3, this.bottom_stave = e3, this.type = A.type.DOUBLE, this.font = { family: "times", size: 16, weight: "normal" }, this.x_shift = 0, this.texts = [];
          }
          setType(t3) {
            return (t3 = "string" == typeof t3 ? A.typeString[t3] : t3) >= A.type.SINGLE_RIGHT && t3 <= A.type.NONE && (this.type = t3), this;
          }
          setText(t3, e3) {
            return this.texts.push({ content: t3, options: s.Merge({ shift_x: 0, shift_y: 0 }, e3) }), this;
          }
          setFont(t3) {
            s.Merge(this.font, t3);
          }
          setXShift(t3) {
            if ("number" != typeof t3) throw s.RERR("InvalidType", "x_shift must be a Number");
            return this.x_shift = t3, this;
          }
          draw() {
            const t3 = this.checkContext();
            this.setRendered();
            let e3 = this.top_stave.getYForLine(0), i3 = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness, n2 = this.width, r2 = this.top_stave.getX();
            (this.type === A.type.SINGLE_RIGHT || this.type === A.type.BOLD_DOUBLE_RIGHT || this.type === A.type.THIN_DOUBLE) && (r2 = this.top_stave.getX() + this.top_stave.width);
            let o2 = i3 - e3;
            switch (this.type) {
              case A.type.SINGLE:
              case A.type.SINGLE_LEFT:
              case A.type.SINGLE_RIGHT:
                n2 = 1;
                break;
              case A.type.DOUBLE:
                r2 -= this.width + 2;
                break;
              case A.type.BRACE: {
                n2 = 12;
                const s2 = this.top_stave.getX() - 2 + this.x_shift, r3 = e3, a2 = s2, l2 = i3, h2 = s2 - n2, c2 = r3 + o2 / 2, u2 = h2 - 0.9 * n2, d2 = r3 + 0.2 * o2, f2 = s2 + 1.1 * n2, m2 = c2 - 0.135 * o2, p2 = f2, g2 = c2 + 0.135 * o2, b2 = u2, S2 = l2 - 0.2 * o2, y2 = h2 - n2, E2 = S2, x2 = s2 + 0.4 * n2, v2 = c2 + 0.135 * o2, _2 = x2, M2 = c2 - 0.135 * o2, w2 = y2, P2 = d2;
                t3.beginPath(), t3.moveTo(s2, r3), t3.bezierCurveTo(u2, d2, f2, m2, h2, c2), t3.bezierCurveTo(p2, g2, b2, S2, a2, l2), t3.bezierCurveTo(y2, E2, x2, v2, h2, c2), t3.bezierCurveTo(_2, M2, w2, P2, s2, r3), t3.fill(), t3.stroke();
                break;
              }
              case A.type.BRACKET:
                e3 -= 4, i3 += 4, o2 = i3 - e3, f.renderGlyph(t3, r2 - 5, e3 - 3, 40, "v1b", true), f.renderGlyph(t3, r2 - 5, i3 + 3, 40, "v10", true), r2 -= this.width + 2;
                break;
              case A.type.BOLD_DOUBLE_LEFT:
                L(t3, this.type, r2 + this.x_shift, e3, i3);
                break;
              case A.type.BOLD_DOUBLE_RIGHT:
                L(t3, this.type, r2, e3, i3);
                break;
              case A.type.THIN_DOUBLE:
                n2 = 1;
                break;
              case A.type.NONE:
                break;
              default:
                throw new s.RERR("InvalidType", `The provided StaveConnector.type (${this.type}) is invalid`);
            }
            this.type !== A.type.BRACE && this.type !== A.type.BOLD_DOUBLE_LEFT && this.type !== A.type.BOLD_DOUBLE_RIGHT && this.type !== A.type.NONE && t3.fillRect(r2, e3, n2, o2), this.type === A.type.THIN_DOUBLE && t3.fillRect(r2 - 3, e3, n2, o2), t3.save(), t3.lineWidth = 2, t3.setFont(this.font.family, this.font.size, this.font.weight);
            for (let e4 = 0; e4 < this.texts.length; e4++) {
              const i4 = this.texts[e4], s2 = t3.measureText("" + i4.content).width, n3 = this.top_stave.getX() - s2 - 24 + i4.options.shift_x, r3 = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + i4.options.shift_y;
              t3.fillText("" + i4.content, n3, r3 + 4);
            }
            t3.restore();
          }
        }
        class C extends l {
          constructor() {
            super(), this.setAttribute("type", "Tickable"), this.ticks = new n(0, 1), this.intrinsicTicks = 0, this.tickMultiplier = new n(1, 1), this.width = 0, this.x_shift = 0, this.voice = null, this.tickContext = null, this.modifierContext = null, this.modifiers = [], this.preFormatted = false, this.postFormatted = false, this.tuplet = null, this.tupletStack = [], this.align_center = false, this.center_x_shift = 0, this.ignore_ticks = false, this.formatterMetrics = { freedom: { left: 0, right: 0 }, duration: "", iterations: 0, space: { used: 0, mean: 0, deviation: 0 } };
          }
          reset() {
            return this;
          }
          getTicks() {
            return this.ticks;
          }
          shouldIgnoreTicks() {
            return this.ignore_ticks;
          }
          getWidth() {
            return this.width;
          }
          getFormatterMetrics() {
            return this.formatterMetrics;
          }
          setXShift(t3) {
            this.x_shift = t3;
          }
          getCenterXShift() {
            return this.isCenterAligned() ? this.center_x_shift : 0;
          }
          isCenterAligned() {
            return this.align_center;
          }
          setCenterAlignment(t3) {
            return this.align_center = t3, this;
          }
          getVoice() {
            if (!this.voice) throw new s.RERR("NoVoice", "Tickable has no voice.");
            return this.voice;
          }
          setVoice(t3) {
            this.voice = t3;
          }
          getTuplet() {
            return this.tuplet;
          }
          resetTuplet(t3) {
            let e3, i3;
            if (t3) {
              const s2 = this.tupletStack.indexOf(t3);
              return -1 !== s2 && (this.tupletStack.splice(s2, 1), e3 = t3.getNoteCount(), i3 = t3.getNotesOccupied(), this.applyTickMultiplier(e3, i3)), this;
            }
            for (; this.tupletStack.length; ) e3 = (t3 = this.tupletStack.pop()).getNoteCount(), i3 = t3.getNotesOccupied(), this.applyTickMultiplier(e3, i3);
            return this;
          }
          setTuplet(t3) {
            if (t3) {
              this.tupletStack.push(t3);
              const e3 = t3.getNoteCount(), i3 = t3.getNotesOccupied();
              this.applyTickMultiplier(i3, e3);
            }
            return this.tuplet = t3, this;
          }
          addToModifierContext(t3) {
            this.modifierContext = t3, this.preFormatted = false;
          }
          addModifier(t3) {
            return this.modifiers.push(t3), this.preFormatted = false, this;
          }
          getModifiers() {
            return this.modifiers;
          }
          setTickContext(t3) {
            this.tickContext = t3, this.preFormatted = false;
          }
          preFormat() {
            this.preFormatted || (this.width = 0, this.modifierContext && (this.modifierContext.preFormat(), this.width += this.modifierContext.getWidth()));
          }
          postFormat() {
            return this.postFormatted || (this.postFormatted = true), this;
          }
          getIntrinsicTicks() {
            return this.intrinsicTicks;
          }
          setIntrinsicTicks(t3) {
            this.intrinsicTicks = t3, this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
          }
          getTickMultiplier() {
            return this.tickMultiplier;
          }
          applyTickMultiplier(t3, e3) {
            this.tickMultiplier.multiply(t3, e3), this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
          }
          setDuration(t3) {
            const e3 = t3.numerator * (m.RESOLUTION / t3.denominator);
            this.ticks = this.tickMultiplier.clone().multiply(e3), this.intrinsicTicks = this.ticks.value();
          }
        }
        class R extends C {
          static get CATEGORY() {
            return "note";
          }
          static get STAVEPADDING() {
            return 12;
          }
          static plotMetrics(t3, e3, i3) {
            const n2 = e3.getMetrics(), r2 = e3.getAbsoluteX() - n2.modLeftPx - n2.extraLeftPx, o2 = e3.getAbsoluteX() - n2.extraLeftPx, a2 = e3.getAbsoluteX(), l2 = e3.getAbsoluteX() + n2.noteWidth, h2 = e3.getAbsoluteX() + n2.noteWidth + n2.extraRightPx, c2 = e3.getAbsoluteX() + n2.noteWidth + n2.extraRightPx + n2.modRightPx, u2 = c2 + e3.getFormatterMetrics().freedom.right, d2 = c2 - r2;
            t3.save(), t3.setFont("Arial", 8, ""), t3.fillText(Math.round(d2) + "px", r2 + e3.getXShift(), i3);
            const f2 = i3 + 7;
            function m2(i4, s2, n3, r3 = f2) {
              t3.beginPath(), t3.setStrokeStyle(n3), t3.setFillStyle(n3), t3.setLineWidth(3), t3.moveTo(i4 + e3.getXShift(), r3), t3.lineTo(s2 + e3.getXShift(), r3), t3.stroke();
            }
            m2(r2, o2, "red"), m2(o2, a2, "#999"), m2(a2, l2, "green"), m2(l2, h2, "#999"), m2(h2, c2, "red"), m2(c2, u2, "#DD0"), m2(r2 - e3.getXShift(), r2, "#BBB"), s.drawDot(t3, a2 + e3.getXShift(), f2, "blue");
            const p2 = e3.getFormatterMetrics();
            if (p2.iterations > 0) {
              const s2 = p2.space.deviation, n3 = s2 >= 0 ? "+" : "";
              t3.setFillStyle("red"), t3.fillText(n3 + Math.round(s2), a2 + e3.getXShift(), i3 - 10);
            }
            t3.restore();
          }
          constructor(t3) {
            if (super(), this.setAttribute("type", "Note"), !t3) throw new s.RuntimeError("BadArguments", "Note must have valid initialization data to identify duration and type.");
            const e3 = m.parseNoteStruct(t3);
            if (!e3) throw new s.RuntimeError("BadArguments", `Invalid note initialization object: ${JSON.stringify(t3)}`);
            if (this.duration = e3.duration, this.dots = e3.dots, this.noteType = e3.type, this.customTypes = e3.customTypes, t3.duration_override ? this.setDuration(t3.duration_override) : this.setIntrinsicTicks(e3.ticks), this.modifiers = [], this.glyph = m.getGlyphProps(this.duration, this.noteType), this.customGlyphs = this.customTypes.map((t4) => m.getGlyphProps(this.duration, t4)), this.positions && ("object" != typeof this.positions || !this.positions.length)) throw new s.RuntimeError("BadArguments", "Note keys must be array type.");
            this.playNote = null, this.tickContext = null, this.modifierContext = null, this.ignore_ticks = false, this.width = 0, this.extraLeftPx = 0, this.extraRightPx = 0, this.x_shift = 0, this.left_modPx = 0, this.right_modPx = 0, this.voice = null, this.preFormatted = false, this.ys = [], t3.align_center && this.setCenterAlignment(t3.align_center), this.stave = null, this.render_options = { annotation_spacing: 5, stave_padding: R.STAVEPADDING };
          }
          getPlayNote() {
            return this.playNote;
          }
          setPlayNote(t3) {
            return this.playNote = t3, this;
          }
          isRest() {
            return false;
          }
          addStroke(t3, e3) {
            return e3.setNote(this), e3.setIndex(t3), this.modifiers.push(e3), this.setPreFormatted(false), this;
          }
          getStave() {
            return this.stave;
          }
          setStave(t3) {
            return this.stave = t3, this.setYs([t3.getYForLine(0)]), this.context = this.stave.context, this;
          }
          getCategory() {
            return R.CATEGORY;
          }
          setContext(t3) {
            return this.context = t3, this;
          }
          getExtraLeftPx() {
            return this.extraLeftPx;
          }
          getExtraRightPx() {
            return this.extraRightPx;
          }
          setExtraLeftPx(t3) {
            return this.extraLeftPx = t3, this;
          }
          setExtraRightPx(t3) {
            return this.extraRightPx = t3, this;
          }
          shouldIgnoreTicks() {
            return this.ignore_ticks;
          }
          getLineNumber() {
            return 0;
          }
          getLineForRest() {
            return 0;
          }
          getGlyph() {
            return this.glyph;
          }
          getGlyphWidth() {
            return this.glyph.getWidth(this.render_options.glyph_font_scale);
          }
          setYs(t3) {
            return this.ys = t3, this;
          }
          getYs() {
            if (0 === this.ys.length) throw new s.RERR("NoYValues", "No Y-values calculated for this note.");
            return this.ys;
          }
          getYForTopText(t3) {
            if (!this.stave) throw new s.RERR("NoStave", "No stave attached to this note.");
            return this.stave.getYForTopText(t3);
          }
          getBoundingBox() {
            return null;
          }
          getVoice() {
            if (!this.voice) throw new s.RERR("NoVoice", "Note has no voice.");
            return this.voice;
          }
          setVoice(t3) {
            return this.voice = t3, this.preFormatted = false, this;
          }
          getTickContext() {
            return this.tickContext;
          }
          setTickContext(t3) {
            return this.tickContext = t3, this.preFormatted = false, this;
          }
          getDuration() {
            return this.duration;
          }
          isDotted() {
            return this.dots > 0;
          }
          hasStem() {
            return false;
          }
          getDots() {
            return this.dots;
          }
          getNoteType() {
            return this.noteType;
          }
          setBeam() {
            return this;
          }
          setModifierContext(t3) {
            return this.modifierContext = t3, this;
          }
          addModifier(t3, e3 = 0) {
            return t3.setNote(this), t3.setIndex(e3), this.modifiers.push(t3), this.setPreFormatted(false), this;
          }
          getModifierStartXY() {
            if (!this.preFormatted) throw new s.RERR("UnformattedNote", "Can't call GetModifierStartXY on an unformatted note");
            return { x: this.getAbsoluteX(), y: this.ys[0] };
          }
          getMetrics() {
            if (!this.preFormatted) throw new s.RERR("UnformattedNote", "Can't call getMetrics on an unformatted note.");
            let t3 = 0, e3 = 0;
            null != this.modifierContext && (t3 = this.modifierContext.state.left_shift, e3 = this.modifierContext.state.right_shift);
            const i3 = this.getWidth();
            return { width: i3, noteWidth: i3 - t3 - e3 - this.extraLeftPx - this.extraRightPx, left_shift: this.x_shift, modLeftPx: t3, modRightPx: e3, extraLeftPx: this.extraLeftPx, extraRightPx: this.extraRightPx };
          }
          setWidth(t3) {
            this.width = t3;
          }
          getWidth() {
            if (!this.preFormatted) throw new s.RERR("UnformattedNote", "Can't call GetWidth on an unformatted note.");
            return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);
          }
          setXShift(t3) {
            return this.x_shift = t3, this;
          }
          getXShift() {
            return this.x_shift;
          }
          getX() {
            if (!this.tickContext) throw new s.RERR("NoTickContext", "Note needs a TickContext assigned for an X-Value");
            return this.tickContext.getX() + this.x_shift;
          }
          getAbsoluteX() {
            if (!this.tickContext) throw new s.RERR("NoTickContext", "Note needs a TickContext assigned for an X-Value");
            let t3 = this.tickContext.getX();
            return this.stave && (t3 += this.stave.getNoteStartX() + this.render_options.stave_padding), this.isCenterAligned() && (t3 += this.getCenterXShift()), t3;
          }
          setPreFormatted(t3) {
            if (this.preFormatted = t3, this.preFormatted) {
              const t4 = this.tickContext.getExtraPx();
              this.left_modPx = Math.max(this.left_modPx, t4.left), this.right_modPx = Math.max(this.right_modPx, t4.right);
            }
          }
        }
        class N extends R {
          static get CATEGORY() {
            return "notehead";
          }
          constructor(t3) {
            if (super(t3), this.setAttribute("type", "NoteHead"), this.index = t3.index, this.x_shift = t3.x_shift || 0, this.x = (t3.x || 0) + this.x_shift, this.y = t3.y || 0, this.note_type = t3.note_type, this.duration = t3.duration, this.displaced = t3.displaced || false, this.stem_direction = t3.stem_direction || O.STEM_UP, this.line = t3.line, this.glyph = m.getGlyphProps(this.duration, this.note_type), !this.glyph) throw new s.RuntimeError("BadArguments", `No glyph found for duration '${this.duration}' and type '${this.note_type}'`);
            this.glyph_code = this.glyph.code_head, this.x_shift_ledger_rest = 0, this.y_shift_ledger_rest = 0, this.x_shift = t3.x_shift || 0, this.glyph.rest && (this.line > 5 || this.line < 0) && (this.isLedgerLinedRest = true, "h" === this.duration ? (t3.custom_glyph_code = "rhl", this.x_shift_ledger_rest -= 4) : "w" === this.duration && (t3.custom_glyph_code = "rwl", this.x_shift_ledger_rest -= 4, this.y_shift_ledger_rest = -5)), t3.custom_glyph_code && (this.custom_glyph = true, this.glyph_code = t3.custom_glyph_code, this.stem_up_x_offset = t3.stem_up_x_offset || 0, this.stem_down_x_offset = t3.stem_down_x_offset || 0, this.stem_up_y_shift = t3.stem_up_y_shift || 0, this.stem_down_y_shift = t3.stem_down_y_shift || 0), this.style = t3.style, this.slashed = t3.slashed, s.Merge(this.render_options, { glyph_font_scale: t3.glyph_font_scale || m.DEFAULT_NOTATION_FONT_SCALE, stroke_px: 3 }), this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));
          }
          getCategory() {
            return N.CATEGORY;
          }
          getWidth() {
            return this.width;
          }
          isDisplaced() {
            return true === this.displaced;
          }
          getGlyph() {
            return this.glyph;
          }
          setX(t3) {
            return this.x = t3, this;
          }
          getY() {
            return this.y;
          }
          setY(t3) {
            return this.y = t3, this;
          }
          getLine() {
            return this.line;
          }
          setLine(t3) {
            return this.line = t3, this;
          }
          getAbsoluteX() {
            const t3 = this.preFormatted ? super.getAbsoluteX() : this.x, e3 = x.WIDTH / 2;
            return t3 + (this.displaced ? (this.width - e3) * this.stem_direction : 0);
          }
          getBoundingBox() {
            if (!this.preFormatted) throw new s.RERR("UnformattedNote", "Can't call getBoundingBox on an unformatted note.");
            const t3 = this.stave.getSpacingBetweenLines(), e3 = t3 / 2, i3 = this.y - e3;
            return new m.BoundingBox(this.getAbsoluteX(), i3, this.width, t3);
          }
          setStave(t3) {
            const e3 = this.getLine();
            return this.stave = t3, this.setY(t3.getYForNote(e3)), this.context = this.stave.context, this;
          }
          preFormat() {
            if (this.preFormatted) return this;
            const t3 = this.getWidth() + this.extraLeftPx + this.extraRightPx;
            return this.setWidth(t3), this.setPreFormatted(true), this;
          }
          draw() {
            this.checkContext(), this.setRendered();
            const t3 = this.context;
            let e3 = this.getAbsoluteX(), i3 = this.y;
            this.custom_glyph && (e3 += this.x_shift_ledger_rest, this.stem_direction === x.UP ? (e3 += this.stem_up_x_offset, i3 += this.stem_up_y_shift || 0) : this.stem_direction === x.DOWN && (e3 += this.stem_down_x_offset, i3 += this.stem_down_y_shift || 0), i3 += this.y_shift_ledger_rest), function(...t4) {
              N.DEBUG && s.L("Vex.Flow.NoteHead", t4);
            }("Drawing note head '", this.note_type, this.duration, "' at", e3, i3);
            const n2 = this.stem_direction, r2 = this.render_options.glyph_font_scale;
            if (this.style && this.applyStyle(t3), "s" === this.note_type) {
              const s2 = this.stave.getSpacingBetweenLines();
              !function(t4, e4, i4, s3, n3, r3) {
                const o2 = m.SLASH_NOTEHEAD_WIDTH;
                t4.save(), t4.setLineWidth(m.STEM_WIDTH);
                let a2 = false;
                if (m.durationToNumber(e4) > 2 && (a2 = true), a2 || (i4 -= m.STEM_WIDTH / 2 * n3), t4.beginPath(), t4.moveTo(i4, s3 + r3), t4.lineTo(i4, s3 + 1), t4.lineTo(i4 + o2, s3 - r3), t4.lineTo(i4 + o2, s3), t4.lineTo(i4, s3 + r3), t4.closePath(), a2 ? t4.fill() : t4.stroke(), m.durationToFraction(e4).equals(0.5)) {
                  const e5 = [-3, -1, o2 + 1, o2 + 3];
                  for (let n4 = 0; n4 < e5.length; n4++) t4.beginPath(), t4.moveTo(i4 + e5[n4], s3 - 10), t4.lineTo(i4 + e5[n4], s3 + 11), t4.stroke();
                }
                t4.restore();
              }(t3, this.duration, e3, i3, n2, s2);
            } else f.renderGlyph(t3, e3, i3, r2, this.glyph_code);
            this.style && this.restoreStyle(t3);
          }
        }
        class I extends R {
          constructor(t3) {
            super(t3), this.setAttribute("type", "StemmableNote"), this.stem = null, this.stemExtensionOverride = null, this.beam = null, this.renderFlag = true;
          }
          getStem() {
            return this.stem;
          }
          setStem(t3) {
            return this.stem = t3, this;
          }
          buildStem() {
            const t3 = new x();
            return this.setStem(t3), this;
          }
          buildFlag() {
            const { glyph: t3, beam: e3 } = this, i3 = null === e3 && this.renderFlag;
            if (t3 && t3.flag && i3) {
              const e4 = this.getStemDirection() === x.DOWN ? t3.code_flag_downstem : t3.code_flag_upstem;
              this.flag = new f(e4, this.render_options.glyph_font_scale);
            }
          }
          getTopGlyph() {
            return this.getStemDirection() === x.DOWN ? this.customGlyphs[this.customGlyphs.length - 1] : this.customGlyphs[0];
          }
          getStemLength() {
            return x.HEIGHT + this.getStemExtension();
          }
          getBeamCount() {
            const t3 = this.getGlyph();
            return t3 ? t3.beam_count : 0;
          }
          getStemMinumumLength() {
            let t3 = m.durationToFraction(this.duration).value() <= 1 ? 0 : 20;
            switch (this.duration) {
              case "8":
                null == this.beam && (t3 = 35);
                break;
              case "16":
                t3 = null == this.beam ? 35 : 25;
                break;
              case "32":
                t3 = null == this.beam ? 45 : 35;
                break;
              case "64":
                t3 = null == this.beam ? 50 : 40;
                break;
              case "128":
                t3 = null == this.beam ? 55 : 45;
            }
            return t3;
          }
          getStemDirection() {
            return this.stem_direction;
          }
          setStemDirection(t3) {
            if (t3 || (t3 = x.UP), t3 !== x.UP && t3 !== x.DOWN) throw new s.RERR("BadArgument", `Invalid stem direction: ${t3}`);
            if (this.stem_direction = t3, this.stem) {
              this.stem.setDirection(t3), this.stem.setExtension(this.getStemExtension());
              const e3 = this.getTopGlyph() || this.getGlyph();
              this.stem.setOptions({ stem_up_y_offset: e3.stem_up_y_offset, stem_down_y_offset: e3.stem_down_y_offset });
            }
            return this.reset(), this.flag && this.renderFlag && this.buildFlag(), this.beam = null, this.preFormatted && this.preFormat(), this;
          }
          getStemX() {
            const t3 = this.getAbsoluteX() + this.x_shift, e3 = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();
            return this.stem_direction === x.DOWN ? t3 : e3;
          }
          getCenterGlyphX() {
            return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;
          }
          getStemExtension() {
            const t3 = this.getGlyph();
            return null != this.stemExtensionOverride ? this.stemExtensionOverride : t3 ? 1 === this.getStemDirection() ? t3.stem_up_extension : t3.stem_down_extension : 0;
          }
          setStemLength(t3) {
            return this.stemExtensionOverride = t3 - x.HEIGHT, this;
          }
          getStemExtents() {
            return this.stem.getExtents();
          }
          setBeam(t3) {
            return this.beam = t3, this;
          }
          getYForTopText(t3) {
            const e3 = this.getStemExtents();
            return this.hasStem() ? Math.min(this.stave.getYForTopText(t3), e3.topY - this.render_options.annotation_spacing * (t3 + 1)) : this.stave.getYForTopText(t3);
          }
          getYForBottomText(t3) {
            const e3 = this.getStemExtents();
            return this.hasStem() ? Math.max(this.stave.getYForTopText(t3), e3.baseY + this.render_options.annotation_spacing * t3) : this.stave.getYForBottomText(t3);
          }
          hasFlag() {
            return this.renderFlag && m.getGlyphProps(this.duration).flag && !this.beam;
          }
          postFormat() {
            return this.beam && this.beam.postFormat(), this.postFormatted = true, this;
          }
          drawStem(t3) {
            this.checkContext(), this.setRendered(), this.setStem(new x(t3)), this.stem.setContext(this.context).draw();
          }
        }
        class B extends l {
          static get CATEGORY() {
            return "none";
          }
          static get Position() {
            return { LEFT: 1, RIGHT: 2, ABOVE: 3, BELOW: 4 };
          }
          static get PositionString() {
            return { above: B.Position.ABOVE, below: B.Position.BELOW, left: B.Position.LEFT, right: B.Position.RIGHT };
          }
          constructor() {
            super(), this.setAttribute("type", "Modifier"), this.width = 0, this.note = null, this.index = null, this.text_line = 0, this.position = B.Position.LEFT, this.modifier_context = null, this.x_shift = 0, this.y_shift = 0, this.spacingFromNextModifier = 0;
          }
          getCategory() {
            return B.CATEGORY;
          }
          getWidth() {
            return this.width;
          }
          setWidth(t3) {
            return this.width = t3, this;
          }
          getNote() {
            return this.note;
          }
          setNote(t3) {
            return this.note = t3, this;
          }
          getIndex() {
            return this.index;
          }
          setIndex(t3) {
            return this.index = t3, this;
          }
          getModifierContext() {
            return this.modifier_context;
          }
          setModifierContext(t3) {
            return this.modifier_context = t3, this;
          }
          getPosition() {
            return this.position;
          }
          setPosition(t3) {
            return this.position = "string" == typeof t3 ? B.PositionString[t3] : t3, this;
          }
          setTextLine(t3) {
            return this.text_line = t3, this;
          }
          setYShift(t3) {
            return this.y_shift = t3, this;
          }
          setSpacingFromNextModifier(t3) {
            this.spacingFromNextModifier = t3;
          }
          getSpacingFromNextModifier() {
            return this.spacingFromNextModifier;
          }
          setXShift(t3) {
            this.x_shift = 0, this.position === B.Position.LEFT ? this.x_shift -= t3 : this.x_shift += t3;
          }
          getXShift() {
            return this.x_shift;
          }
          draw() {
            throw this.checkContext(), new s.RERR("MethodNotImplemented", "draw() not implemented for this modifier.");
          }
          alignSubNotesWithNote(t3, e3) {
            const i3 = e3.getTickContext(), s2 = i3.getExtraPx(), n2 = i3.getX() - s2.left - s2.extraLeft + this.getSpacingFromNextModifier();
            t3.forEach((t4) => {
              const i4 = t4.getTickContext();
              t4.setStave(e3.stave), i4.setXOffset(n2);
            });
          }
        }
        class F extends B {
          static get CATEGORY() {
            return "dots";
          }
          static format(t3, e3) {
            const i3 = e3.right_shift;
            if (!t3 || 0 === t3.length) return false;
            const s2 = [], n2 = {};
            for (let e4 = 0; e4 < t3.length; ++e4) {
              const i4 = t3[e4], r3 = i4.getNote();
              let o3, a3;
              "function" == typeof r3.getKeyProps ? (o3 = r3.getKeyProps()[i4.getIndex()], a3 = o3.displaced ? r3.getExtraRightPx() : 0) : (o3 = { line: 0.5 }, a3 = 0);
              const l3 = r3.getAttribute("id");
              s2.push({ line: o3.line, note: r3, note_id: l3, dot: i4 }), n2[l3] = Math.max(n2[l3] || a3, a3);
            }
            s2.sort((t4, e4) => e4.line - t4.line);
            let r2 = i3, o2 = 0, a2 = null, l2 = null, h2 = null, c2 = 0;
            for (let t4 = 0; t4 < s2.length; ++t4) {
              const { dot: e4, note: i4, note_id: u2, line: d2 } = s2[t4];
              d2 === a2 && i4 === l2 || (r2 = n2[u2]), i4.isRest() || d2 === a2 || (0.5 === Math.abs(d2 % 1) ? c2 = 0 : (c2 = 0.5, null == l2 || l2.isRest() || a2 - d2 != 0.5 ? d2 + c2 === h2 && (c2 = -0.5) : c2 = -0.5)), i4.isRest() ? e4.dot_shiftY += -c2 : e4.dot_shiftY = -c2, h2 = d2 + c2, e4.setXShift(r2), r2 += e4.getWidth() + 1, o2 = r2 > o2 ? r2 : o2, a2 = d2, l2 = i4;
            }
            return e3.right_shift += o2, true;
          }
          constructor() {
            super(), this.setAttribute("type", "Dot"), this.note = null, this.index = null, this.position = B.Position.RIGHT, this.radius = 2, this.setWidth(5), this.dot_shiftY = 0;
          }
          getCategory() {
            return F.CATEGORY;
          }
          setNote(t3) {
            this.note = t3, "gracenotes" === this.note.getCategory() && (this.radius *= 0.5, this.setWidth(3));
          }
          setDotShiftY(t3) {
            return this.dot_shiftY = t3, this;
          }
          draw() {
            if (this.checkContext(), this.setRendered(), !this.note || null === this.index) throw new s.RERR("NoAttachedNote", "Can't draw dot without a note and index.");
            const t3 = this.note.stave.options.spacing_between_lines_px, e3 = this.note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });
            "tabnotes" === this.note.getCategory() && (e3.y = this.note.getStemExtents().baseY);
            const i3 = e3.x + this.x_shift + this.width - this.radius, n2 = e3.y + this.y_shift + this.dot_shiftY * t3, r2 = this.context;
            r2.beginPath(), r2.arc(i3, n2, this.radius, 0, 2 * Math.PI, false), r2.fill();
          }
        }
        function D(t3, e3, i3) {
          if (t3.note.shiftRestVerticalDisabled) return;
          const s2 = (e3.isrest ? 0 : 1) * i3;
          t3.line += s2, t3.maxLine += s2, t3.minLine += s2, t3.note.setKeyLine(0, t3.note.getKeyLine(0) + s2);
        }
        class O extends I {
          static get CATEGORY() {
            return "stavenotes";
          }
          static get STEM_UP() {
            return x.UP;
          }
          static get STEM_DOWN() {
            return x.DOWN;
          }
          static get DEFAULT_LEDGER_LINE_OFFSET() {
            return 3;
          }
          static format(t3, e3) {
            if (!t3 || t3.length < 2) return false;
            const i3 = [], n2 = t3[0].stagger_same_whole_notes;
            for (let e4 = 0; e4 < t3.length; e4++) {
              const s2 = t3[e4].getKeyProps(), n3 = s2[0].line;
              let r3 = s2[s2.length - 1].line;
              const o3 = t3[e4].getStemDirection(), a3 = t3[e4].getStemLength() / 10, l3 = t3[e4].getStemMinumumLength() / 10;
              let h3;
              t3[e4].isRest() ? (h3 = n3 + t3[e4].glyph.line_above, r3 = n3 - t3[e4].glyph.line_below) : (h3 = 1 === o3 ? s2[s2.length - 1].line + a3 : s2[s2.length - 1].line, r3 = 1 === o3 ? s2[0].line : s2[0].line - a3), i3.push({ line: s2[0].line, maxLine: h3, minLine: r3, isrest: t3[e4].isRest(), stemDirection: o3, stemMax: a3, stemMin: l3, voice_shift: t3[e4].getVoiceShiftWidth(), is_displaced: t3[e4].isDisplaced(), note: t3[e4] });
            }
            const r2 = i3.length;
            let o2 = i3[0];
            const a2 = r2 > 2 ? i3[1] : null;
            let l2 = r2 > 2 ? i3[2] : i3[1];
            2 !== r2 || -1 !== o2.stemDirection || 1 !== l2.stemDirection || o2.isrest || l2.isRest || (o2 = i3[1], l2 = i3[0]);
            const h2 = Math.max(o2.voice_shift, l2.voice_shift);
            let c2, u2 = 0;
            if (2 === r2) {
              const t4 = o2.stemDirection === l2.stemDirection ? 0 : 0.5;
              if (o2.stemDirection === l2.stemDirection && o2.minLine <= l2.maxLine && (o2.isrest || (c2 = Math.abs(o2.line - (l2.maxLine + 0.5)), c2 = Math.max(c2, o2.stemMin), o2.minLine = o2.line - c2, o2.note.setStemLength(10 * c2))), o2.minLine <= l2.maxLine + t4) if (o2.isrest) D(o2, l2, 1), o2.note.hasLedgerLinedRest && (o2.note.shiftRestVerticalDisabled = true);
              else if (l2.isrest) D(l2, o2, -1), l2.note.hasLedgerLinedRest && (l2.note.shiftRestVerticalDisabled = true);
              else {
                u2 = h2;
                const t5 = Math.abs(o2.line - l2.line);
                let e4 = 0, i4 = 0;
                "h" === o2.note.duration ? e4++ : "w" === o2.note.duration && i4++, "h" === l2.note.duration ? e4++ : "w" === l2.note.duration && i4++;
                let s2 = 1 === e4 || 1 === i4 || o2.note.dots !== l2.note.dots;
                if (n2 && (s2 = s2 || 2 === i4), 0 === t5 && s2) {
                  if (l2.note.setXShift(u2), o2.note.dots > 0) {
                    let t6 = 0;
                    for (const e5 of o2.note.modifiers) if (e5 instanceof F && (t6++, e5.setYShift(-10 * (l2.maxLine - o2.line + 1)), t6 === o2.note.dots)) break;
                  }
                } else t5 < 1 && t5 > 0 ? l2.note.setXShift(u2) : o2.note.voice !== l2.note.voice && o2.stemDirection === l2.stemDirection && (o2.line > l2.line ? 1 === o2.stemDirection ? l2.note.renderFlag = false : o2.note.renderFlag = false : l2.line > o2.line ? 1 === l2.stemDirection ? o2.note.renderFlag = false : l2.note.renderFlag = false : 1 === l2.stemDirection && (l2.stemDirection = -1, l2.note.setStemDirection(-1)));
              }
              return true;
            }
            return null !== a2 && a2.minLine < l2.maxLine + 0.5 && (a2.isrest || (c2 = Math.abs(a2.line - (l2.maxLine + 0.5)), c2 = Math.max(c2, a2.stemMin), a2.minLine = a2.line - c2, a2.note.setStemLength(10 * c2))), a2.isrest && !o2.isrest && !l2.isrest && (o2.minLine <= a2.maxLine || a2.minLine <= l2.maxLine) ? (a2.maxLine - a2.minLine < o2.minLine - l2.maxLine ? function(t4, e4, i4) {
              const n3 = t4.line - s.MidLine(e4.minLine, i4.maxLine);
              t4.note.setKeyLine(0, t4.note.getKeyLine(0) - n3), t4.line -= n3, t4.maxLine -= n3, t4.minLine -= n3;
            }(a2, o2, l2) : (u2 = h2 + 3, a2.note.setXShift(u2)), true) : o2.isrest && a2.isrest && l2.isrest ? (D(o2, a2, 1), D(l2, a2, -1), true) : (a2.isrest && o2.isrest && a2.minLine <= l2.maxLine && D(a2, l2, 1), a2.isrest && l2.isrest && o2.minLine <= a2.maxLine && D(a2, o2, -1), o2.isrest && o2.minLine <= a2.maxLine && D(o2, a2, 1), l2.isrest && a2.minLine <= l2.maxLine && D(l2, a2, -1), (!o2.isrest && !a2.isrest && o2.minLine <= a2.maxLine + 0.5 || !a2.isrest && !l2.isrest && a2.minLine <= l2.maxLine) && (u2 = h2 + 3, a2.note.setXShift(u2)), true);
          }
          static formatByY(t3, e3) {
            let i3 = true;
            for (let e4 = 0; e4 < t3.length; e4++) i3 = i3 && null != t3[e4].getStave();
            if (!i3) throw new s.RERR("Stave Missing", "All notes must have a stave - Vex.Flow.ModifierContext.formatMultiVoice!");
            let n2 = 0;
            for (let e4 = 0; e4 < t3.length - 1; e4++) {
              let i4 = t3[e4], s2 = t3[e4 + 1];
              i4.maxLine < s2.maxLine && (i4 = t3[e4 + 1], s2 = t3[e4]);
              const r2 = i4.getKeyProps(), o2 = s2.getKeyProps(), a2 = 0.5, l2 = i4.getStave().getYForLine(5 - r2[0].line + a2);
              s2.getStave().getYForLine(5 - o2[o2.length - 1].line - a2) - l2 < 0 && i4.voice === s2.voice && (n2 = i4.getVoiceShiftWidth() + 2, s2.setXShift(n2));
            }
            e3.right_shift += n2;
          }
          static postFormat(t3) {
            return !!t3 && (t3.forEach((t4) => t4.postFormat()), true);
          }
          constructor(t3) {
            if (super(t3), this.setAttribute("type", "StaveNote"), this.keys = t3.keys, this.clef = t3.clef, this.octave_shift = t3.octave_shift, this.beam = null, this.glyph = m.getGlyphProps(this.duration, this.noteType), !this.glyph) throw new s.RuntimeError("BadArguments", `Invalid note initialization data (No glyph found): ${JSON.stringify(t3)}`);
            this.displaced = false, this.dot_shiftY = 0, this.addDotsCount = 0, this.keyProps = [], this.use_default_head_x = false, this.paddingRight = 0, this.note_heads = [], this.modifiers = [], s.Merge(this.render_options, { glyph_font_scale: t3.glyph_font_scale || m.DEFAULT_NOTATION_FONT_SCALE, stroke_px: t3.stroke_px || O.DEFAULT_LEDGER_LINE_OFFSET }), this.calculateKeyProps(), this.buildStem(), t3.auto_stem ? this.autoStem() : this.setStemDirection(t3.stem_direction), this.reset(), this.buildFlag();
          }
          reset() {
            super.reset();
            const t3 = this.note_heads.map((t4) => t4.getStyle()), e3 = [];
            this.note_heads.forEach((t4) => e3.push(t4.note_type)), this.buildNoteHeads(), this.note_heads.forEach((i3, s2) => {
              i3.setStyle(t3[s2]), e3[s2] && (i3.note_type = e3[s2]);
            }), this.stave && this.note_heads.forEach((t4) => t4.setStave(this.stave)), this.calcExtraPx();
          }
          setBeam(t3) {
            return this.beam = t3, this.calcExtraPx(), this;
          }
          getCategory() {
            return O.CATEGORY;
          }
          buildStem() {
            this.setStem(new x({ hide: !!this.isRest() })), this.stem.id = s.Prefix(`${this.getAttribute("id")}-stem`);
          }
          buildNoteHeads() {
            this.note_heads = [];
            const t3 = this.getStemDirection(), e3 = this.getKeys();
            let i3, s2, n2, r2 = null, o2 = null, a2 = false;
            t3 === x.UP ? (i3 = 0, s2 = e3.length, n2 = 1) : t3 === x.DOWN && (i3 = e3.length - 1, s2 = -1, n2 = -1);
            for (let e4 = i3; e4 !== s2; e4 += n2) {
              const i4 = this.keyProps[e4], s3 = i4.line;
              null === r2 ? r2 = s3 : (o2 = Math.abs(r2 - s3), 0 === o2 || 0.5 === o2 ? a2 = !a2 : (a2 = false, this.use_default_head_x = true)), r2 = s3;
              const n3 = new N({ duration: this.duration, note_type: this.noteType, displaced: a2, stem_direction: t3, custom_glyph_code: i4.code, glyph_font_scale: this.render_options.glyph_font_scale, x_shift: i4.shift_right, stem_up_x_offset: i4.stem_up_x_offset, stem_down_x_offset: i4.stem_down_x_offset, stem_up_y_shift: i4.stem_up_y_shift, stem_down_y_shift: i4.stem_down_y_shift, line: i4.line });
              n3.isLedgerLinedRest && (this.hasLedgerLinedRest = true), this.note_heads[e4] = n3;
            }
          }
          autoStem() {
            this.minLine = this.keyProps[0].line, this.maxLine = this.keyProps[this.keyProps.length - 1].line;
            const t3 = (this.minLine + this.maxLine) / 2 < 3 ? x.UP : x.DOWN;
            this.setStemDirection(t3);
          }
          calculateKeyProps() {
            let t3 = null;
            for (let e3 = 0; e3 < this.keys.length; ++e3) {
              const i3 = this.keys[e3];
              this.glyph.rest && (this.glyph.position = i3);
              const n2 = { octave_shift: this.octave_shift || 0 }, r2 = m.keyProperties(i3, this.clef, n2);
              if (!r2) throw new s.RuntimeError("BadArguments", `Invalid key for note properties: ${i3}`);
              "R" === r2.key && ("1" === this.duration || "w" === this.duration ? r2.line = 4 : r2.line = 3);
              const o2 = r2.line;
              null === t3 ? t3 = o2 : Math.abs(t3 - o2) < 1 && (this.displaced = true, r2.displaced = true, this.keyProps.length > 0 && (this.keyProps[e3 - 1].displaced = true)), t3 = o2, this.keyProps.push(r2);
            }
            t3 = -1 / 0, this.keyProps.forEach((e3) => {
              e3.line < t3 && s.W("Unsorted keys in note will be sorted. See https://github.com/0xfe/vexflow/issues/104 for details."), t3 = e3.line;
            }), this.keyProps.sort((t4, e3) => t4.line - e3.line);
          }
          getBoundingBox() {
            if (!this.preFormatted) throw new s.RERR("UnformattedNote", "Can't call getBoundingBox on an unformatted note.");
            const { width: t3, modLeftPx: e3, extraLeftPx: i3 } = this.getMetrics(), n2 = this.getAbsoluteX() - e3 - i3 - this.paddingRight;
            let r2 = 0, o2 = 0;
            const a2 = this.getStave().getSpacingBetweenLines() / 2, l2 = 2 * a2;
            if (this.isRest()) {
              const t4 = this.ys[0], e4 = m.durationToFraction(this.duration);
              e4.equals(1) || e4.equals(2) ? (r2 = t4 - a2, o2 = t4 + a2) : (r2 = t4 - this.glyph.line_above * l2, o2 = t4 + this.glyph.line_below * l2);
            } else if (this.glyph.stem) {
              const t4 = this.getStemExtents();
              t4.baseY += a2 * this.stem_direction, r2 = Math.min(t4.topY, t4.baseY), o2 = Math.max(t4.topY, t4.baseY);
            } else {
              r2 = null, o2 = null;
              for (let t4 = 0; t4 < this.ys.length; ++t4) {
                const e4 = this.ys[t4];
                0 === t4 ? (r2 = e4, o2 = e4) : (r2 = Math.min(e4, r2), o2 = Math.max(e4, o2));
              }
              r2 -= a2, o2 += a2;
            }
            return new c(n2, r2, t3, o2 - r2);
          }
          getLineNumber(t3) {
            if (!this.keyProps.length) throw new s.RERR("NoKeyProps", "Can't get bottom note line, because note is not initialized properly.");
            let e3 = this.keyProps[0].line;
            for (let i3 = 0; i3 < this.keyProps.length; i3++) {
              const s2 = this.keyProps[i3].line;
              t3 ? s2 > e3 && (e3 = s2) : s2 < e3 && (e3 = s2);
            }
            return e3;
          }
          isRest() {
            return this.glyph.rest;
          }
          isChord() {
            return !this.isRest() && this.keys.length > 1;
          }
          hasStem() {
            return this.glyph.stem;
          }
          hasFlag() {
            return super.hasFlag() && !this.isRest() && this.renderFlag;
          }
          getStemX() {
            return "r" === this.noteType ? this.getCenterGlyphX() : super.getStemX() + x.WIDTH / (2 * -this.getStemDirection());
          }
          getYForTopText(t3) {
            const e3 = this.getStemExtents();
            return Math.min(this.stave.getYForTopText(t3), e3.topY - this.render_options.annotation_spacing * (t3 + 1));
          }
          getYForBottomText(t3) {
            const e3 = this.getStemExtents();
            return Math.max(this.stave.getYForTopText(t3), e3.baseY + this.render_options.annotation_spacing * t3);
          }
          setStave(t3) {
            super.setStave(t3);
            const e3 = this.note_heads.map((e4) => (e4.setStave(t3), e4.getY()));
            if (this.setYs(e3), this.stem) {
              const { y_top: t4, y_bottom: e4 } = this.getNoteHeadBounds();
              this.stem.setYBounds(t4, e4);
            }
            return this;
          }
          getKeys() {
            return this.keys;
          }
          getKeyProps() {
            return this.keyProps;
          }
          isDisplaced() {
            return this.displaced;
          }
          setNoteDisplaced(t3) {
            return this.displaced = t3, this;
          }
          getTieRightX() {
            let t3 = this.getAbsoluteX();
            return t3 += this.getGlyphWidth() + this.x_shift + this.extraRightPx, this.modifierContext && (t3 += this.modifierContext.getExtraRightPx()), t3;
          }
          getTieLeftX() {
            let t3 = this.getAbsoluteX();
            return t3 += this.x_shift - this.extraLeftPx, t3;
          }
          getLineForRest() {
            let t3 = this.keyProps[0].line;
            if (this.keyProps.length > 1) {
              const e3 = this.keyProps[this.keyProps.length - 1].line, i3 = Math.max(t3, e3), n2 = Math.min(t3, e3);
              t3 = s.MidLine(i3, n2);
            }
            return t3;
          }
          getModifierStartXY(t3, e3, i3) {
            if (i3 = i3 || {}, !this.preFormatted) throw new s.RERR("UnformattedNote", "Can't call GetModifierStartXY on an unformatted note");
            if (0 === this.ys.length) throw new s.RERR("NoYValues", "No Y-Values calculated for this note.");
            const { ABOVE: n2, BELOW: r2, LEFT: o2, RIGHT: a2 } = B.Position;
            let l2 = 0;
            return t3 === o2 ? l2 = -2 : t3 === a2 ? (l2 = this.getGlyphWidth() + this.x_shift + 2, this.stem_direction === x.UP && this.hasFlag() && (i3.forceFlagRight || ((t4, e4) => e4 === (t4.getStemDirection() === x.UP ? t4.keyProps.length - 1 : 0))(this, e3)) && (l2 += this.flag.getMetrics().width)) : t3 !== r2 && t3 !== n2 || (l2 = this.getGlyphWidth() / 2), { x: this.getAbsoluteX() + l2, y: this.ys[e3] };
          }
          setStyle(t3) {
            super.setStyle(t3), this.note_heads.forEach((e3) => e3.setStyle(t3)), this.stem && this.stem.setStyle(t3);
          }
          setStemStyle(t3) {
            this.stem && this.getStem().setStyle(t3);
          }
          getStemStyle() {
            return this.stem.getStyle();
          }
          setLedgerLineStyle(t3) {
            this.ledgerLineStyle = t3;
          }
          getLedgerLineStyle() {
            return this.ledgerLineStyle;
          }
          setFlagStyle(t3) {
            this.flagStyle = t3;
          }
          getFlagStyle() {
            return this.flagStyle;
          }
          setKeyStyle(t3, e3) {
            return this.note_heads[t3].setStyle(e3), this;
          }
          setKeyLine(t3, e3) {
            return this.keyProps[t3].line = e3, this.reset(), this;
          }
          getKeyLine(t3) {
            return this.keyProps[t3].line;
          }
          addToModifierContext(t3) {
            this.setModifierContext(t3);
            for (let t4 = 0; t4 < this.modifiers.length; ++t4) this.modifierContext.addModifier(this.modifiers[t4]);
            return this.modifierContext.addModifier(this), this.setPreFormatted(false), this;
          }
          addModifier(t3, e3) {
            return e3.setNote(this), e3.setIndex(t3), this.modifiers.push(e3), this.setPreFormatted(false), this;
          }
          addAccidental(t3, e3) {
            return this.addModifier(t3, e3);
          }
          addArticulation(t3, e3) {
            return this.addModifier(t3, e3);
          }
          addAnnotation(t3, e3) {
            return this.addModifier(t3, e3);
          }
          addDot(t3) {
            const e3 = new F();
            return e3.setDotShiftY(this.glyph.dot_shiftY), this.addDotsCount++, this.addModifier(t3, e3);
          }
          addDotToAll() {
            for (let t3 = 0; t3 < this.keys.length; ++t3) this.addDot(t3);
            return this;
          }
          getAccidentals() {
            return this.modifierContext.getModifiers("accidentals");
          }
          getDots() {
            return this.modifierContext.getModifiers("dots");
          }
          getVoiceShiftWidth() {
            return this.getGlyphWidth() * (this.displaced ? 2 : 1);
          }
          calcExtraPx() {
            this.setExtraLeftPx(this.displaced && this.stem_direction === x.DOWN ? this.getGlyphWidth() : 0), this.setExtraRightPx(!this.hasFlag() && this.displaced && this.stem_direction === x.UP ? this.getGlyphWidth() : 0);
          }
          preFormat() {
            if (this.preFormatted) return;
            this.modifierContext && this.modifierContext.preFormat();
            let t3 = this.getGlyphWidth() + this.extraLeftPx + this.extraRightPx + this.paddingRight;
            this.renderFlag && this.glyph.flag && null === this.beam && this.stem_direction === x.UP && (t3 += this.getGlyphWidth()), this.setWidth(t3), this.setPreFormatted(true);
          }
          getNoteHeadBounds() {
            let t3 = null, e3 = null, i3 = null, s2 = null, n2 = this.stave.getNumLines(), r2 = 1, o2 = false, a2 = false, l2 = n2, h2 = r2;
            return this.note_heads.forEach((c2) => {
              const u2 = c2.getLine(), d2 = c2.getY();
              (null === t3 || d2 < t3) && (t3 = d2), (null === e3 || d2 > e3) && (e3 = d2), null === s2 && c2.isDisplaced() && (s2 = c2.getAbsoluteX()), null !== i3 || c2.isDisplaced() || (i3 = c2.getAbsoluteX()), n2 = u2 > n2 ? u2 : n2, r2 = u2 < r2 ? u2 : r2, c2.isDisplaced() ? (o2 = false === o2 ? u2 : Math.max(u2, o2), a2 = false === a2 ? u2 : Math.min(u2, a2)) : (l2 = Math.max(u2, l2), h2 = Math.min(u2, h2));
            }, this), { y_top: t3, y_bottom: e3, displaced_x: s2, non_displaced_x: i3, highest_line: n2, lowest_line: r2, highest_displaced_line: o2, lowest_displaced_line: a2, highest_non_displaced_line: l2, lowest_non_displaced_line: h2 };
          }
          getNoteHeadBeginX() {
            return this.getAbsoluteX() + this.x_shift;
          }
          getNoteHeadEndX() {
            return this.getNoteHeadBeginX() + this.getGlyphWidth();
          }
          drawLedgerLines() {
            const { stave: t3, glyph: e3, render_options: { stroke_px: i3 }, context: n2 } = this, r2 = e3.getWidth() + 2 * i3, o2 = 2 * (e3.getWidth() + i3) - x.WIDTH / 2;
            if (this.isRest()) return;
            if (!n2) throw new s.RERR("NoCanvasContext", "Can't draw without a canvas context.");
            const { highest_line: a2, lowest_line: l2, highest_displaced_line: h2, highest_non_displaced_line: c2, lowest_displaced_line: u2, lowest_non_displaced_line: d2, displaced_x: f2, non_displaced_x: m2 } = this.getNoteHeadBounds(), p2 = Math.min(f2, m2), g2 = (t4, e4, s2) => {
              let a3;
              a3 = s2 && e4 ? p2 - i3 : e4 ? m2 - i3 : f2 - i3;
              const l3 = e4 && s2 ? o2 : r2;
              n2.beginPath(), n2.moveTo(a3, t4), n2.lineTo(a3 + l3, t4), n2.stroke();
            }, b2 = { ...t3.getStyle() || {}, ...this.getLedgerLineStyle() || {} };
            this.applyStyle(n2, b2);
            for (let e4 = 6; e4 <= a2; ++e4) {
              const i4 = null !== m2 && e4 <= c2, s2 = null !== f2 && e4 <= h2;
              g2(t3.getYForNote(e4), i4, s2);
            }
            for (let e4 = 0; e4 >= l2; --e4) {
              const i4 = null !== m2 && e4 >= d2, s2 = null !== f2 && e4 >= u2;
              g2(t3.getYForNote(e4), i4, s2);
            }
            this.restoreStyle(n2, b2);
          }
          drawModifiers() {
            if (!this.context) throw new s.RERR("NoCanvasContext", "Can't draw without a canvas context.");
            const t3 = this.context;
            t3.openGroup("modifiers");
            for (let e3 = 0; e3 < this.modifiers.length; e3++) {
              const i3 = this.modifiers[e3], s2 = this.note_heads[i3.getIndex()], n2 = s2.getStyle();
              s2.applyStyle(t3, n2), i3.setContext(t3), i3.drawWithStyle(), s2.restoreStyle(t3, n2);
            }
            t3.closeGroup();
          }
          drawFlag() {
            const { stem: t3, beam: e3, context: i3 } = this;
            if (!i3) throw new s.RERR("NoCanvasContext", "Can't draw without a canvas context.");
            const n2 = null === e3 && this.renderFlag;
            if (this.getGlyph().flag && n2) {
              const { y_top: e4, y_bottom: s2 } = this.getNoteHeadBounds(), n3 = t3.getHeight(), r2 = this.getStemX(), o2 = this.getStemDirection() === x.DOWN ? e4 - n3 + 2 : s2 - n3 - 2;
              i3.openGroup("flag", null, { pointerBBox: true }), this.applyStyle(i3, this.getFlagStyle() || false), this.flag.render(i3, r2, o2), this.restoreStyle(i3, this.getFlagStyle() || false), i3.closeGroup();
            }
          }
          drawNoteHeads() {
            this.note_heads.forEach((t3) => {
              this.context.openGroup("notehead", null, { pointerBBox: true }), t3.setContext(this.context).draw(), this.context.closeGroup();
            });
          }
          drawStem(t3) {
            if (!this.context) throw new s.RERR("NoCanvasContext", "Can't draw without a canvas context.");
            t3 && this.setStem(new x(t3)), this.stem.id = s.Prefix(`${this.getAttribute("id")}-stem`), this.stem && (this.context.openGroup("stem", null, { pointerBBox: true }), this.stem.setContext(this.context).draw(), this.context.closeGroup());
          }
          draw() {
            if (!this.context) throw new s.RERR("NoCanvasContext", "Can't draw without a canvas context.");
            if (!this.stave) throw new s.RERR("NoStave", "Can't draw without a stave.");
            if (0 === this.ys.length) throw new s.RERR("NoYValues", "Can't draw note without Y values.");
            const t3 = this.getNoteHeadBeginX(), e3 = this.hasStem() && !this.beam;
            if (this.note_heads.forEach((e4) => e4.setX(t3)), this.stem) {
              const t4 = this.getStemX();
              this.stem.setNoteHeadXBounds(t4, t4);
            }
            !function(...t4) {
              O.DEBUG && s.L("Vex.Flow.StaveNote", t4);
            }("Rendering ", this.isChord() ? "chord :" : "note :", this.keys), this.drawLedgerLines(), this.applyStyle(), this.setAttribute("el", this.context.openGroup("stavenote", this.getAttribute("id"))), this.context.openGroup("note", null, { pointerBBox: true }), e3 && this.drawStem(), this.drawNoteHeads(), this.drawFlag(), this.context.closeGroup(), this.drawModifiers(), this.context.closeGroup(), this.restoreStyle(), this.setRendered();
          }
        }
        class k extends B {
          static get CATEGORY() {
            return "frethandfinger";
          }
          static format(t3, e3) {
            const { left_shift: i3, right_shift: s2 } = e3;
            if (!t3 || 0 === t3.length) return false;
            const n2 = [];
            let r2 = null, o2 = 0, a2 = 0;
            for (let e4 = 0; e4 < t3.length; ++e4) {
              const l3 = t3[e4], h3 = l3.getNote(), c3 = l3.getPosition(), u3 = h3.getKeyProps()[l3.getIndex()];
              if (h3 !== r2) {
                for (let t4 = 0; t4 < h3.keys.length; ++t4) {
                  const e5 = h3.getKeyProps()[t4];
                  0 === i3 && (o2 = e5.displaced ? h3.getExtraLeftPx() : o2), 0 === s2 && (a2 = e5.displaced ? h3.getExtraRightPx() : a2);
                }
                r2 = h3;
              }
              n2.push({ note: h3, num: l3, pos: c3, line: u3.line, shiftL: o2, shiftR: a2 });
            }
            n2.sort((t4, e4) => e4.line - t4.line);
            let l2 = 0, h2 = 0, c2 = 0, u2 = 0, d2 = null, f2 = null;
            for (let t4 = 0; t4 < n2.length; ++t4) {
              let e4 = 0;
              const { note: r3, pos: o3, num: m2, line: p2, shiftL: g2, shiftR: b2 } = n2[t4];
              p2 === d2 && r3 === f2 || (l2 = i3 + g2, h2 = s2 + b2);
              const S2 = m2.getWidth() + 1;
              o3 === B.Position.LEFT ? (m2.setXShift(i3 + l2), e4 = i3 + S2, c2 = e4 > c2 ? e4 : c2) : o3 === B.Position.RIGHT && (m2.setXShift(h2), e4 = a2 + S2, u2 = e4 > u2 ? e4 : u2), d2 = p2, f2 = r3;
            }
            return e3.left_shift += c2, e3.right_shift += u2, true;
          }
          constructor(t3) {
            super(), this.setAttribute("type", "FretHandFinger"), this.note = null, this.index = null, this.finger = t3, this.width = 7, this.position = B.Position.LEFT, this.x_shift = 0, this.y_shift = 0, this.x_offset = 0, this.y_offset = 0, this.font = { family: "sans-serif", size: 9, weight: "bold" };
          }
          getCategory() {
            return k.CATEGORY;
          }
          setFretHandFinger(t3) {
            return this.finger = t3, this;
          }
          setOffsetX(t3) {
            return this.x_offset = t3, this;
          }
          setOffsetY(t3) {
            return this.y_offset = t3, this;
          }
          draw() {
            if (this.checkContext(), !this.note || null == this.index) throw new s.RERR("NoAttachedNote", "Can't draw string number without a note and index.");
            this.setRendered();
            const t3 = this.context, e3 = this.note.getModifierStartXY(this.position, this.index);
            let i3 = e3.x + this.x_shift + this.x_offset, n2 = e3.y + this.y_shift + this.y_offset + 5;
            switch (this.position) {
              case B.Position.ABOVE:
                i3 -= 4, n2 -= 12;
                break;
              case B.Position.BELOW:
                i3 -= 2, n2 += 10;
                break;
              case B.Position.LEFT:
                i3 -= this.width;
                break;
              case B.Position.RIGHT:
                i3 += 1;
                break;
              default:
                throw new s.RERR("InvalidPostion", `The position ${this.position} does not exist`);
            }
            t3.save(), t3.setFont(this.font.family, this.font.size, this.font.weight), t3.fillText("" + this.finger, i3, n2), t3.restore();
          }
        }
        class V {
          static get NUM_TONES() {
            return 12;
          }
          static get roots() {
            return ["c", "d", "e", "f", "g", "a", "b"];
          }
          static get root_values() {
            return [0, 2, 4, 5, 7, 9, 11];
          }
          static get root_indices() {
            return { c: 0, d: 1, e: 2, f: 3, g: 4, a: 5, b: 6 };
          }
          static get canonical_notes() {
            return ["c", "c#", "d", "d#", "e", "f", "f#", "g", "g#", "a", "a#", "b"];
          }
          static get diatonic_intervals() {
            return ["unison", "m2", "M2", "m3", "M3", "p4", "dim5", "p5", "m6", "M6", "b7", "M7", "octave"];
          }
          static get diatonic_accidentals() {
            return { unison: { note: 0, accidental: 0 }, m2: { note: 1, accidental: -1 }, M2: { note: 1, accidental: 0 }, m3: { note: 2, accidental: -1 }, M3: { note: 2, accidental: 0 }, p4: { note: 3, accidental: 0 }, dim5: { note: 4, accidental: -1 }, p5: { note: 4, accidental: 0 }, m6: { note: 5, accidental: -1 }, M6: { note: 5, accidental: 0 }, b7: { note: 6, accidental: -1 }, M7: { note: 6, accidental: 0 }, octave: { note: 7, accidental: 0 } };
          }
          static get intervals() {
            return { u: 0, unison: 0, m2: 1, b2: 1, min2: 1, S: 1, H: 1, 2: 2, M2: 2, maj2: 2, T: 2, W: 2, m3: 3, b3: 3, min3: 3, M3: 4, 3: 4, maj3: 4, 4: 5, p4: 5, "#4": 6, b5: 6, aug4: 6, dim5: 6, 5: 7, p5: 7, "#5": 8, b6: 8, aug5: 8, 6: 9, M6: 9, maj6: 9, b7: 10, m7: 10, min7: 10, dom7: 10, M7: 11, maj7: 11, 8: 12, octave: 12 };
          }
          static get scales() {
            return { major: [2, 2, 1, 2, 2, 2, 1], dorian: [2, 1, 2, 2, 2, 1, 2], mixolydian: [2, 2, 1, 2, 2, 1, 2], minor: [2, 1, 2, 2, 1, 2, 2] };
          }
          static get scaleTypes() {
            return { M: V.scales.major, m: V.scales.minor };
          }
          static get accidentals() {
            return ["bb", "b", "n", "#", "##"];
          }
          static get noteValues() {
            return { c: { root_index: 0, int_val: 0 }, cn: { root_index: 0, int_val: 0 }, "c#": { root_index: 0, int_val: 1 }, "c##": { root_index: 0, int_val: 2 }, cb: { root_index: 0, int_val: 11 }, cbb: { root_index: 0, int_val: 10 }, d: { root_index: 1, int_val: 2 }, dn: { root_index: 1, int_val: 2 }, "d#": { root_index: 1, int_val: 3 }, "d##": { root_index: 1, int_val: 4 }, db: { root_index: 1, int_val: 1 }, dbb: { root_index: 1, int_val: 0 }, e: { root_index: 2, int_val: 4 }, en: { root_index: 2, int_val: 4 }, "e#": { root_index: 2, int_val: 5 }, "e##": { root_index: 2, int_val: 6 }, eb: { root_index: 2, int_val: 3 }, ebb: { root_index: 2, int_val: 2 }, f: { root_index: 3, int_val: 5 }, fn: { root_index: 3, int_val: 5 }, "f#": { root_index: 3, int_val: 6 }, "f##": { root_index: 3, int_val: 7 }, fb: { root_index: 3, int_val: 4 }, fbb: { root_index: 3, int_val: 3 }, g: { root_index: 4, int_val: 7 }, gn: { root_index: 4, int_val: 7 }, "g#": { root_index: 4, int_val: 8 }, "g##": { root_index: 4, int_val: 9 }, gb: { root_index: 4, int_val: 6 }, gbb: { root_index: 4, int_val: 5 }, a: { root_index: 5, int_val: 9 }, an: { root_index: 5, int_val: 9 }, "a#": { root_index: 5, int_val: 10 }, "a##": { root_index: 5, int_val: 11 }, ab: { root_index: 5, int_val: 8 }, abb: { root_index: 5, int_val: 7 }, b: { root_index: 6, int_val: 11 }, bn: { root_index: 6, int_val: 11 }, "b#": { root_index: 6, int_val: 0 }, "b##": { root_index: 6, int_val: 1 }, bb: { root_index: 6, int_val: 10 }, bbb: { root_index: 6, int_val: 9 } };
          }
          isValidNoteValue(t3) {
            return !(null == t3 || t3 < 0 || t3 >= V.NUM_TONES);
          }
          isValidIntervalValue(t3) {
            return this.isValidNoteValue(t3);
          }
          getNoteParts(t3) {
            if (!t3 || t3.length < 1) throw new s.RERR("BadArguments", "Invalid note name: " + t3);
            if (t3.length > 3) throw new s.RERR("BadArguments", "Invalid note name: " + t3);
            const e3 = t3.toLowerCase(), i3 = /^([cdefgab])(b|bb|n|#|##)?$/.exec(e3);
            if (null != i3) return { root: i3[1], accidental: i3[2] };
            throw new s.RERR("BadArguments", "Invalid note name: " + t3);
          }
          getKeyParts(t3) {
            if (!t3 || t3.length < 1) throw new s.RERR("BadArguments", "Invalid key: " + t3);
            const e3 = t3.toLowerCase(), i3 = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/.exec(e3);
            if (null != i3) {
              const t4 = i3[1], e4 = i3[2];
              let s2 = i3[3];
              return s2 || (s2 = "M"), { root: t4, accidental: e4, type: s2 };
            }
            throw new s.RERR("BadArguments", `Invalid key: ${t3}`);
          }
          getNoteValue(t3) {
            const e3 = V.noteValues[t3];
            if (null == e3) throw new s.RERR("BadArguments", `Invalid note name: ${t3}`);
            return e3.int_val;
          }
          getIntervalValue(t3) {
            const e3 = V.intervals[t3];
            if (null == e3) throw new s.RERR("BadArguments", `Invalid interval name: ${t3}`);
            return e3;
          }
          getCanonicalNoteName(t3) {
            if (!this.isValidNoteValue(t3)) throw new s.RERR("BadArguments", `Invalid note value: ${t3}`);
            return V.canonical_notes[t3];
          }
          getCanonicalIntervalName(t3) {
            if (!this.isValidIntervalValue(t3)) throw new s.RERR("BadArguments", `Invalid interval value: ${t3}`);
            return V.diatonic_intervals[t3];
          }
          getRelativeNoteValue(t3, e3, i3) {
            if (null == i3 && (i3 = 1), 1 !== i3 && -1 !== i3) throw new s.RERR("BadArguments", `Invalid direction: ${i3}`);
            let n2 = (t3 + i3 * e3) % V.NUM_TONES;
            return n2 < 0 && (n2 += V.NUM_TONES), n2;
          }
          getRelativeNoteName(t3, e3) {
            const i3 = this.getNoteParts(t3), n2 = this.getNoteValue(i3.root);
            let r2 = e3 - n2;
            if (Math.abs(r2) > V.NUM_TONES - 3) {
              let i4 = 1;
              r2 > 0 && (i4 = -1);
              const o3 = (e3 + 1 + (n2 + 1)) % V.NUM_TONES * i4;
              if (Math.abs(o3) > 2) throw new s.RERR("BadArguments", `Notes not related: ${t3}, ${e3})`);
              r2 = o3;
            }
            if (Math.abs(r2) > 2) throw new s.RERR("BadArguments", `Notes not related: ${t3}, ${e3})`);
            let o2 = i3.root;
            if (r2 > 0) for (let t4 = 1; t4 <= r2; ++t4) o2 += "#";
            else if (r2 < 0) for (let t4 = -1; t4 >= r2; --t4) o2 += "b";
            return o2;
          }
          getScaleTones(t3, e3) {
            const i3 = [t3];
            let s2 = t3;
            for (let n2 = 0; n2 < e3.length; n2 += 1) s2 = this.getRelativeNoteValue(s2, e3[n2]), s2 !== t3 && i3.push(s2);
            return i3;
          }
          getIntervalBetween(t3, e3, i3) {
            if (null == i3 && (i3 = 1), 1 !== i3 && -1 !== i3) throw new s.RERR("BadArguments", `Invalid direction: ${i3}`);
            if (!this.isValidNoteValue(t3) || !this.isValidNoteValue(e3)) throw new s.RERR("BadArguments", `Invalid notes: ${t3}, ${e3}`);
            let n2 = 1 === i3 ? e3 - t3 : t3 - e3;
            return n2 < 0 && (n2 += V.NUM_TONES), n2;
          }
          createScaleMap(t3) {
            const e3 = this.getKeyParts(t3), i3 = V.scaleTypes[e3.type];
            let n2 = e3.root;
            if (e3.accidental && (n2 += e3.accidental), !i3) throw new s.RERR("BadArguments", "Unsupported key type: " + t3);
            const r2 = this.getScaleTones(this.getNoteValue(n2), i3), o2 = V.root_indices[e3.root], a2 = {};
            for (let t4 = 0; t4 < V.roots.length; ++t4) {
              const e4 = (o2 + t4) % V.roots.length, i4 = V.roots[e4];
              let s2 = this.getRelativeNoteName(i4, r2[t4]);
              1 === s2.length && (s2 += "n"), a2[i4] = s2;
            }
            return a2;
          }
        }
        function G(...t3) {
          U.DEBUG && s.L("Vex.Flow.Accidental", t3);
        }
        const W = (t3) => t3.getMetrics().width;
        class U extends B {
          static get CATEGORY() {
            return "accidentals";
          }
          static format(t3, e3) {
            const i3 = e3.left_shift + 1;
            if (!t3 || 0 === t3.length) return;
            const s2 = [];
            let n2, r2 = null, o2 = 0;
            for (let e4 = 0; e4 < t3.length; ++e4) {
              const i4 = t3[e4], a3 = i4.getNote(), l3 = a3.getStave(), h3 = a3.getKeyProps()[i4.getIndex()];
              if (a3 !== r2) {
                for (let t4 = 0; t4 < a3.keys.length; ++t4) n2 = a3.getKeyProps()[t4], o2 = n2.displaced ? a3.getExtraLeftPx() : o2;
                r2 = a3;
              }
              if (null !== l3) {
                const t4 = l3.options.spacing_between_lines_px, e5 = l3.getYForLine(h3.line), n3 = Math.round(e5 / t4 * 2) / 2;
                s2.push({ y: e5, line: n3, shift: o2, acc: i4, lineSpace: t4 });
              } else s2.push({ line: h3.line, shift: o2, acc: i4 });
            }
            s2.sort((t4, e4) => e4.line - t4.line);
            const a2 = [];
            let l2 = 0, h2 = null;
            for (let t4 = 0; t4 < s2.length; t4++) {
              const e4 = s2[t4];
              null !== h2 && h2 === e4.line || a2.push({ line: e4.line, flatLine: true, dblSharpLine: true, numAcc: 0, width: 0 }), "b" !== e4.acc.type && "bb" !== e4.acc.type && (a2[a2.length - 1].flatLine = false), "##" !== e4.acc.type && (a2[a2.length - 1].dblSharpLine = false), a2[a2.length - 1].numAcc++, a2[a2.length - 1].width += e4.acc.getWidth() + 3, l2 = e4.shift > l2 ? e4.shift : l2, h2 = e4.line;
            }
            let c2 = 0;
            for (let t4 = 0; t4 < a2.length; t4++) {
              let e4 = false;
              const i4 = t4;
              let s3 = t4;
              for (; s3 + 1 < a2.length && !e4; ) this.checkCollision(a2[s3], a2[s3 + 1]) ? s3++ : e4 = true;
              const n3 = (t5) => a2[i4 + t5], r3 = (t5) => t5.map(n3), o3 = (t5, e5) => {
                const [i5, s4] = r3([t5, e5]).map((t6) => t6.line);
                return i5 - s4;
              }, l3 = (...t5) => t5.map(r3).every((t6) => !this.checkCollision(...t6)), h3 = s3 - i4 + 1;
              let u3, d3, f3 = this.checkCollision(a2[i4], a2[s3]) ? "a" : "b";
              switch (h3) {
                case 3:
                  "a" === f3 && 0.5 === o3(1, 2) && 0.5 !== o3(0, 1) && (f3 = "second_on_bottom");
                  break;
                case 4:
                  l3([0, 2], [1, 3]) && (f3 = "spaced_out_tetrachord");
                  break;
                case 5:
                  "b" === f3 && l3([1, 3]) && (f3 = "spaced_out_pentachord", l3([0, 2], [2, 4]) && (f3 = "very_spaced_out_pentachord"));
                  break;
                case 6:
                  l3([0, 3], [1, 4], [2, 5]) && (f3 = "spaced_out_hexachord"), l3([0, 2], [2, 4], [1, 3], [3, 5]) && (f3 = "very_spaced_out_hexachord");
              }
              if (h3 >= 7) {
                let e5 = 2, i5 = true;
                for (; true === i5; ) {
                  i5 = false;
                  for (let t5 = 0; t5 + e5 < a2.length; t5++) if (this.checkCollision(a2[t5], a2[t5 + e5])) {
                    i5 = true, e5++;
                    break;
                  }
                }
                for (u3 = t4; u3 <= s3; u3++) d3 = (u3 - t4) % e5 + 1, a2[u3].column = d3, c2 = c2 > d3 ? c2 : d3;
              } else for (u3 = t4; u3 <= s3; u3++) d3 = m.accidentalColumnsTable[h3][f3][u3 - t4], a2[u3].column = d3, c2 = c2 > d3 ? c2 : d3;
              t4 = s3;
            }
            const u2 = [], d2 = [];
            for (let t4 = 0; t4 <= c2; t4++) u2[t4] = 0, d2[t4] = 0;
            u2[0] = l2 + i3, d2[0] = l2 + i3, a2.forEach((t4) => {
              t4.width > u2[t4.column] && (u2[t4.column] = t4.width);
            });
            for (let t4 = 1; t4 < u2.length; t4++) d2[t4] = u2[t4] + d2[t4 - 1];
            const f2 = d2[d2.length - 1];
            let p2 = 0;
            a2.forEach((t4) => {
              let e4 = 0;
              const i4 = p2 + t4.numAcc;
              for (; p2 < i4; p2++) {
                const i5 = d2[t4.column - 1] + e4;
                s2[p2].acc.setXShift(i5), e4 += s2[p2].acc.getWidth() + 3, G("Line, accCount, shift: ", t4.line, p2, i5);
              }
            }), e3.left_shift += f2;
          }
          static checkCollision(t3, e3) {
            let i3 = e3.line - t3.line, s2 = 3;
            i3 > 0 ? (s2 = e3.flatLine || e3.dblSharpLine ? 2.5 : 3, t3.dblSharpLine && (i3 -= 0.5)) : (s2 = t3.flatLine || t3.dblSharpLine ? 2.5 : 3, e3.dblSharpLine && (i3 -= 0.5));
            const n2 = Math.abs(i3) < s2;
            return G("Line_1, Line_2, Collision: ", t3.line, e3.line, n2), n2;
          }
          static applyAccidentals(t3, e3) {
            const i3 = [], s2 = {};
            t3.forEach((t4) => {
              const e4 = new n(0, 1);
              t4.getTickables().forEach((t5) => {
                if (t5.shouldIgnoreTicks()) return;
                const n2 = s2[e4.value()];
                n2 ? n2.push(t5) : (i3.push(e4.value()), s2[e4.value()] = [t5]), e4.add(t5.getTicks());
              });
            });
            const r2 = new V();
            e3 || (e3 = "C");
            const o2 = r2.createScaleMap(e3);
            i3.forEach((t4) => {
              const e4 = s2[t4], i4 = [], n2 = (t5) => {
                t5.isRest() || t5.shouldIgnoreTicks() || (t5.keys.forEach((e5, s3) => {
                  const n3 = r2.getNoteParts(e5.split("/")[0]), a2 = n3.accidental || "n", l2 = n3.root + a2, h2 = o2[n3.root] === l2, c2 = i4.indexOf(l2) > -1;
                  if (!h2 || h2 && c2) {
                    o2[n3.root] = l2;
                    const e6 = new U(a2);
                    t5.addAccidental(s3, e6), i4.push(l2);
                  }
                }), t5.getModifiers().forEach((t6) => {
                  "gracenotegroups" === t6.getCategory() && t6.getGraceNotes().forEach(n2);
                }));
              };
              e4.forEach(n2);
            });
          }
          constructor(t3 = null) {
            if (super(), this.setAttribute("type", "Accidental"), G("New accidental: ", t3), this.note = null, this.index = null, this.type = t3, this.position = B.Position.LEFT, this.render_options = { font_scale: 38, stroke_px: 3, parenLeftPadding: 2, parenRightPadding: 2 }, this.accidental = m.accidentalCodes(this.type), !this.accidental) throw new s.RERR("ArgumentError", `Unknown accidental type: ${t3}`);
            this.cautionary = false, this.parenLeft = null, this.parenRight = null, this.reset();
          }
          reset() {
            const t3 = this.render_options.font_scale;
            this.glyph = new f(this.accidental.code, t3), this.glyph.setOriginX(1), this.cautionary && (this.parenLeft = new f(m.accidentalCodes("{").code, t3), this.parenRight = new f(m.accidentalCodes("}").code, t3), this.parenLeft.setOriginX(1), this.parenRight.setOriginX(1));
          }
          getCategory() {
            return U.CATEGORY;
          }
          getWidth() {
            const t3 = this.cautionary ? W(this.parenLeft) + W(this.parenRight) + this.render_options.parenLeftPadding + this.render_options.parenRightPadding : 0;
            return W(this.glyph) + t3;
          }
          setNote(t3) {
            if (!t3) throw new s.RERR("ArgumentError", `Bad note value: ${t3}`);
            this.note = t3, "gracenotes" === this.note.getCategory() && (this.render_options.font_scale = 25, this.reset());
          }
          setAsCautionary() {
            return this.cautionary = true, this.render_options.font_scale = 28, this.reset(), this;
          }
          draw() {
            const { context: t3, type: e3, position: i3, note: n2, index: r2, cautionary: o2, x_shift: a2, y_shift: l2, glyph: h2, parenLeft: c2, parenRight: u2, render_options: { parenLeftPadding: d2, parenRightPadding: f2 } } = this;
            if (this.checkContext(), !n2 || null == r2) throw new s.RERR("NoAttachedNote", "Can't draw accidental without a note and index.");
            const m2 = n2.getModifierStartXY(i3, r2);
            let p2 = m2.x + a2;
            const g2 = m2.y + l2;
            G("Rendering: ", e3, p2, g2), o2 ? (u2.render(t3, p2, g2), p2 -= W(u2), p2 -= f2, p2 -= this.accidental.parenRightPaddingAdjustment, h2.render(t3, p2, g2), p2 -= W(h2), p2 -= d2, c2.render(t3, p2, g2)) : h2.render(t3, p2, g2), this.setRendered();
          }
        }
        class z extends B {
          static get CATEGORY() {
            return "notesubgroup";
          }
          static format(t3, e3) {
            if (!t3 || 0 === t3.length) return false;
            let i3 = 0;
            for (let e4 = 0; e4 < t3.length; ++e4) {
              const s2 = t3[e4];
              s2.preFormat(), i3 += s2.getWidth();
            }
            return e3.left_shift += i3, true;
          }
          constructor(t3) {
            return super(), this.setAttribute("type", "NoteSubGroup"), this.note = null, this.index = null, this.position = B.Position.LEFT, this.subNotes = t3, this.subNotes.forEach((t4) => {
              t4.ignore_ticks = false;
            }), this.width = 0, this.preFormatted = false, this.formatter = new ut(), this.voice = new T({ num_beats: 4, beat_value: 4, resolution: m.RESOLUTION }).setStrict(false), this.voice.addTickables(this.subNotes), this;
          }
          getCategory() {
            return z.CATEGORY;
          }
          preFormat() {
            this.preFormatted || (this.formatter.joinVoices([this.voice]).format([this.voice], 0), this.setWidth(this.formatter.getMinTotalWidth()), this.preFormatted = true);
          }
          setNote(t3) {
            this.note = t3;
          }
          setWidth(t3) {
            this.width = t3;
          }
          getWidth() {
            return this.width;
          }
          draw() {
            this.checkContext();
            const t3 = this.getNote();
            if (!t3 || null === this.index) throw new s.RuntimeError("NoAttachedNote", "Can't draw notes without a parent note and parent note index.");
            this.setRendered(), this.alignSubNotesWithNote(this.subNotes, t3), this.subNotes.forEach((t4) => t4.setContext(this.context).drawWithStyle());
          }
        }
        class H extends l {
          constructor(t3, e3) {
            super(), this.setAttribute("type", "StaveTie"), this.notes = t3, this.context = null, this.text = e3, this.direction = null, this.render_options = { cp1: 8, cp2: 12, text_shift_x: 0, first_x_shift: 0, last_x_shift: 0, y_shift: 7, tie_spacing: 0, font: { family: "Arial", size: 10, style: "" } }, this.font = this.render_options.font, this.setNotes(t3);
          }
          setFont(t3) {
            return this.font = t3, this;
          }
          setDirection(t3) {
            return this.direction = t3, this;
          }
          setNotes(t3) {
            if (!t3.first_note && !t3.last_note) throw new s.RuntimeError("BadArguments", "Tie needs to have either first_note or last_note set.");
            if (t3.first_indices || (t3.first_indices = [0]), t3.last_indices || (t3.last_indices = [0]), t3.first_indices.length !== t3.last_indices.length) throw new s.RuntimeError("BadArguments", "Tied notes must have similar index sizes");
            return this.first_note = t3.first_note, this.first_indices = t3.first_indices, this.last_note = t3.last_note, this.last_indices = t3.last_indices, this;
          }
          isPartial() {
            return !this.first_note || !this.last_note;
          }
          renderTie(t3) {
            if (0 === t3.first_ys.length || 0 === t3.last_ys.length) throw new s.RERR("BadArguments", "No Y-values to render");
            const e3 = this.context;
            let i3 = this.render_options.cp1, n2 = this.render_options.cp2;
            Math.abs(t3.last_x_px - t3.first_x_px) < 10 && (i3 = 2, n2 = 8);
            const r2 = this.render_options.first_x_shift, o2 = this.render_options.last_x_shift, a2 = this.render_options.y_shift * t3.direction;
            for (let l2 = 0; l2 < this.first_indices.length; ++l2) {
              const h2 = (t3.last_x_px + o2 + (t3.first_x_px + r2)) / 2, c2 = t3.first_ys[this.first_indices[l2]] + a2, u2 = t3.last_ys[this.last_indices[l2]] + a2;
              if (isNaN(c2) || isNaN(u2)) throw new s.RERR("BadArguments", "Bad indices for tie rendering.");
              const d2 = (c2 + u2) / 2 + i3 * t3.direction, f2 = (c2 + u2) / 2 + n2 * t3.direction;
              let m2;
              this.first_note && (m2 = this.first_note.getAttribute("id") + "-tie"), this.setAttribute("el", e3.openGroup("stavetie", m2)), e3.beginPath(), e3.moveTo(t3.first_x_px + r2, c2), e3.quadraticCurveTo(h2, d2, t3.last_x_px + o2, u2), e3.quadraticCurveTo(h2, f2, t3.first_x_px + r2, c2), e3.closePath(), e3.fill(), e3.closeGroup();
            }
          }
          renderText(t3, e3) {
            if (!this.text) return;
            let i3 = (t3 + e3) / 2;
            i3 -= this.context.measureText(this.text).width / 2, this.context.save(), this.context.setFont(this.font.family, this.font.size, this.font.style), this.context.fillText(this.text, i3 + this.render_options.text_shift_x, (this.first_note || this.last_note).getStave().getYForTopText() - 1), this.context.restore();
          }
          draw() {
            this.checkContext(), this.setRendered();
            const t3 = this.first_note, e3 = this.last_note;
            let i3, s2, n2, r2, o2;
            return t3 ? (i3 = t3.getTieRightX() + this.render_options.tie_spacing, o2 = t3.getStemDirection(), n2 = t3.getYs()) : (i3 = e3.getStave().getTieStartX(), n2 = e3.getYs(), this.first_indices = this.last_indices), e3 ? (s2 = e3.getTieLeftX() + this.render_options.tie_spacing, o2 = e3.getStemDirection(), r2 = e3.getYs()) : (s2 = t3.getStave().getTieEndX(), r2 = t3.getYs(), this.last_indices = this.first_indices), this.direction && (o2 = this.direction), this.renderTie({ first_x_px: i3, last_x_px: s2, first_ys: n2, last_ys: r2, direction: o2 }), this.renderText(i3, s2), true;
          }
        }
        class X extends H {
          static createHammeron(t3) {
            return new X(t3, "H");
          }
          static createPulloff(t3) {
            return new X(t3, "P");
          }
          constructor(t3, e3) {
            super(t3, e3), this.setAttribute("type", "TabTie"), this.render_options.cp1 = 9, this.render_options.cp2 = 11, this.render_options.y_shift = 3, this.setNotes(t3);
          }
          draw() {
            this.checkContext(), this.setRendered();
            const t3 = this.first_note, e3 = this.last_note;
            let i3, s2, n2, r2;
            return t3 ? (i3 = t3.getTieRightX() + this.render_options.tie_spacing, n2 = t3.getYs()) : (i3 = e3.getStave().getTieStartX(), n2 = e3.getYs(), this.first_indices = this.last_indices), e3 ? (s2 = e3.getTieLeftX() + this.render_options.tie_spacing, r2 = e3.getYs()) : (s2 = t3.getStave().getTieEndX(), r2 = t3.getYs(), this.last_indices = this.first_indices), this.renderTie({ first_x_px: i3, last_x_px: s2, first_ys: n2, last_ys: r2, direction: -1 }), this.renderText(i3, s2), true;
          }
        }
        class j extends B {
          static get CATEGORY() {
            return "gracenotegroups";
          }
          static format(t3, e3) {
            if (!t3 || 0 === t3.length) return false;
            const i3 = [];
            let s2 = null, n2 = 0;
            for (let e4 = 0; e4 < t3.length; ++e4) {
              const r3 = t3[e4], o3 = r3.getNote(), a2 = o3.getCategory() === O.CATEGORY;
              let l2 = 0;
              if (a2 && null !== r3.spacing && void 0 !== r3.spacing && (l2 = r3.spacing), a2 && o3 !== s2) {
                for (let t4 = 0; t4 < o3.keys.length; ++t4) n2 = o3.getKeyProps()[t4].displaced ? o3.getExtraLeftPx() : n2;
                s2 = o3;
              }
              i3.push({ shift: n2, gracenote_group: r3, spacing: l2 });
            }
            let r2, o2 = i3[0].shift;
            for (let t4 = 0; t4 < i3.length; ++t4) {
              const e4 = i3[t4].gracenote_group;
              e4.preFormat(), r2 = e4.getWidth() + i3[t4].spacing, o2 = Math.max(r2, o2);
            }
            for (let t4 = 0; t4 < i3.length; ++t4) {
              const e4 = i3[t4].gracenote_group;
              r2 = e4.getWidth() + i3[t4].spacing, e4.setSpacingFromNextModifier(o2 - Math.min(r2, o2));
            }
            return e3.left_shift += o2, true;
          }
          constructor(t3, e3) {
            return super(), this.setAttribute("type", "GraceNoteGroup"), this.note = null, this.index = null, this.position = B.Position.LEFT, this.grace_notes = t3, this.width = 0, this.preFormatted = false, this.show_slur = e3, this.slur = null, this.formatter = new ut(), this.voice = new T({ num_beats: 4, beat_value: 4, resolution: m.RESOLUTION }).setStrict(false), this.render_options = { slur_y_shift: 0 }, this.beams = [], this.voice.addTickables(this.grace_notes), this;
          }
          getCategory() {
            return j.CATEGORY;
          }
          preFormat() {
            this.preFormatted || (this.formatter.joinVoices([this.voice]).format([this.voice], 0), this.setWidth(this.formatter.getMinTotalWidth()), this.preFormatted = true);
          }
          beamNotes(t3) {
            if ((t3 = t3 || this.grace_notes).length > 1) {
              const e3 = new P(t3);
              e3.render_options.beam_width = 3, e3.render_options.partial_beam_length = 4, this.beams.push(e3);
            }
            return this;
          }
          setNote(t3) {
            this.note = t3;
          }
          setWidth(t3) {
            this.width = t3;
          }
          getWidth() {
            return this.width;
          }
          getGraceNotes() {
            return this.grace_notes;
          }
          draw() {
            this.checkContext();
            const t3 = this.getNote();
            if (function(...t4) {
              j.DEBUG && s.L("Vex.Flow.GraceNoteGroup", t4);
            }("Drawing grace note group for:", t3), !t3 || null === this.index) throw new s.RuntimeError("NoAttachedNote", "Can't draw grace note without a parent note and parent note index.");
            if (this.setRendered(), this.alignSubNotesWithNote(this.getGraceNotes(), t3), this.grace_notes.forEach((t4) => {
              t4.setContext(this.context).draw();
            }), this.beams.forEach((t4) => {
              t4.setContext(this.context).draw();
            }), this.show_slur) {
              const e3 = this.getNote().getCategory() === O.CATEGORY, i3 = e3 ? H : X;
              this.slur = new i3({ last_note: this.grace_notes[0], first_note: t3, first_indices: [0], last_indices: [0] }), this.slur.render_options.cp2 = 12, this.slur.render_options.y_shift = (e3 ? 7 : 5) + this.render_options.slur_y_shift, this.slur.setContext(this.context).draw();
            }
          }
        }
        class Y extends B {
          static get CATEGORY() {
            return "strokes";
          }
          static get Type() {
            return { BRUSH_DOWN: 1, BRUSH_UP: 2, ROLL_DOWN: 3, ROLL_UP: 4, RASQUEDO_DOWN: 5, RASQUEDO_UP: 6, ARPEGGIO_DIRECTIONLESS: 7 };
          }
          static format(t3, e3) {
            const i3 = e3.left_shift;
            if (!t3 || 0 === t3.length) return this;
            const s2 = t3.map((t4) => {
              const e4 = t4.getNote();
              if (e4 instanceof O) {
                const { line: i4, displaced: s3 } = e4.getKeyProps()[t4.getIndex()];
                return { line: i4, shift: s3 ? e4.getExtraLeftPx() : 0, stroke: t4 };
              }
              {
                const { str: i4 } = e4.getPositions()[t4.getIndex()];
                return { line: i4, shift: 0, stroke: t4 };
              }
            }), n2 = i3, r2 = s2.reduce((t4, { stroke: e4, shift: i4 }) => (e4.setXShift(n2 + i4), Math.max(e4.getWidth() + 0, t4)), 0);
            return e3.left_shift += r2, true;
          }
          constructor(t3, e3) {
            super(), this.setAttribute("type", "Stroke"), this.note = null, this.options = s.Merge({}, e3), this.all_voices = !("all_voices" in this.options) || this.options.all_voices, this.note_end = null, this.index = null, this.type = t3, this.position = B.Position.LEFT, this.render_options = { font_scale: 38, stroke_px: 3, stroke_spacing: 10 }, this.font = { family: "serif", size: 10, weight: "bold italic" }, this.setXShift(0), this.setWidth(10);
          }
          getCategory() {
            return Y.CATEGORY;
          }
          getPosition() {
            return this.position;
          }
          addEndNote(t3) {
            return this.note_end = t3, this;
          }
          draw() {
            if (this.checkContext(), this.setRendered(), !this.note || null == this.index) throw new s.RERR("NoAttachedNote", "Can't draw stroke without a note and index.");
            const t3 = this.note.getModifierStartXY(this.position, this.index);
            let e3 = this.note.getYs(), i3 = t3.y, n2 = t3.y;
            const r2 = t3.x - 5, o2 = this.note.stave.options.spacing_between_lines_px, a2 = this.getModifierContext().getModifiers(this.note.getCategory());
            for (let t4 = 0; t4 < a2.length; t4++) {
              e3 = a2[t4].getYs();
              for (let r3 = 0; r3 < e3.length; r3++) (this.note === a2[t4] || this.all_voices) && (i3 = s.Min(i3, e3[r3]), n2 = s.Max(n2, e3[r3]));
            }
            let l2, h2, c2, u2, d2;
            switch (this.type) {
              case Y.Type.BRUSH_DOWN:
                l2 = "vc3", h2 = -3, c2 = i3 - o2 / 2 + 10, n2 += o2 / 2;
                break;
              case Y.Type.BRUSH_UP:
                l2 = "v11", h2 = 0.5, c2 = n2 + o2 / 2, i3 -= o2 / 2;
                break;
              case Y.Type.ROLL_DOWN:
              case Y.Type.RASQUEDO_DOWN:
                l2 = "vc3", h2 = -3, u2 = this.x_shift + h2 - 2, this.note instanceof O ? (i3 += 1.5 * o2, n2 += (n2 - i3) % 2 != 0 ? 0.5 * o2 : o2, c2 = i3 - o2, d2 = n2 + o2 + 2) : (i3 += 1.5 * o2, n2 += o2, c2 = i3 - 0.75 * o2, d2 = n2 + 0.25 * o2);
                break;
              case Y.Type.ROLL_UP:
              case Y.Type.RASQUEDO_UP:
                l2 = "v52", h2 = -4, u2 = this.x_shift + h2 - 1, this.note instanceof O ? (c2 = o2 / 2, i3 += 0.5 * o2, (n2 - i3) % 2 == 0 && (n2 += o2 / 2), c2 = n2 + 0.5 * o2, d2 = i3 - 1.25 * o2) : (i3 += 0.25 * o2, n2 += 0.5 * o2, c2 = n2 + 0.25 * o2, d2 = i3 - o2);
                break;
              case Y.Type.ARPEGGIO_DIRECTIONLESS:
                i3 += 0.5 * o2, n2 += o2;
                break;
              default:
                throw new s.RERR("InvalidType", `The stroke type ${this.type} does not exist`);
            }
            if (this.type === Y.Type.BRUSH_DOWN || this.type === Y.Type.BRUSH_UP) this.context.fillRect(r2 + this.x_shift, i3, 1, n2 - i3);
            else if (this.note instanceof O) for (let t4 = i3; t4 <= n2; t4 += o2) f.renderGlyph(this.context, r2 + this.x_shift - 4, t4, this.render_options.font_scale, "va3");
            else {
              let t4;
              for (t4 = i3; t4 <= n2; t4 += 10) f.renderGlyph(this.context, r2 + this.x_shift - 4, t4, this.render_options.font_scale, "va3");
              this.type === Y.Type.RASQUEDO_DOWN && (d2 = t4 + 0.25 * o2);
            }
            this.type !== Y.Type.ARPEGGIO_DIRECTIONLESS && (f.renderGlyph(this.context, r2 + this.x_shift + h2, c2, this.render_options.font_scale, l2), this.type !== Y.Type.RASQUEDO_DOWN && this.type !== Y.Type.RASQUEDO_UP || (this.context.save(), this.context.setFont(this.font.family, this.font.size, this.font.weight), this.context.fillText("R", r2 + u2, d2), this.context.restore()));
          }
        }
        class K extends B {
          static get CATEGORY() {
            return "stringnumber";
          }
          static format(t3, e3) {
            const i3 = e3.left_shift, s2 = e3.right_shift;
            if (!t3 || 0 === t3.length) return this;
            const n2 = [];
            let r2, o2, a2, l2, h2, c2 = null, u2 = 0, d2 = 0;
            for (r2 = 0; r2 < t3.length; ++r2) for (o2 = t3[r2], a2 = o2.getNote(), r2 = 0; r2 < t3.length; ++r2) {
              o2 = t3[r2], a2 = o2.getNote(), l2 = o2.getPosition();
              const e4 = a2.getKeyProps()[o2.getIndex()];
              if (a2 !== c2) {
                for (let t4 = 0; t4 < a2.keys.length; ++t4) h2 = a2.getKeyProps()[t4], 0 === i3 && (u2 = h2.displaced ? a2.getExtraLeftPx() : u2), 0 === s2 && (d2 = h2.displaced ? a2.getExtraRightPx() : d2);
                c2 = a2;
              }
              n2.push({ pos: l2, note: a2, num: o2, line: e4.line, shiftL: u2, shiftR: d2 });
            }
            n2.sort((t4, e4) => e4.line - t4.line);
            let f2 = 0, m2 = 0, p2 = 0, g2 = 0, b2 = null, S2 = null;
            for (r2 = 0; r2 < n2.length; ++r2) {
              let t4 = 0;
              a2 = n2[r2].note, l2 = n2[r2].pos, o2 = n2[r2].num;
              const e4 = n2[r2].line, h3 = n2[r2].shiftL, c3 = n2[r2].shiftR;
              e4 === b2 && a2 === S2 || (f2 = i3 + h3, m2 = s2 + c3);
              const d3 = o2.getWidth() + 1;
              l2 === B.Position.LEFT ? (o2.setXShift(i3), t4 = u2 + d3, p2 = t4 > p2 ? t4 : p2) : l2 === B.Position.RIGHT && (o2.setXShift(m2), t4 += d3, g2 = t4 > g2 ? t4 : g2), b2 = e4, S2 = a2;
            }
            return e3.left_shift += p2, e3.right_shift += g2, true;
          }
          constructor(t3) {
            super(), this.setAttribute("type", "StringNumber"), this.note = null, this.last_note = null, this.index = null, this.string_number = t3, this.setWidth(20), this.position = B.Position.ABOVE, this.x_shift = 0, this.y_shift = 0, this.x_offset = 0, this.y_offset = 0, this.dashed = true, this.leg = E.LineEndType.NONE, this.radius = 8, this.font = { family: "sans-serif", size: 10, weight: "bold" };
          }
          getCategory() {
            return K.CATEGORY;
          }
          getNote() {
            return this.note;
          }
          setNote(t3) {
            return this.note = t3, this;
          }
          getIndex() {
            return this.index;
          }
          setIndex(t3) {
            return this.index = t3, this;
          }
          setLineEndType(t3) {
            return t3 >= E.LineEndType.NONE && t3 <= E.LineEndType.DOWN && (this.leg = t3), this;
          }
          setStringNumber(t3) {
            return this.string_number = t3, this;
          }
          setOffsetX(t3) {
            return this.x_offset = t3, this;
          }
          setOffsetY(t3) {
            return this.y_offset = t3, this;
          }
          setLastNote(t3) {
            return this.last_note = t3, this;
          }
          setDashed(t3) {
            return this.dashed = t3, this;
          }
          draw() {
            const t3 = this.checkContext();
            if (!this.note || null == this.index) throw new s.RERR("NoAttachedNote", "Can't draw string number without a note and index.");
            this.setRendered();
            const e3 = this.note.stave.options.spacing_between_lines_px, i3 = this.note.getModifierStartXY(this.position, this.index);
            let n2 = i3.x + this.x_shift + this.x_offset, r2 = i3.y + this.y_shift + this.y_offset;
            switch (this.position) {
              case B.Position.ABOVE:
              case B.Position.BELOW: {
                const t4 = this.note.getStemExtents();
                let s2 = t4.topY, n3 = t4.baseY + 2;
                this.note.stem_direction === O.STEM_DOWN && (s2 = t4.baseY, n3 = t4.topY - 2), r2 = this.position === B.Position.ABOVE ? this.note.hasStem() ? s2 - 1.75 * e3 : i3.y - 1.75 * e3 : this.note.hasStem() ? n3 + 1.5 * e3 : i3.y + 1.75 * e3, r2 += this.y_shift + this.y_offset;
                break;
              }
              case B.Position.LEFT:
                n2 -= this.radius / 2 + 5;
                break;
              case B.Position.RIGHT:
                n2 += this.radius / 2 + 6;
                break;
              default:
                throw new s.RERR("InvalidPosition", `The position ${this.position} is invalid`);
            }
            t3.save(), t3.beginPath(), t3.arc(n2, r2, this.radius, 0, 2 * Math.PI, false), t3.lineWidth = 1.5, t3.stroke(), t3.setFont(this.font.family, this.font.size, this.font.weight);
            const o2 = n2 - t3.measureText(this.string_number).width / 2;
            if (t3.fillText("" + this.string_number, o2, r2 + 4.5), null != this.last_note) {
              const e4 = this.last_note.getStemX() - this.note.getX() + 5;
              let i4, s2;
              switch (t3.strokeStyle = "#000000", t3.lineCap = "round", t3.lineWidth = 0.6, this.dashed ? E.drawDashedLine(t3, n2 + 10, r2, n2 + e4, r2, [3, 3]) : E.drawDashedLine(t3, n2 + 10, r2, n2 + e4, r2, [3, 0]), this.leg) {
                case E.LineEndType.UP:
                  i4 = -10, s2 = this.dashed ? [3, 3] : [3, 0], E.drawDashedLine(t3, n2 + e4, r2, n2 + e4, r2 + i4, s2);
                  break;
                case E.LineEndType.DOWN:
                  i4 = 10, s2 = this.dashed ? [3, 3] : [3, 0], E.drawDashedLine(t3, n2 + e4, r2, n2 + e4, r2 + i4, s2);
              }
            }
            t3.restore();
          }
        }
        class q extends C {
          static getNextContext(t3) {
            const e3 = t3.tContexts, i3 = e3.indexOf(t3);
            return e3[i3 + 1];
          }
          constructor() {
            super(), this.setAttribute("type", "TickContext"), this.currentTick = new n(0, 1), this.maxTicks = new n(0, 1), this.minTicks = null, this.padding = 3, this.x = 0, this.xBase = 0, this.xOffset = 0, this.tickables = [], this.notePx = 0, this.extraLeftPx = 0, this.extraRightPx = 0, this.tContexts = [];
          }
          getX() {
            return this.x;
          }
          setX(t3) {
            return this.x = t3, this.xBase = t3, this.xOffset = 0, this;
          }
          getXBase() {
            return this.xBase;
          }
          setXBase(t3) {
            this.xBase = t3, this.x = t3 + this.xOffset;
          }
          getXOffset() {
            return this.xOffset;
          }
          setXOffset(t3) {
            this.xOffset = t3, this.x = this.xBase + t3;
          }
          getWidth() {
            return this.width + 2 * this.padding;
          }
          setPadding(t3) {
            return this.padding = t3, this;
          }
          getMaxTicks() {
            return this.maxTicks;
          }
          getMinTicks() {
            return this.minTicks;
          }
          getTickables() {
            return this.tickables;
          }
          getCenterAlignedTickables() {
            return this.tickables.filter((t3) => t3.isCenterAligned());
          }
          getMetrics() {
            const { width: t3, notePx: e3, extraLeftPx: i3, extraRightPx: s2 } = this;
            return { width: t3, notePx: e3, extraLeftPx: i3, extraRightPx: s2 };
          }
          getCurrentTick() {
            return this.currentTick;
          }
          setCurrentTick(t3) {
            this.currentTick = t3, this.preFormatted = false;
          }
          getExtraPx() {
            let t3 = 0, e3 = 0, i3 = 0, s2 = 0;
            for (let n2 = 0; n2 < this.tickables.length; n2++) {
              i3 = Math.max(this.tickables[n2].extraLeftPx || 0, i3), s2 = Math.max(this.tickables[n2].extraRightPx || 0, s2);
              const r2 = this.tickables[n2].modifierContext;
              r2 && null != r2 && (t3 = Math.max(t3, r2.state.left_shift), e3 = Math.max(e3, r2.state.right_shift));
            }
            return { left: t3, right: e3, extraLeft: i3, extraRight: s2 };
          }
          addTickable(t3) {
            if (!t3) throw new s.RERR("BadArgument", "Invalid tickable added.");
            if (!t3.shouldIgnoreTicks()) {
              this.ignore_ticks = false;
              const e3 = t3.getTicks();
              e3.greaterThan(this.maxTicks) && (this.maxTicks = e3.clone()), (null == this.minTicks || e3.lessThan(this.minTicks)) && (this.minTicks = e3.clone());
            }
            return t3.setTickContext(this), this.tickables.push(t3), this.preFormatted = false, this;
          }
          preFormat() {
            if (this.preFormatted) return this;
            for (let t3 = 0; t3 < this.tickables.length; ++t3) {
              const e3 = this.tickables[t3];
              e3.preFormat();
              const i3 = e3.getMetrics();
              this.extraLeftPx = Math.max(this.extraLeftPx, i3.extraLeftPx + i3.modLeftPx), this.extraRightPx = Math.max(this.extraRightPx, i3.extraRightPx + i3.modRightPx), this.notePx = Math.max(this.notePx, i3.noteWidth), this.width = this.notePx + this.extraLeftPx + this.extraRightPx;
            }
            return this;
          }
          postFormat() {
            return this.postFormatted || (this.postFormatted = true), this;
          }
        }
        const { ABOVE: $, BELOW: J } = B.Position, Z = (t3, e3) => 0.5 * t3(e3 / 0.5), Q = (t3, e3) => e3 === $ ? t3 <= 5 : t3 >= 1, tt = (t3, e3) => Q(t3, e3) ? e3 === $ ? Math.ceil : Math.floor : Math.round, et = (t3) => {
          const e3 = t3.getCategory();
          return "stavenotes" === e3 || "gracenotes" === e3;
        };
        class it extends B {
          static get CATEGORY() {
            return "articulations";
          }
          static get INITIAL_OFFSET() {
            return -0.5;
          }
          static format(t3, e3) {
            if (!t3 || 0 === t3.length) return false;
            const i3 = (t4, e4, i4) => Z(tt(e4, i4), t4.glyph.getMetrics().height / 10 + 0.5);
            t3.filter((t4) => t4.getPosition() === $).forEach((t4) => {
              t4.setTextLine(e3.top_text_line), e3.top_text_line += i3(t4, e3.top_text_line, $);
            }), t3.filter((t4) => t4.getPosition() === J).forEach((t4) => {
              t4.setTextLine(e3.text_line), e3.text_line += i3(t4, e3.text_line, J);
            });
            const s2 = t3.map((t4) => t4.getWidth()).reduce((t4, e4) => Math.max(e4, t4));
            return e3.left_shift += s2 / 2, e3.right_shift += s2 / 2, true;
          }
          static easyScoreHook({ articulations: t3 }, e3, i3) {
            if (!t3) return;
            const s2 = { staccato: "a.", tenuto: "a-" };
            t3.split(",").map((t4) => t4.trim().split(".")).map(([t4, e4]) => {
              const n2 = { type: s2[t4] };
              return e4 && (n2.position = B.PositionString[e4]), i3.getFactory().Articulation(n2);
            }).map((t4) => e3.addModifier(0, t4));
          }
          constructor(t3) {
            if (super(), this.setAttribute("type", "Articulation"), this.note = null, this.index = null, this.type = t3, this.position = J, this.render_options = { font_scale: 38 }, this.breathMarkDistance = 0.8, this.articulation = m.articulationCodes(this.type), "abr" === this.type && (this.articulation = { code: "v6c", between_lines: false }), !this.articulation) throw new s.RERR("ArgumentError", `Articulation not found: ${this.type}`);
            this.glyph = new f(this.articulation.code, this.render_options.font_scale), this.setWidth(this.glyph.getMetrics().width);
          }
          getCategory() {
            return it.CATEGORY;
          }
          draw() {
            const { note: t3, index: e3, position: i3, glyph: n2, articulation: { between_lines: r2 }, text_line: o2, context: a2 } = this;
            if (this.checkContext(), !t3 || null == e3) throw new s.RERR("NoAttachedNote", "Can't draw Articulation without a note and index.");
            this.setRendered();
            const l2 = t3.getStave(), h2 = l2.getSpacingBetweenLines(), c2 = "tabnotes" === t3.getCategory();
            let { x: u2 } = t3.getModifierStartXY(i3, e3);
            if ("abr" === this.type) {
              let e4 = 0;
              const i4 = t3.getTickContext(), s2 = q.getNextContext(i4), n3 = i4.getX();
              if (s2 && s2.x > i4.x) e4 = (s2.getX() - n3) * this.breathMarkDistance;
              else {
                const i5 = t3.getStave();
                e4 = (i5.getX() + i5.getWidth() - n3 + i5.start_x) * this.breathMarkDistance;
              }
              if (u2 += e4, u2 > l2.end_x) {
                const t4 = l2.start_x + n3;
                u2 = t4 + (l2.end_x - t4) * this.breathMarkDistance;
              }
            }
            const d2 = this.getXShift();
            d2 && (u2 += d2);
            const f2 = !r2 || c2, m2 = ((t4, e4) => {
              const i4 = e4 === $ && t4.getStemDirection() === x.UP || e4 === J && t4.getStemDirection() === x.DOWN;
              return et(t4) ? t4.hasStem() && i4 ? 0.5 : 1 : t4.hasStem() && i4 ? 1 : 0;
            })(t3, i3);
            let p2 = { [$]: () => {
              n2.setOrigin(0.5, 1);
              const e4 = ((t4, e5) => {
                const i4 = t4.getStave(), n3 = t4.getStemDirection(), { topY: r3, baseY: o3 } = t4.getStemExtents();
                if (et(t4)) return t4.hasStem() ? n3 === x.UP ? r3 : o3 : Math.min(...t4.getYs());
                if ("tabnotes" === t4.getCategory()) return t4.hasStem() && n3 === x.UP ? r3 : i4.getYForTopText(e5);
                throw new s.RERR("UnknownCategory", "Only can get the top and bottom ys of stavenotes and tabnotes");
              })(t3, o2) - (o2 + m2) * h2;
              return f2 ? Math.min(l2.getYForTopText(it.INITIAL_OFFSET), e4) : e4;
            }, [J]: () => {
              n2.setOrigin(0.5, 0);
              const e4 = ((t4, e5) => {
                const i4 = t4.getStave(), n3 = t4.getStemDirection(), { topY: r3, baseY: o3 } = t4.getStemExtents();
                if (et(t4)) return t4.hasStem() ? n3 === x.UP ? o3 : r3 : Math.max(...t4.getYs());
                if ("tabnotes" === t4.getCategory()) return t4.hasStem() ? n3 === x.UP ? i4.getYForBottomText(e5) : r3 : i4.getYForBottomText(e5);
                throw new s.RERR("UnknownCategory", "Only can get the top and bottom ys of stavenotes and tabnotes");
              })(t3, o2) + (o2 + m2) * h2;
              return f2 ? Math.max(l2.getYForBottomText(it.INITIAL_OFFSET), e4) : e4;
            } }[i3]();
            if (this.y_shift && (p2 += this.y_shift), !c2) {
              const s2 = i3 === $ ? -1 : 1, o3 = c2 ? t3.positions[e3].str : t3.getKeyProps()[e3].line, a3 = (t3.getYs()[e3] - p2) / h2 + o3, l3 = ((t4, e4, i4, s3) => {
                const n3 = Z(tt(e4, i4), e4);
                return t4 && Q(n3, i4) && n3 % 1 == 0 ? n3 + 0.5 * -s3 : n3;
              })(r2, a3, i3, s2);
              Q(l3, i3) && n2.setOrigin(0.5, 0.5), p2 += Math.abs(l3 - a3) * h2 * s2;
            }
            !function(...t4) {
              it.DEBUG && s.L("Vex.Flow.Articulation", t4);
            }(`Rendering articulation at (x: ${u2}, y: ${p2})`), n2.render(a2, u2, p2);
          }
        }
        class st extends B {
          static get CATEGORY() {
            return "ornaments";
          }
          static format(t3, e3) {
            if (!t3 || 0 === t3.length) return false;
            let i3 = 0;
            for (let s2 = 0; s2 < t3.length; ++s2) {
              const n2 = t3[s2], r2 = 2;
              i3 = Math.max(n2.getWidth(), i3), n2.getPosition() === B.Position.ABOVE ? (n2.setTextLine(e3.top_text_line), e3.top_text_line += r2) : (n2.setTextLine(e3.text_line), e3.text_line += r2);
            }
            return e3.left_shift += i3 / 2, e3.right_shift += i3 / 2, true;
          }
          constructor(t3) {
            if (super(), this.setAttribute("type", "Ornament"), this.note = null, this.index = null, this.type = t3, this.position = B.Position.ABOVE, this.delayed = false, this.accidentalUpper = null, this.accidentalLower = null, this.render_options = { font_scale: 38, accidentalLowerPadding: 3, accidentalUpperPadding: 3 }, this.ornament = m.ornamentCodes(this.type), !this.ornament) throw new s.RERR("ArgumentError", `Ornament not found: '${this.type}'`);
            this.glyph = new f(this.ornament.code, this.render_options.font_scale), this.glyph.setOrigin(0.5, 1);
          }
          getCategory() {
            return st.CATEGORY;
          }
          setDelayed(t3) {
            return this.delayed = t3, this;
          }
          setUpperAccidental(t3) {
            const e3 = this.render_options.font_scale / 1.3;
            return this.accidentalUpper = new f(m.accidentalCodes(t3).code, e3), this.accidentalUpper.setOrigin(0.5, 1), this;
          }
          setLowerAccidental(t3) {
            const e3 = this.render_options.font_scale / 1.3;
            return this.accidentalLower = new f(m.accidentalCodes(t3).code, e3), this.accidentalLower.setOrigin(0.5, 1), this;
          }
          draw() {
            if (this.checkContext(), !this.note || null == this.index) throw new s.RERR("NoAttachedNote", "Can't draw Ornament without a note and index.");
            this.setRendered();
            const t3 = this.context, e3 = this.note.getStemDirection(), i3 = this.note.getStave(), n2 = this.note.getStem().getExtents();
            let r2 = e3 === O.STEM_DOWN ? n2.baseY : n2.topY;
            "tabnotes" === this.note.getCategory() && (this.note.hasStem() ? e3 === O.STEM_DOWN && (r2 = i3.getYForTopText(this.text_line)) : r2 = i3.getYForTopText(this.text_line));
            const o2 = e3 === O.STEM_DOWN, a2 = i3.getSpacingBetweenLines();
            let l2 = 1;
            !o2 && this.note.beam && (l2 += 0.5);
            const h2 = r2 - a2 * (this.text_line + l2);
            let c2 = this.note.getModifierStartXY(this.position, this.index).x, u2 = Math.min(i3.getYForTopText(this.text_line), h2);
            if (u2 += this.y_shift, this.delayed) {
              let t4 = 0;
              if (void 0 !== this.delayXShift) t4 = this.delayXShift;
              else {
                t4 += this.glyph.getMetrics().width / 2;
                const e4 = q.getNextContext(this.note.getTickContext());
                t4 += e4 ? 0.5 * (e4.getX() - c2) : 0.5 * (i3.x + i3.width - c2), this.delayXShift = t4;
              }
              c2 += t4;
            }
            !function(...t4) {
              st.DEBUG && s.L("Vex.Flow.Ornament", t4);
            }("Rendering ornament: ", this.ornament, c2, u2), this.accidentalLower && (this.accidentalLower.render(t3, c2, u2), u2 -= this.accidentalLower.getMetrics().height, u2 -= this.render_options.accidentalLowerPadding), this.glyph.render(t3, c2, u2), u2 -= this.glyph.getMetrics().height, this.accidentalUpper && (u2 -= this.render_options.accidentalUpperPadding, this.accidentalUpper.render(t3, c2, u2));
          }
        }
        class nt extends B {
          static get CATEGORY() {
            return "annotations";
          }
          static get Justify() {
            return { LEFT: 1, CENTER: 2, RIGHT: 3, CENTER_STEM: 4 };
          }
          static get JustifyString() {
            return { left: nt.Justify.LEFT, right: nt.Justify.RIGHT, center: nt.Justify.CENTER, centerStem: nt.Justify.CENTER_STEM };
          }
          static get VerticalJustify() {
            return { TOP: 1, CENTER: 2, BOTTOM: 3, CENTER_STEM: 4 };
          }
          static get VerticalJustifyString() {
            return { above: nt.VerticalJustify.TOP, top: nt.VerticalJustify.TOP, below: nt.VerticalJustify.BOTTOM, bottom: nt.VerticalJustify.BOTTOM, center: nt.VerticalJustify.CENTER, centerStem: nt.VerticalJustify.CENTER_STEM };
          }
          static format(t3, e3) {
            if (!t3 || 0 === t3.length) return false;
            let i3 = 0;
            for (let s2 = 0; s2 < t3.length; ++s2) {
              const n2 = t3[s2];
              i3 = Math.max(n2.getWidth(), i3), n2.getPosition() === B.Position.ABOVE ? (n2.setTextLine(e3.top_text_line), e3.top_text_line++) : (n2.setTextLine(e3.text_line), e3.text_line++);
            }
            return e3.left_shift += i3 / 2, e3.right_shift += i3 / 2, true;
          }
          constructor(t3) {
            super(), this.setAttribute("type", "Annotation"), this.note = null, this.index = null, this.text = t3, this.justification = nt.Justify.CENTER, this.vert_justification = nt.VerticalJustify.TOP, this.font = { family: "Arial", size: 10, weight: "" }, this.setWidth(m.textWidth(t3));
          }
          getCategory() {
            return nt.CATEGORY;
          }
          setFont(t3, e3, i3) {
            return this.font = { family: t3, size: e3, weight: i3 }, this;
          }
          setVerticalJustification(t3) {
            return this.vert_justification = "string" == typeof t3 ? nt.VerticalJustifyString[t3] : t3, this;
          }
          getJustification() {
            return this.justification;
          }
          setJustification(t3) {
            return this.justification = "string" == typeof t3 ? nt.JustifyString[t3] : t3, this;
          }
          draw() {
            if (this.checkContext(), !this.note) throw new s.RERR("NoNoteForAnnotation", "Can't draw text annotation without an attached note.");
            this.setRendered();
            const t3 = this.note.getModifierStartXY(B.Position.ABOVE, this.index);
            this.context.save(), this.context.setFont(this.font.family, this.font.size, this.font.weight);
            const e3 = this.context.measureText(this.text).width, i3 = this.context.measureText("m").width;
            let n2, r2, o2, a2;
            n2 = this.justification === nt.Justify.LEFT ? t3.x : this.justification === nt.Justify.RIGHT ? t3.x - e3 : this.justification === nt.Justify.CENTER ? t3.x - e3 / 2 : this.note.getStemX() - e3 / 2;
            const l2 = this.note.hasStem(), h2 = this.note.getStave();
            if (l2 && (o2 = this.note.getStem().getExtents(), a2 = h2.getSpacingBetweenLines()), this.vert_justification === nt.VerticalJustify.BOTTOM) {
              if (r2 = h2.getYForBottomText(this.text_line + m.TEXT_HEIGHT_OFFSET_HACK), l2) {
                const t4 = 1 === this.note.getStemDirection() ? o2.baseY : o2.topY;
                r2 = Math.max(r2, t4 + a2 * (this.text_line + 2));
              }
            } else if (this.vert_justification === nt.VerticalJustify.CENTER) {
              const t4 = this.note.getYForTopText(this.text_line) - 1;
              r2 = t4 + (h2.getYForBottomText(this.text_line) - t4) / 2 + i3 / 2;
            } else if (this.vert_justification === nt.VerticalJustify.TOP) r2 = Math.min(h2.getYForTopText(this.text_line), this.note.getYs()[0] - 10), l2 && (r2 = Math.min(r2, o2.topY - 5 - a2 * this.text_line));
            else {
              const t4 = this.note.getStemExtents();
              r2 = t4.topY + (t4.baseY - t4.topY) / 2 + i3 / 2;
            }
            !function(...t4) {
              nt.DEBUG && s.L("Vex.Flow.Annotation", t4);
            }("Rendering annotation: ", this.text, n2, r2), this.context.fillText(this.text, n2, r2), this.context.restore();
          }
        }
        class rt extends B {
          static get CATEGORY() {
            return "bends";
          }
          static get UP() {
            return 0;
          }
          static get DOWN() {
            return 1;
          }
          static format(t3, e3) {
            if (!t3 || 0 === t3.length) return false;
            let i3 = 0;
            const s2 = e3.top_text_line;
            for (let e4 = 0; e4 < t3.length; ++e4) {
              const n2 = t3[e4];
              n2.setXShift(i3), i3 = n2.getWidth(), n2.setTextLine(s2);
            }
            return e3.right_shift += i3, e3.top_text_line += 1, true;
          }
          constructor(t3, e3, i3) {
            super(), this.setAttribute("type", "Bend"), this.text = t3, this.x_shift = 0, this.release = e3 || false, this.font = "10pt Arial", this.render_options = { line_width: 1.5, line_style: "#777777", bend_width: 8, release_width: 8 }, i3 ? this.phrase = i3 : (this.phrase = [{ type: rt.UP, text: this.text }], this.release && this.phrase.push({ type: rt.DOWN, text: "" })), this.updateWidth();
          }
          getCategory() {
            return rt.CATEGORY;
          }
          setXShift(t3) {
            this.x_shift = t3, this.updateWidth();
          }
          setFont(t3) {
            return this.font = t3, this;
          }
          getText() {
            return this.text;
          }
          updateWidth() {
            const t3 = this;
            function e3(e4) {
              let i4;
              return i4 = t3.context ? t3.context.measureText(e4).width : m.textWidth(e4), i4;
            }
            let i3 = 0;
            for (let t4 = 0; t4 < this.phrase.length; ++t4) {
              const n2 = this.phrase[t4];
              if ("width" in n2) i3 += n2.width;
              else {
                const t5 = n2.type === rt.UP ? this.render_options.bend_width : this.render_options.release_width;
                n2.width = s.Max(t5, e3(n2.text)) + 3, n2.draw_width = n2.width / 2, i3 += n2.width;
              }
            }
            return this.setWidth(i3 + this.x_shift), this;
          }
          draw() {
            if (this.checkContext(), !this.note || null == this.index) throw new s.RERR("NoNoteForBend", "Can't draw bend without a note or index.");
            this.setRendered();
            const t3 = this.note.getModifierStartXY(B.Position.RIGHT, this.index);
            t3.x += 3, t3.y += 0.5;
            const e3 = this.x_shift, i3 = this.context, n2 = this.note.getStave().getYForTopText(this.text_line) + 3, r2 = this.note.getStave().getYForTopText(this.text_line) - 1, o2 = this;
            function a2(t4, e4, s2, n3) {
              const r3 = t4 + s2, a3 = e4;
              i3.save(), i3.beginPath(), i3.setLineWidth(o2.render_options.line_width), i3.setStrokeStyle(o2.render_options.line_style), i3.setFillStyle(o2.render_options.line_style), i3.moveTo(t4, e4), i3.quadraticCurveTo(r3, a3, t4 + s2, n3), i3.stroke(), i3.restore();
            }
            function l2(t4, e4, s2, n3) {
              i3.save(), i3.beginPath(), i3.setLineWidth(o2.render_options.line_width), i3.setStrokeStyle(o2.render_options.line_style), i3.setFillStyle(o2.render_options.line_style), i3.moveTo(t4, n3), i3.quadraticCurveTo(t4 + s2, n3, t4 + s2, e4), i3.stroke(), i3.restore();
            }
            function h2(t4, e4, s2) {
              const n3 = s2 || 1;
              i3.beginPath(), i3.moveTo(t4, e4), i3.lineTo(t4 - 4, e4 + 4 * n3), i3.lineTo(t4 + 4, e4 + 4 * n3), i3.closePath(), i3.fill();
            }
            function c2(t4, e4) {
              i3.save(), i3.setRawFont(o2.font);
              const s2 = t4 - i3.measureText(e4).width / 2;
              i3.fillText(e4, s2, r2), i3.restore();
            }
            let u2 = null, d2 = 0;
            for (let i4 = 0; i4 < this.phrase.length; ++i4) {
              const s2 = this.phrase[i4];
              0 === i4 && (s2.draw_width_unmodified = s2.draw_width, s2.draw_width += e3), d2 = s2.draw_width + (u2 ? u2.draw_width : 0) - (1 === i4 ? e3 : 0), s2.type === rt.UP && (u2 && u2.type === rt.UP && h2(t3.x, n2), a2(t3.x, t3.y, d2, n2)), s2.type === rt.DOWN && (u2 && u2.type === rt.UP && l2(t3.x, t3.y, d2, n2), u2 && u2.type === rt.DOWN && (h2(t3.x, t3.y, -1), l2(t3.x, t3.y, d2, n2)), null === u2 && (d2 = s2.draw_width, l2(t3.x, t3.y, d2, n2))), c2(t3.x + d2, s2.text), u2 = s2, u2.x = t3.x, t3.x += d2;
            }
            u2.type === rt.UP ? h2(u2.x + d2, n2) : u2.type === rt.DOWN && h2(u2.x + d2, t3.y, -1);
            for (let t4 = 0; t4 < this.phrase.length; ++t4) {
              const e4 = this.phrase[t4];
              e4.draw_width_unmodified && (e4.draw_width = e4.draw_width_unmodified);
            }
          }
        }
        class ot extends B {
          static get CATEGORY() {
            return "vibratos";
          }
          static format(t3, e3, i3) {
            if (!t3 || 0 === t3.length) return false;
            let s2 = e3.top_text_line, n2 = 0, r2 = e3.right_shift - 7;
            const o2 = i3.getModifiers(rt.CATEGORY);
            o2 && o2.length > 0 && s2--;
            for (let e4 = 0; e4 < t3.length; ++e4) {
              const i4 = t3[e4];
              i4.setXShift(r2), i4.setTextLine(s2), n2 += i4.getWidth(), r2 += n2;
            }
            return e3.right_shift += n2, e3.top_text_line += 1, true;
          }
          constructor() {
            super(), this.setAttribute("type", "Vibrato"), this.position = B.Position.RIGHT, this.render_options = { harsh: false, vibrato_width: 20, wave_height: 6, wave_width: 4, wave_girth: 2 }, this.setVibratoWidth(this.render_options.vibrato_width);
          }
          getCategory() {
            return ot.CATEGORY;
          }
          setHarsh(t3) {
            return this.render_options.harsh = t3, this;
          }
          setVibratoWidth(t3) {
            return this.render_options.vibrato_width = t3, this.setWidth(t3), this;
          }
          draw() {
            const t3 = this.checkContext();
            if (!this.note) throw new s.RERR("NoNoteForVibrato", "Can't draw vibrato without an attached note.");
            this.setRendered();
            const e3 = this.note.getModifierStartXY(B.Position.RIGHT, this.index).x + this.x_shift, i3 = this.note.getYForTopText(this.text_line) + 2;
            ot.renderVibrato(t3, e3, i3, this.render_options);
          }
          static renderVibrato(t3, e3, i3, s2) {
            const { harsh: n2, vibrato_width: r2, wave_width: o2, wave_girth: a2, wave_height: l2 } = s2, h2 = r2 / o2;
            let c2;
            if (t3.beginPath(), n2) {
              for (t3.moveTo(e3, i3 + a2 + 1), c2 = 0; c2 < h2 / 2; ++c2) t3.lineTo(e3 + o2, i3 - l2 / 2), e3 += o2, t3.lineTo(e3 + o2, i3 + l2 / 2), e3 += o2;
              for (c2 = 0; c2 < h2 / 2; ++c2) t3.lineTo(e3 - o2, i3 - l2 / 2 + a2 + 1), e3 -= o2, t3.lineTo(e3 - o2, i3 + l2 / 2 + a2 + 1), e3 -= o2;
              t3.fill();
            } else {
              for (t3.moveTo(e3, i3 + a2), c2 = 0; c2 < h2 / 2; ++c2) t3.quadraticCurveTo(e3 + o2 / 2, i3 - l2 / 2, e3 + o2, i3), e3 += o2, t3.quadraticCurveTo(e3 + o2 / 2, i3 + l2 / 2, e3 + o2, i3), e3 += o2;
              for (c2 = 0; c2 < h2 / 2; ++c2) t3.quadraticCurveTo(e3 - o2 / 2, i3 + l2 / 2 + a2, e3 - o2, i3 + a2), e3 -= o2, t3.quadraticCurveTo(e3 - o2 / 2, i3 - l2 / 2 + a2, e3 - o2, i3 + a2), e3 -= o2;
              t3.fill();
            }
          }
        }
        function at(...t3) {
          lt.DEBUG && s.L("Vex.Flow.ModifierContext", t3);
        }
        class lt {
          constructor() {
            this.modifiers = {}, this.preFormatted = false, this.postFormatted = false, this.width = 0, this.spacing = 0, this.state = { left_shift: 0, right_shift: 0, text_line: 0, top_text_line: 0 }, this.PREFORMAT = [O, F, k, U, Y, j, z, K, it, st, nt, rt, ot], this.POSTFORMAT = [O];
          }
          addModifier(t3) {
            const e3 = t3.getCategory();
            return this.modifiers[e3] || (this.modifiers[e3] = []), this.modifiers[e3].push(t3), t3.setModifierContext(this), this.preFormatted = false, this;
          }
          getModifiers(t3) {
            return this.modifiers[t3];
          }
          getWidth() {
            return this.width;
          }
          getExtraLeftPx() {
            return this.state.left_shift;
          }
          getExtraRightPx() {
            return this.state.right_shift;
          }
          getState() {
            return this.state;
          }
          getMetrics() {
            if (!this.formatted) throw new s.RERR("UnformattedModifier", "Unformatted modifier has no metrics.");
            return { width: this.state.left_shift + this.state.right_shift + this.spacing, spacing: this.spacing, extra_left_px: this.state.left_shift, extra_right_px: this.state.right_shift };
          }
          preFormat() {
            this.preFormatted || (this.PREFORMAT.forEach((t3) => {
              at("Preformatting ModifierContext: ", t3.CATEGORY), t3.format(this.getModifiers(t3.CATEGORY), this.state, this);
            }), this.width = this.state.left_shift + this.state.right_shift, this.preFormatted = true);
          }
          postFormat() {
            this.postFormatted || this.POSTFORMAT.forEach((t3) => {
              at("Postformatting ModifierContext: ", t3.CATEGORY), t3.postFormat(this.getModifiers(t3.CATEGORY), this);
            });
          }
        }
        function ht(t3, e3, i3, n2) {
          let r2 = e3;
          for (i3 += 1; i3 < t3.length; i3 += 1) {
            const e4 = t3[i3];
            if (!e4.isRest() && !e4.shouldIgnoreTicks()) {
              r2 = e4.getLineForRest();
              break;
            }
          }
          if (n2 && e3 !== r2) {
            const t4 = Math.max(e3, r2), i4 = Math.min(e3, r2);
            r2 = s.MidLine(t4, i4);
          }
          return r2;
        }
        function ct(t3, e3, i3) {
          if (!t3 || !t3.length) throw new s.RERR("BadArgument", "No voices to format");
          t3[0].getTotalTicks();
          const r2 = t3.reduce((t4, e4) => {
            if (e4.getMode() === T.Mode.STRICT && !e4.isComplete()) throw new s.RERR("IncompleteVoice", "Voice does not have enough notes.");
            return Math.max(t4, n.LCM(t4, e4.getResolutionMultiplier()));
          }, 1), o2 = {}, a2 = [], l2 = [];
          return t3.forEach((t4) => {
            const s2 = new n(0, r2);
            t4.getTickables().forEach((t5) => {
              const n2 = s2.numerator;
              if (!o2[n2]) {
                const t6 = new e3();
                l2.push(t6), o2[n2] = t6;
              }
              i3(t5, o2[n2]), a2.push(n2), s2.add(t5.getTicks());
            });
          }), { map: o2, array: l2, list: s.SortAndUnique(a2, (t4, e4) => t4 - e4, (t4, e4) => t4 === e4), resolutionMultiplier: r2 };
        }
        class ut {
          static SimpleFormat(t3, e3 = 0, { paddingBetween: i3 = 10 } = {}) {
            t3.reduce((t4, e4) => {
              e4.addToModifierContext(new lt());
              const s2 = new q().addTickable(e4).preFormat(), n2 = s2.getExtraPx();
              return s2.setX(t4 + n2.left), t4 + s2.getWidth() + n2.right + i3;
            }, e3);
          }
          static plotDebugging(t3, e3, i3, s2, n2) {
            const r2 = i3 + R.STAVEPADDING, o2 = e3.contextGaps;
            t3.save(), t3.setFont("Arial", 8, ""), o2.gaps.forEach((e4) => {
              var i4, o3, a2;
              i4 = r2 + e4.x1, o3 = r2 + e4.x2, a2 = "#aaa", t3.beginPath(), t3.setStrokeStyle(a2), t3.setFillStyle(a2), t3.setLineWidth(1), t3.fillRect(i4, s2, o3 - i4, n2 - s2), t3.fillText(Math.round(e4.x2 - e4.x1), r2 + e4.x1, n2 + 12);
            }), t3.fillText(Math.round(o2.total) + "px", r2 - 20, n2 + 12), t3.setFillStyle("red"), t3.fillText("Loss: " + e3.lossHistory.map((t4) => Math.round(t4)), r2 - 20, n2 + 22), t3.restore();
          }
          static FormatAndDraw(t3, e3, i3, n2) {
            const r2 = { auto_beam: false, align_rests: false };
            "object" == typeof n2 ? s.Merge(r2, n2) : "boolean" == typeof n2 && (r2.auto_beam = n2);
            const o2 = new T(m.TIME4_4).setMode(T.Mode.SOFT).addTickables(i3), a2 = r2.auto_beam ? P.applyAndGetBeams(o2) : [];
            return new ut().joinVoices([o2], { align_rests: r2.align_rests }).formatToStave([o2], e3, { align_rests: r2.align_rests, stave: e3 }), o2.setStave(e3).draw(t3, e3), a2.forEach((e4) => e4.setContext(t3).draw()), o2.getBoundingBox();
          }
          static FormatAndDrawTab(t3, e3, i3, n2, r2, o2, a2) {
            const l2 = { auto_beam: o2, align_rests: false };
            "object" == typeof a2 ? s.Merge(l2, a2) : "boolean" == typeof a2 && (l2.auto_beam = a2);
            const h2 = new T(m.TIME4_4).setMode(T.Mode.SOFT).addTickables(r2), c2 = new T(m.TIME4_4).setMode(T.Mode.SOFT).addTickables(n2), u2 = l2.auto_beam ? P.applyAndGetBeams(h2) : [];
            new ut().joinVoices([h2], { align_rests: l2.align_rests }).joinVoices([c2]).formatToStave([h2, c2], i3, { align_rests: l2.align_rests }), h2.draw(t3, i3), c2.draw(t3, e3), u2.forEach((e4) => e4.setContext(t3).draw()), new A(i3, e3).setContext(t3).draw();
          }
          static AlignRestsToNotes(t3, e3, i3) {
            return t3.forEach((s2, n2) => {
              if (s2 instanceof O && s2.isRest()) {
                if (s2.tuplet && !i3) return;
                const r2 = s2.getGlyph().position.toUpperCase();
                if ("R/4" !== r2 && "B/4" !== r2) return;
                if (e3 || null != s2.beam) {
                  const e4 = s2.getKeyProps()[0];
                  if (0 === n2) e4.line = ht(t3, e4.line, n2, false), s2.setKeyLine(0, e4.line);
                  else if (n2 > 0 && n2 < t3.length) {
                    let i4;
                    const r3 = t3[n2 - 1];
                    r3.isRest() && r3.getKeyProps ? (i4 = r3.getKeyProps()[0].line, e4.line = i4) : (i4 = r3.getLineForRest(), e4.line = ht(t3, i4, n2, true)), s2.setKeyLine(0, e4.line);
                  }
                }
              }
            }), this;
          }
          constructor() {
            this.minTotalWidth = 0, this.hasMinTotalWidth = false, this.totalTicks = new n(0, 1), this.tickContexts = null, this.modiferContexts = null, this.contextGaps = { total: 0, gaps: [] }, this.voices = [];
          }
          alignRests(t3, e3) {
            if (!t3 || !t3.length) throw new s.RERR("BadArgument", "No voices to format rests");
            t3.forEach((t4) => ut.AlignRestsToNotes(t4.getTickables(), e3));
          }
          preCalculateMinTotalWidth(t3) {
            if (this.hasMinTotalWidth) return this.minTotalWidth;
            if (!this.tickContexts) {
              if (!t3) throw new s.RERR("BadArgument", "'voices' required to run preCalculateMinTotalWidth");
              this.createTickContexts(t3);
            }
            const { list: e3, map: i3 } = this.tickContexts;
            return this.minTotalWidth = e3.map((t4) => {
              const e4 = i3[t4];
              return e4.preFormat(), e4.getWidth();
            }).reduce((t4, e4) => t4 + e4, 0), this.hasMinTotalWidth = true, this.minTotalWidth;
          }
          getMinTotalWidth() {
            if (!this.hasMinTotalWidth) throw new s.RERR("NoMinTotalWidth", "Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'");
            return this.minTotalWidth;
          }
          createModifierContexts(t3) {
            const e3 = ct(t3, lt, (t4, e4) => t4.addToModifierContext(e4));
            return this.modiferContexts = e3, e3;
          }
          createTickContexts(t3) {
            const e3 = ct(t3, q, (t4, e4) => e4.addTickable(t4));
            return e3.array.forEach((t4) => {
              t4.tContexts = e3.array;
            }), this.totalTicks = t3[0].getTicksUsed().clone(), this.tickContexts = e3, e3;
          }
          preFormat(t3 = 0, e3, i3, s2) {
            const n2 = this.tickContexts, { list: r2, map: o2, resolutionMultiplier: a2 } = n2;
            i3 && s2 && i3.forEach((t4) => t4.setStave(s2).preFormat());
            let l2 = 0, h2 = 0;
            const c2 = t3 / 2;
            if (this.minTotalWidth = 0, r2.forEach((t4) => {
              const i4 = o2[t4];
              e3 && i4.setContext(e3), i4.preFormat();
              const s3 = i4.getWidth();
              this.minTotalWidth += s3;
              const n3 = i4.getMetrics();
              l2 = l2 + h2 + n3.extraLeftPx, i4.setX(l2), h2 = s3 - n3.extraLeftPx;
            }), this.minTotalWidth = l2 + h2, this.hasMinTotalWidth = true, t3 <= 0) return;
            const u2 = t3 - this.minTotalWidth;
            let d2 = this.totalTicks.value();
            0 === d2 && (d2 = 1);
            const f2 = u2 / (d2 * a2);
            let m2 = 0;
            r2.forEach((t4, e4) => {
              const i4 = r2[e4 - 1] || 0, s3 = o2[t4];
              m2 += (t4 - i4) * f2, s3.setX(s3.getX() + m2), s3.getCenterAlignedTickables().forEach((t5) => {
                t5.center_x_shift = c2 - s3.getX();
              });
            }), 1 !== r2.length && (this.justifyWidth = t3, this.lossHistory = [], this.evaluate());
          }
          evaluate() {
            const t3 = this.justifyWidth;
            this.contextGaps = { total: 0, gaps: [] }, this.tickContexts.list.forEach((t4, e4) => {
              if (0 === e4) return;
              const i4 = this.tickContexts.list[e4 - 1], s2 = this.tickContexts.map[i4], n2 = this.tickContexts.map[t4], r2 = s2.getMetrics(), o2 = s2.getX() + r2.width, a2 = n2.getX(), l2 = a2 - o2;
              this.contextGaps.total += l2, this.contextGaps.gaps.push({ x1: o2, x2: a2 }), n2.getFormatterMetrics().freedom.left = l2, s2.getFormatterMetrics().freedom.right = l2;
            });
            const e3 = this.durationStats = {};
            this.voices.forEach((i4) => {
              i4.getTickables().forEach((i5, s2, n2) => {
                const r2 = i5.getTicks().clone().simplify().toString(), o2 = i5.getMetrics(), a2 = i5.getFormatterMetrics(), l2 = i5.getX() + o2.noteWidth + o2.modRightPx + o2.extraRightPx;
                let h2 = 0;
                if (s2 < n2.length - 1) {
                  const t4 = n2[s2 + 1], e4 = t4.getMetrics();
                  h2 = t4.getX() - e4.modLeftPx - e4.extraLeftPx - l2, a2.space.used = t4.getX() - i5.getX(), t4.getFormatterMetrics().freedom.left = h2;
                } else h2 = t3 - l2, a2.space.used = t3 - i5.getX();
                a2.freedom.right = h2, function(t4, i6) {
                  const s3 = e3[t4];
                  void 0 === s3 ? e3[t4] = { mean: i6, count: 1 } : (s3.count += 1, s3.mean = (s3.mean + i6) / 2);
                }(r2, a2.space.used);
              });
            });
            let i3 = 0;
            return this.voices.forEach((t4) => {
              t4.getTickables().forEach((t5) => {
                const s2 = t5.getTicks().clone().simplify().toString(), n2 = t5.getFormatterMetrics();
                n2.iterations += 1, n2.space.deviation = n2.space.used - e3[s2].mean, n2.duration = s2, n2.space.mean = e3[s2].mean, i3 += Math.pow(e3[s2].mean, 2);
              });
            }), this.totalCost = Math.sqrt(i3), this.lossHistory.push(this.totalCost), this;
          }
          tune() {
            let t3 = 0;
            return this.tickContexts.list.forEach((e3, i3, s2) => {
              const n2 = this.tickContexts.map[e3], r2 = i3 > 0 ? this.tickContexts.map[s2[i3 - 1]] : null, o2 = i3 < s2.length - 1 ? this.tickContexts.map[s2[i3 + 1]] : null;
              !function(t4, e4, i4, s3) {
                t4.setX(t4.getX() + s3), t4.getFormatterMetrics().freedom.left += s3, t4.getFormatterMetrics().freedom.right -= s3, e4 && (e4.getFormatterMetrics().freedom.right += s3), i4 && (i4.getFormatterMetrics().freedom.left -= s3);
              }(n2, r2, o2, t3);
              const a2 = -n2.getTickables().map((t4) => t4.getFormatterMetrics().space.deviation).reduce((t4, e4) => t4 + e4);
              a2 > 0 ? t3 = -Math.min(n2.getFormatterMetrics().freedom.right, Math.abs(a2)) : a2 < 0 && (t3 = o2 ? Math.min(o2.getFormatterMetrics().freedom.right, Math.abs(a2)) : 0);
              const l2 = Math.min(5, Math.abs(t3));
              t3 = t3 > 0 ? l2 : -l2;
            }), this.evaluate();
          }
          postFormat() {
            const t3 = (t4) => t4.list.forEach((e3) => t4.map[e3].postFormat());
            return t3(this.modiferContexts), t3(this.tickContexts), this;
          }
          joinVoices(t3) {
            return this.createModifierContexts(t3), this.hasMinTotalWidth = false, this;
          }
          format(t3, e3, i3) {
            const n2 = { align_rests: false, context: null, stave: null };
            return s.Merge(n2, i3), this.voices = t3, this.alignRests(t3, n2.align_rests), this.createTickContexts(t3), this.preFormat(e3, n2.context, t3, n2.stave), n2.stave && this.postFormat(), this;
          }
          formatToStave(t3, e3, i3) {
            const n2 = e3.getNoteEndX() - e3.getNoteStartX() - 10;
            !function(...t4) {
              ut.DEBUG && s.L("Vex.Flow.Formatter", t4);
            }("Formatting voices to width: ", n2);
            const r2 = { context: e3.getContext() };
            return s.Merge(r2, i3), this.format(t3, n2, r2);
          }
        }
        class dt extends l {
          static get Position() {
            return { LEFT: 1, RIGHT: 2, ABOVE: 3, BELOW: 4, BEGIN: 5, END: 6 };
          }
          constructor() {
            super(), this.setAttribute("type", "StaveModifier"), this.padding = 10, this.position = dt.Position.ABOVE, this.layoutMetrics = null;
          }
          getPosition() {
            return this.position;
          }
          setPosition(t3) {
            return this.position = t3, this;
          }
          getStave() {
            return this.stave;
          }
          setStave(t3) {
            return this.stave = t3, this;
          }
          getWidth() {
            return this.width;
          }
          setWidth(t3) {
            return this.width = t3, this;
          }
          getX() {
            return this.x;
          }
          setX(t3) {
            return this.x = t3, this;
          }
          getCategory() {
            return "";
          }
          makeSpacer(t3) {
            return { getContext: () => true, setStave() {
            }, renderToStave() {
            }, getMetrics: () => ({ width: t3 }) };
          }
          placeGlyphOnLine(t3, e3, i3) {
            t3.setYShift(e3.getYForLine(i3) - e3.getYForGlyphs());
          }
          getPadding(t3) {
            return void 0 !== t3 && t3 < 2 ? 0 : this.padding;
          }
          setPadding(t3) {
            return this.padding = t3, this;
          }
          setLayoutMetrics(t3) {
            return this.layoutMetrics = t3, this;
          }
          getLayoutMetrics() {
            return this.layoutMetrics;
          }
        }
        class ft extends dt {
          static get CATEGORY() {
            return "barlines";
          }
          static get type() {
            return { SINGLE: 1, DOUBLE: 2, END: 3, REPEAT_BEGIN: 4, REPEAT_END: 5, REPEAT_BOTH: 6, NONE: 7 };
          }
          static get typeString() {
            return { single: ft.type.SINGLE, double: ft.type.DOUBLE, end: ft.type.END, repeatBegin: ft.type.REPEAT_BEGIN, repeatEnd: ft.type.REPEAT_END, repeatBoth: ft.type.REPEAT_BOTH, none: ft.type.NONE };
          }
          constructor(t3) {
            super(), this.setAttribute("type", "Barline"), this.thickness = m.STAVE_LINE_THICKNESS;
            const e3 = ft.type;
            this.widths = {}, this.widths[e3.SINGLE] = 5, this.widths[e3.DOUBLE] = 5, this.widths[e3.END] = 5, this.widths[e3.REPEAT_BEGIN] = 5, this.widths[e3.REPEAT_END] = 5, this.widths[e3.REPEAT_BOTH] = 5, this.widths[e3.NONE] = 5, this.paddings = {}, this.paddings[e3.SINGLE] = 0, this.paddings[e3.DOUBLE] = 0, this.paddings[e3.END] = 0, this.paddings[e3.REPEAT_BEGIN] = 15, this.paddings[e3.REPEAT_END] = 15, this.paddings[e3.REPEAT_BOTH] = 15, this.paddings[e3.NONE] = 0, this.layoutMetricsMap = {}, this.layoutMetricsMap[e3.SINGLE] = { xMin: 0, xMax: 1, paddingLeft: 5, paddingRight: 5 }, this.layoutMetricsMap[e3.DOUBLE] = { xMin: -3, xMax: 1, paddingLeft: 5, paddingRight: 5 }, this.layoutMetricsMap[e3.END] = { xMin: -5, xMax: 1, paddingLeft: 5, paddingRight: 5 }, this.layoutMetricsMap[e3.REPEAT_END] = { xMin: -10, xMax: 1, paddingLeft: 5, paddingRight: 5 }, this.layoutMetricsMap[e3.REPEAT_BEGIN] = { xMin: -2, xMax: 10, paddingLeft: 5, paddingRight: 5 }, this.layoutMetricsMap[e3.REPEAT_BOTH] = { xMin: -10, xMax: 10, paddingLeft: 5, paddingRight: 5 }, this.layoutMetricsMap[e3.NONE] = { xMin: 0, xMax: 0, paddingLeft: 5, paddingRight: 5 }, this.setPosition(dt.Position.BEGIN), this.setType(t3);
          }
          getCategory() {
            return ft.CATEGORY;
          }
          getType() {
            return this.type;
          }
          setType(t3) {
            return this.type = "string" == typeof t3 ? ft.typeString[t3] : t3, this.setWidth(this.widths[this.type]), this.setPadding(this.paddings[this.type]), this.setLayoutMetrics(this.layoutMetricsMap[this.type]), this;
          }
          draw(t3) {
            switch (t3.checkContext(), this.setRendered(), this.type) {
              case ft.type.SINGLE:
                this.drawVerticalBar(t3, this.x, false);
                break;
              case ft.type.DOUBLE:
                this.drawVerticalBar(t3, this.x, true);
                break;
              case ft.type.END:
                this.drawVerticalEndBar(t3, this.x);
                break;
              case ft.type.REPEAT_BEGIN:
                this.drawRepeatBar(t3, this.x, true), t3.getX() !== this.x && this.drawVerticalBar(t3, t3.getX());
                break;
              case ft.type.REPEAT_END:
                this.drawRepeatBar(t3, this.x, false);
                break;
              case ft.type.REPEAT_BOTH:
                this.drawRepeatBar(t3, this.x, false), this.drawRepeatBar(t3, this.x, true);
            }
          }
          drawVerticalBar(t3, e3, i3) {
            t3.checkContext();
            const s2 = t3.getTopLineTopY(), n2 = t3.getBottomLineBottomY();
            i3 && t3.context.fillRect(e3 - 3, s2, 1, n2 - s2), t3.context.fillRect(e3, s2, 1, n2 - s2);
          }
          drawVerticalEndBar(t3, e3) {
            t3.checkContext();
            const i3 = t3.getTopLineTopY(), s2 = t3.getBottomLineBottomY();
            t3.context.fillRect(e3 - 5, i3, 1, s2 - i3), t3.context.fillRect(e3 - 2, i3, 3, s2 - i3);
          }
          drawRepeatBar(t3, e3, i3) {
            t3.checkContext();
            const s2 = t3.getTopLineTopY(), n2 = t3.getBottomLineBottomY();
            let r2 = 3;
            i3 || (r2 = -5), t3.context.fillRect(e3 + r2, s2, 1, n2 - s2), t3.context.fillRect(e3 - 2, s2, 3, n2 - s2), i3 ? r2 += 4 : r2 -= 4;
            const o2 = e3 + r2 + 1;
            let a2 = (t3.getNumLines() - 1) * t3.getSpacingBetweenLines();
            a2 = a2 / 2 - t3.getSpacingBetweenLines() / 2;
            let l2 = s2 + a2 + 1;
            t3.context.beginPath(), t3.context.arc(o2, l2, 2, 0, 2 * Math.PI, false), t3.context.fill(), l2 += t3.getSpacingBetweenLines(), t3.context.beginPath(), t3.context.arc(o2, l2, 2, 0, 2 * Math.PI, false), t3.context.fill();
          }
        }
        class mt extends dt {
          static get CATEGORY() {
            return "repetitions";
          }
          static get type() {
            return { NONE: 1, CODA_LEFT: 2, CODA_RIGHT: 3, SEGNO_LEFT: 4, SEGNO_RIGHT: 5, DC: 6, DC_AL_CODA: 7, DC_AL_FINE: 8, DS: 9, DS_AL_CODA: 10, DS_AL_FINE: 11, FINE: 12, TO_CODA: 13 };
          }
          constructor(t3, e3, i3) {
            super(), this.setAttribute("type", "Repetition"), this.symbol_type = t3, this.x = e3, this.x_shift = 0, this.y_shift = i3, this.font = { family: "times", size: 12, weight: "bold italic" };
          }
          getCategory() {
            return mt.CATEGORY;
          }
          setShiftX(t3) {
            return this.x_shift = t3, this;
          }
          setShiftY(t3) {
            return this.y_shift = t3, this;
          }
          setX(t3) {
            return this.x = t3, this;
          }
          draw(t3, e3) {
            switch (this.setRendered(), this.symbol_type) {
              case mt.type.CODA_RIGHT:
                this.drawCodaFixed(t3, e3 + t3.width);
                break;
              case mt.type.CODA_LEFT:
                this.drawSymbolText(t3, e3, "Coda", true);
                break;
              case mt.type.SEGNO_LEFT:
                this.drawSignoFixed(t3, e3);
                break;
              case mt.type.SEGNO_RIGHT:
                this.drawSignoFixed(t3, e3 + t3.width);
                break;
              case mt.type.DC:
                this.drawSymbolText(t3, e3, "D.C.", false);
                break;
              case mt.type.DC_AL_CODA:
                this.drawSymbolText(t3, e3, "D.C. al", true);
                break;
              case mt.type.DC_AL_FINE:
                this.drawSymbolText(t3, e3, "D.C. al Fine", false);
                break;
              case mt.type.DS:
                this.drawSymbolText(t3, e3, "D.S.", false);
                break;
              case mt.type.DS_AL_CODA:
                this.drawSymbolText(t3, e3, "D.S. al", true);
                break;
              case mt.type.DS_AL_FINE:
                this.drawSymbolText(t3, e3, "D.S. al Fine", false);
                break;
              case mt.type.FINE:
                this.drawSymbolText(t3, e3, "Fine", false);
                break;
              case mt.type.TO_CODA:
                this.drawSymbolText(t3, e3, "To", true);
            }
            return this;
          }
          drawCodaFixed(t3, e3) {
            const i3 = t3.getYForTopText(t3.options.num_lines) + this.y_shift;
            return f.renderGlyph(t3.context, this.x + e3 + this.x_shift, i3 + 25, 40, "v4d", true), this;
          }
          drawSignoFixed(t3, e3) {
            const i3 = t3.getYForTopText(t3.options.num_lines) + this.y_shift;
            return f.renderGlyph(t3.context, this.x + e3 + this.x_shift, i3 + 25, 30, "v8c", true), this;
          }
          drawSymbolText(t3, e3, i3, s2) {
            const n2 = t3.checkContext();
            n2.save(), n2.setFont(this.font.family, this.font.size, this.font.weight);
            let r2 = 0 + this.x_shift, o2 = e3 + this.x_shift;
            if (this.symbol_type === mt.type.CODA_LEFT ? (r2 = this.x + this.x_shift, o2 = r2 + n2.measureText(i3).width + 12) : (this.x_shift = -(r2 + n2.measureText(i3).width + 12 + t3.options.vertical_bar_width + 12), r2 = this.x + this.x_shift + t3.options.vertical_bar_width, o2 = r2 + n2.measureText(i3).width + 12), this.xShiftAsPercentOfStaveWidth) {
              const e4 = t3.width * this.xShiftAsPercentOfStaveWidth;
              this.symbol_type !== mt.type.DC_AL_FINE && this.symbol_type !== mt.type.FINE && this.symbol_type !== mt.type.DC && this.symbol_type !== mt.type.DS_AL_FINE && this.symbol_type !== mt.type.DS && this.symbol_type !== mt.type.FINE || (r2 += e4);
            }
            const a2 = t3.getYForTopText(t3.options.num_lines) + this.y_shift + 25;
            return s2 && f.renderGlyph(n2, o2, a2, 40, "v4d", true), n2.fillText(i3, r2, a2 + 5), n2.restore(), this;
          }
        }
        class pt extends dt {
          static get CATEGORY() {
            return "stavesection";
          }
          constructor(t3, e3, i3) {
            super(), this.setAttribute("type", "StaveSection"), this.setWidth(16), this.section = t3, this.x = e3, this.shift_x = 0, this.shift_y = i3, this.font = { family: "sans-serif", size: 12, weight: "bold" };
          }
          getCategory() {
            return pt.CATEGORY;
          }
          setStaveSection(t3) {
            return this.section = t3, this;
          }
          setShiftX(t3) {
            return this.shift_x = t3, this;
          }
          setShiftY(t3) {
            return this.shift_y = t3, this;
          }
          draw(t3, e3) {
            const i3 = t3.checkContext();
            this.setRendered(), i3.save(), i3.lineWidth = 2, i3.setFont(this.font.family, this.font.size, this.font.weight);
            const s2 = i3.measureText("" + this.section), n2 = s2.width;
            let r2 = s2.height;
            !r2 && s2.emHeightAscent >= 0 && (r2 = s2.emHeightAscent + 2), r2 || (r2 = s2.fontBoundingBoxAscent + 3);
            let o2 = n2 + 6;
            o2 < 18 && (o2 = 18);
            const a2 = r2 + this.font.size / 10, l2 = t3.getYForTopText(3) + 19 - 1.15 * a2 + this.shift_y;
            let h2 = this.x + e3;
            return i3.beginPath(), i3.lineWidth = 2, i3.rect(h2, l2 + r2 / 4, o2, a2), i3.stroke(), h2 += (o2 - n2) / 2, i3.fillText("" + this.section, h2, l2 + a2), i3.restore(), this;
          }
        }
        class gt extends dt {
          static get CATEGORY() {
            return "stavetempo";
          }
          constructor(t3, e3, i3) {
            super(), this.setAttribute("type", "StaveTempo"), this.tempo = t3, this.position = B.Position.ABOVE, this.x = e3, this.shift_x = 10, this.shift_y = i3, this.font = { family: "times", size: 14, weight: "bold" }, this.render_options = { glyph_font_scale: 30 };
          }
          getCategory() {
            return gt.CATEGORY;
          }
          setTempo(t3) {
            return this.tempo = t3, this;
          }
          setShiftX(t3) {
            return this.shift_x = t3, this;
          }
          setShiftY(t3) {
            return this.shift_y = t3, this;
          }
          draw(t3, e3) {
            const i3 = t3.checkContext();
            this.setRendered();
            const s2 = this.render_options, n2 = s2.glyph_font_scale / 38, r2 = this.tempo.name, o2 = this.tempo.duration, a2 = this.tempo.dots, l2 = this.tempo.bpm, h2 = this.font;
            let c2 = this.x + this.shift_x + e3;
            const u2 = t3.getYForTopText(1) + this.shift_y;
            if (i3.save(), r2 && (i3.setFont(h2.family, h2.size, h2.weight), i3.fillText(r2, c2, u2), c2 += i3.measureText(r2).width), o2 && l2) {
              i3.setFont(h2.family, h2.size, "normal"), r2 && (c2 += i3.measureText(" ").width, i3.fillText("(", c2, u2), c2 += i3.measureText("(").width);
              const t4 = m.getGlyphProps(o2);
              if (c2 += 3 * n2, f.renderGlyph(i3, c2, u2, s2.glyph_font_scale, t4.code_head), c2 += t4.getWidth() * n2, t4.stem) {
                let e4 = 30;
                t4.beam_count && (e4 += 3 * (t4.beam_count - 1)), e4 *= n2;
                const r3 = u2 - e4;
                i3.fillRect(c2 - n2, r3, n2, e4), t4.flag && (f.renderGlyph(i3, c2, r3, s2.glyph_font_scale, t4.code_flag_upstem), a2 || (c2 += 6 * n2));
              }
              for (let t5 = 0; t5 < a2; t5++) c2 += 6 * n2, i3.beginPath(), i3.arc(c2, u2 + 2 * n2, 2 * n2, 0, 2 * Math.PI, false), i3.fill();
              i3.fillText(" = " + l2 + (r2 ? ")" : ""), c2 + 3 * n2, u2);
            }
            return i3.restore(), this;
          }
        }
        class bt extends R {
          static get Justification() {
            return { LEFT: 1, CENTER: 2, RIGHT: 3 };
          }
          static get GLYPHS() {
            return { segno: { code: "v8c", point: 40, x_shift: 0, y_shift: -10 }, tr: { code: "v1f", point: 40, x_shift: 0, y_shift: 0 }, mordent_upper: { code: "v1e", point: 40, x_shift: 0, y_shift: 0 }, mordent_lower: { code: "v45", point: 40, x_shift: 0, y_shift: 0 }, f: { code: "vba", point: 40, x_shift: 0, y_shift: 0 }, p: { code: "vbf", point: 40, x_shift: 0, y_shift: 0 }, m: { code: "v62", point: 40, x_shift: 0, y_shift: 0 }, s: { code: "v4a", point: 40, x_shift: 0, y_shift: 0 }, z: { code: "v80", point: 40, x_shift: 0, y_shift: 0 }, coda: { code: "v4d", point: 40, x_shift: 0, y_shift: -8 }, pedal_open: { code: "v36", point: 40, x_shift: 0, y_shift: 0 }, pedal_close: { code: "v5d", point: 40, x_shift: 0, y_shift: 3 }, caesura_straight: { code: "v34", point: 40, x_shift: 0, y_shift: 2 }, caesura_curved: { code: "v4b", point: 40, x_shift: 0, y_shift: 2 }, breath: { code: "v6c", point: 40, x_shift: 0, y_shift: 0 }, tick: { code: "v6f", point: 50, x_shift: 0, y_shift: 0 }, turn: { code: "v72", point: 40, x_shift: 0, y_shift: 0 }, turn_inverted: { code: "v33", point: 40, x_shift: 0, y_shift: 0 }, mordent: { code: "v1e", point: 40, x_shift: 0, y_shift: 0 } };
          }
          constructor(t3) {
            if (super(t3), this.setAttribute("type", "TextNote"), this.text = t3.text, this.superscript = t3.superscript, this.subscript = t3.subscript, this.glyph_type = t3.glyph, this.glyph = null, this.font = { family: "Arial", size: 12, weight: "" }, t3.font && (this.font = t3.font), this.glyph_type) {
              const t4 = bt.GLYPHS[this.glyph_type];
              if (!t4) throw new s.RERR("Invalid glyph type: " + this.glyph_type);
              this.glyph = new f(t4.code, t4.point, { cache: false }), t4.width ? this.setWidth(t4.width) : this.setWidth(this.glyph.getMetrics().width), this.glyph_struct = t4;
            } else this.setWidth(m.textWidth(this.text));
            this.line = t3.line || 0, this.smooth = t3.smooth || false, this.ignore_ticks = t3.ignore_ticks || false, this.justification = bt.Justification.LEFT;
          }
          setJustification(t3) {
            return this.justification = t3, this;
          }
          setLine(t3) {
            return this.line = t3, this;
          }
          preFormat() {
            this.checkContext(), this.preFormatted || (this.smooth ? this.setWidth(0) : this.glyph || this.setWidth(this.context.measureText(this.text).width), this.justification === bt.Justification.CENTER ? this.extraLeftPx = this.width / 2 : this.justification === bt.Justification.RIGHT && (this.extraLeftPx = this.width), this.setPreFormatted(true));
          }
          draw() {
            if (this.checkContext(), !this.stave) throw new s.RERR("NoStave", "Can't draw without a stave.");
            this.setRendered();
            const t3 = this.context;
            let e3, i3 = this.getAbsoluteX();
            if (this.justification === bt.Justification.CENTER ? i3 -= this.getWidth() / 2 : this.justification === bt.Justification.RIGHT && (i3 -= this.getWidth()), this.glyph) e3 = this.stave.getYForLine(this.line + -3), this.glyph.render(this.context, i3 + this.glyph_struct.x_shift, e3 + this.glyph_struct.y_shift);
            else {
              e3 = this.stave.getYForLine(this.line + -3), this.applyStyle(t3), t3.setFont(this.font.family, this.font.size, this.font.weight), t3.fillText(this.text, i3, e3);
              const s2 = t3.measureText("M").width, n2 = t3.measureText(this.text).width;
              this.superscript && (t3.setFont(this.font.family, this.font.size / 1.3, this.font.weight), t3.fillText(this.superscript, i3 + n2 + 2, e3 - s2 / 2.2)), this.subscript && (t3.setFont(this.font.family, this.font.size / 1.3, this.font.weight), t3.fillText(this.subscript, i3 + n2 + 2, e3 + s2 / 2.2 - 1)), this.restoreStyle(t3);
            }
          }
        }
        class St extends dt {
          static get CATEGORY() {
            return "stavetext";
          }
          constructor(t3, e3, i3) {
            super(), this.setAttribute("type", "StaveText"), this.setWidth(16), this.text = t3, this.position = e3, this.options = { shift_x: 0, shift_y: 0, justification: bt.Justification.CENTER }, s.Merge(this.options, i3), this.font = { family: "times", size: 16, weight: "normal" };
          }
          getCategory() {
            return St.CATEGORY;
          }
          setStaveText(t3) {
            return this.text = t3, this;
          }
          setShiftX(t3) {
            return this.shift_x = t3, this;
          }
          setShiftY(t3) {
            return this.shift_y = t3, this;
          }
          setFont(t3) {
            s.Merge(this.font, t3);
          }
          setText(t3) {
            this.text = t3;
          }
          draw(t3) {
            const e3 = t3.checkContext();
            this.setRendered(), e3.save(), e3.lineWidth = 2, e3.setFont(this.font.family, this.font.size, this.font.weight);
            const i3 = e3.measureText("" + this.text).width;
            let n2, r2;
            const o2 = dt.Position, a2 = bt.Justification;
            switch (this.position) {
              case o2.LEFT:
              case o2.RIGHT:
                r2 = (t3.getYForLine(0) + t3.getBottomLineY()) / 2 + this.options.shift_y, n2 = this.position === o2.LEFT ? t3.getX() - i3 - 24 + this.options.shift_x : t3.getX() + t3.getWidth() + 24 + this.options.shift_x;
                break;
              case o2.ABOVE:
              case o2.BELOW:
                n2 = t3.getX() + this.options.shift_x, this.options.justification === a2.CENTER ? n2 += t3.getWidth() / 2 - i3 / 2 : this.options.justification === a2.RIGHT && (n2 += t3.getWidth() - i3), r2 = this.position === o2.ABOVE ? t3.getYForTopText(2) + this.options.shift_y : t3.getYForBottomText(2) + this.options.shift_y;
                break;
              default:
                throw new s.RERR("InvalidPosition", "Value Must be in Modifier.Position.");
            }
            return e3.fillText("" + this.text, n2, r2 + 4), e3.restore(), this;
          }
        }
        class yt extends dt {
          static get CATEGORY() {
            return "clefs";
          }
          static get types() {
            return { treble: { code: "v83", line: 3 }, bass: { code: "v79", line: 1 }, alto: { code: "vad", line: 2 }, tenor: { code: "vad", line: 1 }, percussion: { code: "v59", line: 2 }, soprano: { code: "vad", line: 4 }, "mezzo-soprano": { code: "vad", line: 3 }, "baritone-c": { code: "vad", line: 0 }, "baritone-f": { code: "v79", line: 2 }, subbass: { code: "v79", line: 0 }, french: { code: "v83", line: 4 }, tab: { code: "v2f" } };
          }
          static get sizes() {
            return { default: { point: 40, width: 26 }, small: { point: 32, width: 20 } };
          }
          static get annotations() {
            return { "8va": { code: "v8", sizes: { default: { point: 20, attachments: { treble: { line: -1.2, x_shift: 11 } } }, small: { point: 18, attachments: { treble: { line: -0.4, x_shift: 8 } } } } }, "8vb": { code: "v8", sizes: { default: { point: 20, attachments: { treble: { line: 6.3, x_shift: 10 }, bass: { line: 4, x_shift: 1 } } }, small: { point: 18, attachments: { treble: { line: 5.8, x_shift: 6 }, bass: { line: 3.5, x_shift: 0.5 } } } } } };
          }
          constructor(t3, e3, i3) {
            super(), this.setAttribute("type", "Clef"), this.setPosition(dt.Position.BEGIN), this.setType(t3, e3, i3), this.setWidth(yt.sizes[this.size].width), function(...t4) {
              yt.DEBUG && s.L("Vex.Flow.Clef", t4);
            }("Creating clef:", t3);
          }
          getCategory() {
            return yt.CATEGORY;
          }
          setType(t3, e3, i3) {
            if (this.type = t3, this.clef = yt.types[t3], this.size = void 0 === e3 ? "default" : e3, this.clef.point = yt.sizes[this.size].point, this.glyph = new f(this.clef.code, this.clef.point), void 0 !== i3) {
              const t4 = yt.annotations[i3];
              this.annotation = { code: t4.code, point: t4.sizes[this.size].point, line: t4.sizes[this.size].attachments[this.type].line, x_shift: t4.sizes[this.size].attachments[this.type].x_shift }, this.attachment = new f(this.annotation.code, this.annotation.point), this.attachment.metrics.x_max = 0, this.attachment.setXShift(this.annotation.x_shift);
            } else this.annotation = void 0;
            return this;
          }
          getWidth() {
            if ("tab" === this.type && !this.stave) throw new s.RERR("ClefError", "Can't get width without stave.");
            return this.width;
          }
          setStave(t3) {
            if (this.stave = t3, "tab" !== this.type) return this;
            let e3, i3;
            const n2 = this.stave.getOptions().num_lines;
            switch (n2) {
              case 8:
                e3 = 55, i3 = 14;
                break;
              case 7:
                e3 = 47, i3 = 8;
                break;
              case 6:
                e3 = 40, i3 = 1;
                break;
              case 5:
                e3 = 30, i3 = -6;
                break;
              case 4:
                e3 = 23, i3 = -12;
                break;
              case 3:
                e3 = 16, i3 = -18;
                break;
              default:
                throw new s.RERR("ClefError", `Invalid number of lines: ${n2}`);
            }
            return this.glyph.setPoint(e3), this.glyph.setYShift(i3), this;
          }
          draw() {
            if (!this.x) throw new s.RERR("ClefError", "Can't draw clef without x.");
            if (!this.stave) throw new s.RERR("ClefError", "Can't draw clef without stave.");
            this.setRendered(), this.glyph.setStave(this.stave), this.glyph.setContext(this.stave.context), void 0 !== this.clef.line && this.placeGlyphOnLine(this.glyph, this.stave, this.clef.line), this.stave.context.openGroup("clef"), this.glyph.renderToStave(this.x), void 0 !== this.annotation && (this.placeGlyphOnLine(this.attachment, this.stave, this.annotation.line), this.attachment.setStave(this.stave), this.attachment.setContext(this.stave.context), this.attachment.renderToStave(this.x)), this.stave.context.closeGroup();
          }
        }
        class Et extends dt {
          static get CATEGORY() {
            return "keysignatures";
          }
          static get accidentalSpacing() {
            return { "#": { above: 6, below: 4 }, b: { above: 4, below: 7 }, n: { above: 4, below: 1 }, "##": { above: 6, below: 4 }, bb: { above: 4, below: 7 }, db: { above: 4, below: 7 }, d: { above: 4, below: 7 }, bbs: { above: 4, below: 7 }, "++": { above: 6, below: 4 }, "+": { above: 6, below: 4 }, "+-": { above: 6, below: 4 }, "++-": { above: 6, below: 4 }, bs: { above: 4, below: 10 }, bss: { above: 4, below: 10 } };
          }
          constructor(t3, e3, i3) {
            super(), this.setAttribute("type", "KeySignature"), this.setKeySig(t3, e3, i3), this.setPosition(dt.Position.BEGIN), this.glyphFontScale = 38, this.glyphs = [], this.xPositions = [], this.paddingForced = false;
          }
          getCategory() {
            return Et.CATEGORY;
          }
          convertToGlyph(t3, e3) {
            const i3 = m.accidentalCodes(t3.type), s2 = new f(i3.code, this.glyphFontScale);
            let n2 = 1;
            if ("n" === t3.type && e3) {
              const i4 = Et.accidentalSpacing[e3.type];
              i4 && (n2 = e3.line >= t3.line ? i4.above : i4.below);
            }
            this.placeGlyphOnLine(s2, this.stave, t3.line), this.glyphs.push(s2);
            const r2 = this.xPositions[this.xPositions.length - 1], o2 = s2.getMetrics().width + n2;
            this.xPositions.push(r2 + o2), this.width += o2;
          }
          cancelKey(t3) {
            return this.formatted = false, this.cancelKeySpec = t3, this;
          }
          convertToCancelAccList(t3) {
            const e3 = m.keySignature(t3), i3 = this.accList.length > 0 && e3.length > 0 && e3[0].type !== this.accList[0].type, s2 = i3 ? e3.length : e3.length - this.accList.length;
            if (s2 < 1) return;
            const n2 = [];
            for (let t4 = 0; t4 < s2; t4++) {
              let r2 = t4;
              i3 || (r2 = e3.length - s2 + t4);
              const o2 = e3[r2];
              n2.push({ type: "n", line: o2.line });
            }
            return this.accList = n2.concat(this.accList), { accList: n2, type: e3[0].type };
          }
          addToStave(t3) {
            return this.paddingForced = true, t3.addModifier(this), this;
          }
          convertAccLines(t3, e3, i3 = this.accList) {
            let s2, n2, r2 = 0;
            switch (t3) {
              case "soprano":
                "#" === e3 ? s2 = [2.5, 0.5, 2, 0, 1.5, -0.5, 1] : r2 = -1;
                break;
              case "mezzo-soprano":
                "b" === e3 ? s2 = [0, 2, 0.5, 2.5, 1, 3, 1.5] : r2 = 1.5;
                break;
              case "alto":
                r2 = 0.5;
                break;
              case "tenor":
                "#" === e3 ? s2 = [3, 1, 2.5, 0.5, 2, 0, 1.5] : r2 = -0.5;
                break;
              case "baritone-f":
              case "baritone-c":
                "b" === e3 ? s2 = [0.5, 2.5, 1, 3, 1.5, 3.5, 2] : r2 = 2;
                break;
              case "bass":
              case "french":
                r2 = 1;
            }
            if (void 0 !== s2) for (n2 = 0; n2 < i3.length; ++n2) i3[n2].line = s2[n2];
            else if (0 !== r2) for (n2 = 0; n2 < i3.length; ++n2) i3[n2].line += r2;
          }
          getPadding(t3) {
            return this.formatted || this.format(), 0 === this.glyphs.length || !this.paddingForced && t3 < 2 ? 0 : this.padding;
          }
          getWidth() {
            return this.formatted || this.format(), this.width;
          }
          setKeySig(t3, e3, i3) {
            return this.formatted = false, this.keySpec = t3, this.cancelKeySpec = e3, this.alterKeySpec = i3, this;
          }
          alterKey(t3) {
            return this.formatted = false, this.alterKeySpec = t3, this;
          }
          convertToAlterAccList(t3) {
            const e3 = Math.min(t3.length, this.accList.length);
            for (let i3 = 0; i3 < e3; ++i3) t3[i3] && (this.accList[i3].type = t3[i3]);
          }
          format() {
            if (!this.stave) throw new s.RERR("KeySignatureError", "Can't draw key signature without stave.");
            this.width = 0, this.glyphs = [], this.xPositions = [0], this.accList = m.keySignature(this.keySpec);
            const t3 = this.accList, e3 = t3.length > 0 ? t3[0].type : null;
            let i3;
            if (this.cancelKeySpec && (i3 = this.convertToCancelAccList(this.cancelKeySpec)), this.alterKeySpec && this.convertToAlterAccList(this.alterKeySpec), this.accList.length > 0) {
              const s2 = (this.position === dt.Position.END ? this.stave.endClef : this.stave.clef) || this.stave.clef;
              i3 && this.convertAccLines(s2, i3.type, i3.accList), this.convertAccLines(s2, e3, t3);
              for (let t4 = 0; t4 < this.accList.length; ++t4) this.convertToGlyph(this.accList[t4], this.accList[t4 + 1]);
            }
            this.formatted = true;
          }
          draw() {
            if (!this.x) throw new s.RERR("KeySignatureError", "Can't draw key signature without x.");
            if (!this.stave) throw new s.RERR("KeySignatureError", "Can't draw key signature without stave.");
            if (this.formatted || this.format(), this.setRendered(), this.glyphs.length > 0) {
              const t3 = this.stave.context.openGroup("keysignature");
              for (let t4 = 0; t4 < this.glyphs.length; t4++) {
                const e3 = this.glyphs[t4], i3 = this.x + this.xPositions[t4];
                e3.setStave(this.stave), e3.setContext(this.stave.context), e3.renderToStave(i3);
              }
              this.hidden && t3 && t3.setAttribute("visibility", "hidden"), this.stave.context.closeGroup();
            }
          }
        }
        class xt extends dt {
          static get CATEGORY() {
            return "timesignatures";
          }
          static get glyphs() {
            return { C: { code: "v41", point: 40, line: 2 }, "C|": { code: "vb6", point: 40, line: 2 } };
          }
          constructor(t3 = null, e3 = 15, i3 = true) {
            if (super(), this.setAttribute("type", "TimeSignature"), this.validate_args = i3, null === t3) return;
            const s2 = e3;
            this.point = 40, this.topLine = 2, this.bottomLine = 4, this.setPosition(dt.Position.BEGIN), this.setTimeSig(t3), this.setWidth(this.timeSig.glyph.getMetrics().width), this.setPadding(s2);
          }
          getCategory() {
            return xt.CATEGORY;
          }
          parseTimeSpec(t3) {
            if ("C" === t3 || "C|" === t3) {
              const { line: e4, code: i4, point: s2 } = xt.glyphs[t3];
              return { line: e4, num: false, glyph: new f(i4, s2) };
            }
            this.validate_args && ((t4) => {
              const e4 = t4.split("/").filter((t5) => "" !== t5);
              if (2 !== e4.length) throw new s.RERR("BadTimeSignature", `Invalid time spec: ${t4}. Must be in the form "<numerator>/<denominator>"`);
              e4.forEach((e5) => {
                if (isNaN(Number(e5))) throw new s.RERR("BadTimeSignature", `Invalid time spec: ${t4}. Must contain two valid numbers.`);
              });
            })(t3);
            const [e3, i3] = t3.split("/").map((t4) => t4.split(""));
            return { num: true, glyph: this.makeTimeSignatureGlyph(e3, i3) };
          }
          makeTimeSignatureGlyph(t3, e3) {
            const i3 = new f("v0", this.point);
            i3.topGlyphs = [], i3.botGlyphs = [];
            let s2 = 0;
            for (let e4 = 0; e4 < t3.length; ++e4) {
              const n3 = t3[e4], r3 = new f("v" + n3, this.point);
              i3.topGlyphs.push(r3), s2 += r3.getMetrics().width;
            }
            let n2 = 0;
            for (let t4 = 0; t4 < e3.length; ++t4) {
              const s3 = e3[t4], r3 = new f("v" + s3, this.point);
              i3.botGlyphs.push(r3), n2 += r3.getMetrics().width;
            }
            const r2 = s2 > n2 ? s2 : n2, o2 = i3.getMetrics().x_min;
            i3.getMetrics = () => ({ x_min: o2, x_max: o2 + r2, width: r2 });
            const a2 = (r2 - s2) / 2, l2 = (r2 - n2) / 2, h2 = this;
            return i3.renderToStave = function(t4) {
              let e4 = t4 + a2;
              for (let t5 = 0; t5 < this.topGlyphs.length; ++t5) {
                const i4 = this.topGlyphs[t5];
                f.renderOutline(this.context, i4.metrics.outline, i4.scale, e4 + i4.x_shift, this.stave.getYForLine(h2.topLine)), e4 += i4.getMetrics().width;
              }
              e4 = t4 + l2;
              for (let t5 = 0; t5 < this.botGlyphs.length; ++t5) {
                const i4 = this.botGlyphs[t5];
                h2.placeGlyphOnLine(i4, this.stave, i4.line), f.renderOutline(this.context, i4.metrics.outline, i4.scale, e4 + i4.x_shift, this.stave.getYForLine(h2.bottomLine)), e4 += i4.getMetrics().width;
              }
            }, i3;
          }
          getTimeSig() {
            return this.timeSig;
          }
          setTimeSig(t3) {
            return this.timeSig = this.parseTimeSpec(t3), this;
          }
          draw() {
            if (!this.x) throw new s.RERR("TimeSignatureError", "Can't draw time signature without x.");
            if (!this.stave) throw new s.RERR("TimeSignatureError", "Can't draw time signature without stave.");
            this.setRendered(), this.timeSig.glyph.setStave(this.stave), this.timeSig.glyph.setContext(this.stave.context), this.placeGlyphOnLine(this.timeSig.glyph, this.stave, this.timeSig.line);
            const t3 = this.stave.context.openGroup("timesignature");
            this.timeSig.glyph.renderToStave(this.x), this.hidden && t3 && t3.setAttribute("visibility", "hidden"), this.stave.context.closeGroup("timesignature");
          }
        }
        class vt extends dt {
          static get CATEGORY() {
            return "voltas";
          }
          static get type() {
            return { NONE: 1, BEGIN: 2, MID: 3, END: 4, BEGIN_END: 5 };
          }
          constructor(t3, e3, i3, s2) {
            super(), this.setAttribute("type", "Volta"), this.volta = t3, this.x = i3, this.y_shift = s2, this.number = e3, this.font = { family: "sans-serif", size: 9, weight: "bold" };
          }
          getCategory() {
            return vt.CATEGORY;
          }
          setShiftY(t3) {
            return this.y_shift = t3, this;
          }
          draw(t3, e3) {
            const i3 = t3.checkContext();
            this.setRendered();
            let s2 = t3.width - e3;
            const n2 = t3.getYForTopText(t3.options.num_lines) + this.y_shift, r2 = 1.5 * t3.options.spacing_between_lines_px;
            switch (this.volta) {
              case vt.type.BEGIN:
                i3.fillRect(this.x + e3, n2, 1, r2);
                break;
              case vt.type.END:
                s2 -= 5, i3.fillRect(this.x + e3 + s2, n2, 1, r2);
                break;
              case vt.type.BEGIN_END:
                s2 -= 3, i3.fillRect(this.x + e3, n2, 1, r2), i3.fillRect(this.x + e3 + s2, n2, 1, r2);
            }
            return this.volta !== vt.type.BEGIN && this.volta !== vt.type.BEGIN_END || (i3.save(), i3.setFont(this.font.family, this.font.size, this.font.weight), i3.fillText(this.number, this.x + e3 + 5, n2 + 15), i3.restore()), i3.fillRect(this.x + e3, n2, s2, 1), this;
          }
        }
        class _t extends l {
          constructor(t3, e3, i3, n2) {
            super(), this.setAttribute("type", "Stave"), this.x = t3, this.y = e3, this.width = i3, this.formatted = false, this.setStartX(t3 + 5), this.end_x = t3 + i3, this.modifiers = [], this.measure = 0, this.clef = "treble", this.endClef = void 0, this.font = { family: "sans-serif", size: 8, weight: "" }, this.options = { vertical_bar_width: 10, glyph_spacing_px: 10, num_lines: 5, fill_style: "#999999", left_bar: true, right_bar: true, spacing_between_lines_px: 10, space_above_staff_ln: 4, space_below_staff_ln: 4, top_text_position: 1 }, this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 }, s.Merge(this.options, n2), this.resetLines();
            const r2 = ft.type;
            this.addModifier(new ft(this.options.left_bar ? r2.SINGLE : r2.NONE)), this.addEndModifier(new ft(this.options.right_bar ? r2.SINGLE : r2.NONE));
          }
          space(t3) {
            return this.options.spacing_between_lines_px * t3;
          }
          resetLines() {
            this.options.line_config = [];
            for (let t3 = 0; t3 < this.options.num_lines; t3++) this.options.line_config.push({ visible: true });
            this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px, this.options.bottom_text_position = this.options.num_lines;
          }
          formatBegModifiers(t3) {
            let e3 = 0;
            t3.forEach((t4) => {
              t4.getNoteStartX() > e3 && (e3 = t4.getNoteStartX());
            }), t3.forEach((t4) => {
              t4.setNoteStartX(e3);
            }), e3 = 0, t3.forEach((t4) => {
              t4.getModifiers(dt.Position.BEGIN, ft.CATEGORY).forEach((t5) => {
                t5.getType() == ft.type.REPEAT_BEGIN && t5.getX() > e3 && (e3 = t5.getX());
              });
            }), t3.forEach((t4) => {
              t4.getModifiers(dt.Position.BEGIN, ft.CATEGORY).forEach((t5) => {
                t5.getType() == ft.type.REPEAT_BEGIN && t5.setX(e3);
              });
            }), e3 = 0, t3.forEach((t4) => {
              t4.getModifiers(dt.Position.BEGIN, xt.CATEGORY).forEach((t5) => {
                t5.getX() > e3 && (e3 = t5.getX());
              });
            }), t3.forEach((t4) => {
              t4.getModifiers(dt.Position.BEGIN, xt.CATEGORY).forEach((t5) => {
                t5.setX(e3);
              });
            });
          }
          getOptions() {
            return this.options;
          }
          setNoteStartX(t3) {
            return this.formatted || this.format(), this.setStartX(t3), this;
          }
          setStartX(t3) {
            this.start_x = t3;
          }
          getNoteStartX() {
            return this.formatted || this.format(), this.start_x;
          }
          getNoteEndX() {
            return this.formatted || this.format(), this.end_x;
          }
          getTieStartX() {
            return this.start_x;
          }
          getTieEndX() {
            return this.x + this.width;
          }
          getX() {
            return this.x;
          }
          getNumLines() {
            return this.options.num_lines;
          }
          setNumLines(t3) {
            return this.options.num_lines = parseInt(t3, 10), this.resetLines(), this;
          }
          setY(t3) {
            return this.y = t3, this;
          }
          getTopLineTopY() {
            return this.getYForLine(0) - m.STAVE_LINE_THICKNESS / 2;
          }
          getBottomLineBottomY() {
            return this.getYForLine(this.getNumLines() - 1) + m.STAVE_LINE_THICKNESS / 2;
          }
          setX(t3) {
            const e3 = t3 - this.x;
            this.formatted = false, this.x = t3, this.start_x += e3, this.end_x += e3;
            for (let t4 = 0; t4 < this.modifiers.length; t4++) {
              const i3 = this.modifiers[t4];
              void 0 !== i3.x && (i3.x += e3);
            }
            return this;
          }
          setWidth(t3) {
            return this.formatted = false, this.width = t3, this.end_x = this.x + t3, this;
          }
          getWidth() {
            return this.width;
          }
          getStyle() {
            return { fillStyle: this.options.fill_style, strokeStyle: this.options.fill_style, lineWidth: m.STAVE_LINE_THICKNESS, ...this.style || {} };
          }
          setMeasure(t3) {
            return this.measure = t3, this;
          }
          getModifierXShift(t3 = 0) {
            if ("number" != typeof t3) throw new s.RERR("InvalidIndex", "Must be of number type");
            if (this.formatted || this.format(), 1 === this.getModifiers(dt.Position.BEGIN).length) return 0;
            let e3 = this.start_x - this.x;
            const i3 = this.modifiers[0];
            return i3.getType() === ft.type.REPEAT_BEGIN && e3 > i3.getWidth() && (e3 -= i3.getWidth()), e3;
          }
          setRepetitionTypeLeft(t3, e3) {
            return this.modifiers.push(new mt(t3, this.x, e3)), this;
          }
          setRepetitionTypeRight(t3, e3) {
            return this.modifiers.push(new mt(t3, this.x, e3)), this;
          }
          setVoltaType(t3, e3, i3) {
            return this.modifiers.push(new vt(t3, e3, this.x, i3)), this;
          }
          setSection(t3, e3, i3 = 0, s2 = 12) {
            const n2 = new pt(t3, this.x + i3, e3);
            return n2.font.size = s2, this.modifiers.push(n2), this;
          }
          setTempo(t3, e3) {
            return this.modifiers.push(new gt(t3, this.x, e3)), this;
          }
          setText(t3, e3, i3) {
            return this.modifiers.push(new St(t3, e3, i3)), this;
          }
          getHeight() {
            return this.height;
          }
          getSpacingBetweenLines() {
            return this.options.spacing_between_lines_px;
          }
          getBoundingBox() {
            return new c(this.x, this.y, this.width, this.getBottomY() - this.y);
          }
          getBottomY() {
            const t3 = this.options, e3 = t3.spacing_between_lines_px;
            return this.getYForLine(t3.num_lines) + t3.space_below_staff_ln * e3;
          }
          getBottomLineY() {
            return this.getYForLine(this.options.num_lines);
          }
          getYForLine(t3) {
            const e3 = this.options, i3 = e3.spacing_between_lines_px, s2 = e3.space_above_staff_ln;
            return this.y + t3 * i3 + s2 * i3;
          }
          getLineForY(t3) {
            const e3 = this.options, i3 = e3.spacing_between_lines_px, s2 = e3.space_above_staff_ln;
            return (t3 - this.y) / i3 - s2;
          }
          getYForTopText(t3) {
            const e3 = t3 || 0;
            return this.getYForLine(-e3 - this.options.top_text_position);
          }
          getYForBottomText(t3) {
            const e3 = t3 || 0;
            return this.getYForLine(this.options.bottom_text_position + e3);
          }
          getYForNote(t3) {
            const e3 = this.options, i3 = e3.spacing_between_lines_px, s2 = e3.space_above_staff_ln;
            return this.y + s2 * i3 + 5 * i3 - t3 * i3;
          }
          getYForGlyphs() {
            return this.getYForLine(3);
          }
          addModifier(t3, e3) {
            return void 0 !== e3 && t3.setPosition(e3), t3.setStave(this), this.formatted = false, this.modifiers.push(t3), this;
          }
          addEndModifier(t3) {
            return this.addModifier(t3, dt.Position.END), this;
          }
          setBegBarType(t3) {
            const { SINGLE: e3, REPEAT_BEGIN: i3, NONE: s2 } = ft.type;
            return t3 !== e3 && t3 !== i3 && t3 !== s2 || (this.modifiers[0].setType(t3), this.formatted = false), this;
          }
          setEndBarType(t3) {
            return t3 !== ft.type.REPEAT_BEGIN && (this.modifiers[1].setType(t3), this.formatted = false), this;
          }
          setClef(t3, e3, i3, s2) {
            void 0 === s2 && (s2 = dt.Position.BEGIN), s2 === dt.Position.END ? this.endClef = t3 : this.clef = t3;
            const n2 = this.getModifiers(s2, yt.CATEGORY);
            return 0 === n2.length ? this.addClef(t3, e3, i3, s2) : n2[0].setType(t3, e3, i3), this;
          }
          setEndClef(t3, e3, i3) {
            return this.setClef(t3, e3, i3, dt.Position.END), this;
          }
          setKeySignature(t3, e3, i3) {
            void 0 === i3 && (i3 = dt.Position.BEGIN);
            const s2 = this.getModifiers(i3, Et.CATEGORY);
            return 0 === s2.length ? this.addKeySignature(t3, e3, i3) : s2[0].setKeySig(t3, e3), this;
          }
          setEndKeySignature(t3, e3) {
            return this.setKeySignature(t3, e3, dt.Position.END), this;
          }
          setTimeSignature(t3, e3, i3) {
            void 0 === i3 && (i3 = dt.Position.BEGIN);
            const s2 = this.getModifiers(i3, xt.CATEGORY);
            return 0 === s2.length ? this.addTimeSignature(t3, e3, i3) : s2[0].setTimeSig(t3), this;
          }
          setEndTimeSignature(t3, e3) {
            return this.setTimeSignature(t3, e3, dt.Position.END), this;
          }
          addKeySignature(t3, e3, i3) {
            return void 0 === i3 && (i3 = dt.Position.BEGIN), this.addModifier(new Et(t3, e3).setPosition(i3), i3), this;
          }
          addClef(t3, e3, i3, s2) {
            return void 0 === s2 || s2 === dt.Position.BEGIN ? this.clef = t3 : s2 === dt.Position.END && (this.endClef = t3), this.addModifier(new yt(t3, e3, i3), s2), this;
          }
          addEndClef(t3, e3, i3) {
            return this.addClef(t3, e3, i3, dt.Position.END), this;
          }
          addTimeSignature(t3, e3, i3) {
            return this.addModifier(new xt(t3, e3), i3), this;
          }
          addEndTimeSignature(t3, e3) {
            return this.addTimeSignature(t3, e3, dt.Position.END), this;
          }
          addTrebleGlyph() {
            return this.addClef("treble"), this;
          }
          getModifiers(t3, e3) {
            return void 0 === t3 && void 0 === e3 ? this.modifiers : this.modifiers.filter((i3) => !(void 0 !== t3 && t3 !== i3.getPosition() || void 0 !== e3 && e3 !== i3.getCategory()));
          }
          sortByCategory(t3, e3) {
            for (let i3 = t3.length - 1; i3 >= 0; i3--) for (let s2 = 0; s2 < i3; s2++) if (e3[t3[s2].getCategory()] > e3[t3[s2 + 1].getCategory()]) {
              const e4 = t3[s2];
              t3[s2] = t3[s2 + 1], t3[s2 + 1] = e4;
            }
          }
          format() {
            const t3 = this.modifiers[0], e3 = this.modifiers[1], i3 = this.getModifiers(dt.Position.BEGIN), s2 = this.getModifiers(dt.Position.END);
            let n2, r2, o2;
            this.sortByCategory(i3, { barlines: 0, clefs: 1, keysignatures: 2, timesignatures: 3 }), this.sortByCategory(s2, { timesignatures: 0, keysignatures: 1, barlines: 2, clefs: 3 }), i3.length > 1 && t3.getType() === ft.type.REPEAT_BEGIN && (i3.push(i3.splice(0, 1)[0]), i3.splice(0, 0, new ft(ft.type.SINGLE))), s2.indexOf(e3) > 0 && s2.splice(0, 0, new ft(ft.type.NONE));
            let a2 = 0, l2 = this.x;
            for (let t4 = 0; t4 < i3.length; t4++) {
              o2 = i3[t4], r2 = o2.getPadding(t4 + a2), n2 = o2.getWidth(), isNaN(n2) && (o2.setWidth(10), n2 = 10), l2 += r2;
              const e4 = o2.getX();
              e4 > l2 ? l2 = e4 : o2.setX(l2), l2 += n2, r2 + n2 === 0 && a2--;
            }
            l2 > this.start_x && this.setStartX(l2), l2 = this.x + this.width;
            const h2 = { left: 0, right: 0, paddingRight: 0, paddingLeft: 0 };
            let c2 = 0;
            for (let t4 = 0; t4 < s2.length; t4++) {
              o2 = s2[t4], c2 = "barlines" === o2.getCategory() ? t4 : c2, h2.right = 0, h2.left = 0, h2.paddingRight = 0, h2.paddingLeft = 0;
              const e4 = o2.getLayoutMetrics();
              e4 ? (0 !== t4 && (h2.right = e4.xMax || 0, h2.paddingRight = e4.paddingRight || 0), h2.left = -e4.xMin || 0, h2.paddingLeft = e4.paddingLeft || 0, t4 === s2.length - 1 && (h2.paddingLeft = 0)) : (h2.paddingRight = o2.getPadding(t4 - c2) || 0, 0 !== t4 && (h2.right = o2.getWidth() || 0), 0 === t4 && (h2.left = o2.getWidth() || 0)), l2 -= h2.paddingRight, l2 -= h2.right, o2.setX(l2), l2 -= h2.left, l2 -= h2.paddingLeft;
            }
            this.end_x = 1 === s2.length ? this.x + this.width : l2, this.formatted = true;
          }
          draw() {
            this.checkContext(), this.setRendered(), this.formatted || this.format();
            const t3 = this.options.num_lines, e3 = this.width, i3 = this.x;
            let s2;
            for (let n2 = 0; n2 < t3; n2++) s2 = this.getYForLine(n2), this.applyStyle(), this.options.line_config[n2].visible && (this.context.beginPath(), this.context.moveTo(i3, s2), this.context.lineTo(i3 + e3, s2), this.context.stroke()), this.restoreStyle();
            for (let t4 = 0; t4 < this.modifiers.length; t4++) "function" == typeof this.modifiers[t4].draw && (this.modifiers[t4].applyStyle(this.context), this.modifiers[t4].draw(this, this.getModifierXShift(t4)), this.modifiers[t4].restoreStyle(this.context));
            if (this.measure > 0) {
              this.context.save(), this.context.setFont(this.font.family, this.font.size, this.font.weight);
              const t4 = this.context.measureText("" + this.measure).width;
              s2 = this.getYForTopText(0) + 3, this.context.fillText("" + this.measure, this.x - t4 / 2, s2), this.context.restore();
            }
            return this;
          }
          drawVertical(t3, e3) {
            this.drawVerticalFixed(this.x + t3, e3);
          }
          drawVerticalFixed(t3, e3) {
            this.checkContext();
            const i3 = this.getYForLine(0), s2 = this.getYForLine(this.options.num_lines - 1);
            e3 && this.context.fillRect(t3 - 3, i3, 1, s2 - i3 + 1), this.context.fillRect(t3, i3, 1, s2 - i3 + 1);
          }
          drawVerticalBar(t3) {
            this.drawVerticalBarFixed(this.x + t3, false);
          }
          drawVerticalBarFixed(t3) {
            this.checkContext();
            const e3 = this.getYForLine(0), i3 = this.getYForLine(this.options.num_lines - 1);
            this.context.fillRect(t3, e3, 1, i3 - e3 + 1);
          }
          getConfigForLines() {
            return this.options.line_config;
          }
          setConfigForLine(t3, e3) {
            if (t3 >= this.options.num_lines || t3 < 0) throw new s.RERR("StaveConfigError", "The line number must be within the range of the number of lines in the Stave.");
            if (void 0 === e3.visible) throw new s.RERR("StaveConfigError", "The line configuration object is missing the 'visible' property.");
            if ("boolean" != typeof e3.visible) throw new s.RERR("StaveConfigError", "The line configuration objects 'visible' property must be true or false.");
            return this.options.line_config[t3] = e3, this;
          }
          setConfigForLines(t3) {
            if (t3.length !== this.options.num_lines) throw new s.RERR("StaveConfigError", "The length of the lines configuration array must match the number of lines in the Stave");
            for (const e3 in t3) t3[e3] || (t3[e3] = this.options.line_config[e3]), s.Merge(this.options.line_config[e3], t3[e3]);
            return this.options.line_config = t3, this;
          }
        }
        class Mt extends _t {
          constructor(t3, e3, i3, n2) {
            const r2 = { spacing_between_lines_px: 13, num_lines: 6, top_text_position: 1 };
            s.Merge(r2, n2), super(t3, e3, i3, r2), this.setAttribute("type", "TabStave");
          }
          getYForGlyphs() {
            return this.getYForLine(2.5);
          }
          addTabGlyph() {
            return this.addClef("tab"), this;
          }
        }
        class wt extends I {
          static get CATEGORY() {
            return "tabnotes";
          }
          constructor(t3, e3) {
            if (super(t3), this.setAttribute("type", "TabNote"), this.ghost = false, this.positions = t3.positions, s.Merge(this.render_options, { glyph_font_scale: m.DEFAULT_TABLATURE_FONT_SCALE, draw_stem: e3, draw_dots: e3, draw_stem_through_stave: false, y_shift: 0, scale: 1, font: "10pt Arial" }), this.glyph = m.getGlyphProps(this.duration, this.noteType), !this.glyph) throw new s.RuntimeError("BadArguments", `Invalid note initialization data (No glyph found): ${JSON.stringify(t3)}`);
            this.buildStem(), t3.stem_direction ? this.setStemDirection(t3.stem_direction) : this.setStemDirection(x.UP), this.ghost = false, this.updateWidth();
          }
          reset() {
            this.stave && this.setStave(this.stave);
          }
          getCategory() {
            return wt.CATEGORY;
          }
          setGhost(t3) {
            return this.ghost = t3, this.updateWidth(), this;
          }
          hasStem() {
            return this.render_options.draw_stem;
          }
          getStemExtension() {
            const t3 = this.getGlyph();
            return null != this.stem_extension_override ? this.stem_extension_override : t3 ? 1 === this.getStemDirection() ? t3.tabnote_stem_up_extension : t3.tabnote_stem_down_extension : 0;
          }
          addDot() {
            const t3 = new F();
            return this.dots += 1, this.addModifier(t3, 0);
          }
          updateWidth() {
            this.glyphs = [], this.width = 0;
            for (let t3 = 0; t3 < this.positions.length; ++t3) {
              let e3 = this.positions[t3].fret;
              this.ghost && (e3 = "(" + e3 + ")");
              const i3 = this.render_options.fretScale ?? this.render_options.scale, s2 = m.tabToGlyph(e3, i3, this.render_options.TabUseXNoteheadAlternativeGlyph);
              "x" === e3 && (s2.isXGlyph = true), this.glyphs.push(s2), this.width = Math.max(s2.getWidth(), this.width);
            }
            this.glyph.getWidth = () => this.width;
          }
          setStave(t3) {
            let e3;
            if (super.setStave(t3), this.context = t3.context, this.context) {
              const t4 = this.context;
              for (this.width = 0, e3 = 0; e3 < this.glyphs.length; ++e3) {
                const i4 = this.glyphs[e3], s2 = "" + i4.text;
                "X" !== s2.toUpperCase() && (t4.save(), t4.setRawFont(this.render_options.font), i4.width = t4.measureText(s2).width, t4.restore(), i4.getWidth = () => i4.width), this.width = Math.max(i4.getWidth(), this.width);
              }
              this.glyph.getWidth = () => this.width;
            }
            const i3 = this.positions.map(({ str: e4 }) => t3.getYForLine(e4 - 1));
            return this.setYs(i3), this.stem && this.stem.setYBounds(this.getStemY(), this.getStemY()), this;
          }
          getPositions() {
            return this.positions;
          }
          addToModifierContext(t3) {
            this.setModifierContext(t3);
            for (let t4 = 0; t4 < this.modifiers.length; ++t4) this.modifierContext.addModifier(this.modifiers[t4]);
            return this.modifierContext.addModifier(this), this.preFormatted = false, this;
          }
          getTieRightX() {
            let t3 = this.getAbsoluteX();
            return t3 += this.glyph.getWidth() / 2, t3 += -this.width / 2 + this.width + 2, t3;
          }
          getTieLeftX() {
            let t3 = this.getAbsoluteX();
            return t3 += this.glyph.getWidth() / 2, t3 -= this.width / 2 + 2, t3;
          }
          getModifierStartXY(t3, e3) {
            if (!this.preFormatted) throw new s.RERR("UnformattedNote", "Can't call GetModifierStartXY on an unformatted note");
            if (0 === this.ys.length) throw new s.RERR("NoYValues", "No Y-Values calculated for this note.");
            let i3 = 0;
            return t3 === B.Position.LEFT ? i3 = -2 : t3 === B.Position.RIGHT ? i3 = this.width + 2 : t3 !== B.Position.BELOW && t3 !== B.Position.ABOVE || (i3 = this.glyph.getWidth() / 2), { x: this.getAbsoluteX() + i3, y: this.ys[e3] };
          }
          getLineForRest() {
            return this.positions[0].str;
          }
          preFormat() {
            this.preFormatted || (this.modifierContext && this.modifierContext.preFormat(), this.setPreFormatted(true));
          }
          getStemX() {
            return this.getCenterGlyphX();
          }
          getStemY() {
            const t3 = this.stave.getNumLines() - 0.5, e3 = x.UP === this.stem_direction ? -0.5 : t3;
            return this.stave.getYForLine(e3);
          }
          getStemExtents() {
            return this.stem.getExtents();
          }
          drawFlag() {
            const { beam: t3, glyph: e3, context: i3, stem: s2, stem_direction: n2, render_options: { draw_stem: r2, glyph_font_scale: o2 } } = this, a2 = null == t3 && r2;
            if (e3.flag && a2) {
              const t4 = this.getStemX() + 1, r3 = this.getStemY() - s2.getHeight(), a3 = n2 === x.DOWN ? e3.code_flag_downstem : e3.code_flag_upstem;
              f.renderGlyph(i3, t4, r3, o2, a3);
            }
          }
          drawModifiers() {
            this.modifiers.forEach((t3) => {
              ("dots" !== t3.getCategory() || this.render_options.draw_dots) && (t3.setContext(this.context), t3.drawWithStyle());
            });
          }
          drawStemThrough() {
            const t3 = this.getStemX(), e3 = this.getStemY(), i3 = this.context, s2 = this.render_options.draw_stem_through_stave;
            if (this.render_options.draw_stem && s2) {
              const s3 = function(t4, e4) {
                const i4 = [];
                let s4 = [];
                for (let n3 = 1; n3 <= t4; n3++) e4.indexOf(n3) > -1 ? (i4.push(s4), s4 = []) : s4.push(n3);
                return s4.length > 0 && i4.push(s4), i4;
              }(this.stave.getNumLines(), this.positions.map((t4) => t4.str)), n2 = function(t4, e4, i4, s4) {
                const n3 = 1 !== s4, r2 = -1 !== s4, o2 = i4.getSpacingBetweenLines(), a2 = i4.getNumLines(), l2 = [];
                return e4.forEach((e5) => {
                  const h2 = e5.indexOf(a2) > -1, c2 = e5.indexOf(1) > -1;
                  if (n3 && c2 || r2 && h2) return;
                  1 === e5.length && e5.push(e5[0]);
                  const u2 = [];
                  e5.forEach((e6, n4, r3) => {
                    const l3 = 1 === e6, h3 = e6 === a2;
                    let c3 = i4.getYForLine(e6 - 1);
                    0 !== n4 || l3 ? n4 !== r3.length - 1 || h3 || (c3 += o2 / 2 - 1) : c3 -= o2 / 2 - 1, u2.push(c3), 1 === s4 && l3 ? u2.push(t4 - 2) : -1 === s4 && h3 && u2.push(t4 + 2);
                  }), l2.push(u2.sort((t5, e6) => t5 - e6));
                }), l2;
              }(e3, s3, this.getStave(), this.getStemDirection());
              i3.save(), i3.setLineWidth(x.WIDTH), n2.forEach((e4) => {
                0 !== e4.length && (i3.beginPath(), i3.moveTo(t3, e4[0]), i3.lineTo(t3, e4[e4.length - 1]), i3.stroke(), i3.closePath());
              }), i3.restore();
            }
          }
          drawPositions() {
            const t3 = this.context, e3 = this.getAbsoluteX(), i3 = this.ys;
            for (let s2 = 0; s2 < this.positions.length; ++s2) {
              const n2 = i3[s2] + this.render_options.y_shift, r2 = this.glyphs[s2];
              let o2 = r2.getWidth();
              0 === o2 && r2.text && r2.text.toString() && r2.text.toString().length && (o2 = 7 * r2.text.toString().length);
              let a2 = this.glyph.getWidth();
              0 === a2 && (a2 = o2);
              const l2 = e3 + a2 / 2 - o2 / 2;
              if (this.BackgroundColor ? (t3.save(), t3.setFillStyle(this.BackgroundColor), t3.setLineWidth(0), t3.fillRect(l2 - 2, n2 - 3, o2 + 4, 6), t3.restore()) : t3.clearRect(l2 - 2, n2 - 3, o2 + 4, 6), r2.code) f.renderGlyph(t3, l2, n2, this.render_options.glyph_font_scale * this.render_options.scale, r2.code);
              else {
                t3.save(), t3.setRawFont(this.render_options.font);
                const e4 = r2.text.toString();
                t3.fillText(e4, l2, n2 + 5 * this.render_options.scale), t3.restore();
              }
            }
          }
          draw() {
            if (this.checkContext(), !this.stave) throw new s.RERR("NoStave", "Can't draw without a stave.");
            if (0 === this.ys.length) throw new s.RERR("NoYValues", "Can't draw note without Y values.");
            this.setRendered();
            const t3 = null == this.beam && this.render_options.draw_stem;
            this.context.openGroup("tabnote", this.getAttribute("id"), { pointerBBox: true }), this.drawPositions(), this.drawStemThrough();
            const e3 = this.getStemX();
            this.stem.setNoteHeadXBounds(e3, e3), t3 && (this.context.openGroup("stem", null, { pointerBBox: true }), this.stem.setContext(this.context).draw(), this.context.closeGroup()), this.drawFlag(), this.drawModifiers(), this.context.closeGroup();
          }
        }
        class Pt extends l {
          constructor(t3) {
            super(), this.setAttribute("type", "VibratoBracket"), this.start = t3.start, this.stop = t3.stop, this.line = 1, this.render_options = { harsh: false, wave_height: 6, wave_width: 4, wave_girth: 2 };
          }
          setLine(t3) {
            return this.line = t3, this;
          }
          setHarsh(t3) {
            return this.render_options.harsh = t3, this;
          }
          draw() {
            const t3 = this.context;
            this.setRendered();
            const e3 = this.start ? this.start.getStave().getYForTopText(this.line) : this.stop.getStave().getYForTopText(this.line), i3 = this.start ? this.start.getAbsoluteX() : this.stop.getStave().getTieStartX(), n2 = this.stop ? this.stop.getAbsoluteX() - this.stop.getWidth() - 5 : this.start.getStave().getTieEndX() - 10;
            this.render_options.vibrato_width = n2 - i3, function(...t4) {
              Pt.DEBUG && s.L("Vex.Flow.VibratoBracket", t4);
            }("Rendering VibratoBracket: start_x:", i3, "stop_x:", n2, "y:", e3), ot.renderVibrato(t3, i3, e3, this.render_options);
          }
        }
        let Tt;
        function Lt() {
          if (!Tt) {
            const t3 = new N({ duration: "w", note_type: "r" });
            Tt = { glyph_font_scale: t3.render_options.glyph_font_scale, glyph_code: t3.glyph_code, width: t3.getWidth() };
          }
          return Tt;
        }
        class At extends l {
          constructor(t3, e3) {
            super(), this.setAttribute("type", "MultiMeasureRest"), this.render_options = { show_number: true, number_line: -0.5, number_glyph_point: 40, padding_left: void 0, padding_right: void 0, line: 2, spacing_between_lines_px: 10, line_thickness: void 0, serif_thickness: 2, use_symbols: false, symbol_spacing: void 0, semibrave_rest_glyph_scale: m.DEFAULT_NOTATION_FONT_SCALE }, s.Merge(this.render_options, e3), this.number_of_measures = t3, this.xs = { left: NaN, right: NaN };
          }
          getXs() {
            return this.xs;
          }
          setStave(t3) {
            return this.stave = t3, this;
          }
          getStave() {
            return this.stave;
          }
          drawLine(t3, e3, i3, s2) {
            const n2 = this.stave.getYForLine(this.render_options.line), r2 = 0.1 * (i3 - e3);
            e3 += r2, i3 -= r2;
            const o2 = this.render_options.serif_thickness;
            let a2 = 0.25 * s2;
            isNaN(this.render_options.line_thickness) || (a2 = 0.5 * this.render_options.line_thickness), t3.save(), t3.beginPath(), t3.moveTo(e3, n2 - s2), t3.lineTo(e3 + o2, n2 - s2), t3.lineTo(e3 + o2, n2 - a2), t3.lineTo(i3 - o2, n2 - a2), t3.lineTo(i3 - o2, n2 - s2), t3.lineTo(i3, n2 - s2), t3.lineTo(i3, n2 + s2), t3.lineTo(i3 - o2, n2 + s2), t3.lineTo(i3 - o2, n2 + a2), t3.lineTo(e3 + o2, n2 + a2), t3.lineTo(e3 + o2, n2 + s2), t3.lineTo(e3, n2 + s2), t3.closePath(), t3.fill();
          }
          drawSymbols(t3, e3, i3, s2) {
            const n2 = Math.floor(this.number_of_measures / 4), r2 = this.number_of_measures % 4, o2 = Math.floor(r2 / 2), a2 = r2 % 2, l2 = Lt(), h2 = l2.width * (this.render_options.semibrave_rest_glyph_scale / l2.glyph_font_scale), c2 = { 2: { width: 0.5 * h2, height: s2 }, 1: { width: h2 } };
            let u2 = 1.35 * h2;
            isNaN(this.render_options.symbol_spacing) || (u2 = this.render_options.symbol_spacing);
            let d2 = e3 + 0.5 * (i3 - e3) - 0.5 * (n2 * c2[2].width + o2 * c2[2].width + a2 * c2[1].width + (n2 + o2 + a2 - 1) * u2);
            const m2 = this.stave.getYForLine(this.render_options.line - 1), p2 = this.stave.getYForLine(this.render_options.line), g2 = this.stave.getYForLine(this.render_options.line + 1);
            t3.save(), t3.setStrokeStyle("none"), t3.setLineWidth(0);
            for (let e4 = 0; e4 < n2; ++e4) t3.fillRect(d2, p2 - c2[2].height, c2[2].width, c2[2].height), t3.fillRect(d2, g2 - c2[2].height, c2[2].width, c2[2].height), d2 += c2[2].width + u2;
            for (let e4 = 0; e4 < o2; ++e4) t3.fillRect(d2, p2 - c2[2].height, c2[2].width, c2[2].height), d2 += c2[2].width + u2;
            for (let e4 = 0; e4 < a2; ++e4) f.renderGlyph(t3, d2, m2, this.render_options.semibrave_rest_glyph_scale, l2.glyph_code), d2 += c2[1].width + u2;
            t3.restore();
          }
          draw() {
            this.checkContext(), this.setRendered();
            const t3 = this.context, e3 = this.stave, i3 = this.render_options.spacing_between_lines_px;
            let s2 = e3.getNoteStartX(), n2 = e3.getNoteEndX();
            const r2 = e3.getModifiers(dt.Position.BEGIN);
            if (1 === r2.length && "barlines" === r2[0].getCategory() && (s2 -= r2[0].getWidth()), isNaN(this.render_options.padding_left) || (s2 = e3.getX() + this.render_options.padding_left), isNaN(this.render_options.padding_right) || (n2 = e3.getX() + e3.getWidth() - this.render_options.padding_right), this.xs.left = s2, this.xs.right = n2, this.render_options.use_symbols ? this.drawSymbols(t3, s2, n2, i3) : this.drawLine(t3, s2, n2, i3), this.render_options.show_number) {
              const i4 = "/" + this.number_of_measures, r3 = new xt(null, void 0, false);
              r3.point = this.render_options.number_glyph_point, r3.setTimeSig(i4), r3.setStave(e3), r3.x = s2 + 0.5 * (n2 - s2) - 0.5 * r3.timeSig.glyph.getMetrics().width, r3.bottomLine = this.render_options.number_line, r3.setContext(t3).draw();
            }
          }
        }
        class Ct extends R {
          static get CATEGORY() {
            return "clefnote";
          }
          constructor(t3, e3, i3) {
            super({ duration: "b" }), this.setAttribute("type", "ClefNote"), this.setType(t3, e3, i3), this.ignore_ticks = true;
          }
          setType(t3, e3, i3) {
            return this.type = t3, this.clef_obj = new yt(t3, e3, i3), this.clef = this.clef_obj.clef, this.glyph = new f(this.clef.code, this.clef.point), this.setWidth(this.glyph.getMetrics().width), this;
          }
          getClef() {
            return this.clef;
          }
          setContext(t3) {
            return this.context = t3, this.glyph.setContext(this.context), this;
          }
          getBoundingBox() {
            return super.getBoundingBox();
          }
          addToModifierContext() {
            return this;
          }
          getCategory() {
            return Ct.CATEGORY;
          }
          preFormat() {
            return this.setPreFormatted(true), this;
          }
          draw() {
            if (!this.stave) throw new s.RERR("NoStave", "Can't draw without a stave.");
            this.glyph.getContext() || this.glyph.setContext(this.context), this.setRendered();
            const t3 = this.getAbsoluteX();
            if (this.glyph.setStave(this.stave), this.glyph.setYShift(this.stave.getYForLine(this.clef.line) - this.stave.getYForGlyphs()), this.glyph.renderToStave(t3), void 0 !== this.clef_obj.annotation) {
              const e3 = new f(this.clef_obj.annotation.code, this.clef_obj.annotation.point);
              e3.getContext() || e3.setContext(this.context), e3.setStave(this.stave), e3.setYShift(this.stave.getYForLine(this.clef_obj.annotation.line) - this.stave.getYForGlyphs()), e3.setXShift(this.clef_obj.annotation.x_shift), e3.renderToStave(t3);
            }
          }
        }
        class Rt extends R {
          constructor(t3, e3, i3) {
            super({ duration: "b" }), this.setAttribute("type", "KeySigNote"), this.keySignature = new Et(t3, e3, i3), this.ignore_ticks = true;
          }
          getBoundingBox() {
            return super.getBoundingBox();
          }
          addToModifierContext() {
            return this;
          }
          preFormat() {
            return this.setPreFormatted(true), this.keySignature.setStave(this.stave), this.keySignature.format(), this.setWidth(this.keySignature.width), this;
          }
          draw() {
            this.stave.checkContext(), this.setRendered(), this.keySignature.x = this.getAbsoluteX(), this.keySignature.setContext(this.context), this.keySignature.draw();
          }
        }
        class Nt extends R {
          constructor(t3, e3) {
            super({ duration: "b" }), this.setAttribute("type", "TimeSigNote");
            const i3 = new xt(t3, e3);
            this.timeSig = i3.getTimeSig(), this.setWidth(this.timeSig.glyph.getMetrics().width), this.ignore_ticks = true;
          }
          getBoundingBox() {
            return super.getBoundingBox();
          }
          addToModifierContext() {
            return this;
          }
          preFormat() {
            return this.setPreFormatted(true), this;
          }
          draw() {
            this.stave.checkContext(), this.setRendered(), this.timeSig.glyph.getContext() || this.timeSig.glyph.setContext(this.context), this.timeSig.glyph.setStave(this.stave), this.timeSig.glyph.setYShift(this.stave.getYForLine(this.timeSig.line) - this.stave.getYForGlyphs()), this.timeSig.glyph.renderToStave(this.getAbsoluteX());
          }
        }
        class It extends X {
          static get SLIDE_UP() {
            return 1;
          }
          static get SLIDE_DOWN() {
            return -1;
          }
          static createSlideUp(t3) {
            return new It(t3, It.SLIDE_UP);
          }
          static createSlideDown(t3) {
            return new It(t3, It.SLIDE_DOWN);
          }
          constructor(t3, e3) {
            if (super(t3, "sl."), this.setAttribute("type", "TabSlide"), !e3) {
              const i3 = t3.first_note.getPositions()[0].fret, s2 = t3.last_note.getPositions()[0].fret;
              e3 = parseInt(i3, 10) > parseInt(s2, 10) ? It.SLIDE_DOWN : It.SLIDE_UP;
            }
            this.slide_direction = e3, this.render_options.cp1 = 11, this.render_options.cp2 = 14, this.render_options.y_shift = 0.5, this.setFont({ font: "Times", size: 10, style: "bold italic" }), this.setNotes(t3);
          }
          renderTie(t3) {
            if (0 === t3.first_ys.length || 0 === t3.last_ys.length) throw new s.RERR("BadArguments", "No Y-values to render");
            const e3 = this.context, i3 = t3.first_x_px, n2 = t3.first_ys, r2 = t3.last_x_px, o2 = this.slide_direction;
            if (o2 !== It.SLIDE_UP && o2 !== It.SLIDE_DOWN) throw new s.RERR("BadSlide", "Invalid slide direction");
            for (let t4 = 0; t4 < this.first_indices.length; ++t4) {
              const a2 = n2[this.first_indices[t4]] + this.render_options.y_shift;
              if (isNaN(a2)) throw new s.RERR("BadArguments", "Bad indices for slide rendering.");
              e3.beginPath(), e3.moveTo(i3, a2 + 3 * o2), e3.lineTo(r2, a2 - 3 * o2), e3.closePath(), e3.stroke();
            }
            this.setRendered();
          }
        }
        class Bt extends O {
          static get CATEGORY() {
            return "gracenotes";
          }
          static get LEDGER_LINE_OFFSET() {
            return 2;
          }
          static get SCALE() {
            return 0.66;
          }
          constructor(t3) {
            super(Object.assign(t3, { glyph_font_scale: m.DEFAULT_NOTATION_FONT_SCALE * Bt.SCALE, stroke_px: Bt.LEDGER_LINE_OFFSET })), this.setAttribute("type", "GraceNote"), this.slash = t3.slash, this.slur = true, this.buildNoteHeads(), this.width = 3;
          }
          getStemExtension() {
            if (null != this.stem_extension_override) return this.stem_extension_override;
            const t3 = this.getGlyph();
            if (t3) {
              let e3 = super.getStemExtension();
              if (t3.stem) {
                const t4 = this.getStaveNoteScale();
                e3 = (x.HEIGHT + e3) * t4 - x.HEIGHT;
              }
              return e3;
            }
            return 0;
          }
          getCategory() {
            return Bt.CATEGORY;
          }
          getStaveNoteScale() {
            return this.render_options.glyph_font_scale / m.DEFAULT_NOTATION_FONT_SCALE;
          }
          draw() {
            super.draw(), this.setRendered();
            const t3 = this.stem;
            if (this.slash && t3) {
              const e3 = this.getStaveNoteScale(), i3 = e3 / 0.66;
              let s2;
              const n2 = this.beam;
              if (n2) n2.postFormatted || n2.postFormat(), s2 = this.calcBeamedNotesSlashBBox(8 * i3, 8 * i3, { stem: 6 * i3, beam: 5 * i3 });
              else {
                const n3 = this.getStemDirection(), r3 = this.getNoteHeadBounds(), o2 = t3.getHeight();
                let a2 = this.getAbsoluteX(), l2 = n3 === m.Stem.DOWN ? r3.y_top - o2 : r3.y_bottom - o2;
                const h2 = n3 === m.Stem.DOWN ? this.glyph.stem_down_extension : this.glyph.stem_up_extension;
                let c2 = m.STEM_HEIGHT;
                c2 -= c2 / 2.8, c2 += h2, l2 += c2 * e3 * n3;
                const u2 = n3 === m.Stem.UP ? { x1: 1, y1: 0, x2: 13, y2: -9 } : { x1: -4, y1: 1, x2: 13, y2: 9 };
                a2 += u2.x1 * i3, l2 += u2.y1 * i3, s2 = { x1: a2, y1: l2, x2: a2 + u2.x2 * i3, y2: l2 + u2.y2 * i3 };
              }
              const r2 = this.context;
              r2.save(), r2.setLineWidth(1 * i3), r2.beginPath(), r2.moveTo(s2.x1, s2.y1), r2.lineTo(s2.x2, s2.y2), r2.closePath(), r2.stroke(), r2.restore();
            }
          }
          calcBeamedNotesSlashBBox(t3, e3, i3) {
            const s2 = this.beam, n2 = s2.slope, r2 = s2.notes[s2.notes.length - 1] === this ? -1 : 1, o2 = Math.atan(n2 * r2), a2 = Math.cos(o2) * e3, l2 = Math.sin(o2) * e3;
            t3 *= this.getStemDirection();
            const h2 = Math.atan((l2 - t3) / a2), c2 = Math.cos(h2) * i3.stem * r2, u2 = Math.sin(h2) * i3.stem, d2 = Math.cos(h2) * i3.beam * r2, f2 = Math.sin(h2) * i3.beam, m2 = this.getStemX(), p2 = s2.notes[0].getStemX(), g2 = this.beam.getBeamYToDraw() + (m2 - p2) * n2;
            return { x1: m2 - c2, y1: g2 + t3 - u2, x2: m2 + a2 * r2 + d2, y2: g2 + l2 + f2 };
          }
        }
        class Ft extends wt {
          static get CATEGORY() {
            return "gracetabnotes";
          }
          constructor(t3) {
            super(t3, false), this.setAttribute("type", "GraceTabNote"), s.Merge(this.render_options, { y_shift: 0.3, scale: 0.6, font: "7.5pt Arial" }), this.updateWidth();
          }
          getCategory() {
            return Ft.CATEGORY;
          }
          draw() {
            super.draw(), this.setRendered();
          }
        }
        class Dt {
          static get names() {
            return { standard: "E/5,B/4,G/4,D/4,A/3,E/3", dagdad: "D/5,A/4,G/4,D/4,A/3,D/3", dropd: "E/5,B/4,G/4,D/4,A/3,D/3", eb: "Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3", standardBanjo: "D/5,B/4,G/4,D/4,G/5" };
          }
          constructor(t3 = "E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2") {
            this.setTuning(t3);
          }
          noteToInteger(t3) {
            return m.keyProperties(t3).int_value;
          }
          setTuning(t3) {
            Dt.names[t3] && (t3 = Dt.names[t3]), this.tuningString = t3, this.tuningValues = [], this.numStrings = 0;
            const e3 = t3.split(/\s*,\s*/);
            if (0 === e3.length) throw new s.RERR("BadArguments", "Invalid tuning string: " + t3);
            this.numStrings = e3.length;
            for (let t4 = 0; t4 < this.numStrings; ++t4) this.tuningValues[t4] = this.noteToInteger(e3[t4]);
          }
          getValueForString(t3) {
            const e3 = parseInt(t3, 10);
            if (e3 < 1 || e3 > this.numStrings) throw new s.RERR("BadArguments", `String number must be between 1 and ${this.numStrings}:${t3}`);
            return this.tuningValues[e3 - 1];
          }
          getValueForFret(t3, e3) {
            const i3 = this.getValueForString(e3), n2 = parseInt(t3, 10);
            if (n2 < 0) throw new s.RERR("BadArguments", "Fret number must be 0 or higher: " + t3);
            return i3 + n2;
          }
          getNoteForFret(t3, e3) {
            const i3 = this.getValueForFret(t3, e3), s2 = Math.floor(i3 / 12), n2 = i3 % 12;
            return m.integerToNote(n2) + "/" + s2;
          }
        }
        class Ot extends l {
          static get type() {
            return { CRESC: 1, DECRESC: 2 };
          }
          static FormatByTicksAndDraw(t3, e3, i3, n2, r2, o2) {
            const a2 = e3.pixelsPerTick;
            if (null == a2) throw new s.RuntimeError("BadArguments", "A valid Formatter must be provide to draw offsets by ticks.");
            const l2 = a2 * o2.left_shift_ticks, h2 = a2 * o2.right_shift_ticks, c2 = { height: o2.height, y_shift: o2.y_shift, left_shift_px: l2, right_shift_px: h2 };
            new Ot({ first_note: i3.first_note, last_note: i3.last_note }, n2).setContext(t3).setRenderOptions(c2).setPosition(r2).draw();
          }
          constructor(t3, e3) {
            super(), this.setAttribute("type", "StaveHairpin"), this.notes = t3, this.hairpin = e3, this.position = B.Position.BELOW, this.render_options = { height: 10, y_shift: 0, left_shift_px: 0, right_shift_px: 0 }, this.setNotes(t3);
          }
          setPosition(t3) {
            return t3 !== B.Position.ABOVE && t3 !== B.Position.BELOW || (this.position = t3), this;
          }
          setRenderOptions(t3) {
            return null != t3.height && null != t3.y_shift && null != t3.left_shift_px && null != t3.right_shift_px && (this.render_options = t3), this;
          }
          setNotes(t3) {
            if (!t3.first_note && !t3.last_note) throw new s.RuntimeError("BadArguments", "Hairpin needs to have either first_note or last_note set.");
            return this.first_note = t3.first_note, this.last_note = t3.last_note, this;
          }
          renderHairpin(t3) {
            const e3 = this.checkContext();
            let i3 = this.render_options.y_shift + 20, s2 = t3.first_y;
            this.position === B.Position.ABOVE && (i3 = 30 - i3, s2 = t3.first_y - t3.staff_height);
            const n2 = this.render_options.left_shift_px, r2 = this.render_options.right_shift_px;
            switch (e3.beginPath(), this.hairpin) {
              case Ot.type.CRESC:
                e3.moveTo(t3.last_x + r2, s2 + i3), e3.lineTo(t3.first_x + n2, s2 + this.render_options.height / 2 + i3), e3.lineTo(t3.last_x + r2, s2 + this.render_options.height + i3);
                break;
              case Ot.type.DECRESC:
                e3.moveTo(t3.first_x + n2, s2 + i3), e3.lineTo(t3.last_x + r2, s2 + this.render_options.height / 2 + i3), e3.lineTo(t3.first_x + n2, s2 + this.render_options.height + i3);
            }
            e3.stroke(), e3.closePath();
          }
          draw() {
            this.checkContext(), this.setRendered();
            const t3 = this.first_note, e3 = this.last_note, i3 = t3.getModifierStartXY(this.position, 0), s2 = e3.getModifierStartXY(this.position, 0);
            return this.renderHairpin({ first_x: i3.x, last_x: s2.x, first_y: t3.getStave().y + t3.getStave().height, last_y: e3.getStave().y + e3.getStave().height, staff_height: t3.getStave().height }), true;
          }
        }
        class kt extends l {
          static get Position() {
            return { NEAR_HEAD: 1, NEAR_TOP: 2 };
          }
          static get PositionString() {
            return { nearHead: kt.Position.NEAR_HEAD, nearTop: kt.Position.NEAR_TOP };
          }
          constructor(t3, e3, i3) {
            super(), this.setAttribute("type", "Curve"), this.render_options = { spacing: 2, thickness: 2, x_shift: 0, y_shift: 10, position: kt.Position.NEAR_HEAD, position_end: kt.Position.NEAR_HEAD, invert: false, cps: [{ x: 0, y: 10 }, { x: 0, y: 10 }] }, s.Merge(this.render_options, i3), this.setNotes(t3, e3);
          }
          setNotes(t3, e3) {
            if (!t3 && !e3) throw new s.RuntimeError("BadArguments", "Curve needs to have either first_note or last_note set.");
            return this.from = t3, this.to = e3, this;
          }
          isPartial() {
            return !this.from || !this.to;
          }
          renderCurve(t3) {
            const e3 = this.context, i3 = this.render_options.cps, s2 = this.render_options.x_shift, n2 = this.render_options.y_shift * t3.direction, r2 = t3.first_x + s2, o2 = t3.first_y + n2, a2 = t3.last_x - s2, l2 = t3.last_y + n2, h2 = this.render_options.thickness, c2 = (a2 - r2) / (i3.length + 2);
            e3.beginPath(), e3.moveTo(r2, o2), e3.bezierCurveTo(r2 + c2 + i3[0].x, o2 + i3[0].y * t3.direction, a2 - c2 + i3[1].x, l2 + i3[1].y * t3.direction, a2, l2), e3.bezierCurveTo(a2 - c2 + i3[1].x, l2 + (i3[1].y + h2) * t3.direction, r2 + c2 + i3[0].x, o2 + (i3[0].y + h2) * t3.direction, r2, o2), e3.stroke(), e3.closePath(), e3.fill();
          }
          draw() {
            this.checkContext(), this.setRendered();
            const t3 = this.from, e3 = this.to;
            let i3, s2, n2, r2, o2, a2 = "baseY", l2 = "baseY";
            function h2(t4) {
              return "string" == typeof t4 ? kt.PositionString[t4] : t4;
            }
            const c2 = h2(this.render_options.position), u2 = h2(this.render_options.position_end);
            return c2 === kt.Position.NEAR_TOP && (a2 = "topY", l2 = "topY"), u2 === kt.Position.NEAR_HEAD ? l2 = "baseY" : u2 === kt.Position.NEAR_TOP && (l2 = "topY"), t3 ? (i3 = t3.getTieRightX(), o2 = t3.getStemDirection(), n2 = t3.getStemExtents()[a2]) : (i3 = e3.getStave().getTieStartX(), n2 = e3.getStemExtents()[a2]), e3 ? (s2 = e3.getTieLeftX(), o2 = e3.getStemDirection(), r2 = e3.getStemExtents()[l2]) : (s2 = t3.getStave().getTieEndX(), r2 = t3.getStemExtents()[l2]), this.renderCurve({ first_x: i3, last_x: s2, first_y: n2, last_y: r2, direction: o2 * (true === this.render_options.invert ? -1 : 1) }), true;
          }
        }
        function Vt(...t3) {
          Gt.DEBUG && s.L("Vex.Flow.TextDynamics", t3);
        }
        class Gt extends R {
          static get GLYPHS() {
            return { f: { code: "vba", width: 12 }, p: { code: "vbf", width: 14 }, m: { code: "v62", width: 17 }, s: { code: "v4a", width: 10 }, z: { code: "v80", width: 12 }, r: { code: "vb1", width: 12 } };
          }
          constructor(t3) {
            super(t3), this.setAttribute("type", "TextDynamics"), this.sequence = t3.text.toLowerCase(), this.line = t3.line || 0, this.glyphs = [], s.Merge(this.render_options, { glyph_font_size: 40 }), Vt("New Dynamics Text: ", this.sequence);
          }
          setLine(t3) {
            return this.line = t3, this;
          }
          preFormat() {
            let t3 = 0;
            return this.sequence.split("").forEach((e3) => {
              const i3 = Gt.GLYPHS[e3];
              if (!i3) throw new s.RERR("Invalid dynamics character: " + e3);
              const n2 = this.render_options.glyph_font_size, r2 = new f(i3.code, n2);
              this.glyphs.push(r2), t3 += i3.width;
            }), this.setWidth(t3), this.preFormatted = true, this;
          }
          draw() {
            this.setRendered();
            const t3 = this.getAbsoluteX(), e3 = this.stave.getYForLine(this.line + -3);
            Vt("Rendering Dynamics: ", this.sequence);
            let i3 = t3;
            this.glyphs.forEach((t4, s2) => {
              const n2 = this.sequence[s2];
              t4.render(this.context, i3, e3), i3 += Gt.GLYPHS[n2].width;
            });
          }
        }
        function Wt(t3, e3, i3, s2, n2, r2, o2) {
          t3.beginPath(), t3.moveTo(e3, i3), t3.lineTo(s2, n2), t3.lineTo(r2, o2), t3.lineTo(e3, i3), t3.closePath(), t3.fill();
        }
        class Ut extends l {
          static get TextVerticalPosition() {
            return { TOP: 1, BOTTOM: 2 };
          }
          static get TextJustification() {
            return { LEFT: 1, CENTER: 2, RIGHT: 3 };
          }
          constructor(t3) {
            super(), this.setAttribute("type", "StaveLine"), this.notes = t3, this.text = "", this.font = { family: "Arial", size: 10, weight: "" }, this.render_options = { padding_left: 4, padding_right: 3, line_width: 1, line_dash: null, rounded_end: true, color: null, draw_start_arrow: false, draw_end_arrow: false, arrowhead_length: 10, arrowhead_angle: Math.PI / 8, text_position_vertical: Ut.TextVerticalPosition.TOP, text_justification: Ut.TextJustification.CENTER }, this.setNotes(t3);
          }
          setFont(t3) {
            return this.font = t3, this;
          }
          setText(t3) {
            return this.text = t3, this;
          }
          setNotes(t3) {
            if (!t3.first_note && !t3.last_note) throw new s.RuntimeError("BadArguments", "Notes needs to have either first_note or last_note set.");
            if (t3.first_indices || (t3.first_indices = [0]), t3.last_indices || (t3.last_indices = [0]), t3.first_indices.length !== t3.last_indices.length) throw new s.RuntimeError("BadArguments", "Connected notes must have similar index sizes");
            return this.first_note = t3.first_note, this.first_indices = t3.first_indices, this.last_note = t3.last_note, this.last_indices = t3.last_indices, this;
          }
          applyLineStyle() {
            const t3 = this.checkContext(), e3 = this.render_options;
            e3.line_dash && t3.setLineDash(e3.line_dash), e3.line_width && t3.setLineWidth(e3.line_width), e3.rounded_end ? t3.setLineCap("round") : t3.setLineCap("square");
          }
          applyFontStyle() {
            const t3 = this.checkContext();
            this.font && t3.setFont(this.font.family, this.font.size, this.font.weight), this.render_options.color && (t3.setStrokeStyle(this.render_options.color), t3.setFillStyle(this.render_options.color));
          }
          draw() {
            const t3 = this.checkContext();
            this.setRendered();
            const e3 = this.first_note, i3 = this.last_note, s2 = this.render_options;
            let n2, r2;
            t3.save(), this.applyLineStyle(), this.first_indices.forEach((o3, a3) => {
              const l3 = this.last_indices[a3];
              n2 = e3.getModifierStartXY(2, o3), r2 = i3.getModifierStartXY(1, l3);
              const h3 = n2.y > r2.y;
              n2.x += e3.getMetrics().modRightPx + s2.padding_left, r2.x -= i3.getMetrics().modLeftPx + s2.padding_right;
              const c3 = e3.getGlyph().getWidth();
              e3.getKeyProps()[o3].displaced && 1 === e3.getStemDirection() && (n2.x += c3 + s2.padding_left), i3.getKeyProps()[l3].displaced && -1 === i3.getStemDirection() && (r2.x -= c3 + s2.padding_right), n2.y += h3 ? -3 : 1, r2.y += h3 ? 2 : 0, function(t4, e4, i4, s3) {
                const n3 = s3.draw_start_arrow && s3.draw_end_arrow, r3 = e4.x, o4 = e4.y, a4 = i4.x, l4 = i4.y, h4 = Math.sqrt((a4 - r3) * (a4 - r3) + (l4 - o4) * (l4 - o4)), c4 = (h4 - s3.arrowhead_length / 3) / h4;
                let u2, d2, f2, m2;
                s3.draw_end_arrow || n3 ? (u2 = Math.round(r3 + (a4 - r3) * c4), d2 = Math.round(o4 + (l4 - o4) * c4)) : (u2 = a4, d2 = l4), s3.draw_start_arrow || n3 ? (f2 = r3 + (a4 - r3) * (1 - c4), m2 = o4 + (l4 - o4) * (1 - c4)) : (f2 = r3, m2 = o4), s3.color && (t4.setStrokeStyle(s3.color), t4.setFillStyle(s3.color)), t4.beginPath(), t4.moveTo(f2, m2), t4.lineTo(u2, d2), t4.stroke(), t4.closePath();
                const p2 = Math.atan2(l4 - o4, a4 - r3), g2 = Math.abs(s3.arrowhead_length / Math.cos(s3.arrowhead_angle));
                let b2, S2, y2, E2, x2, v2;
                (s3.draw_end_arrow || n3) && (b2 = p2 + Math.PI + s3.arrowhead_angle, y2 = a4 + Math.cos(b2) * g2, E2 = l4 + Math.sin(b2) * g2, S2 = p2 + Math.PI - s3.arrowhead_angle, x2 = a4 + Math.cos(S2) * g2, v2 = l4 + Math.sin(S2) * g2, Wt(t4, y2, E2, a4, l4, x2, v2)), (s3.draw_start_arrow || n3) && (b2 = p2 + s3.arrowhead_angle, y2 = r3 + Math.cos(b2) * g2, E2 = o4 + Math.sin(b2) * g2, S2 = p2 - s3.arrowhead_angle, x2 = r3 + Math.cos(S2) * g2, v2 = o4 + Math.sin(S2) * g2, Wt(t4, y2, E2, r3, o4, x2, v2));
              }(t3, n2, r2, this.render_options);
            }), t3.restore();
            const o2 = t3.measureText(this.text).width, a2 = s2.text_justification;
            let l2, h2 = 0;
            a2 === Ut.TextJustification.LEFT ? h2 = n2.x : a2 === Ut.TextJustification.CENTER ? h2 = (r2.x - n2.x) / 2 + n2.x - o2 / 2 : a2 === Ut.TextJustification.RIGHT && (h2 = r2.x - o2);
            const c2 = s2.text_position_vertical;
            return c2 === Ut.TextVerticalPosition.TOP ? l2 = e3.getStave().getYForTopText() : c2 === Ut.TextVerticalPosition.BOTTOM && (l2 = e3.getStave().getYForBottomText(m.TEXT_HEIGHT_OFFSET_HACK)), t3.save(), this.applyFontStyle(), t3.fillText(this.text, h2, l2), t3.restore(), this;
          }
        }
        function zt(t3, e3, i3, s2, n2) {
          const r2 = Ht.GLYPHS[t3];
          new f(r2.code, n2).render(e3, i3 + r2.x_shift, s2 + r2.y_shift);
        }
        class Ht extends l {
          static get GLYPHS() {
            return { pedal_depress: { code: "v36", x_shift: -10, y_shift: 0 }, pedal_release: { code: "v5d", x_shift: -2, y_shift: 3 } };
          }
          static get Styles() {
            return { TEXT: 1, BRACKET: 2, MIXED: 3, MIXED_OPEN_END: 4, BRACKET_OPEN_BEGIN: 5, BRACKET_OPEN_END: 6, BRACKET_OPEN_BOTH: 7 };
          }
          static get StylesString() {
            return { text: Ht.Styles.TEXT, bracket: Ht.Styles.BRACKET, mixed: Ht.Styles.MIXED, mixed_open_end: Ht.Styles.MIXED_OPEN_END, bracket_open_begin: Ht.Styles.BRACKET_OPEN_BEGIN, bracket_open_end: Ht.Styles.BRACKET_OPEN_END, bracket_open_both: Ht.Styles.BRACKET_OPEN_BOTH };
          }
          static createSustain(t3) {
            return new Ht(t3);
          }
          static createSostenuto(t3) {
            const e3 = new Ht(t3);
            return e3.setStyle(Ht.Styles.MIXED), e3.setCustomText("Sost. Ped."), e3;
          }
          static createUnaCorda(t3) {
            const e3 = new Ht(t3);
            return e3.setStyle(Ht.Styles.TEXT), e3.setCustomText("una corda", "tre corda"), e3;
          }
          constructor(t3) {
            super(), this.setAttribute("type", "PedalMarking"), this.EndsStave = false, this.ChangeBegin = false, this.ChangeEnd = false, this.notes = t3, this.style = Ht.TEXT, this.line = 0, this.custom_depress_text = "", this.custom_release_text = "", this.font = { family: "Times New Roman", size: 12, weight: "italic bold" }, this.render_options = { bracket_height: 10, text_margin_right: 6, bracket_line_width: 1, glyph_point_size: 40, color: "black" };
          }
          setEndStave(t3) {
            if (this.endStave = t3, this.endStaveAddedWidth = 0, this.startMargin = 0, this.endMargin = 0, Array.isArray(this.endStave.modifiers)) for (let t4 = 0; t4 < this.endStave.modifiers.length; t4++) {
              let e3 = this.endStave.modifiers[t4];
              e3 && e3.position === dt.Position.END && e3.width && (this.endStaveAddedWidth += e3.width);
            }
          }
          setCustomText(t3, e3) {
            return this.custom_depress_text = t3 || "", this.custom_release_text = e3 || "", this;
          }
          setStyle(t3) {
            if (t3 < 1 && t3 > 3) throw new s.RERR("InvalidParameter", "The style must be one found in PedalMarking.Styles");
            return this.style = t3, this;
          }
          setLine(t3) {
            return this.line = t3, this;
          }
          drawBracketed() {
            const t3 = this.context;
            let e3, i3, s2 = false;
            const n2 = this;
            this.notes.forEach((r2, o2, a2) => {
              s2 = !s2;
              let l2 = 0;
              if (r2 ? (l2 = r2.getNoteHeadBeginX(), this.BeginsStave && (l2 = r2.getStave().getNoteStartX())) : l2 = this.endStave.end_x + this.endStaveAddedWidth, this.EndsStave) s2 ? this.ChangeBegin && (l2 = r2.getAbsoluteX()) : (l2 = r2 ? this.ChangeEnd ? r2.getAbsoluteX() : r2.getStave().end_x + this.endStaveAddedWidth - n2.render_options.text_margin_right : this.endStave.end_x + this.endStaveAddedWidth - n2.render_options.text_margin_right, this.endMargin = -n2.render_options.text_margin_right);
              else if (r2) if (s2) this.ChangeBegin && (l2 = r2.getAbsoluteX());
              else switch (n2.style) {
                case Ht.Styles.BRACKET_OPEN_END:
                case Ht.Styles.BRACKET_OPEN_BOTH:
                case Ht.Styles.MIXED_OPEN_END:
                  l2 = r2.getNoteHeadEndX();
                  break;
                default:
                  this.ChangeEnd ? l2 = r2.getAbsoluteX() : (l2 = r2.getNoteHeadBeginX() - n2.render_options.text_margin_right, this.startMargin = -n2.render_options.text_margin_right);
              }
              let h2 = this.endStave;
              r2 && (h2 = r2.getStave());
              let c2 = h2.getYForBottomText(n2.line + 3);
              i3 && i3 > c2 && (c2 = i3);
              const u2 = a2[o2 + 1] === r2, d2 = a2[o2 - 1] === r2;
              let f2 = 0;
              if (s2) if (f2 = d2 ? 5 : 0, n2.style !== Ht.Styles.MIXED && n2.style !== Ht.Styles.MIXED_OPEN_END || d2) t3.beginPath(), n2.style === Ht.Styles.BRACKET_OPEN_BEGIN || n2.style === Ht.Styles.BRACKET_OPEN_BOTH ? t3.moveTo(l2 + f2, c2) : (this.ChangeBegin && (l2 += 5), t3.moveTo(l2, c2 - n2.render_options.bracket_height), this.ChangeBegin && (l2 += 5), t3.lineTo(l2 + f2, c2)), t3.stroke(), t3.closePath();
              else if (n2.custom_depress_text) {
                const e4 = t3.measureText(n2.custom_depress_text).width;
                t3.fillText(n2.custom_depress_text, l2 - e4 / 2, c2), f2 = e4 / 2 + n2.render_options.text_margin_right;
              } else zt("pedal_depress", t3, l2, c2, n2.render_options.glyph_point_size), f2 = 20 + n2.render_options.text_margin_right;
              else f2 = u2 && !this.EndsStave ? -5 : 0, t3.beginPath(), t3.moveTo(e3, i3), t3.lineTo(l2 + f2, c2), n2.style !== Ht.Styles.BRACKET_OPEN_END && n2.style !== Ht.Styles.MIXED_OPEN_END && n2.style !== Ht.Styles.BRACKET_OPEN_BOTH && (this.ChangeEnd && (l2 += 5), t3.lineTo(l2, c2 - n2.render_options.bracket_height)), t3.stroke(), t3.closePath();
              e3 = l2 + f2, i3 = c2;
            });
          }
          drawText() {
            const t3 = this.context;
            let e3 = false;
            const i3 = this, s2 = i3.render_options.glyph_point_size;
            this.notes.forEach((n2) => {
              if (!n2) return;
              e3 = !e3;
              const r2 = n2.getStave(), o2 = n2.getAbsoluteX(), a2 = r2.getYForBottomText(i3.line + 3);
              let l2 = 0;
              e3 ? i3.custom_depress_text ? (l2 = t3.measureText(i3.custom_depress_text).width, t3.fillText(i3.custom_depress_text, o2 - l2 / 2, a2)) : zt("pedal_depress", t3, o2, a2, s2) : i3.custom_release_text ? (l2 = t3.measureText(i3.custom_release_text).width, t3.fillText(i3.custom_release_text, o2 - l2 / 2, a2)) : zt("pedal_release", t3, o2, a2, s2);
            });
          }
          draw() {
            const t3 = this.checkContext();
            this.setRendered(), t3.save(), t3.setStrokeStyle(this.render_options.color), t3.setFillStyle(this.render_options.color), t3.setFont(this.font.family, this.font.size, this.font.weight), function(...t4) {
              Ht.DEBUG && s.L("Vex.Flow.PedalMarking", t4);
            }("Rendering Pedal Marking"), this.style === Ht.Styles.BRACKET || this.style === Ht.Styles.MIXED || this.style === Ht.Styles.MIXED_OPEN_END || this.style === Ht.Styles.BRACKET_OPEN_BEGIN || this.style === Ht.Styles.BRACKET_OPEN_END || this.style === Ht.Styles.BRACKET_OPEN_BOTH ? (t3.setLineWidth(this.render_options.bracket_line_width), this.drawBracketed()) : this.style === Ht.Styles.TEXT && this.drawText(), t3.restore();
          }
        }
        class Xt extends l {
          static get Positions() {
            return { TOP: 1, BOTTOM: -1 };
          }
          static get PositionString() {
            return { top: Xt.Positions.TOP, bottom: Xt.Positions.BOTTOM };
          }
          constructor({ start: t3, stop: e3, text: i3 = "", superscript: s2 = "", position: n2 = Xt.Positions.TOP }) {
            super(), this.setAttribute("type", "TextBracket"), this.start = t3, this.stop = e3, this.text = i3, this.superscript = s2, this.position = "string" == typeof n2 ? Xt.PositionString[n2] : n2, this.line = 1, this.font = { family: "Serif", size: 15, weight: "italic" }, this.render_options = { dashed: true, dash: [5], color: "black", line_width: 1, show_bracket: true, bracket_height: 8, underline_superscript: true };
          }
          applyStyle(t3) {
            return t3.setFont(this.font.family, this.font.size, this.font.weight), t3.setStrokeStyle(this.render_options.color), t3.setFillStyle(this.render_options.color), t3.setLineWidth(this.render_options.line_width), this;
          }
          setDashed(t3, e3) {
            return this.render_options.dashed = t3, e3 && (this.render_options.dash = e3), this;
          }
          setFont(t3) {
            return this.font = { ...this.font, ...t3 }, this;
          }
          setLine(t3) {
            return this.line = t3, this;
          }
          draw() {
            const t3 = this.context;
            this.setRendered();
            let e3 = 0;
            switch (this.position) {
              case Xt.Positions.TOP:
                e3 = this.start.getStave().getYForTopText(this.line);
                break;
              case Xt.Positions.BOTTOM:
                e3 = this.start.getStave().getYForBottomText(this.line + m.TEXT_HEIGHT_OFFSET_HACK);
                break;
              default:
                throw new s.RERR("InvalidPosition", `The position ${this.position} is invalid`);
            }
            const i3 = { x: this.start.getAbsoluteX(), y: e3 }, n2 = { x: this.stop.getAbsoluteX(), y: e3 };
            !function(...t4) {
              Xt.DEBUG && s.L("Vex.Flow.TextBracket", t4);
            }("Rendering TextBracket: start:", i3, "stop:", n2, "y:", e3);
            const r2 = this.render_options.bracket_height * this.position;
            t3.save(), this.applyStyle(t3), t3.fillText(this.text, i3.x, i3.y);
            let o2 = t3.measureText(this.text).width;
            o2 > 0 || (o2 = 10 * this.text.length);
            let a2 = t3.measureText("M").width;
            a2 > 0 || (a2 = 20);
            const l2 = i3.y - a2 / 2.5;
            t3.setFont(this.font.family, this.font.size / 1.4, this.font.weight), t3.fillText(this.superscript, i3.x + o2 + 1, l2);
            let h2 = t3.measureText(this.superscript).width;
            h2 > 0 || (h2 = 12, this.superscript.includes("m") && (h2 += 5));
            let c2 = t3.measureText("M").width;
            c2 > 0 || (c2 = 10);
            let u2 = i3.x, d2 = l2, f2 = n2.x + this.stop.getGlyph().getWidth();
            this.position === Xt.Positions.TOP ? (u2 += o2 + h2 + 5, d2 -= c2 / 2.7) : this.position === Xt.Positions.BOTTOM && (d2 += c2 / 2.7, u2 += o2 + 2, this.render_options.underline_superscript || (u2 += h2)), this.render_options.dashed ? (f2 < u2 + 5 && this.position === Xt.Positions.TOP ? f2 = u2 + 5 : f2 < u2 + h2 && this.position === Xt.Positions.BOTTOM && (f2 = u2 + h2), E.drawDashedLine(t3, u2, d2, f2, d2, this.render_options.dash), this.render_options.show_bracket && E.drawDashedLine(t3, f2, d2 + 1 * this.position, f2, d2 + r2, this.render_options.dash)) : (t3.beginPath(), t3.moveTo(u2, d2), t3.lineTo(f2, d2), this.render_options.show_bracket && t3.lineTo(f2, d2 + r2), t3.stroke(), t3.closePath()), t3.restore();
          }
        }
        class jt extends R {
          constructor(t3 = ft.type.SINGLE) {
            super({ duration: "b" }), this.setAttribute("type", "BarNote"), this.metrics = { widths: {} };
            const e3 = ft.type;
            this.metrics.widths = { [e3.SINGLE]: 8, [e3.DOUBLE]: 12, [e3.END]: 15, [e3.REPEAT_BEGIN]: 14, [e3.REPEAT_END]: 14, [e3.REPEAT_BOTH]: 18, [e3.NONE]: 0 }, this.ignore_ticks = true, this.setType(t3);
          }
          getType() {
            return this.type;
          }
          setType(t3) {
            return this.type = "string" == typeof t3 ? ft.typeString[t3] : t3, this.setWidth(this.metrics.widths[this.type]), this;
          }
          getBoundingBox() {
            return super.getBoundingBox();
          }
          addToModifierContext() {
            return this;
          }
          preFormat() {
            return this.setPreFormatted(true), this;
          }
          draw() {
            if (this.checkContext(), !this.stave) throw new s.RERR("NoStave", "Can't draw without a stave.");
            !function(...t4) {
              jt.DEBUG && s.L("Vex.Flow.BarNote", t4);
            }("Rendering bar line at: ", this.getAbsoluteX());
            const t3 = new ft(this.type);
            t3.setX(this.getAbsoluteX()), t3.draw(this.stave), this.setRendered();
          }
        }
        class Yt extends I {
          constructor(t3) {
            if (!t3) throw new s.RuntimeError("BadArguments", "Ghost note must have valid initialization data to identify duration.");
            let e3;
            if ("string" == typeof t3) e3 = { duration: t3 };
            else {
              if ("object" != typeof t3) throw new s.RuntimeError("BadArguments", "Ghost note must have valid initialization data to identify duration.");
              e3 = t3;
            }
            super(e3), this.setAttribute("type", "GhostNote"), this.setWidth(0);
          }
          isRest() {
            return true;
          }
          setStave(t3) {
            super.setStave(t3);
          }
          addToModifierContext() {
            return this;
          }
          preFormat() {
            return this.setPreFormatted(true), this;
          }
          draw() {
            if (!this.stave) throw new s.RERR("NoStave", "Can't draw without a stave.");
            this.setRendered();
            for (let t3 = 0; t3 < this.modifiers.length; ++t3) {
              const e3 = this.modifiers[t3];
              e3.setContext(this.context), e3.drawWithStyle();
            }
          }
        }
        class Kt extends B {
          static get CATEGORY() {
            return "tremolo";
          }
          static get YOFFSETSTEMUP() {
            return -9;
          }
          static get YOFFSETSTEMDOWN() {
            return -21;
          }
          static get XOFFSETSTEMUP() {
            return 6;
          }
          static get XOFFSETSTEMDOWN() {
            return -2;
          }
          constructor(t3) {
            super(), this.setAttribute("type", "Tremolo"), this.num = t3, this.note = null, this.index = null, this.position = B.Position.CENTER, this.code = "v74", this.y_spacing_scale = 1, this.extra_stroke_scale = 1, this.y_offset_for_beam = 5;
          }
          getCategory() {
            return Kt.CATEGORY;
          }
          draw() {
            if (this.checkContext(), !this.note || null == this.index) throw new s.RERR("NoAttachedNote", "Can't draw Tremolo without a note and index.");
            this.setRendered();
            const t3 = this.note.getStemDirection();
            this.y_spacing = 4 * t3 * this.y_spacing_scale;
            let e3 = this.note.getModifierStartXY(this.position, this.index).x, i3 = this.note.stem.getExtents().topY, n2 = "gracenotes" === this.note.getCategory() ? Bt.SCALE : 1;
            n2 *= this.extra_stroke_scale, i3 += t3 < 0 ? Kt.YOFFSETSTEMDOWN * n2 : Kt.YOFFSETSTEMUP * n2, this.note.beam && (i3 += this.y_offset_for_beam * t3), this.font = { family: "Arial", size: 16 * n2, weight: "" }, this.render_options = { font_scale: 35 * n2, stroke_px: 3, stroke_spacing: 10 * n2 }, e3 += t3 < 0 ? Kt.XOFFSETSTEMDOWN : Kt.XOFFSETSTEMUP;
            for (let t4 = 0; t4 < this.num; ++t4) f.renderGlyph(this.context, e3, i3, this.render_options.font_scale, this.code), i3 += this.y_spacing;
          }
        }
        class qt extends R {
          constructor(t3) {
            super(t3), this.setAttribute("type", "Crescendo"), this.decrescendo = false, this.line = t3.line || 0, this.height = 15, s.Merge(this.render_options, { extend_left: 0, extend_right: 0, y_shift: 0 });
          }
          setLine(t3) {
            return this.line = t3, this;
          }
          setHeight(t3) {
            return this.height = t3, this;
          }
          setDecrescendo(t3) {
            return this.decrescendo = t3, this;
          }
          preFormat() {
            return this.preFormatted = true, this;
          }
          draw() {
            this.checkContext(), this.setRendered();
            const t3 = this.getTickContext(), e3 = q.getNextContext(t3), i3 = this.getAbsoluteX(), n2 = e3 ? e3.getX() : this.stave.x + this.stave.width, r2 = this.stave.getYForLine(this.line + -3) + 1;
            !function(...t4) {
              qt.DEBUG && s.L("Vex.Flow.Crescendo", t4);
            }("Drawing ", this.decrescendo ? "decrescendo " : "crescendo ", this.height, "x", i3 - n2), function(t4, e4) {
              const i4 = e4.begin_x, s2 = e4.end_x, n3 = e4.y, r3 = e4.height / 2;
              t4.beginPath(), e4.reverse ? (t4.moveTo(i4, n3 - r3), t4.lineTo(s2, n3), t4.lineTo(i4, n3 + r3)) : (t4.moveTo(s2, n3 - r3), t4.lineTo(i4, n3), t4.lineTo(s2, n3 + r3)), t4.stroke(), t4.closePath();
            }(this.context, { begin_x: i3 - this.render_options.extend_left, end_x: n2 + this.render_options.extend_right, y: r2 + this.render_options.y_shift, height: this.height, reverse: this.decrescendo });
          }
        }
        const $t = s.MakeException("ParserError");
        function Jt(t3) {
          return void 0 !== t3.matchedString ? t3.matchedString : t3.results ? Jt(t3.results) : 1 === t3.length ? Jt(t3[0]) : 0 === t3.length ? null : t3.map(Jt);
        }
        class Zt {
          constructor(t3) {
            this.grammar = t3;
          }
          parse(t3) {
            this.line = t3, this.pos = 0, this.errorPos = -1;
            const e3 = this.expect(this.grammar.begin());
            return e3.errorPos = this.errorPos, e3;
          }
          matchFail(t3) {
            -1 === this.errorPos && (this.errorPos = this.pos), this.pos = t3;
          }
          matchSuccess() {
            this.errorPos = -1;
          }
          matchToken(t3, e3 = false) {
            const i3 = e3 ? new RegExp("^((" + t3 + "))") : new RegExp("^((" + t3 + ")\\s*)"), s2 = this.line.slice(this.pos).match(i3);
            return null !== s2 ? { success: true, matchedString: s2[2], incrementPos: s2[1].length, pos: this.pos } : { success: false, pos: this.pos };
          }
          expectOne(t3, e3 = false) {
            const i3 = [], s2 = this.pos;
            let n2 = true, r2 = false;
            e3 = true === e3 || true === t3.maybe;
            for (let e4 = 0; e4 < t3.expect.length; e4++) {
              const s3 = t3.expect[e4], o3 = this.pos, a3 = this.expect(s3);
              if (a3.success) {
                if (i3.push(a3), r2 = true, t3.or) break;
              } else if (n2 = false, !t3.or) {
                this.pos = o3;
                break;
              }
            }
            const o2 = t3.or && r2 || n2, a2 = o2 || true === e3;
            return e3 && !o2 && (this.pos = s2), a2 ? this.matchSuccess() : this.matchFail(s2), { success: a2, results: i3, numMatches: o2 ? 1 : 0 };
          }
          expectOneOrMore(t3, e3 = false) {
            const i3 = [], s2 = this.pos;
            let n2 = 0, r2 = true;
            do {
              const e4 = this.expectOne(t3);
              e4.success ? (n2++, i3.push(e4.results)) : r2 = false;
            } while (r2);
            const o2 = n2 > 0 || true === e3;
            return !e3 || n2 > 0 || (this.pos = s2), o2 ? this.matchSuccess() : this.matchFail(s2), { success: o2, results: i3, numMatches: n2 };
          }
          expectZeroOrMore(t3) {
            return this.expectOneOrMore(t3, true);
          }
          expect(t3) {
            let e3;
            if (function(...t4) {
              Zt.DEBUG && s.L("Vex.Flow.Parser", t4);
            }("Evaluating rules:", t3), !t3) throw new $t("Invalid Rule: " + t3, t3);
            const i3 = t3.bind(this.grammar)();
            if (i3.token) e3 = this.matchToken(i3.token, true === i3.noSpace), e3.success && (this.pos += e3.incrementPos);
            else {
              if (!i3.expect) throw new $t("Bad grammar! No `token` or `expect` property", i3);
              e3 = i3.oneOrMore ? this.expectOneOrMore(i3) : i3.zeroOrMore ? this.expectZeroOrMore(i3) : this.expectOne(i3);
            }
            return e3.matches = [], e3.results && e3.results.forEach((t4) => e3.matches.push(Jt(t4))), i3.run && e3.success && i3.run(e3), e3;
          }
        }
        function Qt(...t3) {
          re.DEBUG && s.L("Vex.Flow.EasyScore", t3);
        }
        const te = s.MakeException("EasyScoreError");
        class ee {
          constructor(t3) {
            this.builder = t3;
          }
          begin() {
            return this.LINE;
          }
          LINE() {
            return { expect: [this.PIECE, this.PIECES, this.EOL] };
          }
          PIECE() {
            return { expect: [this.CHORDORNOTE, this.PARAMS], run: () => this.builder.commitPiece() };
          }
          PIECES() {
            return { expect: [this.COMMA, this.PIECE], zeroOrMore: true };
          }
          PARAMS() {
            return { expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS] };
          }
          CHORDORNOTE() {
            return { expect: [this.CHORD, this.SINGLENOTE], or: true };
          }
          CHORD() {
            return { expect: [this.LPAREN, this.NOTES, this.RPAREN], run: (t3) => this.builder.addChord(t3.matches[1]) };
          }
          NOTES() {
            return { expect: [this.NOTE], oneOrMore: true };
          }
          NOTE() {
            return { expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE] };
          }
          SINGLENOTE() {
            return { expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE], run: (t3) => this.builder.addSingleNote(t3.matches[0], t3.matches[1], t3.matches[2]) };
          }
          ACCIDENTAL() {
            return { expect: [this.ACCIDENTALS], maybe: true };
          }
          DOTS() {
            return { expect: [this.DOT], zeroOrMore: true, run: (t3) => this.builder.setNoteDots(t3.matches[0]) };
          }
          TYPE() {
            return { expect: [this.SLASH, this.MAYBESLASH, this.TYPES], maybe: true, run: (t3) => this.builder.setNoteType(t3.matches[2]) };
          }
          DURATION() {
            return { expect: [this.SLASH, this.DURATIONS], maybe: true, run: (t3) => this.builder.setNoteDuration(t3.matches[1]) };
          }
          OPTS() {
            return { expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET], maybe: true };
          }
          KEYVALS() {
            return { expect: [this.COMMA, this.KEYVAL], zeroOrMore: true };
          }
          KEYVAL() {
            return { expect: [this.KEY, this.EQUALS, this.VAL], run: (t3) => this.builder.addNoteOption(t3.matches[0], t3.matches[2].slice(1, -1)) };
          }
          VAL() {
            return { expect: [this.SVAL, this.DVAL], or: true };
          }
          KEY() {
            return { token: "[a-zA-Z][a-zA-Z0-9]*" };
          }
          DVAL() {
            return { token: '["][^"]*["]' };
          }
          SVAL() {
            return { token: "['][^']*[']" };
          }
          NOTENAME() {
            return { token: "[a-gA-G]" };
          }
          OCTAVE() {
            return { token: "[0-9]+" };
          }
          ACCIDENTALS() {
            return { token: "bbs|bb|bss|bs|b|db|d|##|#|n|\\+\\+-|\\+-|\\+\\+|\\+|k|o" };
          }
          DURATIONS() {
            return { token: "[0-9whq]+" };
          }
          TYPES() {
            return { token: "[rRsSxX]" };
          }
          LPAREN() {
            return { token: "[(]" };
          }
          RPAREN() {
            return { token: "[)]" };
          }
          COMMA() {
            return { token: "[,]" };
          }
          DOT() {
            return { token: "[.]" };
          }
          SLASH() {
            return { token: "[/]" };
          }
          MAYBESLASH() {
            return { token: "[/]?" };
          }
          EQUALS() {
            return { token: "[=]" };
          }
          LBRACKET() {
            return { token: "\\[" };
          }
          RBRACKET() {
            return { token: "\\]" };
          }
          EOL() {
            return { token: "$" };
          }
        }
        class ie {
          constructor(t3) {
            this.factory = t3, this.commitHooks = [], this.reset();
          }
          reset(t3 = {}) {
            this.options = { stem: "auto", clef: "treble" }, this.elements = { notes: [], accidentals: [] }, this.rollingDuration = "8", this.resetPiece(), Object.assign(this.options, t3);
          }
          getFactory() {
            return this.factory;
          }
          getElements() {
            return this.elements;
          }
          addCommitHook(t3) {
            this.commitHooks.push(t3);
          }
          resetPiece() {
            Qt("resetPiece"), this.piece = { chord: [], duration: this.rollingDuration, dots: 0, type: void 0, options: {} };
          }
          setNoteDots(t3) {
            Qt("setNoteDots:", t3), t3 && (this.piece.dots = t3.length);
          }
          setNoteDuration(t3) {
            Qt("setNoteDuration:", t3), this.rollingDuration = this.piece.duration = t3 || this.rollingDuration;
          }
          setNoteType(t3) {
            Qt("setNoteType:", t3), t3 && (this.piece.type = t3);
          }
          addNoteOption(t3, e3) {
            Qt("addNoteOption: key:", t3, "value:", e3), this.piece.options[t3] = e3;
          }
          addNote(t3, e3, i3) {
            Qt("addNote:", t3, e3, i3), this.piece.chord.push({ key: t3, accid: e3, octave: i3 });
          }
          addSingleNote(t3, e3, i3) {
            Qt("addSingleNote:", t3, e3, i3), this.addNote(t3, e3, i3);
          }
          addChord(t3) {
            Qt("startChord"), "object" != typeof t3[0] ? this.addSingleNote(t3[0]) : t3.forEach((t4) => {
              t4 && this.addNote(...t4);
            }), Qt("endChord");
          }
          commitPiece() {
            Qt("commitPiece");
            const { factory: t3 } = this;
            if (!t3) return;
            const e3 = { ...this.options, ...this.piece.options }, { stem: i3, clef: s2 } = e3, n2 = "auto" === i3.toLowerCase(), r2 = n2 || "up" !== i3.toLowerCase() ? O.STEM_DOWN : O.STEM_UP, { chord: o2, duration: a2, dots: l2, type: h2 } = this.piece, c2 = o2.map((t4) => t4.key + "/" + t4.octave), u2 = t3.StaveNote({ keys: c2, duration: a2, dots: l2, type: h2, clef: s2, auto_stem: n2 });
            n2 || u2.setStemDirection(r2);
            const d2 = o2.map((t4) => t4.accid || null);
            d2.forEach((e4, i4) => {
              e4 && u2.addAccidental(i4, t3.Accidental({ type: e4 }));
            });
            for (let t4 = 0; t4 < l2; t4++) u2.addDotToAll();
            this.commitHooks.forEach((t4) => t4(e3, u2, this)), this.elements.notes.push(u2), this.elements.accidentals.concat(d2), this.resetPiece();
          }
        }
        function se({ id: t3 }, e3) {
          void 0 !== t3 && e3.setAttribute("id", t3);
        }
        function ne(t3, e3) {
          t3.class && t3.class.split(/\s*,\s*/).forEach((t4) => e3.addClass(t4));
        }
        class re {
          constructor(t3 = {}) {
            this.setOptions(t3), this.defaults = { clef: "treble", time: "4/4", stem: "auto" };
          }
          set(t3) {
            return Object.assign(this.defaults, t3), this;
          }
          setOptions(t3) {
            return this.options = { factory: null, builder: null, commitHooks: [se, ne, it.easyScoreHook], throwOnError: false, ...t3 }, this.factory = this.options.factory, this.builder = this.options.builder || new ie(this.factory), this.grammar = new ee(this.builder), this.parser = new Zt(this.grammar), this.options.commitHooks.forEach((t4) => this.addCommitHook(t4)), this;
          }
          setContext(t3) {
            return this.factory && this.factory.setContext(t3), this;
          }
          parse(t3, e3 = {}) {
            this.builder.reset(e3);
            const i3 = this.parser.parse(t3);
            if (!i3.success && this.options.throwOnError) throw new te("Error parsing line: " + t3, i3);
            return i3;
          }
          beam(t3, e3 = {}) {
            return this.factory.Beam({ notes: t3, options: e3 }), t3;
          }
          tuplet(t3, e3 = {}) {
            return this.factory.Tuplet({ notes: t3, options: e3 }), t3;
          }
          notes(t3, e3 = {}) {
            return e3 = { clef: this.defaults.clef, stem: this.defaults.stem, ...e3 }, this.parse(t3, e3), this.builder.getElements().notes;
          }
          voice(t3, e3) {
            return e3 = { time: this.defaults.time, ...e3 }, this.factory.Voice(e3).addTickables(t3);
          }
          addCommitHook(t3) {
            return this.builder.addCommitHook(t3);
          }
        }
        const oe = s.MakeException("FactoryError");
        function ae(t3 = {}, e3) {
          const i3 = e3.options;
          return (t3 = Object.assign(e3, t3)).options = Object.assign(i3, t3.options), t3;
        }
        class le {
          constructor(t3) {
            !function(...t4) {
              le.DEBUG && s.L("Vex.Flow.Factory", t4);
            }("New factory: ", t3);
            const e3 = { stave: { space: 10 }, renderer: { context: null, elementId: "", backend: E.Backends.SVG, width: 500, height: 200, background: "#FFF" }, font: { face: "Arial", point: 10, style: "" } };
            this.options = e3, this.setOptions(t3);
          }
          static newFromElementId(t3, e3 = 500, i3 = 200) {
            return new le({ renderer: { elementId: t3, width: e3, height: i3 } });
          }
          reset() {
            this.renderQ = [], this.systems = [], this.staves = [], this.voices = [], this.stave = null;
          }
          getOptions() {
            return this.options;
          }
          setOptions(t3) {
            for (const e3 of ["stave", "renderer", "font"]) Object.assign(this.options[e3], t3[e3]);
            (null !== this.options.renderer.elementId || this.options.renderer.context) && this.initRenderer(), this.reset();
          }
          initRenderer() {
            const { elementId: t3, backend: e3, width: i3, height: s2, background: n2 } = this.options.renderer;
            if ("" === t3) throw new oe("HTML DOM element not set in Factory");
            this.context = E.buildContext(t3, e3, i3, s2, n2);
          }
          getContext() {
            return this.context;
          }
          setContext(t3) {
            return this.context = t3, this;
          }
          getStave() {
            return this.stave;
          }
          getVoices() {
            return this.voices;
          }
          space(t3) {
            return this.options.stave.space * t3;
          }
          Stave(t3) {
            t3 = ae(t3, { x: 0, y: 0, width: this.options.renderer.width - this.space(1), options: { spacing_between_lines_px: this.options.stave.space } });
            const e3 = new _t(t3.x, t3.y, t3.width, t3.options);
            return this.staves.push(e3), e3.setContext(this.context), this.stave = e3, e3;
          }
          TabStave(t3) {
            t3 = ae(t3, { x: 0, y: 0, width: this.options.renderer.width - this.space(1), options: { spacing_between_lines_px: 1.3 * this.options.stave.space } });
            const e3 = new Mt(t3.x, t3.y, t3.width, t3.options);
            return this.staves.push(e3), e3.setContext(this.context), this.stave = e3, e3;
          }
          StaveNote(t3) {
            const e3 = new O(t3);
            return this.stave && e3.setStave(this.stave), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          GhostNote(t3) {
            const e3 = new Yt(t3);
            return this.stave && e3.setStave(this.stave), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          TextNote(t3) {
            const e3 = new bt(t3);
            return this.stave && e3.setStave(this.stave), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          BarNote(t3) {
            t3 = ae(t3, { type: "single", options: {} });
            const e3 = new jt(t3.type);
            return this.stave && e3.setStave(this.stave), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          ClefNote(t3) {
            t3 = ae(t3, { type: "treble", options: { size: "default" } });
            const e3 = new Ct(t3.type, t3.options.size, t3.options.annotation);
            return this.stave && e3.setStave(this.stave), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          TimeSigNote(t3) {
            t3 = ae(t3, { time: "4/4", options: {} });
            const e3 = new Nt(t3.time);
            return this.stave && e3.setStave(this.stave), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          KeySigNote(t3) {
            const e3 = new Rt(t3.key, t3.cancelKey, t3.alterKey);
            return this.stave && e3.setStave(this.stave), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          TabNote(t3) {
            const e3 = new wt(t3);
            return this.stave && e3.setStave(this.stave), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          GraceNote(t3) {
            const e3 = new Bt(t3);
            return this.stave && e3.setStave(this.stave), e3.setContext(this.context), e3;
          }
          GraceNoteGroup(t3) {
            const e3 = new j(t3.notes, t3.slur);
            return e3.setContext(this.context), e3;
          }
          Accidental(t3) {
            t3 = ae(t3, { type: null, options: {} });
            const e3 = new U(t3.type);
            return e3.setContext(this.context), e3;
          }
          Annotation(t3) {
            t3 = ae(t3, { text: "p", vJustify: "below", hJustify: "center", fontFamily: "Times", fontSize: 14, fontWeight: "bold italic", options: {} });
            const e3 = new nt(t3.text);
            return e3.setJustification(t3.hJustify), e3.setVerticalJustification(t3.vJustify), e3.setFont(t3.fontFamily, t3.fontSize, t3.fontWeight), e3.setContext(this.context), e3;
          }
          Articulation(t3) {
            t3 = ae(t3, { type: "a.", position: "above", options: {} });
            const e3 = new it(t3.type);
            return e3.setPosition(t3.position), e3.setContext(this.context), e3;
          }
          TextDynamics(t3) {
            t3 = ae(t3, { text: "p", duration: "q", dots: 0, line: 0, options: {} });
            const e3 = new Gt({ text: t3.text, line: t3.line, duration: t3.duration, dots: t3.dots });
            return this.stave && e3.setStave(this.stave), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          Fingering(t3) {
            t3 = ae(t3, { number: "0", position: "left", options: {} });
            const e3 = new k(t3.number);
            return e3.setPosition(t3.position), e3.setContext(this.context), e3;
          }
          StringNumber(t3) {
            t3 = ae(t3, { number: "0", position: "left", options: {} });
            const e3 = new K(t3.number);
            return e3.setPosition(t3.position), e3.setContext(this.context), e3;
          }
          TickContext() {
            return new q().setContext(this.context);
          }
          ModifierContext() {
            return new lt();
          }
          MultiMeasureRest(t3) {
            const e3 = new At(t3.number_of_measures, t3);
            return e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          Voice(t3) {
            t3 = ae(t3, { time: "4/4", options: {} });
            const e3 = new T(t3.time);
            return this.voices.push(e3), e3;
          }
          StaveConnector(t3) {
            t3 = ae(t3, { top_stave: null, bottom_stave: null, type: "double", options: {} });
            const e3 = new A(t3.top_stave, t3.bottom_stave);
            return e3.setType(t3.type).setContext(this.context), this.renderQ.push(e3), e3;
          }
          Formatter() {
            return new ut();
          }
          Tuplet(t3) {
            t3 = ae(t3, { notes: [], options: {} });
            const e3 = new v(t3.notes, t3.options).setContext(this.context);
            return this.renderQ.push(e3), e3;
          }
          Beam(t3) {
            t3 = ae(t3, { notes: [], options: { autoStem: false, secondaryBeamBreaks: [] } });
            const e3 = new P(t3.notes, t3.options.autoStem).setContext(this.context);
            return e3.breakSecondaryAt(t3.options.secondaryBeamBreaks), this.renderQ.push(e3), e3;
          }
          Curve(t3) {
            t3 = ae(t3, { from: null, to: null, options: {} });
            const e3 = new kt(t3.from, t3.to, t3.options).setContext(this.context);
            return this.renderQ.push(e3), e3;
          }
          StaveTie(t3) {
            t3 = ae(t3, { from: null, to: null, first_indices: [0], last_indices: [0], text: null, options: { direction: void 0 } });
            const e3 = new H({ first_note: t3.from, last_note: t3.to, first_indices: t3.first_indices, last_indices: t3.last_indices }, t3.text);
            return t3.options.direction && e3.setDirection(t3.options.direction), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          StaveLine(t3) {
            t3 = ae(t3, { from: null, to: null, first_indices: [0], last_indices: [0], options: {} });
            const e3 = new Ut({ first_note: t3.from, last_note: t3.to, first_indices: t3.first_indices, last_indices: t3.last_indices });
            return t3.options.text && e3.setText(t3.options.text), t3.options.font && e3.setFont(t3.options.font), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          VibratoBracket(t3) {
            t3 = ae(t3, { from: null, to: null, options: { harsh: false } });
            const e3 = new Pt({ start: t3.from, stop: t3.to });
            return t3.options.line && e3.setLine(t3.options.line), t3.options.harsh && e3.setHarsh(t3.options.harsh), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          TextBracket(t3) {
            t3 = ae(t3, { from: null, to: null, text: "", options: { superscript: "", position: 1 } });
            const e3 = new Xt({ start: t3.from, stop: t3.to, text: t3.text, superscript: t3.options.superscript, position: t3.options.position });
            return t3.options.line && e3.setLine(t3.options.line), t3.options.font && e3.setFont(t3.options.font), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          System(t3 = {}) {
            t3.factory = this;
            const e3 = new ce(t3).setContext(this.context);
            return this.systems.push(e3), e3;
          }
          EasyScore(t3 = {}) {
            return t3.factory = this, new re(t3);
          }
          PedalMarking(t3 = {}) {
            t3 = ae(t3, { notes: [], options: { style: "mixed" } });
            const e3 = new Ht(t3.notes);
            return e3.setStyle(Ht.StylesString[t3.options.style]), e3.setContext(this.context), this.renderQ.push(e3), e3;
          }
          NoteSubGroup(t3 = {}) {
            t3 = ae(t3, { notes: [], options: {} });
            const e3 = new z(t3.notes);
            return e3.setContext(this.context), e3;
          }
          draw() {
            this.systems.forEach((t3) => t3.setContext(this.context).format()), this.staves.forEach((t3) => t3.setContext(this.context).draw()), this.voices.forEach((t3) => t3.setContext(this.context).draw()), this.renderQ.forEach((t3) => {
              t3.isRendered() || t3.setContext(this.context).draw();
            }), this.systems.forEach((t3) => t3.setContext(this.context).draw()), this.reset();
          }
        }
        function he(t3, e3) {
          const i3 = e3.options;
          return (t3 = Object.assign(e3, t3)).options = Object.assign(i3, t3.options), t3;
        }
        class ce extends l {
          constructor(t3 = {}) {
            super(), this.setAttribute("type", "System"), this.setOptions(t3), this.parts = [];
          }
          setOptions(t3 = {}) {
            this.options = he(t3, { x: 10, y: 10, width: 500, connector: null, spaceBetweenStaves: 12, factory: null, debugFormatter: false, formatIterations: 0, options: {} }), this.factory = this.options.factory || new le({ renderer: { el: null } });
          }
          setContext(t3) {
            return super.setContext(t3), this.factory.setContext(t3), this;
          }
          addConnector(t3 = "double") {
            return this.connector = this.factory.StaveConnector({ top_stave: this.parts[0].stave, bottom_stave: this.parts[this.parts.length - 1].stave, type: t3 }), this.connector;
          }
          addStave(t3) {
            return (t3 = he(t3, { stave: null, voices: [], spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, options: { left_bar: false } })).stave || (t3.stave = this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: t3.options })), t3.voices.forEach((e3) => e3.setContext(this.context).setStave(t3.stave).getTickables().forEach((e4) => e4.setStave(t3.stave))), this.parts.push(t3), t3.stave;
          }
          format() {
            const t3 = new ut();
            this.formatter = t3;
            let e3 = this.options.y, i3 = 0, s2 = [];
            const n2 = [];
            this.parts.forEach((r3) => {
              e3 += r3.stave.space(r3.spaceAbove), r3.stave.setY(e3), t3.joinVoices(r3.voices), e3 += r3.stave.space(r3.spaceBelow), e3 += r3.stave.space(this.options.spaceBetweenStaves), r3.debugNoteMetrics && (n2.push({ y: e3, voice: r3.voices[0] }), e3 += 15), s2 = s2.concat(r3.voices), i3 = Math.max(i3, r3.stave.getNoteStartX());
            }), this.parts.forEach((t4) => t4.stave.setNoteStartX(i3));
            const r2 = this.options.width - (i3 - this.options.x) - R.STAVEPADDING;
            t3.format(s2, r2);
            for (let e4 = 0; e4 < this.options.formatIterations; e4++) t3.tune();
            this.startX = i3, this.debugNoteMetricsYs = n2, this.lastY = e3;
          }
          draw() {
            const t3 = this.checkContext();
            this.setRendered(), this.options.debugFormatter && ut.plotDebugging(t3, this.formatter, this.startX, this.options.y, this.lastY), this.debugNoteMetricsYs.forEach((e3) => {
              e3.voice.getTickables().forEach((i3) => R.plotMetrics(t3, i3, e3.y));
            });
          }
        }
        (s.Flow = m).Element = l, s.Flow.Fraction = n, s.Flow.Renderer = E, s.Flow.Formatter = ut, s.Flow.Music = V, s.Flow.Glyph = f, s.Flow.Stave = _t, s.Flow.StaveNote = O, s.Flow.StaveModifier = dt, s.Flow.StaveTempo = gt, s.Flow.Voice = T, s.Flow.Accidental = U, s.Flow.Beam = P, s.Flow.StaveTie = H, s.Flow.TabStave = Mt, s.Flow.TabNote = wt, s.Flow.Bend = rt, s.Flow.Vibrato = ot, s.Flow.VibratoBracket = Pt, s.Flow.Note = R, s.Flow.ModifierContext = lt, s.Flow.MultiMeasureRest = At, s.Flow.TickContext = q, s.Flow.Articulation = it, s.Flow.Annotation = nt, s.Flow.Barline = ft, s.Flow.NoteHead = N, s.Flow.StaveConnector = A, s.Flow.ClefNote = Ct, s.Flow.KeySignature = Et, s.Flow.KeySigNote = Rt, s.Flow.TimeSignature = xt, s.Flow.TimeSigNote = Nt, s.Flow.Stem = x, s.Flow.TabTie = X, s.Flow.Clef = yt, s.Flow.Dot = F, s.Flow.Modifier = B, s.Flow.TabSlide = It, s.Flow.Tuplet = v, s.Flow.GraceNote = Bt, s.Flow.GraceTabNote = Ft, s.Flow.Tuning = Dt, s.Flow.KeyManager = class {
          constructor(t3) {
            this.music = new V(), this.setKey(t3);
          }
          setKey(t3) {
            return this.key = t3, this.reset(), this;
          }
          getKey() {
            return this.key;
          }
          reset() {
            if (this.keyParts = this.music.getKeyParts(this.key), this.keyString = this.keyParts.root, this.keyParts.accidental && (this.keyString += this.keyParts.accidental), !V.scaleTypes[this.keyParts.type]) throw new s.RERR("BadArguments", `Unsupported key type: ${this.key}`);
            this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), V.scaleTypes[this.keyParts.type]), this.scaleMap = {}, this.scaleMapByValue = {}, this.originalScaleMapByValue = {};
            const t3 = V.root_indices[this.keyParts.root];
            for (let e3 = 0; e3 < V.roots.length; ++e3) {
              const i3 = (t3 + e3) % V.roots.length, s2 = V.roots[i3], n2 = this.music.getRelativeNoteName(s2, this.scale[e3]);
              this.scaleMap[s2] = n2, this.scaleMapByValue[this.scale[e3]] = n2, this.originalScaleMapByValue[this.scale[e3]] = n2;
            }
            return this;
          }
          getAccidental(t3) {
            const e3 = this.music.getKeyParts(t3).root, i3 = this.music.getNoteParts(this.scaleMap[e3]);
            return { note: this.scaleMap[e3], accidental: i3.accidental };
          }
          selectNote(t3) {
            t3 = t3.toLowerCase();
            const e3 = this.music.getNoteParts(t3), i3 = this.scaleMap[e3.root], s2 = this.music.getNoteParts(i3);
            if (i3 === t3) return { note: i3, accidental: e3.accidental, change: false };
            const n2 = this.scaleMapByValue[this.music.getNoteValue(t3)];
            if (null != n2) return { note: n2, accidental: this.music.getNoteParts(n2).accidental, change: false };
            const r2 = this.originalScaleMapByValue[this.music.getNoteValue(t3)];
            return null != r2 ? (this.scaleMap[s2.root] = r2, delete this.scaleMapByValue[this.music.getNoteValue(i3)], this.scaleMapByValue[this.music.getNoteValue(t3)] = r2, { note: r2, accidental: this.music.getNoteParts(r2).accidental, change: true }) : s2.root === t3 ? (delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[e3.root])], this.scaleMapByValue[this.music.getNoteValue(s2.root)] = s2.root, this.scaleMap[s2.root] = s2.root, { note: s2.root, accidental: null, change: true }) : (delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[e3.root])], this.scaleMapByValue[this.music.getNoteValue(t3)] = t3, delete this.scaleMap[s2.root], this.scaleMap[s2.root] = t3, { note: t3, accidental: e3.accidental, change: true });
          }
        }, s.Flow.StaveHairpin = Ot, s.Flow.BoundingBox = c, s.Flow.Stroke = Y, s.Flow.TextNote = bt, s.Flow.Curve = kt, s.Flow.TextDynamics = Gt, s.Flow.StaveLine = Ut, s.Flow.Ornament = st, s.Flow.PedalMarking = Ht, s.Flow.TextBracket = Xt, s.Flow.FretHandFinger = k, s.Flow.Repetition = mt, s.Flow.BarNote = jt, s.Flow.GhostNote = Yt, s.Flow.NoteSubGroup = z, s.Flow.GraceNoteGroup = j, s.Flow.Tremolo = Kt, s.Flow.StringNumber = K, s.Flow.Crescendo = qt, s.Flow.Volta = vt, s.Flow.Font = u, s.Flow.System = ce, s.Flow.Factory = le, s.Flow.Parser = Zt, s.Flow.EasyScore = re, s.Flow.Registry = a;
        const ue = s;
      }, 3236: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VerticalSourceStaffEntryContainer = void 0;
        const s = i2(2561);
        e2.VerticalSourceStaffEntryContainer = class {
          constructor(t3, e3, i3) {
            this.staffEntries = [], this.comments = [], this.timestamp = e3, this.staffEntries = new Array(i3), this.parentMeasure = t3;
          }
          $get$(t3) {
            return this.staffEntries[t3];
          }
          $set$(t3, e3) {
            this.staffEntries[t3] = e3;
          }
          get Timestamp() {
            return this.timestamp;
          }
          set Timestamp(t3) {
            this.timestamp = t3;
          }
          get StaffEntries() {
            return this.staffEntries;
          }
          set StaffEntries(t3) {
            this.staffEntries = t3;
          }
          get Comments() {
            return this.comments;
          }
          set Comments(t3) {
            this.comments = t3;
          }
          get ParentMeasure() {
            return this.parentMeasure;
          }
          set ParentMeasure(t3) {
            this.parentMeasure = t3;
          }
          getAbsoluteTimestamp() {
            return s.Fraction.plus(this.timestamp, this.parentMeasure.AbsoluteTimestamp);
          }
        };
      }, 3253: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Pedal = void 0, e2.Pedal = class {
          constructor(t3 = false, e3 = true) {
            this.ChangeEnd = false, this.ChangeBegin = false, this.EndsStave = false, this.BeginsStave = false, this.line = t3, this.sign = e3;
          }
          get IsLine() {
            return this.line;
          }
          get IsSign() {
            return this.sign;
          }
        };
      }, 3263: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4713);
        e2.arrays = s;
        var n = i2(2909);
        e2.Bag = n.default;
        var r = i2(9924);
        e2.BSTree = r.default;
        var o = i2(4041);
        e2.BSTreeKV = o.default;
        var a = i2(6119);
        e2.Dictionary = a.default;
        var l = i2(4589);
        e2.Heap = l.default;
        var h = i2(1846);
        e2.LinkedDictionary = h.default;
        var c = i2(4538);
        e2.LinkedList = c.default;
        var u = i2(2338);
        e2.MultiDictionary = u.default;
        var d = i2(9281);
        e2.FactoryDictionary = d.default;
        var f = i2(9281);
        e2.DefaultDictionary = f.default;
        var m = i2(3288);
        e2.Queue = m.default;
        var p = i2(8464);
        e2.PriorityQueue = p.default;
        var g = i2(2091);
        e2.Set = g.default;
        var b = i2(2083);
        e2.Stack = b.default;
        var S = i2(2002);
        e2.MultiRootTree = S.default;
        var y = i2(4831);
        e2.util = y;
      }, 3288: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4538), n = function() {
          function t3() {
            this.list = new s.default();
          }
          return t3.prototype.enqueue = function(t4) {
            return this.list.add(t4);
          }, t3.prototype.add = function(t4) {
            return this.list.add(t4);
          }, t3.prototype.dequeue = function() {
            if (0 !== this.list.size()) {
              var t4 = this.list.first();
              return this.list.removeElementAtIndex(0), t4;
            }
          }, t3.prototype.peek = function() {
            if (0 !== this.list.size()) return this.list.first();
          }, t3.prototype.size = function() {
            return this.list.size();
          }, t3.prototype.contains = function(t4, e3) {
            return this.list.contains(t4, e3);
          }, t3.prototype.isEmpty = function() {
            return this.list.size() <= 0;
          }, t3.prototype.clear = function() {
            this.list.clear();
          }, t3.prototype.forEach = function(t4) {
            this.list.forEach(t4);
          }, t3;
        }();
        e2.default = n;
      }, 3361: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalInstantaneousTempoExpression = void 0;
        const s = i2(9490);
        class n extends s.AbstractGraphicalExpression {
          constructor(t3, e3) {
            super(e3.PositionAndShape.Parent.DataObject, t3, t3.parentMeasure), this.label = e3;
          }
          get GraphicalLabel() {
            return this.label;
          }
          updateSkyBottomLine() {
          }
        }
        e2.GraphicalInstantaneousTempoExpression = n;
      }, 3430: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalNote = void 0;
        const s = i2(8233), n = i2(7741), r = i2(7921), o = i2(6438);
        class a extends n.GraphicalObject {
          constructor(t3, e3, i3, n2 = void 0) {
            super(), this.DrawnAccidental = s.AccidentalEnum.NONE, this.lineShift = 0, this.sourceNote = t3, this.parentVoiceEntry = e3, this.PositionAndShape = new o.BoundingBox(this, e3.PositionAndShape), this.graphicalNoteLength = n2 || t3.Length, this.numberOfDots = this.calculateNumberOfNeededDots(this.graphicalNoteLength), this.rules = i3, this.rules.addGraphicalNoteToNoteMap(t3, this);
          }
          Transpose(t3, e3, i3, s2) {
            let n2 = this.sourceNote.Pitch;
            return r.MusicSheetCalculator.transposeCalculator && (n2 = r.MusicSheetCalculator.transposeCalculator.transposePitch(this.sourceNote.Pitch, t3, i3)), n2;
          }
          calculateNumberOfNeededDots(t3) {
            return this.sourceNote && this.sourceNote.NoteTuplet ? 0 : t3.calculateNumberOfNeededDots();
          }
          get ParentMusicPage() {
            var _a2;
            return (_a2 = this.parentVoiceEntry.parentStaffEntry.parentMeasure.ParentMusicSystem) == null ? void 0 : _a2.Parent;
          }
          static FromNote(t3, e3) {
            return e3.NoteToGraphicalNoteMap.getValue(t3.NoteToGraphicalNoteObjectId);
          }
          ToStringShort(t3 = 0) {
            var _a2;
            return (_a2 = this.sourceNote) == null ? void 0 : _a2.ToStringShort(t3);
          }
          get ToStringShortGet() {
            return this.ToStringShort(0);
          }
        }
        e2.GraphicalNote = a;
      }, 3457: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SourceMusicPart = void 0;
        const s = i2(7551), n = i2(2561);
        class r extends s.PartListEntry {
          constructor(t3, e3, i3) {
            super(t3), this.musicSheet = t3, this.startIndex = e3, this.endIndex = i3;
          }
          get MeasuresCount() {
            return this.endIndex - this.startIndex + 1;
          }
          get StartIndex() {
            return this.startIndex;
          }
          get EndIndex() {
            return this.endIndex;
          }
          get ParentRepetition() {
            return this.parentRepetition;
          }
          set ParentRepetition(t3) {
            this.parentRepetition = t3;
          }
          get AbsoluteTimestamp() {
            return n.Fraction.createFromFraction(this.musicSheet.SourceMeasures[this.startIndex].AbsoluteTimestamp);
          }
          setStartIndex(t3) {
            this.startIndex = t3;
          }
          setEndIndex(t3) {
            this.endIndex = t3;
          }
        }
        e2.SourceMusicPart = r;
      }, 3508: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.WebGLSkyBottomLineBatchCalculatorBackend = void 0;
        const n = i2(5479), r = i2(3667), o = s(i2(5340)), a = s(i2(5166)), l = s(i2(3065)), h = i2(813);
        function c(t3, e3, i3) {
          const s2 = t3.createShader(e3);
          if (!s2) throw l.default.warn("WebGLSkyBottomLineCalculatorBackend: Could not create a WebGL shader"), new Error("Could not create a WebGL shader");
          if (t3.shaderSource(s2, i3), t3.compileShader(s2), !t3.getShaderParameter(s2, t3.COMPILE_STATUS)) throw l.default.warn("Shader compilation failed\n" + t3.getShaderInfoLog(s2)), t3.deleteShader(s2), new Error("WebGL shader compilation failed");
          return s2;
        }
        class u extends r.SkyBottomLineBatchCalculatorBackend {
          constructor(t3, e3) {
            super(t3, e3);
          }
          getPreferredRenderingConfiguration(t3, e3) {
            const i3 = Math.min(4096, function() {
              const t4 = document.createElement("canvas").getContext("webgl");
              return t4.getParameter(t4.MAX_TEXTURE_SIZE);
            }()), s2 = Math.ceil(t3);
            return { elementWidth: s2, numColumns: Math.min(5, Math.floor(i3 / s2)), numRows: Math.min(5, Math.floor(i3 / e3)) };
          }
          onInitialize(t3) {
            const { elementWidth: e3, elementHeight: i3, numColumns: s2, numRows: n2 } = t3, r2 = document.createElement("canvas");
            r2.width = e3 * s2, r2.height = n2;
            const u2 = r2.getContext("webgl");
            if (!u2) throw l.default.warn("WebGLSkyBottomLineCalculatorBackend: No WebGL support"), new Error("No WebGL support");
            this.gl = u2;
            const d = function(t4, e4, i4) {
              const s3 = t4.createProgram();
              if (!s3) throw l.default.warn("WebGLSkyBottomLineCalculatorBackend: Could not create a WebGL program"), new Error("Could not create a WebGL program");
              if (t4.attachShader(s3, e4), t4.attachShader(s3, i4), t4.linkProgram(s3), !t4.getProgramParameter(s3, t4.LINK_STATUS)) throw l.default.warn("WebGLSkyBottomLineCalculatorBackend: WebGL program link failed\n" + t4.getProgramInfoLog(s3)), t4.deleteProgram(s3), new Error("WebGL program link failed");
              return s3;
            }(u2, c(u2, u2.VERTEX_SHADER, o.default), c(u2, u2.FRAGMENT_SHADER, function(t4, e4) {
              let i4 = t4;
              for (const [t5, s3] of Object.entries(e4)) {
                const e5 = new RegExp(`#define ${t5} .*`);
                i4 = i4.replace(e5, `#define ${t5} ${s3}`);
              }
              return i4;
            }(a.default, { NUM_ROWS: n2, ELEMENT_HEIGHT: i3 })));
            !function(t4, e4) {
              const i4 = t4.createBuffer();
              if (!i4) throw l.default.warn("WebGLSkyBottomLineCalculatorBackend: WebGL buffer creation failed"), new Error("WebGL buffer creation failed");
              t4.bindBuffer(t4.ARRAY_BUFFER, i4), t4.bufferData(t4.ARRAY_BUFFER, new Float32Array(h.CollectionUtil.flat([[-1, -1], [1, -1], [1, 1], [-1, -1], [1, 1], [-1, 1]])), t4.STATIC_DRAW), t4.useProgram(e4);
              const s3 = t4.getAttribLocation(e4, "a_position");
              t4.enableVertexAttribArray(s3), t4.vertexAttribPointer(s3, 2, t4.FLOAT, false, 0, 0);
            }(u2, d), this.texture = function(t4, e4) {
              const i4 = t4.createTexture();
              if (!i4) throw l.default.warn("WebGLSkyBottomLineCalculatorBackend: WebGL texture creation failed"), new Error("WebGL texture creation failed");
              t4.activeTexture(t4.TEXTURE0 + 0), t4.bindTexture(t4.TEXTURE_2D, i4), t4.texParameteri(t4.TEXTURE_2D, t4.TEXTURE_WRAP_S, t4.CLAMP_TO_EDGE), t4.texParameteri(t4.TEXTURE_2D, t4.TEXTURE_WRAP_T, t4.CLAMP_TO_EDGE), t4.texParameteri(t4.TEXTURE_2D, t4.TEXTURE_MIN_FILTER, t4.NEAREST), t4.texParameteri(t4.TEXTURE_2D, t4.TEXTURE_MAG_FILTER, t4.NEAREST);
              const s3 = t4.getUniformLocation(e4, "u_image");
              if (!s3) throw l.default.warn("WebGLSkyBottomLineCalculatorBackend: WebGL invalid uniform name"), new Error("WebGL invalid uniform name");
              return t4.uniform1i(s3, 0), i4;
            }(u2, d);
          }
          calculateFromCanvas(t3, e3, i3, s2, r2) {
            const o2 = this.gl, { elementWidth: a2, elementHeight: l2, numColumns: h2 } = r2;
            o2.viewport(0, 0, o2.canvas.width, o2.canvas.height), o2.bindTexture(o2.TEXTURE_2D, this.texture), o2.texImage2D(o2.TEXTURE_2D, 0, o2.RGBA, o2.RGBA, o2.UNSIGNED_BYTE, t3), o2.drawArrays(o2.TRIANGLES, 0, 6);
            const c2 = new Uint8Array(o2.canvas.width * o2.canvas.height * 4);
            o2.readPixels(0, 0, o2.canvas.width, o2.canvas.height, o2.RGBA, o2.UNSIGNED_BYTE, c2);
            const u2 = [];
            for (let t4 = 0; t4 < i3.length; ++t4) {
              const e4 = i3[t4], r3 = Math.floor(e4.getVFStave().getWidth()), o3 = Math.max(Math.ceil(e4.PositionAndShape.Size.width * s2), 1), d = t4 % h2 * a2 * 4, f = Math.floor(t4 / h2) * a2 * h2 * 4, m = new Array(Math.max(o3, r3)).fill(0), p = new Array(Math.max(o3, r3)).fill(0);
              for (let t5 = 0; t5 < r3; ++t5) {
                const e5 = c2[4 * t5 + d + f], i4 = c2[4 * t5 + d + f + 1], s3 = c2[4 * t5 + d + f + 2], n2 = e5 + 256 * Math.floor(s3 / 16), r4 = i4 + s3 % 16 * 256;
                m[t5] = n2, p[t5] = r4;
              }
              const g = Math.max(...m), b = Math.min(...p);
              for (let t5 = 0; t5 < r3; ++t5) m[t5] = 0 === m[t5] ? g : m[t5], p[t5] = p[t5] === l2 ? b : p[t5];
              u2.push(new n.SkyBottomLineCalculationResult(m, p));
            }
            return u2;
          }
        }
        e2.WebGLSkyBottomLineBatchCalculatorBackend = u;
      }, 3661: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.DrawingParameters = void 0;
        const s = i2(9713), n = i2(6362), r = i2(4146);
        e2.DrawingParameters = class {
          constructor(t3 = r.DrawingParametersEnum.default, e3) {
            this.drawCursors = true, this.drawTitle = true, this.drawSubtitle = true, this.drawLyricist = true, this.drawComposer = true, this.drawCopyright = false, this.drawCredits = true, this.drawPartNames = true, this.fingeringPosition = n.PlacementEnum.Left, this.drawHiddenNotes = false, this.rules = e3, this.rules || (this.rules = new s.EngravingRules()), this.DrawingParametersEnum = t3;
          }
          set DrawingParametersEnum(t3) {
            switch (this.drawingParametersEnum = t3, t3) {
              case r.DrawingParametersEnum.allon:
                this.setForAllOn();
                break;
              case r.DrawingParametersEnum.thumbnail:
                this.setForThumbnail();
                break;
              case r.DrawingParametersEnum.leadsheet:
                this.setForLeadsheet();
                break;
              case r.DrawingParametersEnum.compact:
                this.setForCompactMode();
                break;
              case r.DrawingParametersEnum.compacttight:
                this.setForCompactTightMode();
                break;
              case r.DrawingParametersEnum.default:
              default:
                this.setForDefault();
            }
          }
          get DrawingParametersEnum() {
            return this.drawingParametersEnum;
          }
          setForAllOn() {
            this.drawHighlights = true, this.drawErrors = true, this.drawSelectionStartSymbol = true, this.drawSelectionEndSymbol = true, this.drawCursors = true, this.drawActivitySymbols = true, this.drawScrollIndicator = true, this.drawComments = true, this.drawMarkedAreas = true, this.DrawTitle = true, this.DrawSubtitle = true, this.DrawComposer = true, this.DrawLyricist = true, this.drawCredits = true, this.DrawPartNames = true, this.drawHiddenNotes = true, this.rules.CompactMode = false;
          }
          setForDefault() {
            this.rules.loadDefaultValues(), this.setForAllOn(), this.drawHiddenNotes = false;
          }
          setForThumbnail() {
            this.drawHighlights = false, this.drawErrors = false, this.drawSelectionStartSymbol = false, this.drawSelectionStartSymbol = false, this.drawCursors = false, this.drawActivitySymbols = false, this.drawScrollIndicator = false, this.drawComments = true, this.drawMarkedAreas = true, this.drawHiddenNotes = false;
          }
          setForCompactMode() {
            this.rules.CompactMode = true, this.DrawCredits = false, this.drawHiddenNotes = false;
          }
          setForCompactTightMode() {
            this.setForCompactMode(), this.DrawPartNames = false, this.rules.VoiceSpacingMultiplierVexflow = 0.65, this.rules.VoiceSpacingAddendVexflow = 2, this.rules.MinSkyBottomDistBetweenStaves = 1, this.rules.MinSkyBottomDistBetweenSystems = 1, this.rules.BetweenStaffDistance = 2.5, this.rules.StaffDistance = 3.5, this.rules.MinimumDistanceBetweenSystems = 1, this.rules.PageBottomMargin = 0, this.rules.PageLeftMargin = 2, this.rules.PageRightMargin = 2;
          }
          setForLeadsheet() {
            this.drawHighlights = false, this.drawErrors = false, this.drawSelectionStartSymbol = true, this.drawSelectionEndSymbol = true, this.drawCursors = true, this.drawActivitySymbols = false, this.drawScrollIndicator = true, this.drawComments = true, this.drawMarkedAreas = true;
          }
          get DrawCredits() {
            return this.drawCredits;
          }
          set DrawCredits(t3) {
            this.drawCredits = t3, this.DrawComposer = t3, this.DrawTitle = t3, this.DrawSubtitle = t3, this.DrawLyricist = t3, this.DrawCopyright = t3;
          }
          get DrawTitle() {
            return this.drawTitle;
          }
          set DrawTitle(t3) {
            this.drawTitle = t3, this.rules.RenderTitle = t3, t3 || (this.DrawSubtitle = false);
          }
          get DrawSubtitle() {
            return this.drawSubtitle;
          }
          set DrawSubtitle(t3) {
            this.drawSubtitle = t3, this.rules.RenderSubtitle = t3, t3 && (this.DrawTitle = true);
          }
          get DrawComposer() {
            return this.drawComposer;
          }
          set DrawComposer(t3) {
            this.drawComposer = t3, this.rules.RenderComposer = t3;
          }
          get DrawLyricist() {
            return this.drawLyricist;
          }
          set DrawLyricist(t3) {
            this.drawLyricist = t3, this.rules.RenderLyricist = t3;
          }
          get DrawCopyright() {
            return this.drawCopyright;
          }
          set DrawCopyright(t3) {
            this.drawCopyright = t3, this.rules.RenderCopyright = t3;
          }
          get DrawPartNames() {
            return this.drawPartNames;
          }
          set DrawPartNames(t3) {
            this.drawPartNames = t3, this.rules.RenderPartNames = t3, this.rules.RenderPartNames || (this.rules.RenderPartAbbreviations = false);
          }
          get FingeringPosition() {
            return this.fingeringPosition;
          }
          set FingeringPosition(t3) {
            this.fingeringPosition = t3, this.rules.FingeringPosition = t3;
          }
          get Rules() {
            return this.rules;
          }
          set Rules(t3) {
            this.rules = t3;
          }
        };
      }, 3667: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SkyBottomLineBatchCalculatorBackend = void 0;
        const n = i2(9834), r = s(i2(3065));
        e2.SkyBottomLineBatchCalculatorBackend = class {
          constructor(t3, e3) {
            this.elementHeight = 300, this.canvas = new n.CanvasVexFlowBackend(t3), this.measures = e3, this.maxWidth = Math.max(...this.measures.map((t4) => {
              let e4 = t4.getVFStave().getWidth();
              return e4 > 0 || t4.IsExtraGraphicalMeasure || (r.default.warn("SkyBottomLineBatchCalculatorBackend: width not > 0 in measure " + t4.MeasureNumber), e4 = 50), e4;
            })), this.samplingUnit = t3.SamplingUnit;
          }
          initialize() {
            if (this.tableConfiguration = { ...this.getPreferredRenderingConfiguration(this.maxWidth, this.elementHeight), elementHeight: this.elementHeight }, this.tableConfiguration.numRows < 1 || this.tableConfiguration.numColumns < 1) throw r.default.warn("SkyBottomLineBatchCalculatorBackend: numRows or numColumns in tableConfiguration is 0"), new Error("numRows or numColumns in tableConfiguration is 0");
            this.tableConfiguration.elementWidth < this.maxWidth && r.default.warn("SkyBottomLineBatchCalculatorBackend: elementWidth in tableConfiguration is less than the width of widest measure");
            const t3 = this.tableConfiguration.elementWidth * this.tableConfiguration.numColumns, e3 = this.elementHeight * this.tableConfiguration.numRows;
            return this.canvas.initializeHeadless(t3, e3), this.onInitialize(this.tableConfiguration), this;
          }
          calculateLines() {
            const { numColumns: t3, numRows: e3, elementWidth: i3 } = this.tableConfiguration, s2 = this.elementHeight, n2 = t3 * e3, o = this.canvas.getContext(), a = o, l = this.canvas.getCanvas(), h = [];
            for (let e4 = 0; e4 < this.measures.length; e4 += n2) {
              o.clear();
              const c = this.measures.slice(e4, e4 + n2);
              for (let e5 = 0; e5 < c.length; ++e5) {
                const n3 = c[e5], l2 = n3.getVFStave(), h2 = e5 % t3, u2 = Math.floor(e5 / t3);
                let d = l2.getWidth();
                d > 0 || n3.IsExtraGraphicalMeasure || (d = 50), d = Math.floor(d), n3.PositionAndShape.calculateAbsolutePositionsRecursive(0, 0);
                const f = 0;
                l2.setX(f);
                const m = l2.y + 100;
                l2.setY(m);
                const p = l2.getWidth();
                l2.setWidth(d), n3.format(), l2.setWidth(p);
                try {
                  a.translate(h2 * i3, u2 * s2), n3.draw(o), a.translate(-h2 * i3, -u2 * s2);
                } catch (t4) {
                  r.default.warn("SkyBottomLineBatchCalculatorBackend.calculateLines.draw", t4);
                }
              }
              const u = this.calculateFromCanvas(l, o, c, this.samplingUnit, this.tableConfiguration);
              h.push(...u);
            }
            return h;
          }
        };
      }, 3753: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowGraphicalSymbolFactory = void 0;
        var n = s(i2(3206)).default.Flow;
        const r = i2(4332), o = i2(5246), a = i2(6670), l = i2(437), h = i2(9635), c = i2(6659), u = i2(4134), d = i2(6014), f = i2(6173), m = i2(5866), p = i2(3849);
        e2.VexFlowGraphicalSymbolFactory = class {
          createMusicSystem(t3, e3) {
            return new r.VexFlowMusicSystem(t3, e3);
          }
          createStaffLine(t3, e3) {
            return new m.VexFlowStaffLine(t3, e3);
          }
          createGraphicalMeasure(t3, e3, i3 = false) {
            return new o.VexFlowMeasure(e3, t3, void 0);
          }
          createMultiRestMeasure(t3, e3, i3) {
            return new p.VexFlowMultiRestMeasure(e3, t3, i3);
          }
          createTabStaffMeasure(t3, e3) {
            return new f.VexFlowTabMeasure(e3, t3);
          }
          createExtraGraphicalMeasure(t3) {
            const e3 = new o.VexFlowMeasure(t3.ParentStaff, void 0, t3);
            return e3.IsExtraGraphicalMeasure = true, e3.ExtraGraphicalMeasurePreviousMeasure = t3.Measures.last(), e3;
          }
          createStaffEntry(t3, e3) {
            return new a.VexFlowStaffEntry(e3, t3, void 0);
          }
          createVoiceEntry(t3, e3) {
            return new u.VexFlowVoiceEntry(t3, e3);
          }
          createNote(t3, e3, i3, s2 = l.OctaveEnum.NONE, n2, r2 = void 0) {
            return new h.VexFlowGraphicalNote(t3, e3, i3, s2, n2, r2);
          }
          createGraceNote(t3, e3, i3, s2, n2 = l.OctaveEnum.NONE) {
            return new h.VexFlowGraphicalNote(t3, e3, i3, n2, s2);
          }
          addGraphicalAccidental(t3, e3) {
            t3.setAccidental(e3);
          }
          addFermataAtTiedEndNote(t3, e3) {
          }
          createInStaffClef(t3, e3) {
            const i3 = t3, s2 = d.VexFlowConverter.Clef(e3, "small");
            i3.vfClefBefore = new n.ClefNote(s2.type, s2.size, s2.annotation);
          }
          createChordSymbols(t3, e3, i3, s2) {
            const n2 = e3.parentMeasure.parentSourceMeasure.Rules;
            let r2 = 0;
            const o2 = n2.ChordSymbolXSpacing;
            for (const a2 of t3.ChordContainers) {
              let t4 = e3.PositionAndShape;
              1 === e3.graphicalVoiceEntries.length && 1 === e3.graphicalVoiceEntries[0].notes.length && e3.graphicalVoiceEntries[0].notes[0].sourceNote.isWholeRest() && (t4 = e3.parentMeasure.PositionAndShape, r2 += e3.parentMeasure.beginInstructionsWidth, r2 += n2.ChordSymbolWholeMeasureRestXOffset);
              const l2 = new c.GraphicalChordSymbolContainer(a2, t4, n2.ChordSymbolTextHeight, i3, s2, e3.parentMeasure.parentSourceMeasure.Rules), h2 = l2.GraphicalLabel;
              h2.PositionAndShape.RelativePosition.y -= n2.ChordSymbolYOffset, h2.setLabelPositionAndShapeBorders();
              let u2 = 0;
              h2.PositionAndShape.Size.width < n2.ChordSymbolExtraXShiftWidthThreshold && (u2 = n2.ChordSymbolExtraXShiftForShortChordSymbols), h2.PositionAndShape.RelativePosition.x += r2 + u2, h2.setLabelPositionAndShapeBorders(), l2.PositionAndShape.calculateBoundingBox(), e3.graphicalChordContainers.push(l2), r2 += h2.PositionAndShape.Size.width + o2;
            }
          }
          createGraphicalTechnicalInstruction(t3, e3) {
          }
        };
      }, 3849: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowMultiRestMeasure = void 0;
        var n = s(i2(3206)).default.Flow;
        const r = i2(5246);
        class o extends r.VexFlowMeasure {
          constructor(t3, e3 = void 0, i3 = void 0) {
            super(t3, e3, i3), this.minimumStaffEntriesWidth = -1, i3 ? this.rules = i3.ParentMusicSystem.rules : e3 && (this.rules = e3.Rules), this.resetLayout(), this.multiRestElement = new n.MultiMeasureRest(e3.multipleRestMeasures, {});
          }
          draw(t3) {
            var _a, _b;
            const e3 = t3.openGroup();
            e3 && ((_a = e3.classList) == null ? void 0 : _a.add("vf-measure"), (_b = e3.classList) == null ? void 0 : _b.add("multi"), e3.id = `${this.MeasureNumber}`), this.stave.setContext(t3).draw(), this.multiRestElement.setStave(this.stave), this.multiRestElement.setContext(t3), this.multiRestElement.draw(), t3.closeGroup();
            for (const e4 of this.connectors) e4.setContext(t3).draw();
          }
          format() {
            var _a, _b;
            for (const t3 of this.staffEntries) {
              const e3 = this.PositionAndShape.Size.width - this.beginInstructionsWidth;
              t3.PositionAndShape.RelativePosition.x = this.PositionAndShape.Size.width / 2 + this.beginInstructionsWidth / 3, t3.PositionAndShape.RelativePosition.y = 0;
              const i3 = (_b = (_a = t3.graphicalVoiceEntries[0]) == null ? void 0 : _a.notes[0]) == null ? void 0 : _b.PositionAndShape;
              i3.BorderLeft = -e3 / 3, i3.BorderRight = e3 / 3, i3.BorderTop = 1, i3.BorderBottom = 3, t3.PositionAndShape.calculateBoundingBox();
            }
          }
          getVoicesWithinMeasure() {
            return [];
          }
          getGraphicalVoiceEntriesPerVoice(t3) {
            return [];
          }
          getRestFilledVexFlowStaveNotesPerVoice(t3) {
            return [];
          }
          handleBeam(t3, e3) {
          }
          handleTuplet(t3, e3) {
          }
          finalizeBeams() {
          }
          finalizeTuplets() {
          }
          layoutStaffEntry(t3) {
          }
          graphicalMeasureCreatedCalculations() {
          }
          createArticulations() {
          }
          createOrnaments() {
          }
          createFingerings(t3) {
          }
          getVFStave() {
            return this.stave;
          }
        }
        e2.VexFlowMultiRestMeasure = o;
      }, 3902: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.IXmlElement = void 0;
        class i2 {
          constructor(t3) {
            if (this.hasAttributes = false, !t3) throw new Error("IXmlElement: expected Element, got undefined");
            this.elem = t3, this.name = t3.nodeName.toLowerCase(), t3.hasAttributes() && (this.hasAttributes = true, this.firstAttribute = t3.attributes[0]), this.hasElements = t3.hasChildNodes(), 1 === t3.childNodes.length && t3.childNodes[0].nodeType === Node.TEXT_NODE ? this.value = t3.childNodes[0].nodeValue : this.value = "";
          }
          attribute(t3) {
            return this.elem.attributes.getNamedItem(t3);
          }
          attributes() {
            if (!this.attrs) {
              const t3 = this.elem.attributes, e3 = [];
              for (let i3 = 0; i3 < t3.length; i3 += 1) e3.push(t3[i3]);
              this.attrs = e3;
            }
            return this.attrs;
          }
          element(t3) {
            const e3 = this.elem.childNodes;
            for (let s = 0, n = e3.length; s < n; s += 1) {
              const n2 = e3[s];
              if (n2.nodeType === Node.ELEMENT_NODE && n2.nodeName.toLowerCase() === t3) return new i2(n2);
            }
          }
          elements(t3) {
            const e3 = this.elem.childNodes, s = [], n = !t3;
            n || (t3 = t3.toLowerCase());
            for (let r = 0; r < e3.length; r += 1) {
              const o = e3[r];
              o.nodeType !== Node.ELEMENT_NODE || !n && o.nodeName.toLowerCase() !== t3 || s.push(new i2(o));
            }
            return s;
          }
          combinedElement(t3) {
            const e3 = this.elem.childNodes;
            if (e3.length > 0) {
              let s;
              for (let i3 = 0, n = e3.length; i3 < n; i3 += 1) {
                const n2 = e3[i3];
                if (n2.nodeType === Node.ELEMENT_NODE && n2.nodeName.toLowerCase() === t3) if (s) {
                  const t4 = n2.childNodes;
                  for (let e4 = 0, i4 = t4.length; e4 < i4; e4 += 1) {
                    const i5 = t4[e4];
                    s.appendChild(i5.cloneNode(true));
                  }
                } else s = n2;
              }
              if (s) return new i2(s);
            }
          }
        }
        e2.IXmlElement = i2;
      }, 4022: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalSlur = void 0;
        const n = i2(9409), r = i2(6711), o = i2(6362), a = i2(6904), l = i2(4249), h = i2(2561), c = i2(1336);
        var u = s(i2(3206)).default.Flow;
        class d extends r.GraphicalCurve {
          constructor(t3, e3) {
            super(), this.staffEntries = [], this.slur = t3, this.rules = e3;
          }
          static Compare(t3, e3) {
            if (t3.staffEntries.length < 1) return -1;
            if (e3.staffEntries.length < 1) return 1;
            const i3 = h.Fraction.minus(t3.staffEntries[t3.staffEntries.length - 1].getAbsoluteTimestamp(), t3.staffEntries[0].getAbsoluteTimestamp()), s2 = h.Fraction.minus(e3.staffEntries[e3.staffEntries.length - 1].getAbsoluteTimestamp(), e3.staffEntries[0].getAbsoluteTimestamp());
            return i3.RealValue > s2.RealValue ? 1 : s2.RealValue > i3.RealValue ? -1 : 0;
          }
          calculateCurve(t3) {
            const e3 = this.staffEntries[0], i3 = this.staffEntries[this.staffEntries.length - 1];
            let s2 = e3.findGraphicalNoteFromNote(this.slur.StartNote);
            !s2 && this.graceStart && (s2 = e3.findGraphicalNoteFromGraceNote(this.slur.StartNote)), s2 || (s2 = e3.findEndTieGraphicalNoteFromNoteWithStartingSlur(this.slur.StartNote, this.slur));
            let r2 = i3.findGraphicalNoteFromNote(this.slur.EndNote);
            !r2 && this.graceEnd && (r2 = i3.findGraphicalNoteFromGraceNote(this.slur.EndNote));
            const l2 = e3.parentMeasure.ParentStaffLine, h2 = l2.SkyBottomLineCalculator;
            this.calculatePlacement(h2, l2);
            const c2 = this.calculateStartAndEnd(s2, r2, l2, t3, h2), u2 = c2.startX, d2 = c2.endX;
            let f = c2.startY, m = c2.endY;
            const p = t3.SlurTangentMinAngle, g = t3.SlurTangentMaxAngle;
            let b;
            if (this.placement === o.PlacementEnum.Above) {
              f -= t3.SlurNoteHeadYOffset, m -= t3.SlurNoteHeadYOffset;
              const e4 = new n.PointF2D(this.staffEntries[0].parentMeasure.PositionAndShape.RelativePosition.x + this.staffEntries[0].PositionAndShape.RelativePosition.x, f);
              s2 ? e4.x += this.staffEntries[0].PositionAndShape.BorderRight : e4.x = this.staffEntries[0].parentMeasure.beginInstructionsWidth, this.graceStart && (e4.x += i3.PositionAndShape.RelativePosition.x);
              const o2 = new n.PointF2D(this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x + this.staffEntries[this.staffEntries.length - 1].PositionAndShape.RelativePosition.x, m);
              if (r2 ? o2.x += this.staffEntries[this.staffEntries.length - 1].PositionAndShape.BorderLeft : o2.x = this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x + this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.Size.width, this.graceEnd && (o2.x += i3.staffEntryParent.PositionAndShape.RelativePosition.x), b = this.calculateTopPoints(e4, o2, l2, h2), 0 === b.length) {
                const t4 = new n.PointF2D((o2.x - e4.x) / 2 + e4.x, (o2.y - e4.y) / 2 + e4.y);
                b.push(t4);
              }
              const c3 = Math.atan((m - f) / (d2 - u2)), S = new n.PointF2D(0, 0);
              let y = new n.PointF2D(d2 - u2, -(m - f));
              const E = a.Matrix2D.getRotationMatrix(c3), x = E.getTransposeMatrix();
              y = E.vectorMultiplication(y);
              const v = this.calculateTranslatedAndRotatedPointListAbove(b, u2, f, E), _ = this.calculateMaxLeftSlope(v, S, y), M = this.calculateMaxRightSlope(v, S, y), w = S.y - S.x * _, P = y.y - y.x * M, T = new n.PointF2D();
              let L = false;
              Math.abs(Math.abs(_) - Math.abs(M)) < 1e-4 ? (T.x = y.x / 2, T.y = 0, L = true) : (T.x = (P - w) / (_ - M), T.y = _ * T.x + w);
              const A = this.calculateHeightWidthRatio(y.x, v), C = 0, R = 0;
              let N = p, I = -p;
              if (!L) {
                const t4 = this.calculateAngles(p, _, M, g);
                N = t4.startAngle, I = t4.endAngle;
              }
              const B = this.calculateControlPoints(y.x, N, I, v, A, f, m);
              let F = B.startControlPoint, D = B.endControlPoint;
              F = x.vectorMultiplication(F), F.x += u2, F.y = -F.y + f, D = x.vectorMultiplication(D), D.x += u2, D.y = -D.y + f, this.bezierStartPt = new n.PointF2D(u2, f - C), this.bezierStartControlPt = new n.PointF2D(F.x, F.y - C), this.bezierEndControlPt = new n.PointF2D(D.x, D.y - R), this.bezierEndPt = new n.PointF2D(d2, m - R);
              const O = l2.SkyLine.length, k = h2.getLeftIndexForPointX(this.bezierStartPt.x, O), V = h2.getLeftIndexForPointX(this.bezierEndPt.x, O), G = this.bezierEndPt.x - this.bezierStartPt.x, W = h2.SamplingUnit;
              for (let t4 = k; t4 < V; t4++) {
                const e5 = t4 / W - this.bezierStartPt.x, i4 = this.calculateCurvePointAtIndex(Math.abs(e5) / G);
                let s3 = h2.getLeftIndexForPointX(i4.x, O);
                s3 >= k && (l2.SkyLine[s3] = Math.min(l2.SkyLine[s3], i4.y)), s3++, s3 < O && (l2.SkyLine[s3] = Math.min(l2.SkyLine[s3], i4.y));
              }
            } else {
              f += t3.SlurNoteHeadYOffset, m += t3.SlurNoteHeadYOffset;
              const e4 = new n.PointF2D(this.staffEntries[0].parentMeasure.PositionAndShape.RelativePosition.x + this.staffEntries[0].PositionAndShape.RelativePosition.x, f);
              s2 ? e4.x += this.staffEntries[0].PositionAndShape.BorderRight : e4.x = this.staffEntries[0].parentMeasure.beginInstructionsWidth, this.graceStart && (e4.x += i3.PositionAndShape.RelativePosition.x);
              const o2 = new n.PointF2D(this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x + this.staffEntries[this.staffEntries.length - 1].PositionAndShape.RelativePosition.x, m);
              if (r2 ? o2.x += this.staffEntries[this.staffEntries.length - 1].PositionAndShape.BorderLeft : o2.x = this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x + this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.Size.width, this.graceEnd && (o2.x += i3.staffEntryParent.PositionAndShape.RelativePosition.x), b = this.calculateBottomPoints(e4, o2, l2, h2), 0 === b.length) {
                const t4 = new n.PointF2D((o2.x - e4.x) / 2 + e4.x, (o2.y - e4.y) / 2 + e4.y);
                b.push(t4);
              }
              const c3 = Math.atan((m - f) / (d2 - u2)), S = new n.PointF2D(0, 0);
              let y = new n.PointF2D(d2 - u2, m - f);
              const E = a.Matrix2D.getRotationMatrix(-c3), x = E.getTransposeMatrix();
              y = E.vectorMultiplication(y);
              const v = this.calculateTranslatedAndRotatedPointListBelow(b, u2, f, E), _ = this.calculateMaxLeftSlope(v, S, y), M = this.calculateMaxRightSlope(v, S, y), w = S.y - S.x * _, P = y.y - y.x * M, T = new n.PointF2D();
              let L = false;
              Math.abs(Math.abs(_) - Math.abs(M)) < 1e-4 ? (T.x = y.x / 2, T.y = 0, L = true) : (T.x = (P - w) / (_ - M), T.y = _ * T.x + w);
              const A = this.calculateHeightWidthRatio(y.x, v), C = 0, R = 0;
              let N = p, I = -p;
              if (!L) {
                const t4 = this.calculateAngles(p, _, M, g);
                N = t4.startAngle, I = t4.endAngle;
              }
              const B = this.calculateControlPoints(y.x, N, I, v, A, f, m);
              let F = B.startControlPoint, D = B.endControlPoint;
              F = x.vectorMultiplication(F), F.x += u2, F.y += f, D = x.vectorMultiplication(D), D.x += u2, D.y += f, this.bezierStartPt = new n.PointF2D(u2, f + C), this.bezierStartControlPt = new n.PointF2D(F.x, F.y + C), this.bezierEndControlPt = new n.PointF2D(D.x, D.y + R), this.bezierEndPt = new n.PointF2D(d2, m + R);
              const O = l2.BottomLine.length, k = h2.getLeftIndexForPointX(this.bezierStartPt.x, O), V = h2.getLeftIndexForPointX(this.bezierEndPt.x, O), G = this.bezierEndPt.x - this.bezierStartPt.x, W = h2.SamplingUnit;
              for (let t4 = k; t4 < V; t4++) {
                const e5 = t4 / W - this.bezierStartPt.x, i4 = this.calculateCurvePointAtIndex(Math.abs(e5) / G);
                let s3 = h2.getLeftIndexForPointX(i4.x, O);
                s3 >= k && (l2.BottomLine[s3] = Math.max(l2.BottomLine[s3], i4.y)), s3++, s3 < O && (l2.BottomLine[s3] = Math.max(l2.BottomLine[s3], i4.y));
              }
            }
          }
          calculateStartAndEnd(t3, e3, i3, s2, n2) {
            let r2 = 0, a2 = 0, l2 = 0, h2 = 0;
            if (t3) {
              r2 = t3.PositionAndShape.RelativePosition.x + t3.parentVoiceEntry.parentStaffEntry.PositionAndShape.RelativePosition.x + t3.parentVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x, this.graceStart && (r2 += t3.parentVoiceEntry.parentStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x);
              const e4 = t3.parentVoiceEntry;
              this.placement === o.PlacementEnum.Above ? (a2 = e4.PositionAndShape.RelativePosition.y + e4.PositionAndShape.BorderTop, this.rules.SlurPlacementUseSkyBottomLine && (a2 = Math.min(h2, e4.parentStaffEntry.getSkylineMin()))) : (a2 = e4.PositionAndShape.RelativePosition.y + e4.PositionAndShape.BorderBottom, this.rules.SlurPlacementUseSkyBottomLine && (a2 = Math.max(h2, e4.parentStaffEntry.getBottomlineMax()))), e4.parentVoiceEntry.StemDirection === c.StemDirectionType.Down && this.placement === o.PlacementEnum.Below && (r2 -= 0.5), e4.parentVoiceEntry.StemDirection === c.StemDirectionType.Up && this.placement === o.PlacementEnum.Above && (r2 += 0.5);
            } else r2 = 0;
            if (e3) {
              l2 = e3.PositionAndShape.RelativePosition.x + e3.parentVoiceEntry.parentStaffEntry.PositionAndShape.RelativePosition.x + e3.parentVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x, this.graceEnd && (l2 += e3.parentVoiceEntry.parentStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x);
              const t4 = e3.parentVoiceEntry;
              let i4;
              for (const s3 of t4.parentVoiceEntry.Articulations) if (i4 = s3.placement, s3.placement === o.PlacementEnum.NotYetDefined) {
                for (const t5 of e3.vfnote[0].modifiers) if (t5.getCategory() === u.Articulation.CATEGORY) {
                  t5.position === u.Modifier.Position.ABOVE ? (s3.placement = o.PlacementEnum.Above, i4 = o.PlacementEnum.Above) : t5.position === u.Modifier.Position.BELOW && (s3.placement = o.PlacementEnum.Below, i4 = o.PlacementEnum.Below);
                  break;
                }
              }
              this.placement === o.PlacementEnum.Above ? (h2 = t4.PositionAndShape.RelativePosition.y + t4.PositionAndShape.BorderTop, this.rules.SlurPlacementUseSkyBottomLine && (h2 = Math.min(h2, t4.parentStaffEntry.getSkylineMin())), i4 === o.PlacementEnum.Above && (h2 -= this.rules.SlurEndArticulationYOffset)) : (h2 = t4.PositionAndShape.RelativePosition.y + t4.PositionAndShape.BorderBottom, this.rules.SlurPlacementUseSkyBottomLine && (h2 = Math.max(h2, t4.parentStaffEntry.getBottomlineMax())), i4 === o.PlacementEnum.Below && (h2 += this.rules.SlurEndArticulationYOffset)), t4.parentVoiceEntry.StemDirection === c.StemDirectionType.Down && this.placement === o.PlacementEnum.Below && (l2 -= 0.5), t4.parentVoiceEntry.StemDirection === c.StemDirectionType.Up && this.placement === o.PlacementEnum.Above && (l2 += 0.5);
            } else l2 = i3.PositionAndShape.Size.width;
            return t3 || e3 || (a2 = -1.5, h2 = -1.5), t3 || (a2 = this.placement === o.PlacementEnum.Above ? h2 - 1 : h2 + 1), e3 || (h2 = this.placement === o.PlacementEnum.Above ? a2 - 1 : a2 + 1), this.slur.startNoteHasMoreStartingSlurs() && this.slur.isSlurLonger() && (this.placement === o.PlacementEnum.Above ? a2 -= s2.SlursStartingAtSameStaffEntryYOffset : a2 += s2.SlursStartingAtSameStaffEntryYOffset), this.slur.endNoteHasMoreEndingSlurs() && this.slur.isSlurLonger() && (this.placement === o.PlacementEnum.Above ? h2 -= s2.SlursStartingAtSameStaffEntryYOffset : h2 += s2.SlursStartingAtSameStaffEntryYOffset), this.placement === o.PlacementEnum.Above ? (a2 = Math.min(a2, 1.5), h2 = Math.min(h2, 1.5)) : (a2 = Math.max(a2, i3.StaffHeight - 1.5), h2 = Math.max(h2, i3.StaffHeight - 1.5)), { startX: r2, startY: a2, endX: l2, endY: h2 };
          }
          calculatePlacement(t3, e3) {
            if (this.rules.SlurPlacementFromXML && this.slur.PlacementXml !== o.PlacementEnum.NotYetDefined) return void (this.placement = this.slur.PlacementXml);
            for (let t4 = 0, e4 = this.staffEntries.length; t4 < e4; ++t4) if (this.staffEntries[t4].parentMeasure.hasMultipleVoices()) return void (this.slur.StartNote.ParentVoiceEntry.ParentVoice instanceof l.LinkedVoice || this.slur.EndNote.ParentVoiceEntry.ParentVoice instanceof l.LinkedVoice ? this.placement = o.PlacementEnum.Below : this.placement = o.PlacementEnum.Above);
            for (let t4 = 0, e4 = this.staffEntries.length; t4 < e4; ++t4) if (this.staffEntries[t4].LyricsEntries.length > 0) return void (this.placement = o.PlacementEnum.Above);
            const i3 = this.staffEntries[0], s2 = this.staffEntries[this.staffEntries.length - 1], n2 = i3.graphicalVoiceEntries[0].parentVoiceEntry.StemDirection;
            if (n2 === s2.graphicalVoiceEntries[0].parentVoiceEntry.StemDirection) this.placement = n2 === c.StemDirectionType.Up ? o.PlacementEnum.Below : o.PlacementEnum.Above, this.rules.SlurPlacementAtStems && (this.placement = n2 === c.StemDirectionType.Up ? o.PlacementEnum.Above : o.PlacementEnum.Below);
            else {
              let n3 = i3.PositionAndShape.BorderLeft + i3.PositionAndShape.RelativePosition.x + i3.parentMeasure.PositionAndShape.RelativePosition.x, r2 = s2.PositionAndShape.BorderRight + s2.PositionAndShape.RelativePosition.x + s2.parentMeasure.PositionAndShape.RelativePosition.x;
              this.graceStart && (n3 += s2.PositionAndShape.RelativePosition.x), this.graceEnd && (r2 += s2.staffEntryParent.PositionAndShape.RelativePosition.x);
              const a2 = -1 * t3.getSkyLineMinInRange(n3, r2), l2 = t3.getBottomLineMaxInRange(n3, r2) - e3.StaffHeight;
              this.placement = l2 > a2 ? o.PlacementEnum.Above : o.PlacementEnum.Below;
            }
          }
          calculateTopPoints(t3, e3, i3, s2) {
            const r2 = [];
            let o2 = s2.getRightIndexForPointX(t3.x, i3.SkyLine.length), a2 = s2.getLeftIndexForPointX(e3.x, i3.SkyLine.length);
            o2 < 0 && (o2 = 0), a2 >= i3.SkyLine.length && (a2 = i3.SkyLine.length - 1);
            for (let t4 = o2; t4 < a2; t4++) {
              const e4 = i3.SkyLine[t4];
              if (0 !== e4) {
                const i4 = new n.PointF2D((0.5 + t4) / s2.SamplingUnit, e4);
                r2.push(i4);
              }
            }
            return r2;
          }
          calculateBottomPoints(t3, e3, i3, s2) {
            const r2 = [];
            let o2 = s2.getRightIndexForPointX(t3.x, i3.BottomLine.length), a2 = s2.getLeftIndexForPointX(e3.x, i3.BottomLine.length);
            o2 < 0 && (o2 = 0), a2 >= i3.BottomLine.length && (a2 = i3.BottomLine.length - 1);
            for (let t4 = o2; t4 < a2; t4++) {
              const e4 = i3.BottomLine[t4];
              if (0 !== e4) {
                const i4 = new n.PointF2D((0.5 + t4) / s2.SamplingUnit, e4);
                r2.push(i4);
              }
            }
            return r2;
          }
          calculateMaxLeftSlope(t3, e3, i3) {
            let s2 = -Number.MAX_VALUE;
            const n2 = e3.x, r2 = e3.y;
            for (let e4 = 0; e4 < t3.length; e4++) Math.abs(t3[e4].y - Number.MAX_VALUE) < 1e-4 || Math.abs(t3[e4].y - -Number.MAX_VALUE) < 1e-4 || (s2 = Math.max(s2, (t3[e4].y - r2) / (t3[e4].x - n2)));
            return s2 = Math.max(s2, Math.abs(i3.y - r2) / (i3.x - n2)), s2 = Math.min(s2, 5.6713), s2;
          }
          calculateMaxRightSlope(t3, e3, i3) {
            let s2 = Number.MAX_VALUE;
            const n2 = i3.x, r2 = i3.y;
            for (let e4 = 0; e4 < t3.length; e4++) Math.abs(t3[e4].y - Number.MAX_VALUE) < 1e-4 || Math.abs(t3[e4].y - -Number.MAX_VALUE) < 1e-4 || (s2 = Math.min(s2, (r2 - t3[e4].y) / (n2 - t3[e4].x)));
            return s2 = Math.min(s2, (r2 - e3.y) / (n2 - e3.x)), s2 = Math.max(s2, -5.6713), s2;
          }
          getPointListMaxY(t3) {
            let e3 = -Number.MAX_VALUE;
            for (let i3 = 0, s2 = t3.length; i3 < s2; ++i3) {
              const s3 = t3[i3];
              Math.abs(s3.y - -Number.MAX_VALUE) < 1e-4 || Math.abs(s3.y - Number.MAX_VALUE) < 1e-4 || (e3 = Math.max(e3, s3.y));
            }
            return e3;
          }
          calculateTranslatedAndRotatedPointListAbove(t3, e3, i3, s2) {
            const r2 = [];
            for (let o2 = 0; o2 < t3.length; o2++) {
              if (Math.abs(t3[o2].y - Number.MAX_VALUE) < 1e-4 || Math.abs(t3[o2].y - -Number.MAX_VALUE) < 1e-4) continue;
              let a2 = new n.PointF2D(t3[o2].x - e3, -(t3[o2].y - i3));
              a2 = s2.vectorMultiplication(a2), r2.push(a2);
            }
            return r2;
          }
          calculateTranslatedAndRotatedPointListBelow(t3, e3, i3, s2) {
            const r2 = [];
            for (let o2 = 0; o2 < t3.length; o2++) {
              if (Math.abs(t3[o2].y - Number.MAX_VALUE) < 1e-4 || Math.abs(t3[o2].y - -Number.MAX_VALUE) < 1e-4) continue;
              let a2 = new n.PointF2D(t3[o2].x - e3, t3[o2].y - i3);
              a2 = s2.vectorMultiplication(a2), r2.push(a2);
            }
            return r2;
          }
          calculateHeightWidthRatio(t3, e3) {
            return 0 === e3.length ? 0 : Math.max(0, this.getPointListMaxY(e3)) / t3;
          }
          calculateControlPoints(t3, e3, i3, s2, r2, o2, a2) {
            let l2 = this.rules.SlurHeightFactor, h2 = 1;
            const c2 = this.rules.SlurHeightFlattenLongSlursCutoffAngle, u2 = this.rules.SlurHeightFlattenLongSlursCutoffWidth;
            e3 > c2 && t3 > u2 && (h2 += t3 / 70 * this.rules.SlurHeightFlattenLongSlursFactorByWidth, h2 *= 1 + e3 / 30 * this.rules.SlurHeightFlattenLongSlursFactorByAngle, l2 /= h2);
            const f = Math.min(0.5, Math.max(0.1, 1.7 * e3 / 80 * l2 * Math.pow(Math.max(r2, 0.05), 0.4))), m = Math.min(0.5, Math.max(0.1, 1.7 * -i3 / 80 * l2 * Math.pow(Math.max(r2, 0.05), 0.4))), p = new n.PointF2D();
            p.x = t3 * f * Math.cos(e3 * d.degreesToRadiansFactor), p.y = t3 * f * Math.sin(e3 * d.degreesToRadiansFactor);
            const g = new n.PointF2D();
            g.x = t3 - t3 * m * Math.cos(i3 * d.degreesToRadiansFactor), g.y = -t3 * m * Math.sin(i3 * d.degreesToRadiansFactor);
            let b = p.y - g.y;
            for (; this.rules.SlurMaximumYControlPointDistance && Math.abs(b) > this.rules.SlurMaximumYControlPointDistance; ) b < 0 ? (p.y += 1, g.y -= 1) : (p.y -= 1, g.y += 1), b = p.y - g.y;
            return { startControlPoint: p, endControlPoint: g };
          }
          calculateAngles(t3, e3, i3, s2) {
            let n2 = Math.atan(e3) / d.degreesToRadiansFactor;
            e3 > 0 ? n2 += 20 : n2 -= 20;
            let r2 = Math.atan(i3) / d.degreesToRadiansFactor;
            return i3 < 0 ? r2 -= 20 : r2 += 20, { startAngle: Math.min(Math.max(t3, n2), s2), endAngle: Math.max(Math.min(-t3, r2), -s2) };
          }
        }
        e2.GraphicalSlur = d, d.degreesToRadiansFactor = Math.PI / 180;
      }, 4041: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4831), n = i2(3288), r = function() {
          function t3(t4) {
            this.root = null, this.compare = t4 || s.defaultCompare, this.nElements = 0;
          }
          return t3.prototype.add = function(t4) {
            return !s.isUndefined(t4) && null !== this.insertNode(this.createNode(t4)) && (this.nElements++, true);
          }, t3.prototype.clear = function() {
            this.root = null, this.nElements = 0;
          }, t3.prototype.isEmpty = function() {
            return 0 === this.nElements;
          }, t3.prototype.size = function() {
            return this.nElements;
          }, t3.prototype.contains = function(t4) {
            return !s.isUndefined(t4) && null !== this.searchNode(this.root, t4);
          }, t3.prototype.search = function(t4) {
            var e3 = this.searchNode(this.root, t4);
            if (null !== e3) return e3.element;
          }, t3.prototype.remove = function(t4) {
            var e3 = this.searchNode(this.root, t4);
            return null !== e3 && (this.removeNode(e3), this.nElements--, true);
          }, t3.prototype.inorderTraversal = function(t4) {
            this.inorderTraversalAux(this.root, t4, { stop: false });
          }, t3.prototype.preorderTraversal = function(t4) {
            this.preorderTraversalAux(this.root, t4, { stop: false });
          }, t3.prototype.postorderTraversal = function(t4) {
            this.postorderTraversalAux(this.root, t4, { stop: false });
          }, t3.prototype.levelTraversal = function(t4) {
            this.levelTraversalAux(this.root, t4);
          }, t3.prototype.minimum = function() {
            if (!this.isEmpty() && null !== this.root) return this.minimumAux(this.root).element;
          }, t3.prototype.maximum = function() {
            if (!this.isEmpty() && null !== this.root) return this.maximumAux(this.root).element;
          }, t3.prototype.forEach = function(t4) {
            this.inorderTraversal(t4);
          }, t3.prototype.toArray = function() {
            var t4 = [];
            return this.inorderTraversal(function(e3) {
              return t4.push(e3), true;
            }), t4;
          }, t3.prototype.height = function() {
            return this.heightAux(this.root);
          }, t3.prototype.searchNode = function(t4, e3) {
            for (var i3 = 1; null !== t4 && 0 !== i3; ) (i3 = this.compare(e3, t4.element)) < 0 ? t4 = t4.leftCh : i3 > 0 && (t4 = t4.rightCh);
            return t4;
          }, t3.prototype.transplant = function(t4, e3) {
            null === t4.parent ? this.root = e3 : t4 === t4.parent.leftCh ? t4.parent.leftCh = e3 : t4.parent.rightCh = e3, null !== e3 && (e3.parent = t4.parent);
          }, t3.prototype.removeNode = function(t4) {
            if (null === t4.leftCh) this.transplant(t4, t4.rightCh);
            else if (null === t4.rightCh) this.transplant(t4, t4.leftCh);
            else {
              var e3 = this.minimumAux(t4.rightCh);
              e3.parent !== t4 && (this.transplant(e3, e3.rightCh), e3.rightCh = t4.rightCh, e3.rightCh.parent = e3), this.transplant(t4, e3), e3.leftCh = t4.leftCh, e3.leftCh.parent = e3;
            }
          }, t3.prototype.inorderTraversalAux = function(t4, e3, i3) {
            null === t4 || i3.stop || (this.inorderTraversalAux(t4.leftCh, e3, i3), i3.stop || (i3.stop = false === e3(t4.element), i3.stop || this.inorderTraversalAux(t4.rightCh, e3, i3)));
          }, t3.prototype.levelTraversalAux = function(t4, e3) {
            var i3 = new n.default();
            for (null !== t4 && i3.enqueue(t4), t4 = i3.dequeue() || null; null != t4; ) {
              if (false === e3(t4.element)) return;
              null !== t4.leftCh && i3.enqueue(t4.leftCh), null !== t4.rightCh && i3.enqueue(t4.rightCh), t4 = i3.dequeue() || null;
            }
          }, t3.prototype.preorderTraversalAux = function(t4, e3, i3) {
            null === t4 || i3.stop || (i3.stop = false === e3(t4.element), i3.stop || (this.preorderTraversalAux(t4.leftCh, e3, i3), i3.stop || this.preorderTraversalAux(t4.rightCh, e3, i3)));
          }, t3.prototype.postorderTraversalAux = function(t4, e3, i3) {
            null === t4 || i3.stop || (this.postorderTraversalAux(t4.leftCh, e3, i3), i3.stop || (this.postorderTraversalAux(t4.rightCh, e3, i3), i3.stop || (i3.stop = false === e3(t4.element))));
          }, t3.prototype.minimumAux = function(t4) {
            for (; null != t4 && null !== t4.leftCh; ) t4 = t4.leftCh;
            return t4;
          }, t3.prototype.maximumAux = function(t4) {
            for (; null != t4 && null !== t4.rightCh; ) t4 = t4.rightCh;
            return t4;
          }, t3.prototype.heightAux = function(t4) {
            return null === t4 ? -1 : Math.max(this.heightAux(t4.leftCh), this.heightAux(t4.rightCh)) + 1;
          }, t3.prototype.insertNode = function(t4) {
            for (var e3 = null, i3 = this.root; null !== i3; ) {
              var s2 = this.compare(t4.element, i3.element);
              if (0 === s2) return null;
              s2 < 0 ? (e3 = i3, i3 = i3.leftCh) : (e3 = i3, i3 = i3.rightCh);
            }
            return t4.parent = e3, null === e3 ? this.root = t4 : this.compare(t4.element, e3.element) < 0 ? e3.leftCh = t4 : e3.rightCh = t4, t4;
          }, t3.prototype.createNode = function(t4) {
            return { element: t4, leftCh: null, rightCh: null, parent: null };
          }, t3;
        }();
        e2.default = r;
      }, 4064: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.NoteHeadShape = e2.Notehead = void 0;
        const n = s(i2(3065));
        class r {
          constructor(t3, e3, i3 = void 0) {
            this.sourceNote = t3, this.setShapeFromXml(e3, i3);
          }
          setShapeFromXml(t3, e3 = void 0) {
            this.shape = r.ShapeTypeXmlToShape(t3);
            let i3 = e3;
            void 0 === i3 && (this.sourceNote ? i3 = this.sourceNote.Length.Denominator > 2 : (n.default.warn("notehead: sourceNote and filledXmlAttribute undefined."), i3 = true)), this.filled = i3;
          }
          get SourceNote() {
            return this.sourceNote;
          }
          get Shape() {
            return this.shape;
          }
          get Filled() {
            return this.filled;
          }
          static ShapeTypeXmlToShape(t3) {
            switch (t3.toLowerCase()) {
              case "normal":
                return o.NORMAL;
              case "x":
                return o.X;
              case "slash":
                return o.SLASH;
              case "diamond":
                return o.DIAMOND;
              case "square":
              case "la":
                return o.SQUARE;
              case "do":
              case "triangle":
                return o.TRIANGLE;
              case "inverted triangle":
                return o.TRIANGLE_INVERTED;
              case "rectangle":
                return o.RECTANGLE;
              case "circle-x":
                return o.CIRCLEX;
              default:
                return n.default.info("unsupported/unhandled xml notehead '" + t3 + "'. Using normal notehead."), o.NORMAL;
            }
          }
        }
        var o;
        e2.Notehead = r, function(t3) {
          t3[t3.CIRCLEX = 0] = "CIRCLEX", t3[t3.DIAMOND = 1] = "DIAMOND", t3[t3.NORMAL = 2] = "NORMAL", t3[t3.RECTANGLE = 3] = "RECTANGLE", t3[t3.SLASH = 4] = "SLASH", t3[t3.SQUARE = 5] = "SQUARE", t3[t3.TRIANGLE = 6] = "TRIANGLE", t3[t3.TRIANGLE_INVERTED = 7] = "TRIANGLE_INVERTED", t3[t3.X = 8] = "X";
        }(o || (e2.NoteHeadShape = o = {}));
      }, 4076: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(1325), e2), n(i2(7551), e2), n(i2(6001), e2), n(i2(3457), e2);
      }, 4127: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.ArticulationReader = void 0;
        const n = i2(1336), r = s(i2(3065)), o = i2(3123), a = i2(8215), l = i2(6362), h = i2(8233), c = i2(9003), u = i2(9019), d = i2(8045);
        e2.ArticulationReader = class {
          constructor(t3) {
            this.rules = t3;
          }
          getAccEnumFromString(t3) {
            switch (t3) {
              case "sharp":
                return h.AccidentalEnum.SHARP;
              case "flat":
                return h.AccidentalEnum.FLAT;
              case "natural":
                return h.AccidentalEnum.NATURAL;
              case "double-sharp":
              case "sharp-sharp":
                return h.AccidentalEnum.DOUBLESHARP;
              case "double-flat":
              case "flat-flat":
                return h.AccidentalEnum.DOUBLEFLAT;
              case "triple-sharp":
                return h.AccidentalEnum.TRIPLESHARP;
              case "triple-flat":
                return h.AccidentalEnum.TRIPLEFLAT;
              case "quarter-sharp":
                return h.AccidentalEnum.QUARTERTONESHARP;
              case "quarter-flat":
                return h.AccidentalEnum.QUARTERTONEFLAT;
              case "three-quarters-sharp":
                return h.AccidentalEnum.THREEQUARTERSSHARP;
              case "three-quarters-flat":
                return h.AccidentalEnum.THREEQUARTERSFLAT;
              case "slash-quarter-sharp":
                return h.AccidentalEnum.SLASHQUARTERSHARP;
              case "slash-sharp":
                return h.AccidentalEnum.SLASHSHARP;
              case "double-slash-flat":
                return h.AccidentalEnum.DOUBLESLASHFLAT;
              case "sori":
                return h.AccidentalEnum.SORI;
              case "koron":
                return h.AccidentalEnum.KORON;
              default:
                return h.AccidentalEnum.NONE;
            }
          }
          addArticulationExpression(t3, e3) {
            var _a, _b;
            if (void 0 !== t3 && t3.elements().length > 0) {
              const i3 = t3.elements();
              for (let t4 = 0, s2 = i3.length; t4 < s2; ++t4) {
                const s3 = i3[t4];
                let o2 = s3.name;
                try {
                  o2 = o2.replace("-", "");
                  const t5 = n.ArticulationEnum[o2];
                  if (n.VoiceEntry.isSupportedArticulation(t5)) {
                    let i4 = l.PlacementEnum.NotYetDefined;
                    const r2 = (_a = s3.attribute("placement")) == null ? void 0 : _a.value;
                    "above" === r2 ? i4 = l.PlacementEnum.Above : "below" === r2 && (i4 = l.PlacementEnum.Below);
                    const a2 = new c.Articulation(t5, i4);
                    if ("staccato" === o2) e3.Articulations.length > 0 && e3.Articulations[0].articulationEnum !== n.ArticulationEnum.staccato && e3.Articulations.splice(0, 0, a2);
                    else if ("breathmark" === o2) i4 === l.PlacementEnum.NotYetDefined && (a2.placement = l.PlacementEnum.Above);
                    else if ("strongaccent" === o2) {
                      const t6 = (_b = s3 == null ? void 0 : s3.attribute("type")) == null ? void 0 : _b.value;
                      "up" === t6 ? a2.articulationEnum = n.ArticulationEnum.marcatoup : "down" === t6 && (a2.articulationEnum = n.ArticulationEnum.marcatodown);
                    } else if (t5 === n.ArticulationEnum.softaccent) {
                      const t6 = e3.ParentSourceStaffEntry.ParentStaff.Id - 1;
                      i4 === l.PlacementEnum.NotYetDefined && (i4 = l.PlacementEnum.Above, t6 > 0 && (i4 = l.PlacementEnum.Below));
                      const s4 = e3.ParentSourceStaffEntry.VerticalContainerParent.ParentMeasure, n2 = new u.MultiExpression(s4, e3.Timestamp);
                      n2.StartingContinuousDynamic = new d.ContinuousDynamicExpression(d.ContDynamicEnum.crescendo, i4, t6, s4, -1), n2.StartingContinuousDynamic.IsStartOfSoftAccent = true, n2.StartingContinuousDynamic.StartMultiExpression = n2, n2.StartingContinuousDynamic.EndMultiExpression = n2, n2.EndingContinuousDynamic = new d.ContinuousDynamicExpression(d.ContDynamicEnum.diminuendo, i4, t6, s4, -1), n2.EndingContinuousDynamic.StartMultiExpression = n2, n2.EndingContinuousDynamic.EndMultiExpression = n2, s4.StaffLinkedExpressions[t6].push(n2);
                    }
                    e3.hasArticulation(a2) || e3.Articulations.push(a2);
                  }
                } catch (t5) {
                  const e4 = "Invalid note articulation.";
                  return void r.default.debug("addArticulationExpression", e4, t5);
                }
              }
            }
          }
          addFermata(t3, e3) {
            var _a;
            let i3 = n.ArticulationEnum.fermata;
            t3.attributes().length > 0 && t3.attribute("type") && "inverted" === t3.attribute("type").value && (i3 = n.ArticulationEnum.invertedfermata);
            let s2 = l.PlacementEnum.Above;
            "below" === ((_a = t3.attribute("placement")) == null ? void 0 : _a.value) && (s2 = l.PlacementEnum.Below), e3.Articulations.push(new c.Articulation(i3, s2));
          }
          addTechnicalArticulations(t3, e3, i3) {
            var _a, _b;
            const s2 = { bend: n.ArticulationEnum.bend, "down-bow": n.ArticulationEnum.downbow, "open-string": n.ArticulationEnum.naturalharmonic, "snap-pizzicato": n.ArticulationEnum.snappizzicato, stopped: n.ArticulationEnum.lefthandpizzicato, "up-bow": n.ArticulationEnum.upbow, harmonic: n.ArticulationEnum.naturalharmonic };
            for (const i4 in s2) {
              if (!s2.hasOwnProperty(i4)) continue;
              const n2 = s2[i4], r3 = t3.element(i4);
              if (r3) {
                let t4;
                "above" === ((_a = r3.attribute("placement")) == null ? void 0 : _a.value) && (t4 = l.PlacementEnum.Above), "below" === ((_b = r3.attribute("placement")) == null ? void 0 : _b.value) && (t4 = l.PlacementEnum.Below);
                const i5 = new c.Articulation(n2, t4);
                e3.hasArticulation(i5) || e3.Articulations.push(i5);
              }
            }
            const r2 = t3.elements("fingering");
            for (const t4 of r2) {
              const s3 = this.createTechnicalInstruction(t4, i3);
              s3.type = o.TechnicalInstructionType.Fingering, i3.Fingering || (i3.Fingering = s3), e3.TechnicalInstructions.push(s3);
            }
            const a2 = t3.element("string");
            if (a2) {
              const t4 = this.createTechnicalInstruction(a2, i3);
              t4.type = o.TechnicalInstructionType.String, i3.StringInstruction = t4, e3.TechnicalInstructions.push(t4);
            }
          }
          createTechnicalInstruction(t3, e3) {
            const i3 = new o.TechnicalInstruction();
            i3.sourceNote = e3, i3.value = t3.value;
            const s2 = t3.attribute("placement");
            return this.rules.FingeringPositionFromXML && (i3.placement = this.getPlacement(s2)), i3;
          }
          getPlacement(t3, e3 = l.PlacementEnum.NotYetDefined) {
            if (e3 !== l.PlacementEnum.NotYetDefined) return e3;
            if (!t3) return l.PlacementEnum.NotYetDefined;
            switch (t3.value) {
              case "above":
                return l.PlacementEnum.Above;
              case "below":
                return l.PlacementEnum.Below;
              case "left":
                return l.PlacementEnum.Left;
              case "right":
                return l.PlacementEnum.Right;
              default:
                return l.PlacementEnum.NotYetDefined;
            }
          }
          addOrnament(t3, e3) {
            if (t3) {
              let i3;
              const s2 = { "delayed-inverted-turn": a.OrnamentEnum.DelayedInvertedTurn, "delayed-turn": a.OrnamentEnum.DelayedTurn, "inverted-mordent": a.OrnamentEnum.InvertedMordent, "inverted-turn": a.OrnamentEnum.InvertedTurn, mordent: a.OrnamentEnum.Mordent, "trill-mark": a.OrnamentEnum.Trill, turn: a.OrnamentEnum.Turn };
              for (const e4 in s2) {
                if (!s2.hasOwnProperty(e4)) continue;
                const n2 = t3.element(e4);
                if (n2) {
                  i3 = new a.OrnamentContainer(s2[e4]);
                  const t4 = n2.attribute("placement");
                  t4 && "below" === t4.value && (i3.placement = l.PlacementEnum.Below);
                }
              }
              if (i3) {
                const s3 = t3.elements("accidental-mark");
                if (s3) {
                  let t4 = l.PlacementEnum.Below, e4 = h.AccidentalEnum.NONE;
                  const n2 = s3;
                  for (let s4 = 0, r2 = n2.length; s4 < r2; ++s4) {
                    const r3 = n2[s4];
                    let o2 = r3.value;
                    e4 = this.getAccEnumFromString(o2);
                    const a2 = r3.attribute("placement");
                    r3.hasAttributes && a2 && (o2 = a2.value, "above" === o2 ? t4 = l.PlacementEnum.Above : "below" === o2 && (t4 = l.PlacementEnum.Below)), t4 === l.PlacementEnum.Above ? i3.AccidentalAbove = e4 : t4 === l.PlacementEnum.Below && (i3.AccidentalBelow = e4);
                  }
                }
                e3.OrnamentContainer = i3;
              }
            }
          }
        };
      }, 4134: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowVoiceEntry = void 0;
        const s = i2(4548), n = i2(9479), r = i2(4434);
        class o extends s.GraphicalVoiceEntry {
          constructor(t3, e3, i3) {
            super(t3, e3, i3);
          }
          applyBordersFromVexflow() {
            const t3 = this.vfStaveNote;
            if (!t3.getNoteHeadBeginX) return;
            const e3 = t3.getBoundingBox(), i3 = t3.getNoteHeadBeginX() - e3.x;
            this.PositionAndShape.RelativePosition.y = e3.y / n.unitInPixels, this.PositionAndShape.BorderTop = 0, this.PositionAndShape.BorderBottom = e3.h / n.unitInPixels;
            const s2 = (t3.width - (t3.paddingRight ?? 0)) / 2;
            this.PositionAndShape.BorderLeft = -(i3 + s2) / n.unitInPixels, this.PositionAndShape.BorderRight = (e3.w - i3) / n.unitInPixels;
          }
          set vfStaveNote(t3) {
            this.mVexFlowStaveNote = t3;
          }
          get vfStaveNote() {
            return this.mVexFlowStaveNote;
          }
          applyCustomNoteheads() {
            const t3 = this.vfStaveNote;
            if (t3) for (let e3 = 0; e3 < this.notes.length; e3++) {
              const i3 = this.notes[e3].sourceNote;
              t3.note_heads && i3.CustomNoteheadVFCode && (t3.note_heads[e3].glyph_code = i3.CustomNoteheadVFCode);
            }
          }
          color() {
            var _a;
            const t3 = this.rules.DefaultColorNotehead, e3 = this.rules.DefaultColorRest, i3 = this.rules.DefaultColorStem, s2 = "#00000000";
            let n2, o2;
            const a = this.vfStaveNote;
            for (let i4 = 0; i4 < this.notes.length; i4++) {
              const l2 = this.notes[i4];
              if (o2 = l2.sourceNote.NoteheadColor, n2 = o2, this.rules.ColoringMode === r.ColoringModes.AutoColoring || this.rules.ColoringMode === r.ColoringModes.CustomColorSet) if (l2.sourceNote.isRest()) n2 = this.rules.ColoringSetCurrent.getValue(-1);
              else {
                const t4 = l2.sourceNote.Pitch.FundamentalNote;
                n2 = this.rules.ColoringSetCurrent.getValue(t4);
              }
              if (l2.sourceNote.PrintObject ? n2 && "#000000" !== n2 || (n2 = this.rules.DefaultColorNotehead) : n2 = s2, !o2 && this.rules.ColoringMode === r.ColoringModes.XML && l2.sourceNote.PrintObject && (!l2.sourceNote.isRest() && t3 ? n2 = t3 : l2.sourceNote.isRest() && e3 && (n2 = e3)), n2 && l2.sourceNote.PrintObject) l2.sourceNote.NoteheadColorCurrentlyRendered = n2;
              else if (!n2) continue;
              if (this.rules.ColoringEnabled && l2.sourceNote.NoteBeam && this.rules.ColorBeams) {
                const t4 = l2.sourceNote.NoteBeam.Notes;
                let e4 = true;
                for (let i5 = 0; i5 < t4.length; i5++) t4[i5].NoteheadColorCurrentlyRendered !== n2 && (e4 = false);
                e4 && ((_a = a == null ? void 0 : a.beam) == null ? void 0 : _a.setStyle) && a.beam.setStyle({ fillStyle: n2, strokeStyle: n2 });
              }
              if (a) {
                if (a.note_heads) {
                  const t4 = a.note_heads[i4];
                  t4 && t4.setStyle({ fillStyle: n2, strokeStyle: n2 });
                }
                a.setLedgerLineStyle && (n2 === s2 ? a.setLedgerLineStyle({ fillStyle: n2, strokeStyle: n2, lineWidth: this.rules.LedgerLineWidth }) : a.setLedgerLineStyle({ fillStyle: this.rules.LedgerLineColorDefault, lineWidth: this.rules.LedgerLineWidth, strokeStyle: this.rules.LedgerLineColorDefault }));
              }
            }
            let l = i3, h = false;
            this.rules.ColoringEnabled && (l = this.parentVoiceEntry.StemColor, l && "#000000" !== l || (l = i3), this.rules.ColorStemsLikeNoteheads && n2 && (l = n2, h = true));
            let c = true;
            for (const t4 of this.parentVoiceEntry.Notes) if (t4.PrintObject) {
              c = false;
              break;
            }
            c && (l = s2);
            const u = { fillStyle: l, strokeStyle: l };
            a && a.setStemStyle && (!c && h && (this.parentVoiceEntry.StemColor = l), a.setStemStyle(u), a.flag && a.setFlagStyle && this.rules.ColorFlags && a.setFlagStyle(u));
          }
        }
        e2.VexFlowVoiceEntry = o;
      }, 4146: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.DrawingParametersEnum = void 0, function(t3) {
          t3.allon = "allon", t3.compact = "compact", t3.compacttight = "compacttight", t3.default = "default", t3.leadsheet = "leadsheet", t3.preview = "preview", t3.thumbnail = "thumbnail";
        }(i2 || (e2.DrawingParametersEnum = i2 = {}));
      }, 4236: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.ArpeggioType = e2.Arpeggio = void 0, e2.Arpeggio = class {
          constructor(t3, e3 = i2.ARPEGGIO_DIRECTIONLESS) {
            this.parentVoiceEntry = t3, this.type = e3, this.notes = [];
          }
          addNote(t3) {
            this.notes.push(t3), t3.Arpeggio = this;
          }
        }, function(t3) {
          t3[t3.BRUSH_DOWN = 1] = "BRUSH_DOWN", t3[t3.BRUSH_UP = 2] = "BRUSH_UP", t3[t3.ROLL_DOWN = 3] = "ROLL_DOWN", t3[t3.ROLL_UP = 4] = "ROLL_UP", t3[t3.RASQUEDO_DOWN = 5] = "RASQUEDO_DOWN", t3[t3.RASQUEDO_UP = 6] = "RASQUEDO_UP", t3[t3.ARPEGGIO_DIRECTIONLESS = 7] = "ARPEGGIO_DIRECTIONLESS";
        }(i2 || (e2.ArpeggioType = i2 = {}));
      }, 4249: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.LinkedVoice = void 0;
        const s = i2(5534);
        class n extends s.Voice {
          constructor(t3, e3, i3) {
            super(t3, e3), this.master = i3;
          }
          get Master() {
            return this.master;
          }
        }
        e2.LinkedVoice = n;
      }, 4268: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Tuplet = void 0, e2.Tuplet = class {
          constructor(t3, e3 = false) {
            this.PlacementFromXml = false, this.RenderTupletNumber = true, this.notes = [], this.fractions = [], this.tupletLabelNumber = t3, this.bracket = e3;
          }
          shouldBeBracketed(t3, e3, i2, s = false, n = false) {
            if (s) return n;
            if (t3 && void 0 !== this.BracketedXmlValue) return this.BracketedXmlValue;
            const r = this.Notes[0][0].NoteBeam;
            if (!r) return true;
            for (const t4 of this.Notes) if (t4[0].NoteBeam !== r) return true;
            return this.Bracket || 3 === this.TupletLabelNumber && i2 || 3 !== this.TupletLabelNumber && e3;
          }
          get TupletLabelNumber() {
            return this.tupletLabelNumber;
          }
          set TupletLabelNumber(t3) {
            this.tupletLabelNumber = t3;
          }
          get Notes() {
            return this.notes;
          }
          set Notes(t3) {
            this.notes = t3;
          }
          get Fractions() {
            return this.fractions;
          }
          set Fractions(t3) {
            this.fractions = t3;
          }
          get Bracket() {
            return this.bracket;
          }
          set Bracket(t3) {
            this.bracket = t3;
          }
          getNoteIndex(t3) {
            for (let e3 = this.notes.length - 1; e3 >= 0; e3--) for (let i2 = 0; i2 < this.notes[e3].length; i2++) if (t3 === this.notes[e3][i2]) return e3;
            return 0;
          }
        };
      }, 4284: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SystemLine = void 0;
        const s = i2(6954), n = i2(6438), r = i2(7741);
        class o extends r.GraphicalObject {
          constructor(t3, e3, i3, s2, r2 = void 0) {
            super(), this.lineType = t3, this.linePosition = e3, this.parentMusicSystem = i3, this.topMeasure = s2, this.bottomMeasure = r2, this.parentTopStaffLine = s2 == null ? void 0 : s2.ParentStaffLine, this.boundingBox = new n.BoundingBox(this, i3.PositionAndShape);
          }
          static getObjectWidthForLineType(t3, e3) {
            switch (e3) {
              case s.SystemLinesEnum.SingleThin:
                return t3.SystemThinLineWidth;
              case s.SystemLinesEnum.DoubleThin:
                return 2 * t3.SystemThinLineWidth + t3.DistanceBetweenVerticalSystemLines;
              case s.SystemLinesEnum.ThinBold:
                return t3.SystemThinLineWidth + t3.SystemBoldLineWidth + t3.DistanceBetweenVerticalSystemLines;
              case s.SystemLinesEnum.BoldThinDots:
              case s.SystemLinesEnum.DotsThinBold:
                return t3.SystemThinLineWidth + t3.SystemBoldLineWidth + t3.DistanceBetweenVerticalSystemLines + t3.SystemDotWidth + t3.DistanceBetweenDotAndLine;
              case s.SystemLinesEnum.DotsBoldBoldDots:
                return 2 * t3.SystemBoldLineWidth + 2 * t3.SystemDotWidth + 2 * t3.DistanceBetweenDotAndLine + t3.DistanceBetweenVerticalSystemLines;
              default:
                return 0;
            }
          }
        }
        e2.SystemLine = o;
      }, 4332: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowMusicSystem = void 0;
        const s = i2(5221), n = i2(6954), r = i2(4284), o = i2(6014), a = i2(3109), l = i2(7098);
        class h extends s.MusicSystem {
          constructor(t3, e3) {
            super(t3), this.rules = e3;
          }
          calculateBorders(t3) {
            if (0 === this.staffLines.length) return;
            const e3 = this.calcBracketsWidth();
            this.boundingBox.BorderLeft = -e3, this.boundingBox.BorderMarginLeft = -e3, this.boundingBox.XBordersHaveBeenSet = true;
            const i3 = this.staffLines[0].SkyBottomLineCalculator.getSkyLineMin();
            this.boundingBox.BorderTop = i3, this.boundingBox.BorderMarginTop = i3;
            const s2 = this.staffLines[this.staffLines.length - 1], n2 = s2.SkyBottomLineCalculator.getBottomLineMax() + s2.PositionAndShape.RelativePosition.y;
            this.boundingBox.BorderBottom = n2, this.boundingBox.BorderMarginBottom = n2, this.boundingBox.XBordersHaveBeenSet = true, this.boundingBox.YBordersHaveBeenSet = true;
          }
          createSystemLine(t3, e3, i3, s2, a2, l2, h2 = void 0) {
            const c = l2;
            let u = false;
            if (h2 && (u = true, h2.lineTo(l2, o.VexFlowConverter.line(i3, s2)), h2.addMeasureLine(i3, s2), i3 === n.SystemLinesEnum.DotsBoldBoldDots)) {
              const t4 = h2.ParentStaffLine.Measures.indexOf(h2) + 1, e4 = h2.ParentStaffLine.Measures[t4], i4 = l2.ParentStaffLine.Measures[t4];
              e4 && i4 && (e4.lineTo(i4, o.VexFlowConverter.line(n.SystemLinesEnum.BoldThinDots, s2)), e4.addMeasureLine(n.SystemLinesEnum.BoldThinDots, s2));
            }
            return c && c.addMeasureLine(i3, s2, u), new r.SystemLine(i3, s2, this, l2, h2);
          }
          createInstrumentBracket(t3, e3) {
            const i3 = t3, s2 = e3, n2 = new l.VexFlowInstrumentBrace(i3, s2);
            this.InstrumentBrackets.push(n2);
          }
          createGroupBracket(t3, e3, i3) {
            const s2 = t3, n2 = e3;
            if (0 === i3) {
              const t4 = new a.VexFlowInstrumentBracket(s2, n2, i3);
              this.GroupBrackets.push(t4);
            } else {
              const t4 = new l.VexFlowInstrumentBrace(s2, n2, i3);
              this.GroupBrackets.push(t4);
            }
          }
        }
        e2.VexFlowMusicSystem = h;
      }, 4356: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.StringUtil = void 0, e2.StringUtil = class {
          static StringContainsSeparatedWord(t3, e3, i2 = false) {
            return new RegExp("( |^)" + e3 + "([ .]|$)", i2 ? "i" : void 0).test(t3);
          }
        };
      }, 4387: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SourceMeasure = void 0;
        const s = i2(2561), n = i2(3236), r = i2(2369), o = i2(1645), a = i2(1336), l = i2(164), h = i2(4543), c = i2(6954);
        e2.SourceMeasure = class {
          constructor(t3, e3) {
            this.printNewSystemXml = false, this.printNewPageXml = false, this.IsSystemStartMeasure = false, this.WidthFactor = 1, this.hasLyrics = false, this.hasMoodExpressions = false, this.allRests = false, this.isReducedToMultiRest = false, this.multipleRestMeasureNumber = 0, this.staffLinkedExpressions = [], this.tempoExpressions = [], this.verticalSourceStaffEntryContainers = [], this.graphicalMeasureErrors = [], this.firstRepetitionInstructions = [], this.lastRepetitionInstructions = [], this.completeNumberOfStaves = t3, this.implicitMeasure = false, this.hasEndLine = false, this.endingBarStyleXml = "", this.endingBarStyleEnum = c.SystemLinesEnum.SingleThin, this.firstInstructionsStaffEntries = new Array(t3), this.lastInstructionsStaffEntries = new Array(t3), this.rules = e3, this.TempoInBPM = 0;
            for (let e4 = 0; e4 < t3; e4++) this.graphicalMeasureErrors.push(false), this.staffLinkedExpressions.push([]);
          }
          get MeasureNumber() {
            return this.measureNumber;
          }
          set MeasureNumber(t3) {
            this.measureNumber = t3;
          }
          getPrintedMeasureNumber() {
            return this.rules.UseXMLMeasureNumbers && Number.isInteger(this.MeasureNumberXML) ? (this.MeasureNumberPrinted = this.MeasureNumberXML, this.MeasureNumberPrinted) : (this.MeasureNumberPrinted = this.MeasureNumber, this.MeasureNumberPrinted);
          }
          get AbsoluteTimestamp() {
            return this.absoluteTimestamp;
          }
          set AbsoluteTimestamp(t3) {
            this.absoluteTimestamp = t3;
          }
          get CompleteNumberOfStaves() {
            return this.completeNumberOfStaves;
          }
          get Duration() {
            return this.duration;
          }
          set Duration(t3) {
            this.duration = t3;
          }
          get ActiveTimeSignature() {
            return this.activeTimeSignature;
          }
          set ActiveTimeSignature(t3) {
            this.activeTimeSignature = t3;
          }
          get ImplicitMeasure() {
            return this.implicitMeasure;
          }
          set ImplicitMeasure(t3) {
            this.implicitMeasure = t3;
          }
          get HasEndLine() {
            return this.hasEndLine;
          }
          set HasEndLine(t3) {
            this.hasEndLine = t3;
          }
          get StaffLinkedExpressions() {
            return this.staffLinkedExpressions;
          }
          get TempoExpressions() {
            return this.tempoExpressions;
          }
          get VerticalSourceStaffEntryContainers() {
            return this.verticalSourceStaffEntryContainers;
          }
          get FirstInstructionsStaffEntries() {
            return this.firstInstructionsStaffEntries;
          }
          get LastInstructionsStaffEntries() {
            return this.lastInstructionsStaffEntries;
          }
          get FirstRepetitionInstructions() {
            return this.firstRepetitionInstructions;
          }
          get LastRepetitionInstructions() {
            return this.lastRepetitionInstructions;
          }
          getErrorInMeasure(t3) {
            return this.graphicalMeasureErrors[t3];
          }
          setErrorInGraphicalMeasure(t3, e3) {
            this.graphicalMeasureErrors[t3] = e3;
          }
          getNextMeasure(t3) {
            return t3[this.measureListIndex + 1];
          }
          getPreviousMeasure(t3) {
            if (this.measureListIndex > 1) return t3[this.measureListIndex - 1];
          }
          get Rules() {
            return this.rules;
          }
          get VerticalMeasureList() {
            return this.verticalMeasureList;
          }
          set VerticalMeasureList(t3) {
            this.verticalMeasureList = t3;
          }
          get TempoInBPM() {
            return this.tempoInBPM;
          }
          set TempoInBPM(t3) {
            this.tempoInBPM = t3;
          }
          findOrCreateStaffEntry(t3, e3, i3) {
            let s2, o2;
            for (const e4 of this.verticalSourceStaffEntryContainers) if (e4.Timestamp.Equals(t3)) {
              o2 = e4;
              break;
            }
            if (o2) return o2.StaffEntries[e3] ? s2 = o2.StaffEntries[e3] : (s2 = new r.SourceStaffEntry(o2, i3), o2.StaffEntries[e3] = s2), { createdNewContainer: false, staffEntry: s2 };
            const a2 = this.verticalSourceStaffEntryContainers[this.verticalSourceStaffEntryContainers.length - 1];
            if (0 === this.verticalSourceStaffEntryContainers.length || a2.Timestamp.lt(t3)) {
              const o3 = new n.VerticalSourceStaffEntryContainer(this, t3.clone(), this.completeNumberOfStaves);
              this.verticalSourceStaffEntryContainers.push(o3), s2 = new r.SourceStaffEntry(o3, i3), o3.StaffEntries[e3] = s2;
            } else for (let o3 = this.verticalSourceStaffEntryContainers.length - 1; o3 >= 0; o3--) {
              if (this.verticalSourceStaffEntryContainers[o3].Timestamp.lt(t3)) {
                const a3 = new n.VerticalSourceStaffEntryContainer(this, t3.clone(), this.completeNumberOfStaves);
                this.verticalSourceStaffEntryContainers.splice(o3 + 1, 0, a3), s2 = new r.SourceStaffEntry(a3, i3), a3.StaffEntries[e3] = s2;
                break;
              }
              if (0 === o3) {
                const a3 = new n.VerticalSourceStaffEntryContainer(this, t3.clone(), this.completeNumberOfStaves);
                this.verticalSourceStaffEntryContainers.splice(o3, 0, a3), s2 = new r.SourceStaffEntry(a3, i3), a3.StaffEntries[e3] = s2;
                break;
              }
            }
            return { createdNewContainer: true, staffEntry: s2 };
          }
          findOrCreateVoiceEntry(t3, e3) {
            let i3, s2 = false;
            for (const s3 of t3.VoiceEntries) if (s3.ParentVoice === e3) {
              i3 = s3;
              break;
            }
            return i3 || (i3 = new a.VoiceEntry(t3.Timestamp, e3, t3), s2 = true), { createdVoiceEntry: s2, voiceEntry: i3 };
          }
          getPreviousSourceStaffEntryFromIndex(t3, e3) {
            for (let i3 = e3 - 1; i3 >= 0; i3--) if (this.verticalSourceStaffEntryContainers[i3][t3]) return this.verticalSourceStaffEntryContainers[i3][t3];
          }
          getVerticalContainerIndexByTimestamp(t3) {
            for (let e3 = 0, i3 = this.VerticalSourceStaffEntryContainers.length; e3 < i3; ++e3) if (this.VerticalSourceStaffEntryContainers[e3].Timestamp.Equals(t3)) return e3;
            return -1;
          }
          getVerticalContainerByTimestamp(t3) {
            for (let e3 = 0, i3 = this.VerticalSourceStaffEntryContainers.length; e3 < i3; ++e3) {
              const i4 = this.VerticalSourceStaffEntryContainers[e3];
              if (i4.Timestamp.Equals(t3)) return i4;
            }
          }
          checkForEmptyVerticalContainer(t3) {
            let e3 = 0;
            for (let i3 = 0; i3 < this.completeNumberOfStaves; i3++) this.verticalSourceStaffEntryContainers[t3][i3] || e3++;
            e3 === this.completeNumberOfStaves && this.verticalSourceStaffEntryContainers.splice(t3, 1);
          }
          reverseCheck(t3, e3) {
            let i3 = new s.Fraction(0, 1);
            const n2 = [];
            for (let e4 = 0; e4 < t3.Instruments.length; e4++) {
              let i4 = new s.Fraction(0, 1);
              const r2 = t3.getGlobalStaffIndexOfFirstStaff(t3.Instruments[e4]);
              for (let n3 = 0; n3 < t3.Instruments[e4].Staves.length; n3++) {
                const t4 = this.getLastSourceStaffEntryForInstrument(r2 + n3);
                if (void 0 !== t4 && !t4.hasTie()) for (let e5 = this.verticalSourceStaffEntryContainers.indexOf(t4.VerticalContainerParent) - 1; e5 >= 0; e5--) {
                  const t5 = this.verticalSourceStaffEntryContainers[e5][r2 + n3];
                  if (void 0 !== t5 && t5.hasTie() && i4.lt(s.Fraction.plus(t5.Timestamp, t5.calculateMaxNoteLength()))) {
                    i4 = s.Fraction.plus(t5.Timestamp, t5.calculateMaxNoteLength());
                    break;
                  }
                }
              }
              n2.push(i4);
            }
            for (let t4 = 0, e4 = n2.length; t4 < e4; ++t4) {
              const e5 = n2[t4];
              i3.lt(e5) && (i3 = e5);
            }
            return s.Fraction.max(i3, e3);
          }
          calculateInstrumentsDuration(t3, e3) {
            const i3 = [];
            for (let n2 = 0; n2 < t3.Instruments.length; n2++) {
              let r2 = new s.Fraction(0, 1);
              const o2 = t3.getGlobalStaffIndexOfFirstStaff(t3.Instruments[n2]);
              for (let e4 = 0; e4 < t3.Instruments[n2].Staves.length; e4++) {
                const t4 = this.getLastSourceStaffEntryForInstrument(o2 + e4);
                if (void 0 !== t4 && t4.Timestamp) {
                  const e5 = t4.calculateMaxNoteLength(false);
                  r2.lt(s.Fraction.plus(t4.Timestamp, e5)) && (r2 = s.Fraction.plus(t4.Timestamp, e5));
                }
              }
              r2.lt(e3[n2]) && (r2 = e3[n2]), i3.push(r2);
            }
            return i3;
          }
          getEntriesPerStaff(t3) {
            const e3 = [];
            for (const i3 of this.VerticalSourceStaffEntryContainers) {
              const s2 = i3.StaffEntries[t3];
              s2 && e3.push(s2);
            }
            return e3;
          }
          hasBeginInstructions() {
            for (let t3 = 0, e3 = this.FirstInstructionsStaffEntries.length; t3 < e3; t3++) {
              const e4 = this.FirstInstructionsStaffEntries[t3];
              if (void 0 !== e4 && e4.Instructions.length > 0) return true;
            }
            return false;
          }
          beginsWithLineRepetition() {
            for (let t3 = 0, e3 = this.FirstRepetitionInstructions.length; t3 < e3; ++t3) {
              const e4 = this.FirstRepetitionInstructions[t3];
              if (e4.type === o.RepetitionInstructionEnum.StartLine) return true;
              if (void 0 !== e4.parentRepetition && e4 === e4.parentRepetition.startMarker && !e4.parentRepetition.FromWords) return true;
            }
            return false;
          }
          endsWithLineRepetition() {
            for (let t3 = 0, e3 = this.LastRepetitionInstructions.length; t3 < e3; ++t3) {
              const e4 = this.LastRepetitionInstructions[t3];
              if (e4.type === o.RepetitionInstructionEnum.BackJumpLine) return true;
              const i3 = e4.parentRepetition;
              if (i3 && !i3.FromWords) {
                for (let t4 = 0, s2 = i3.BackwardJumpInstructions.length; t4 < s2; ++t4) if (e4 === i3.BackwardJumpInstructions[t4]) return true;
              }
            }
            return false;
          }
          beginsWithWordRepetition() {
            for (let t3 = 0, e3 = this.FirstRepetitionInstructions.length; t3 < e3; ++t3) {
              const e4 = this.FirstRepetitionInstructions[t3];
              if (void 0 !== e4.parentRepetition && e4 === e4.parentRepetition.startMarker && e4.parentRepetition.FromWords) return true;
            }
            return false;
          }
          endsWithWordRepetition() {
            for (let t3 = 0, e3 = this.LastRepetitionInstructions.length; t3 < e3; ++t3) {
              const e4 = this.LastRepetitionInstructions[t3], i3 = e4.parentRepetition;
              if (i3 && i3.FromWords) {
                for (let t4 = 0, s2 = i3.BackwardJumpInstructions.length; t4 < s2; ++t4) if (e4 === i3.BackwardJumpInstructions[t4]) return true;
                if (e4 === i3.forwardJumpInstruction) return true;
              }
            }
            return false;
          }
          beginsRepetitionEnding() {
            for (const t3 of this.FirstRepetitionInstructions) if (t3.type === o.RepetitionInstructionEnum.Ending && t3.alignment === o.AlignmentType.Begin) return true;
            return false;
          }
          endsRepetitionEnding() {
            for (const t3 of this.LastRepetitionInstructions) if (t3.type === o.RepetitionInstructionEnum.Ending && t3.alignment === o.AlignmentType.End) return true;
            return false;
          }
          getKeyInstruction(t3) {
            if (this.FirstInstructionsStaffEntries[t3]) {
              const e3 = this.FirstInstructionsStaffEntries[t3];
              for (let t4 = 0, i3 = e3.Instructions.length; t4 < i3; ++t4) {
                const i4 = e3.Instructions[t4];
                if (i4 instanceof h.KeyInstruction) return i4;
              }
            }
          }
          getLastSourceStaffEntryForInstrument(t3, e3 = true) {
            let i3;
            for (let s2 = this.verticalSourceStaffEntryContainers.length - 1; s2 >= 0; s2--) if (i3 = this.verticalSourceStaffEntryContainers[s2].StaffEntries[t3], i3 && (!e3 || i3.VoiceEntries.length > 0)) return i3;
          }
          canBeReducedToMultiRest() {
            var _a, _b;
            if (this.firstRepetitionInstructions.length > 0 || this.lastRepetitionInstructions.length > 0) return false;
            let t3 = true, e3 = false;
            for (const i3 of this.verticalSourceStaffEntryContainers) if (i3) {
              for (const s2 of i3.StaffEntries) if (s2 && s2.ParentStaff.ParentInstrument.Visible) {
                if (s2.ChordContainers.length > 0) return false;
                s2.ParentStaff.hasLyrics && (e3 = true);
                for (const e4 of s2.VoiceEntries) {
                  for (const i4 of e4.Notes) if (!i4.isRest()) {
                    t3 = false;
                    break;
                  }
                  if (!t3) break;
                }
              }
            }
            if (!t3 || e3 || this.hasMoodExpressions || this.tempoExpressions.length > 0) return false;
            for (const t4 of this.staffLinkedExpressions) if (t4.length > 0) return false;
            for (const t4 of this.lastInstructionsStaffEntries) for (let e4 = 0, i3 = t4 == null ? void 0 : t4.Instructions.length; e4 < i3; ++e4) if (t4.Instructions[e4] instanceof l.ClefInstruction) return false;
            return ((_a = this.Duration) == null ? void 0 : _a.RealValue) === ((_b = this.ActiveTimeSignature) == null ? void 0 : _b.RealValue);
          }
        };
      }, 4434: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.ColoringModes = void 0, function(t3) {
          t3[t3.XML = 0] = "XML", t3[t3.AutoColoring = 1] = "AutoColoring", t3[t3.CustomColorSet = 2] = "CustomColorSet";
        }(i2 || (e2.ColoringModes = i2 = {}));
      }, 4538: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4831), n = i2(4713), r = function() {
          function t3() {
            this.firstNode = null, this.lastNode = null, this.nElements = 0;
          }
          return t3.prototype.add = function(t4, e3) {
            if (s.isUndefined(e3) && (e3 = this.nElements), e3 < 0 || e3 > this.nElements || s.isUndefined(t4)) return false;
            var i3 = this.createNode(t4);
            if (0 === this.nElements || null === this.lastNode) this.firstNode = i3, this.lastNode = i3;
            else if (e3 === this.nElements) this.lastNode.next = i3, this.lastNode = i3;
            else if (0 === e3) i3.next = this.firstNode, this.firstNode = i3;
            else {
              var n2 = this.nodeAtIndex(e3 - 1);
              if (null === n2) return false;
              i3.next = n2.next, n2.next = i3;
            }
            return this.nElements++, true;
          }, t3.prototype.first = function() {
            if (null !== this.firstNode) return this.firstNode.element;
          }, t3.prototype.last = function() {
            if (null !== this.lastNode) return this.lastNode.element;
          }, t3.prototype.elementAtIndex = function(t4) {
            var e3 = this.nodeAtIndex(t4);
            if (null !== e3) return e3.element;
          }, t3.prototype.indexOf = function(t4, e3) {
            var i3 = e3 || s.defaultEquals;
            if (s.isUndefined(t4)) return -1;
            for (var n2 = this.firstNode, r2 = 0; null !== n2; ) {
              if (i3(n2.element, t4)) return r2;
              r2++, n2 = n2.next;
            }
            return -1;
          }, t3.prototype.contains = function(t4, e3) {
            return this.indexOf(t4, e3) >= 0;
          }, t3.prototype.remove = function(t4, e3) {
            var i3 = e3 || s.defaultEquals;
            if (this.nElements < 1 || s.isUndefined(t4)) return false;
            for (var n2 = null, r2 = this.firstNode; null !== r2; ) {
              if (i3(r2.element, t4)) return null === n2 ? (this.firstNode = r2.next, r2 === this.lastNode && (this.lastNode = null)) : r2 === this.lastNode ? (this.lastNode = n2, n2.next = r2.next, r2.next = null) : (n2.next = r2.next, r2.next = null), this.nElements--, true;
              n2 = r2, r2 = r2.next;
            }
            return false;
          }, t3.prototype.clear = function() {
            this.firstNode = null, this.lastNode = null, this.nElements = 0;
          }, t3.prototype.equals = function(e3, i3) {
            var n2 = i3 || s.defaultEquals;
            return e3 instanceof t3 && this.size() === e3.size() && this.equalsAux(this.firstNode, e3.firstNode, n2);
          }, t3.prototype.equalsAux = function(t4, e3, i3) {
            for (; null !== t4 && null !== e3; ) {
              if (!i3(t4.element, e3.element)) return false;
              t4 = t4.next, e3 = e3.next;
            }
            return true;
          }, t3.prototype.removeElementAtIndex = function(t4) {
            if (!(t4 < 0 || t4 >= this.nElements || null === this.firstNode || null === this.lastNode)) {
              var e3;
              if (1 === this.nElements) e3 = this.firstNode.element, this.firstNode = null, this.lastNode = null;
              else {
                var i3 = this.nodeAtIndex(t4 - 1);
                null === i3 ? (e3 = this.firstNode.element, this.firstNode = this.firstNode.next) : i3.next === this.lastNode && (e3 = this.lastNode.element, this.lastNode = i3), null !== i3 && null !== i3.next && (e3 = i3.next.element, i3.next = i3.next.next);
              }
              return this.nElements--, e3;
            }
          }, t3.prototype.forEach = function(t4) {
            for (var e3 = this.firstNode; null !== e3 && false !== t4(e3.element); ) e3 = e3.next;
          }, t3.prototype.reverse = function() {
            for (var t4 = null, e3 = this.firstNode, i3 = null; null !== e3; ) i3 = e3.next, e3.next = t4, t4 = e3, e3 = i3;
            i3 = this.firstNode, this.firstNode = this.lastNode, this.lastNode = i3;
          }, t3.prototype.toArray = function() {
            for (var t4 = [], e3 = this.firstNode; null !== e3; ) t4.push(e3.element), e3 = e3.next;
            return t4;
          }, t3.prototype.size = function() {
            return this.nElements;
          }, t3.prototype.isEmpty = function() {
            return this.nElements <= 0;
          }, t3.prototype.toString = function() {
            return n.toString(this.toArray());
          }, t3.prototype.nodeAtIndex = function(t4) {
            if (t4 < 0 || t4 >= this.nElements) return null;
            if (t4 === this.nElements - 1) return this.lastNode;
            for (var e3 = this.firstNode, i3 = 0; i3 < t4 && null !== e3; i3++) e3 = e3.next;
            return e3;
          }, t3.prototype.createNode = function(t4) {
            return { element: t4, next: null };
          }, t3;
        }();
        e2.default = r;
      }, 4543: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.KeyEnum = e2.NoteEnumToHalfToneLink = e2.KeyInstruction = void 0;
        const s = i2(5364), n = i2(8233), r = i2(8233);
        class o extends s.AbstractNotationInstruction {
          constructor(t3 = void 0, e3 = 0, i3 = a.major) {
            super(t3), this.isTransposedBy = 0, this.Key = e3, this.keyTypeOriginal = e3, this.mode = i3, this.alteratedNotes = this.calcAlteratedNotes();
          }
          static copy(t3) {
            const e3 = new o(t3.parent, t3.Key, t3.Mode);
            return e3.keyTypeOriginal = t3.keyTypeOriginal, e3;
          }
          static getAllPossibleMajorKeyInstructions() {
            const t3 = [];
            for (let e3 = -7; e3 < 7; e3++) {
              const i3 = new o(void 0, e3, a.major);
              t3.push(i3);
            }
            return t3;
          }
          get Key() {
            return this.keyType;
          }
          set Key(t3) {
            this.keyType = t3, this.alteratedNotes = this.calcAlteratedNotes();
          }
          get Mode() {
            return this.mode;
          }
          set Mode(t3) {
            this.mode = t3;
          }
          get AlteratedNotes() {
            return this.alteratedNotes;
          }
          calcAlteratedNotes() {
            const t3 = [];
            if (this.keyType > 0) for (let e3 = 0; e3 < this.keyType; e3++) t3.push(o.sharpPositionList[e3]);
            else if (this.keyType < 0) for (let e3 = 0; e3 < -this.keyType; e3++) t3.push(o.flatPositionList[e3]);
            return t3;
          }
          willAlterateNote(t3) {
            return this.alteratedNotes.indexOf(t3) >= 0;
          }
          getAlterationForPitch(t3) {
            return this.keyType > 0 && this.alteratedNotes.indexOf(t3.FundamentalNote) <= this.keyType ? r.AccidentalEnum.SHARP : this.keyType < 0 && this.alteratedNotes.indexOf(t3.FundamentalNote) <= Math.abs(this.keyType) ? r.AccidentalEnum.FLAT : r.AccidentalEnum.NONE;
          }
          ToString() {
            return "Key: " + this.keyType + this.mode;
          }
          OperatorEquals(t3) {
            const e3 = this;
            return e3 === t3 || !(!e3 || !t3) && e3.Key === t3.Key && e3.Mode === t3.Mode;
          }
          OperatorNotEqual(t3) {
            return !this.OperatorEquals(t3);
          }
        }
        var a;
        e2.KeyInstruction = o, o.sharpPositionList = [n.NoteEnum.F, n.NoteEnum.C, n.NoteEnum.G, n.NoteEnum.D, n.NoteEnum.A, n.NoteEnum.E, n.NoteEnum.B], o.flatPositionList = [n.NoteEnum.B, n.NoteEnum.E, n.NoteEnum.A, n.NoteEnum.D, n.NoteEnum.G, n.NoteEnum.C, n.NoteEnum.F], e2.NoteEnumToHalfToneLink = class {
          constructor(t3, e3) {
            this.note = t3, this.halfTone = e3;
          }
        }, function(t3) {
          t3[t3.major = 0] = "major", t3[t3.minor = 1] = "minor", t3[t3.none = 2] = "none", t3[t3.dorian = 3] = "dorian", t3[t3.phrygian = 4] = "phrygian", t3[t3.lydian = 5] = "lydian", t3[t3.mixolydian = 6] = "mixolydian", t3[t3.aeolian = 7] = "aeolian", t3[t3.ionian = 8] = "ionian", t3[t3.locrian = 9] = "locrian";
        }(a || (e2.KeyEnum = a = {}));
      }, 4548: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalVoiceEntry = void 0;
        const s = i2(7741), n = i2(6438), r = i2(9713);
        class o extends s.GraphicalObject {
          constructor(t3, e3, i3) {
            super(), this.parentVoiceEntry = t3, this.parentStaffEntry = e3, this.PositionAndShape = new n.BoundingBox(this, e3 ? e3.PositionAndShape : void 0, true), this.notes = [], this.rules = i3 || (e3 ? e3.parentMeasure.parentSourceMeasure.Rules : new r.EngravingRules());
          }
          sort() {
            return this.notes.sort((t3, e3) => {
              var _a, _b;
              return (((_a = e3.sourceNote.Pitch) == null ? void 0 : _a.getHalfTone()) ?? 0) - (((_b = t3.sourceNote.Pitch) == null ? void 0 : _b.getHalfTone()) ?? 0);
            }), this.notes;
          }
          sortForVexflow() {
            return this.notes.sort((t3, e3) => {
              var _a;
              return (((_a = t3.sourceNote.Pitch) == null ? void 0 : _a.getHalfTone()) ?? 0) - (e3.sourceNote.Pitch.getHalfTone() ?? 0);
            }), this.notes;
          }
          applyCustomNoteheads() {
          }
          color() {
          }
        }
        e2.GraphicalVoiceEntry = o;
      }, 4589: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4831), n = i2(4713), r = function() {
          function t3(t4) {
            this.data = [], this.compare = t4 || s.defaultCompare;
          }
          return t3.prototype.leftChildIndex = function(t4) {
            return 2 * t4 + 1;
          }, t3.prototype.rightChildIndex = function(t4) {
            return 2 * t4 + 2;
          }, t3.prototype.parentIndex = function(t4) {
            return Math.floor((t4 - 1) / 2);
          }, t3.prototype.minIndex = function(t4, e3) {
            return e3 >= this.data.length ? t4 >= this.data.length ? -1 : t4 : this.compare(this.data[t4], this.data[e3]) <= 0 ? t4 : e3;
          }, t3.prototype.siftUp = function(t4) {
            for (var e3 = this.parentIndex(t4); t4 > 0 && this.compare(this.data[e3], this.data[t4]) > 0; ) n.swap(this.data, e3, t4), t4 = e3, e3 = this.parentIndex(t4);
          }, t3.prototype.siftDown = function(t4) {
            for (var e3 = this.minIndex(this.leftChildIndex(t4), this.rightChildIndex(t4)); e3 >= 0 && this.compare(this.data[t4], this.data[e3]) > 0; ) n.swap(this.data, e3, t4), t4 = e3, e3 = this.minIndex(this.leftChildIndex(t4), this.rightChildIndex(t4));
          }, t3.prototype.peek = function() {
            return this.data.length > 0 ? this.data[0] : void 0;
          }, t3.prototype.add = function(t4) {
            return !s.isUndefined(t4) && (this.data.push(t4), this.siftUp(this.data.length - 1), true);
          }, t3.prototype.removeRoot = function() {
            if (this.data.length > 0) {
              var t4 = this.data[0];
              return this.data[0] = this.data[this.data.length - 1], this.data.splice(this.data.length - 1, 1), this.data.length > 0 && this.siftDown(0), t4;
            }
          }, t3.prototype.contains = function(t4) {
            var e3 = s.compareToEquals(this.compare);
            return n.contains(this.data, t4, e3);
          }, t3.prototype.size = function() {
            return this.data.length;
          }, t3.prototype.isEmpty = function() {
            return this.data.length <= 0;
          }, t3.prototype.clear = function() {
            this.data.length = 0;
          }, t3.prototype.forEach = function(t4) {
            n.forEach(this.data, t4);
          }, t3;
        }();
        e2.default = r;
      }, 4713: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4831);
        function n(t3, e3, i3) {
          for (var n2 = i3 || s.defaultEquals, r = t3.length, o = 0; o < r; o++) if (n2(t3[o], e3)) return o;
          return -1;
        }
        e2.indexOf = n, e2.lastIndexOf = function(t3, e3, i3) {
          for (var n2 = i3 || s.defaultEquals, r = t3.length - 1; r >= 0; r--) if (n2(t3[r], e3)) return r;
          return -1;
        }, e2.contains = function(t3, e3, i3) {
          return n(t3, e3, i3) >= 0;
        }, e2.remove = function(t3, e3, i3) {
          var s2 = n(t3, e3, i3);
          return !(s2 < 0 || (t3.splice(s2, 1), 0));
        }, e2.frequency = function(t3, e3, i3) {
          for (var n2 = i3 || s.defaultEquals, r = t3.length, o = 0, a = 0; a < r; a++) n2(t3[a], e3) && o++;
          return o;
        }, e2.equals = function(t3, e3, i3) {
          var n2 = i3 || s.defaultEquals;
          if (t3.length !== e3.length) return false;
          for (var r = t3.length, o = 0; o < r; o++) if (!n2(t3[o], e3[o])) return false;
          return true;
        }, e2.copy = function(t3) {
          return t3.concat();
        }, e2.swap = function(t3, e3, i3) {
          if (e3 < 0 || e3 >= t3.length || i3 < 0 || i3 >= t3.length) return false;
          var s2 = t3[e3];
          return t3[e3] = t3[i3], t3[i3] = s2, true;
        }, e2.toString = function(t3) {
          return "[" + t3.toString() + "]";
        }, e2.forEach = function(t3, e3) {
          for (var i3 = 0, s2 = t3; i3 < s2.length; i3++) if (false === e3(s2[i3])) return;
        };
      }, 4831: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var i2 = Object.prototype.hasOwnProperty;
        function s(t3) {
          return "function" == typeof t3;
        }
        function n(t3) {
          return void 0 === t3;
        }
        function r(t3) {
          return "[object String]" === Object.prototype.toString.call(t3);
        }
        e2.has = function(t3, e3) {
          return i2.call(t3, e3);
        }, e2.defaultCompare = function(t3, e3) {
          return t3 < e3 ? -1 : t3 === e3 ? 0 : 1;
        }, e2.defaultEquals = function(t3, e3) {
          return t3 === e3;
        }, e2.defaultToString = function(t3) {
          return null === t3 ? "COLLECTION_NULL" : n(t3) ? "COLLECTION_UNDEFINED" : r(t3) ? "$s" + t3 : "$o" + t3.toString();
        }, e2.makeString = function(t3, i3) {
          if (void 0 === i3 && (i3 = ","), null === t3) return "COLLECTION_NULL";
          if (n(t3)) return "COLLECTION_UNDEFINED";
          if (r(t3)) return t3.toString();
          var s2 = "{", o = true;
          for (var a in t3) e2.has(t3, a) && (o ? o = false : s2 += i3, s2 = s2 + a + ":" + t3[a]);
          return s2 + "}";
        }, e2.isFunction = s, e2.isUndefined = n, e2.isString = r, e2.reverseCompareFunction = function(t3) {
          return n(t3) || !s(t3) ? function(t4, e3) {
            return t4 < e3 ? 1 : t4 === e3 ? 0 : -1;
          } : function(e3, i3) {
            return -1 * t3(e3, i3);
          };
        }, e2.compareToEquals = function(t3) {
          return function(e3, i3) {
            return 0 === t3(e3, i3);
          };
        };
      }, 4864: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
      }, 4980: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(6362), e2), n(i2(9147), e2), n(i2(6990), e2), n(i2(9767), e2), n(i2(9161), e2), n(i2(9803), e2), n(i2(9019), e2), n(i2(5332), e2), n(i2(9157), e2), n(i2(1112), e2);
      }, 5023: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalInstantaneousDynamicExpression = void 0;
        const n = i2(9490), r = i2(6362), o = s(i2(3065));
        class a extends n.AbstractGraphicalExpression {
          constructor(t3, e3, i3) {
            super(e3, t3, i3.parentSourceMeasure), this.mInstantaneousDynamicExpression = t3, this.mMeasure = i3;
          }
          updateSkyBottomLine() {
            const t3 = this.parentStaffLine.SkyBottomLineCalculator, e3 = this.PositionAndShape.RelativePosition.x + this.PositionAndShape.BorderMarginLeft, i3 = this.PositionAndShape.RelativePosition.x + this.PositionAndShape.BorderMarginRight;
            let s2 = 0;
            switch (this.Placement) {
              case r.PlacementEnum.Above:
                s2 = this.PositionAndShape.RelativePosition.y + this.PositionAndShape.BorderMarginTop, t3.updateSkyLineInRange(e3, i3, s2);
                break;
              case r.PlacementEnum.Below:
                s2 = this.PositionAndShape.RelativePosition.y + this.PositionAndShape.BorderMarginBottom, t3.updateBottomLineInRange(e3, i3, s2);
                break;
              default:
                o.default.error("Placement for GraphicalInstantaneousDynamicExpression is unknown");
            }
          }
        }
        e2.GraphicalInstantaneousDynamicExpression = a;
      }, 5054: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalTie = void 0, e2.GraphicalTie = class {
          constructor(t3, e3 = void 0, i2 = void 0) {
            this.tie = t3, this.startNote = e3, this.endNote = i2;
          }
          get SVGElement() {
            return this.vfTie.getAttribute("el");
          }
          get GetTie() {
            return this.tie;
          }
          get StartNote() {
            return this.startNote;
          }
          get Tie() {
            return this.tie;
          }
          set StartNote(t3) {
            this.startNote = t3;
          }
          get EndNote() {
            return this.endNote;
          }
          set EndNote(t3) {
            this.endNote = t3;
          }
        };
      }, 5166: (t2) => {
        "use strict";
        t2.exports = "precision mediump float;\nuniform sampler2D u_image;\nvarying vec4 v_position;\n\n#define NUM_ROWS 5\n#define ELEMENT_HEIGHT 300\n\nvoid main() {\n    const float halfPixel = 1.0 / float(ELEMENT_HEIGHT * 2);\n\n    vec2 absolutePosition = (v_position.xy + vec2(1.0)) / vec2(2.0);\n    float absX = absolutePosition.x;\n    float absY = absolutePosition.y;\n\n    int skyLine = 0;\n    for (int i = 0; i < ELEMENT_HEIGHT; ++i) {\n        float ratioY = float(i) / float(ELEMENT_HEIGHT);\n        float relY = (ratioY - 0.5 + halfPixel) / float(NUM_ROWS);\n        float x = absX;\n        float y = absY + relY;\n\n        float currentAlpha = texture2D(u_image, vec2(x, y)).a;\n        if (currentAlpha > 0.0) {\n            skyLine = i;\n            break;\n        }\n    }\n\n    int bottomLine = ELEMENT_HEIGHT;\n    for (int i = ELEMENT_HEIGHT - 1; i >= 0; --i) {\n        float ratioY = float(i) / float(ELEMENT_HEIGHT);\n        float relY = (ratioY - 0.5 + halfPixel) / float(NUM_ROWS);\n        float x = absX;\n        float y = absY + relY;\n\n        float currentAlpha = texture2D(u_image, vec2(x, y)).a;\n        if (currentAlpha > 0.0) {\n            bottomLine = i;\n            break;\n        }\n    }\n\n    int r = skyLine;\n    if (r > 256) {\n        r -= 256;\n    }\n    int g = bottomLine;\n    if (g > 256) {\n        g -= 256;\n    }\n    int b = (skyLine / 256 * 16) + (bottomLine / 256);\n\n    gl_FragColor = vec4(float(r) / 255.0, float(g) / 255.0, float(b) / 255.0, 1.0);\n}\n";
      }, 5221: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MusicSystem = void 0;
        const s = i2(9252), n = i2(6438), r = i2(2561), o = i2(7533), a = i2(8254), l = i2(7741), h = i2(9409), c = i2(6954), u = i2(3263), d = i2(67), f = i2(7435);
        class m extends l.GraphicalObject {
          constructor(t3) {
            super(), this.needsToBeRedrawn = true, this.staffLines = [], this.graphicalMeasures = [], this.labels = new u.Dictionary(), this.measureNumberLabels = [], this.objectsToRedraw = [], this.instrumentBrackets = [], this.groupBrackets = [], this.graphicalMarkedAreas = [], this.graphicalComments = [], this.systemLines = [], this.breaksPage = false, this.id = t3, this.boundingBox = new n.BoundingBox(this), this.maxLabelLength = 0;
          }
          get Parent() {
            return this.parent;
          }
          set Parent(t3) {
            if (this.parent) {
              const t4 = this.parent.MusicSystems.indexOf(this, 0);
              t4 > -1 && this.parent.MusicSystems.splice(t4, 1);
            }
            this.parent = t3, this.boundingBox.Parent = t3.PositionAndShape;
          }
          get NextSystem() {
            const t3 = this.Parent.MusicSystems.indexOf(this);
            return t3 !== this.Parent.MusicSystems.length ? this.Parent.MusicSystems[t3 + 1] : void 0;
          }
          get StaffLines() {
            return this.staffLines;
          }
          get GraphicalMeasures() {
            return this.graphicalMeasures;
          }
          get MeasureNumberLabels() {
            return this.measureNumberLabels;
          }
          get Labels() {
            return this.labels.values();
          }
          get ObjectsToRedraw() {
            return this.objectsToRedraw;
          }
          get InstrumentBrackets() {
            return this.instrumentBrackets;
          }
          get GroupBrackets() {
            return this.groupBrackets;
          }
          get GraphicalMarkedAreas() {
            return this.graphicalMarkedAreas;
          }
          get GraphicalComments() {
            return this.graphicalComments;
          }
          get SystemLines() {
            return this.systemLines;
          }
          get Id() {
            return this.id;
          }
          createSystemLeftLine(t3, e3, i3) {
            let s2 = -t3 / 2;
            i3 && (s2 = this.maxLabelLength + e3 - t3 / 2);
            const n2 = this.staffLines[0].Measures[0];
            let r2;
            this.staffLines.length > 1 && (r2 = this.staffLines[this.staffLines.length - 1].Measures[0]);
            const o2 = this.createSystemLine(s2, t3, c.SystemLinesEnum.SingleThin, d.SystemLinePosition.MeasureBegin, this, n2, r2);
            this.SystemLines.push(o2), o2.PositionAndShape.RelativePosition = new h.PointF2D(s2, 0), o2.PositionAndShape.BorderLeft = 0, o2.PositionAndShape.BorderRight = t3, o2.PositionAndShape.BorderTop = o2.PositionAndShape.Parent.BorderTop, o2.PositionAndShape.BorderBottom = o2.PositionAndShape.Parent.BorderBottom, this.createLinesForSystemLine(o2);
          }
          createVerticalLineForMeasure(t3, e3, i3, s2, n2, r2) {
            const o2 = r2.ParentStaffLine, a2 = new h.PointF2D(o2.PositionAndShape.RelativePosition.x, o2.PositionAndShape.RelativePosition.y), l2 = o2.ParentStaff.ParentInstrument.Staves;
            if (o2.ParentStaff === l2[0]) {
              let c2;
              l2.length > 1 && (c2 = this.getBottomStaffLine(o2).Measures[n2]);
              const u2 = this.createSystemLine(t3, e3, i3, s2, this, r2, c2), d2 = a2.x + t3;
              u2.PositionAndShape.RelativePosition = new h.PointF2D(d2, 0), u2.PositionAndShape.BorderLeft = 0, u2.PositionAndShape.BorderRight = e3, this.SystemLines.push(u2);
            }
          }
          setYPositionsToVerticalLineObjectsAndCreateLines(t3) {
          }
          calculateBorders(t3) {
          }
          alignBeginInstructions() {
          }
          GetLeftBorderAbsoluteXPosition() {
            return this.StaffLines[0].PositionAndShape.AbsolutePosition.x + this.StaffLines[0].Measures[0].beginInstructionsWidth;
          }
          GetRightBorderAbsoluteXPosition() {
            return this.StaffLines[0].PositionAndShape.AbsolutePosition.x + this.StaffLines[0].StaffLines[0].End.x;
          }
          AddGraphicalMeasures(t3) {
            for (let e3 = 0, i3 = t3.length; e3 < i3; ++e3) t3[e3].ParentMusicSystem = this;
            this.graphicalMeasures.push(t3);
          }
          GetSystemsFirstTimeStamp() {
            return this.graphicalMeasures[0][0].parentSourceMeasure.AbsoluteTimestamp;
          }
          GetSystemsLastTimeStamp() {
            const t3 = this.graphicalMeasures[this.graphicalMeasures.length - 1][0].parentSourceMeasure;
            return r.Fraction.plus(t3.AbsoluteTimestamp, t3.Duration);
          }
          createInstrumentBrackets(t3, e3) {
            for (let e4 = 0, i3 = t3.length; e4 < i3; ++e4) {
              const i4 = t3[e4];
              if (i4.Staves.length > 1) {
                let t4, e5;
                for (let s2 = 0, n2 = this.staffLines.length; s2 < n2; ++s2) {
                  const n3 = this.staffLines[s2];
                  n3.ParentStaff === i4.Staves[0] && (t4 = n3), n3.ParentStaff === i4.Staves[i4.Staves.length - 1] && (e5 = n3);
                }
                t4 && e5 && this.createInstrumentBracket(t4, e5);
              }
            }
          }
          createGroupBrackets(t3, e3, i3) {
            for (let s2 = 0, n2 = t3.length; s2 < n2; ++s2) {
              const n3 = t3[s2];
              if (n3.InstrumentalGroups.length < 1) continue;
              const r2 = this.findFirstVisibleInstrumentInInstrumentalGroup(n3), o2 = this.findLastVisibleInstrumentInInstrumentalGroup(n3);
              if (!r2 || !o2) continue;
              let a2, l2;
              for (let t4 = 0, e4 = this.staffLines.length; t4 < e4; ++t4) {
                const e5 = this.staffLines[t4];
                e5.ParentStaff === r2.Staves[0] && (a2 = e5), e5.ParentStaff === o2.Staves[0] && (l2 = e5);
              }
              a2 && l2 && this.createGroupBracket(a2, l2, i3), n3.InstrumentalGroups.length < 1 || this.createGroupBrackets(n3.InstrumentalGroups, e3, i3 + 1);
            }
          }
          createMusicSystemLabel(t3, e3, i3, s2 = false) {
            var _a;
            const n2 = e3;
            for (let i4 = 0, n3 = this.staffLines.length; i4 < n3; ++i4) {
              const n4 = this.staffLines[i4].ParentStaff.ParentInstrument;
              let r3;
              if (s2) r3 = n4.NameLabel, this.rules.RenderPartNames && (r3 == null ? void 0 : r3.print) || (r3 = new f.Label("", n4.NameLabel.textAlignment, n4.NameLabel.font), e3 = 0);
              else {
                if (!this.rules.RenderPartAbbreviations || !this.rules.RenderPartNames || 1 === this.staffLines.length || !n4.PartAbbreviation || "" === n4.PartAbbreviation) return;
                const t4 = n4.PartAbbreviation;
                r3 = new f.Label(t4, n4.NameLabel.textAlignment, n4.NameLabel.font);
              }
              if ((_a = n4 == null ? void 0 : n4.NameLabel) == null ? void 0 : _a.print) {
                const e4 = new a.GraphicalLabel(r3, t3, o.TextAlignmentEnum.LeftCenter, this.rules, this.boundingBox);
                e4.setLabelPositionAndShapeBorders(), this.labels.setValue(n4, e4);
              } else e3 = 0;
            }
            this.maxLabelLength = 0;
            const r2 = this.labels.values();
            for (let t4 = 0, i4 = r2.length; t4 < i4; ++t4) {
              const i5 = r2[t4];
              i5.Label.print && i5.PositionAndShape.Size.width > this.maxLabelLength && (this.maxLabelLength = i5.PositionAndShape.Size.width, e3 = n2);
            }
            this.updateMusicSystemStaffLineXPosition(e3);
          }
          setMusicSystemLabelsYPosition() {
            this.labels.forEach((t3, e3) => {
              let i3 = 0, s2 = 0;
              for (let e4 = 0; e4 < this.staffLines.length; e4++) if (this.staffLines[e4].ParentStaff.ParentInstrument === t3) {
                for (let n2 = e4; n2 < this.staffLines.length; n2++) {
                  const e5 = this.staffLines[n2];
                  if (e5.ParentStaff.ParentInstrument !== t3) break;
                  i3 += e5.PositionAndShape.RelativePosition.y, s2++;
                }
                break;
              }
              s2 > 0 && (e3.PositionAndShape.RelativePosition = new h.PointF2D(0, i3 / s2 + 2));
            });
          }
          checkStaffEntriesForStaffEntryLink() {
            let t3 = false, e3 = false;
            for (let i3 = 0; i3 < this.staffLines.length - 1; i3++) {
              for (let e4 = 0, s2 = this.staffLines[i3].Measures.length; e4 < s2; ++e4) {
                const s3 = this.staffLines[i3].Measures[e4];
                for (let e5 = 0, i4 = s3.staffEntries.length; e5 < i4; ++e5) s3.staffEntries[e5].sourceStaffEntry.Link && (t3 = true);
              }
              for (let t4 = 0, s2 = this.staffLines[i3 + 1].Measures.length; t4 < s2; ++t4) {
                const s3 = this.staffLines[i3 + 1].Measures[t4];
                for (let t5 = 0, i4 = s3.staffEntries.length; t5 < i4; ++t5) s3.staffEntries[t5].sourceStaffEntry.Link && (e3 = true);
              }
            }
            return !(!t3 || !e3);
          }
          getBottomStaffLine(t3) {
            const e3 = t3.ParentStaff.ParentInstrument.Staves, i3 = e3[e3.length - 1];
            for (const e4 of t3.ParentMusicSystem.staffLines) if (e4.ParentStaff === i3) return e4;
          }
          createSystemLine(t3, e3, i3, s2, n2, r2, o2 = void 0) {
            throw new Error("not implemented");
          }
          createLinesForSystemLine(t3) {
          }
          calcBracketsWidth() {
            let t3 = 0;
            for (let e3 = 0, i3 = this.GroupBrackets.length; e3 < i3; ++e3) {
              const i4 = this.GroupBrackets[e3];
              t3 = Math.max(t3, i4.PositionAndShape.Size.width);
            }
            for (let e3 = 0, i3 = this.InstrumentBrackets.length; e3 < i3; ++e3) {
              const i4 = this.InstrumentBrackets[e3];
              t3 = Math.max(t3, i4.PositionAndShape.Size.width);
            }
            return t3;
          }
          createInstrumentBracket(t3, e3) {
          }
          createGroupBracket(t3, e3, i3) {
          }
          findFirstVisibleInstrumentInInstrumentalGroup(t3) {
            for (let e3 = 0, i3 = t3.InstrumentalGroups.length; e3 < i3; ++e3) {
              const i4 = t3.InstrumentalGroups[e3];
              if (!(i4 instanceof s.Instrument)) return this.findFirstVisibleInstrumentInInstrumentalGroup(i4);
              if (true === i4.Visible) return i4;
            }
          }
          findLastVisibleInstrumentInInstrumentalGroup(t3) {
            let e3;
            for (let i3 = t3.InstrumentalGroups.length - 1; i3 >= 0; i3--) {
              if (e3 = t3.InstrumentalGroups[i3], !(e3 instanceof s.Instrument)) return this.findLastVisibleInstrumentInInstrumentalGroup(e3);
              if (true === e3.Visible) return e3;
            }
          }
          updateMusicSystemStaffLineXPosition(t3) {
            for (let e3 = 0, i3 = this.StaffLines.length; e3 < i3; ++e3) {
              const i4 = this.StaffLines[e3], s2 = i4.PositionAndShape.RelativePosition;
              s2.x = this.maxLabelLength + t3, i4.PositionAndShape.RelativePosition = s2, i4.PositionAndShape.BorderRight = this.boundingBox.Size.width - this.maxLabelLength - t3;
              for (let t4 = 0; t4 < i4.StaffLines.length; t4++) {
                const e4 = new h.PointF2D(i4.PositionAndShape.Size.width, i4.StaffLines[t4].End.y);
                i4.StaffLines[t4].End = e4;
              }
            }
          }
        }
        e2.MusicSystem = m;
      }, 5246: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.StavePositionEnum = e2.VexFlowMeasure = void 0;
        var n = s(i2(3206)).default.Flow;
        const r = i2(5748), o = i2(6954), a = i2(164), l = i2(6014), h = i2(8365);
        var c = n.NoteSubGroup;
        const u = s(i2(3065)), d = i2(9479), f = i2(1645), m = i2(67), p = i2(1336), g = i2(4134), b = i2(2561), S = i2(9713), y = i2(3123), E = i2(6362), x = i2(5282);
        class v extends r.GraphicalMeasure {
          constructor(t3, e3, i3) {
            super(t3, e3, i3), this.octaveOffset = 3, this.vfVoices = {}, this.vfTies = [], this.vfRepetitionWords = [], this.hasMetronomeMark = false, this.connectors = [], this.beams = {}, this.autoVfBeams = [], this.autoTupletVfBeams = [], this.vfbeams = {}, this.tuplets = {}, this.vftuplets = {}, this.minimumStaffEntriesWidth = -1, this.rules = i3 ? i3.ParentMusicSystem.rules : e3 ? e3.Rules : new S.EngravingRules(), this.resetLayout();
          }
          setAbsoluteCoordinates(t3, e3) {
            this.stave.setX(t3).setY(e3);
          }
          resetLayout() {
            this.stave = new n.Stave(0, 0, 0, { fill_style: this.rules.StaffLineColor, space_above_staff_ln: 0, space_below_staff_ln: 0 }), this.InitiallyActiveClef && (this.stave.clef = l.VexFlowConverter.Clef(this.InitiallyActiveClef).type), this.stave.MeasureNumber = this.MeasureNumber, this.hasMetronomeMark = false, this.ParentStaff && this.setLineNumber(this.ParentStaff.StafflineCount), this.stave.setBegBarType(n.Barline.type.NONE), this.parentSourceMeasure && this.parentSourceMeasure.endingBarStyleEnum === o.SystemLinesEnum.None && this.stave.setEndBarType(n.Barline.type.NONE), this.updateInstructionWidth();
          }
          clean() {
            this.vfTies.length = 0, this.connectors = [], this.resetLayout();
          }
          getLineWidth(t3) {
            switch (t3) {
              case o.SystemLinesEnum.BoldThinDots:
              case o.SystemLinesEnum.DotsThinBold:
                return 10 / d.unitInPixels;
              case o.SystemLinesEnum.DotsBoldBoldDots:
                return 10 / d.unitInPixels + this.rules.RepeatEndStartPadding;
              default:
                return 0;
            }
          }
          addClefAtBegin(t3) {
            if (this.rules.RenderClefsAtBeginningOfStaffline) {
              if (this.octaveOffset = t3.OctaveOffset, t3.ClefType === a.ClefEnum.TAB) this.stave.addClef("tab", void 0, void 0, void 0);
              else {
                const e3 = l.VexFlowConverter.Clef(t3, "default");
                this.stave.addClef(e3.type, e3.size, e3.annotation, n.StaveModifier.Position.BEGIN);
              }
              this.updateInstructionWidth();
            }
          }
          setLineNumber(t3) {
            5 !== t3 && (0 === t3 ? (this.stave.setNumLines(0), this.stave.getBottomLineY = function() {
              return this.getYForLine(this.options.num_lines);
            }) : 1 === t3 ? (this.stave.options.line_config = [{ visible: false }, { visible: false }, { visible: true }, { visible: false }, { visible: false }], this.stave.getBottomLineY = function() {
              return this.getYForLine(2);
            }) : 2 === t3 ? (this.stave.options.line_config = [{ visible: false }, { visible: false }, { visible: true }, { visible: true }, { visible: false }], this.stave.getBottomLineY = function() {
              return this.getYForLine(3);
            }) : 3 === t3 ? (this.stave.options.line_config = [{ visible: false }, { visible: true }, { visible: true }, { visible: true }, { visible: false }], this.stave.getBottomLineY = function() {
              return this.getYForLine(2);
            }) : (this.stave.setNumLines(t3), this.stave.getBottomLineY = function() {
              return this.getYForLine(this.options.num_lines);
            }));
          }
          addKeyAtBegin(t3, e3, i3) {
            var _a;
            if (this.rules.RenderKeySignatures && this.ShowKeySignature && (!this.isTabMeasure || this.rules.TabKeySignatureRendered || this.rules.TabKeySignatureSpacingAdded) && (!((_a = this.parentSourceMeasure) == null ? void 0 : _a.isReducedToMultiRest) || this.rules.MultipleRestMeasureAddKeySignature)) {
              if (this.stave.setKeySignature(l.VexFlowConverter.keySignature(t3), l.VexFlowConverter.keySignature(e3), void 0), this.isTabMeasure && !this.rules.TabKeySignatureRendered) {
                const t4 = this.stave.getModifiers();
                for (const e4 of t4) if (e4 instanceof n.KeySignature) {
                  e4.setStyle({ fillStyle: "#00000000" }), e4.hidden = true;
                  break;
                }
              }
              this.updateInstructionWidth();
            }
          }
          addRhythmAtBegin(t3) {
            if (this.isTabMeasure && !this.rules.TabTimeSignatureRendered && !this.rules.TabTimeSignatureSpacingAdded) return;
            const e3 = l.VexFlowConverter.TimeSignature(t3);
            this.stave.addModifier(e3, n.StaveModifier.Position.BEGIN), (!this.ShowTimeSignature || this.isTabMeasure && !this.rules.TabTimeSignatureRendered) && (e3.setStyle({ fillStyle: "#00000000" }), e3.hidden = true), this.updateInstructionWidth();
          }
          addClefAtEnd(t3, e3 = true) {
            if (this.isTabMeasure) return;
            const i3 = l.VexFlowConverter.Clef(t3, "small");
            if (e3 || !this.stave.endClef) {
              this.stave.setEndClef(i3.type, i3.size, i3.annotation);
              for (const t4 of this.stave.getModifiers()) if (e3) {
                const e4 = t4.originalStrokeStyle, i4 = t4.originalFillStyle;
                t4.getStyle() && (e4 && i4 ? (t4.getStyle().strokeStyle = e4, t4.getStyle().fillStyle = i4) : (t4.getStyle().strokeStyle = null, t4.getStyle().fillStyle = null));
              } else if ("clefs" === t4.getCategory() && t4.getPosition() === n.StaveModifier.Position.END && t4.type === i3.type) {
                const e4 = "#12345600", i4 = t4.getStyle();
                i4 && (t4.originalStrokeStyle = i4.strokeStyle, t4.originalFillStyle = i4.fillStyle), t4.setStyle({ strokeStyle: e4, fillStyle: e4 });
              }
              return this.parentSourceMeasure.hasEndClef = true, this.updateInstructionWidth();
            }
          }
          addMeasureLine(t3, e3, i3 = true) {
            switch (e3) {
              case m.SystemLinePosition.MeasureBegin:
                t3 === o.SystemLinesEnum.BoldThinDots && (i3 || (this.stave.modifiers[0].draw = function(t4) {
                  switch (t4.checkContext(), this.setRendered(), this.type) {
                    case n.Barline.type.SINGLE:
                      this.drawVerticalBar(t4, this.x, false);
                      break;
                    case n.Barline.type.DOUBLE:
                      this.drawVerticalBar(t4, this.x, true);
                      break;
                    case n.Barline.type.END:
                      this.drawVerticalEndBar(t4, this.x);
                      break;
                    case n.Barline.type.REPEAT_BEGIN:
                      this.drawRepeatBar(t4, this.x, true);
                      break;
                    case n.Barline.type.REPEAT_END:
                      this.drawRepeatBar(t4, this.x, false);
                      break;
                    case n.Barline.type.REPEAT_BOTH:
                      this.drawRepeatBar(t4, this.x, false), this.drawRepeatBar(t4, this.x, true);
                  }
                }), this.stave.setBegBarType(n.Barline.type.REPEAT_BEGIN));
                break;
              case m.SystemLinePosition.MeasureEnd:
                switch (t3) {
                  case o.SystemLinesEnum.DotsBoldBoldDots:
                    this.stave.setEndBarType(n.Barline.type.REPEAT_BOTH);
                    break;
                  case o.SystemLinesEnum.DotsThinBold:
                    this.stave.setEndBarType(n.Barline.type.REPEAT_END);
                    break;
                  case o.SystemLinesEnum.DoubleThin:
                    this.stave.setEndBarType(n.Barline.type.DOUBLE);
                    break;
                  case o.SystemLinesEnum.ThinBold:
                    this.stave.setEndBarType(n.Barline.type.END);
                    break;
                  case o.SystemLinesEnum.None:
                    this.stave.setEndBarType(n.Barline.type.NONE);
                }
            }
          }
          addMeasureNumber() {
            const t3 = this.MeasureNumber.toString(), e3 = _.ABOVE;
            this.stave.setText(t3, e3, { justification: 1, shift_x: 0, shift_y: 0 });
          }
          addWordRepetition(t3) {
            let e3, i3 = n.StaveModifier.Position.END;
            const s2 = this.beginInstructionsWidth;
            switch (t3.type) {
              case f.RepetitionInstructionEnum.Segno:
                e3 = n.Repetition.type.SEGNO_LEFT, i3 = n.StaveModifier.Position.LEFT;
                break;
              case f.RepetitionInstructionEnum.Coda:
                e3 = n.Repetition.type.CODA_LEFT, i3 = n.StaveModifier.Position.LEFT;
                break;
              case f.RepetitionInstructionEnum.DaCapo:
                e3 = n.Repetition.type.DC;
                break;
              case f.RepetitionInstructionEnum.DalSegno:
                e3 = n.Repetition.type.DS;
                break;
              case f.RepetitionInstructionEnum.Fine:
                e3 = n.Repetition.type.FINE;
                break;
              case f.RepetitionInstructionEnum.ToCoda:
                e3 = n.Repetition.type.TO_CODA;
                break;
              case f.RepetitionInstructionEnum.DaCapoAlFine:
                e3 = n.Repetition.type.DC_AL_FINE;
                break;
              case f.RepetitionInstructionEnum.DaCapoAlCoda:
                e3 = n.Repetition.type.DC_AL_CODA;
                break;
              case f.RepetitionInstructionEnum.DalSegnoAlFine:
                e3 = n.Repetition.type.DS_AL_FINE;
                break;
              case f.RepetitionInstructionEnum.DalSegnoAlCoda:
                e3 = n.Repetition.type.DS_AL_CODA;
            }
            if (e3) {
              const t4 = new n.Repetition(e3, s2, -this.rules.RepetitionSymbolsYOffset);
              return t4.xShiftAsPercentOfStaveWidth = this.rules.RepetitionEndInstructionXShiftAsPercentOfStaveWidth, void this.stave.addModifier(t4, i3);
            }
            this.addVolta(t3);
          }
          addVolta(t3) {
            var _a;
            let e3 = n.Volta.type.BEGIN;
            if (t3.type === f.RepetitionInstructionEnum.Ending) {
              switch (t3.alignment) {
                case f.AlignmentType.Begin:
                  e3 = this.parentSourceMeasure.endsRepetitionEnding() ? n.Volta.type.BEGIN_END : n.Volta.type.BEGIN;
                  break;
                case f.AlignmentType.End:
                  if (this.parentSourceMeasure.beginsRepetitionEnding()) return;
                  e3 = n.Volta.type.END;
              }
              const i3 = this.ParentStaffLine.SkyBottomLineCalculator, s2 = this.PositionAndShape.AbsolutePosition.x + this.PositionAndShape.BorderMarginLeft + 0.4, r2 = Math.max(this.PositionAndShape.AbsolutePosition.x + this.PositionAndShape.BorderMarginRight, s2 + 0.4), o2 = i3.getSkyLineMinInRange(s2, r2) - 2;
              let a2, l2 = -6.1 + this.rules.VoltaOffset, h2 = this.rules.VoltaOffset;
              o2 < l2 && (h2 += o2 - l2, l2 = o2);
              const c2 = this.parentSourceMeasure.MeasureNumber;
              for (let t4 = 0; t4 < this.ParentStaffLine.Measures.length; t4++) {
                const e4 = this.ParentStaffLine.Measures[t4];
                e4 instanceof v && (e4.MeasureNumber !== c2 - 1 && e4.MeasureNumber + ((_a = e4.parentSourceMeasure) == null ? void 0 : _a.multipleRestMeasures) !== c2 || (a2 = e4));
              }
              if (a2) {
                const t4 = a2.stave.getModifiers();
                for (let e4 = 0; e4 < t4.length; e4++) {
                  const i4 = t4[e4];
                  if (i4.hasOwnProperty("volta")) {
                    const t5 = a2.ParentStaffLine.SkyBottomLineCalculator, e5 = a2.PositionAndShape.AbsolutePosition.x + a2.PositionAndShape.BorderMarginLeft + 0.4, s3 = Math.max(a2.PositionAndShape.AbsolutePosition.x + a2.PositionAndShape.BorderMarginRight, e5 + 0.4), n2 = t5.getSkyLineMinInRange(e5, s3);
                    n2 <= l2 ? (h2 += n2 - l2, l2 = n2) : (i4.y_shift = h2 * d.unitInPixels, a2.ParentStaffLine.SkyBottomLineCalculator.updateSkyLineInRange(e5, s3, l2));
                  }
                }
              }
              h2 *= 10, this.stave.setVoltaType(e3, t3.endingIndices[0], h2), i3.updateSkyLineInRange(s2, r2, l2);
            }
          }
          setWidth(t3) {
            super.setWidth(t3), this.stave.setWidth(t3 * d.unitInPixels);
          }
          layoutSymbols() {
          }
          draw(t3) {
            var _a;
            const e3 = t3.openGroup();
            e3 && ((_a = e3.classList) == null ? void 0 : _a.add("vf-measure"), e3.id = `${this.MeasureNumber}`), this.stave.setContext(t3).draw();
            for (const e4 in this.vfVoices) this.vfVoices.hasOwnProperty(e4) && (t3.save(), this.vfVoices[e4].draw(t3, this.stave), t3.restore());
            for (const e4 in this.vfbeams) if (this.vfbeams.hasOwnProperty(e4)) for (const i3 of this.vfbeams[e4]) i3.setContext(t3).draw();
            if (this.autoVfBeams) for (const e4 of this.autoVfBeams) e4.setContext(t3).draw();
            if (!this.isTabMeasure || this.rules.TupletNumbersInTabs) {
              if (this.autoTupletVfBeams) for (const e4 of this.autoTupletVfBeams) e4.setContext(t3).draw();
              for (const e4 in this.vftuplets) if (this.vftuplets.hasOwnProperty(e4)) for (let i3 = 0; i3 < this.tuplets[e4].length; i3++) {
                const s2 = this.tuplets[e4][i3][0], n2 = this.vftuplets[e4][i3];
                n2 && (!s2.RenderTupletNumber || s2.ShowNumberNoneGivenInXml && this.rules.TupletNumberUseShowNoneXMLValue ? n2.RenderTupletNumber = false : n2.RenderTupletNumber = true, n2.setContext(t3).draw());
              }
            }
            for (const e4 of this.vfTies) {
              if (e4 instanceof n.TabSlide) return;
              e4.setContext(t3), e4.draw();
            }
            t3.closeGroup();
            for (const e4 of this.connectors) t3.openGroup("connector"), e4.setContext(t3).draw(), t3.closeGroup();
            this.correctNotePositions();
          }
          format() {
            this.formatVoices && this.formatVoices((this.PositionAndShape.Size.width - this.beginInstructionsWidth - this.endInstructionsWidth) * d.unitInPixels, this);
          }
          correctNotePositions() {
            if (this.isTabMeasure) for (const t3 of this.getVoicesWithinMeasure()) for (const e3 of t3.VoiceEntries) for (const t4 of e3.Notes) {
              const e4 = t4, i3 = this.rules.GNote(t4);
              e4.StringNumberTab >= 0 && (i3.parentVoiceEntry.PositionAndShape.RelativePosition.y = (e4.StringNumberTab - 1) * this.rules.TabStaffInterlineHeightForBboxes);
            }
            else for (const t3 of this.getVoicesWithinMeasure()) for (const e3 of t3.VoiceEntries) for (const t4 of e3.Notes) {
              const e4 = this.rules.GNote(t4);
              if (!(e4 == null ? void 0 : e4.vfnote)) return;
              const i3 = e4.vfnote[0];
              let s2 = 0;
              e4.parentVoiceEntry.parentVoiceEntry.StemDirection === p.StemDirectionType.Up && "w" !== e4.vfnote[0].getDuration() ? s2 += 3.5 : s2 += 0.5, s2 += -e4.notehead(i3).line + e4.parentVoiceEntry.notes.last().notehead().line, e4.PositionAndShape.RelativePosition.y = s2;
            }
          }
          getVoicesWithinMeasure() {
            const t3 = [];
            for (const e3 of this.staffEntries) for (const i3 of e3.graphicalVoiceEntries) -1 === t3.indexOf(i3.parentVoiceEntry.ParentVoice) && t3.push(i3.parentVoiceEntry.ParentVoice);
            return t3;
          }
          getGraphicalVoiceEntriesPerVoice(t3) {
            const e3 = [];
            for (const i3 of this.staffEntries) for (const s2 of i3.graphicalVoiceEntries) s2.parentVoiceEntry.ParentVoice === t3 && e3.push(s2);
            return e3;
          }
          getRestFilledVexFlowStaveNotesPerVoice(t3) {
            let e3, i3 = this.getGraphicalVoiceEntriesPerVoice(t3);
            for (let t4 = 0; t4 < i3.length; t4++) {
              const s3 = i3[t4], n3 = s3.notes[0].sourceNote.getAbsoluteTimestamp();
              let r2 = new b.Fraction();
              for (const t5 of s3.notes) {
                const e4 = b.Fraction.plus(t5.sourceNote.getAbsoluteTimestamp(), t5.sourceNote.Length);
                r2.lt(e4) && (r2 = e4);
              }
              if (e3) {
                const s4 = b.Fraction.minus(n3, e3);
                if (s4.RealValue > 0) {
                  u.default.trace(`Ghost Found in between (measure ${this.MeasureNumber})`);
                  const e4 = this.createGhostGves(s4);
                  i3.splice(t4, 0, ...e4), t4 += e4.length;
                }
              } else {
                const e4 = b.Fraction.minus(n3, this.parentSourceMeasure.AbsoluteTimestamp);
                if (e4.RealValue > 0) {
                  u.default.trace(`Ghost Found at start (measure ${this.MeasureNumber})`);
                  const s4 = this.createGhostGves(e4);
                  i3.splice(0, 0, ...s4), t4 += s4.length;
                }
              }
              e3 = r2;
            }
            const s2 = b.Fraction.plus(this.parentSourceMeasure.AbsoluteTimestamp, this.parentSourceMeasure.Duration), n2 = b.Fraction.minus(s2, e3);
            if (n2.RealValue > 0) {
              u.default.trace(`Ghost Found at end (measure ${this.MeasureNumber})`);
              const t4 = this.createGhostGves(n2);
              i3 = i3.concat(t4);
            }
            return i3;
          }
          createGhostGves(t3) {
            const e3 = l.VexFlowConverter.GhostNotes(t3), i3 = [];
            for (const t4 of e3) {
              const e4 = new g.VexFlowVoiceEntry(void 0, void 0, this.rules);
              e4.vfStaveNote = t4, i3.push(e4);
            }
            return i3;
          }
          handleBeam(t3, e3) {
            const i3 = t3.sourceNote.ParentVoiceEntry.ParentVoice.VoiceId;
            let s2, n2 = this.beams[i3];
            n2 || (n2 = this.beams[i3] = []);
            for (const t4 of n2) t4[0] === e3 && (s2 = t4);
            s2 || (s2 = [e3, []], n2.push(s2));
            const r2 = t3.parentVoiceEntry;
            s2[1].indexOf(r2) < 0 && s2[1].push(r2);
          }
          handleTuplet(t3, e3) {
            const i3 = t3.sourceNote.ParentVoiceEntry.ParentVoice.VoiceId;
            e3 = t3.sourceNote.NoteTuplet;
            let s2, n2 = this.tuplets[i3];
            n2 || (n2 = this.tuplets[i3] = []);
            for (const t4 of n2) t4[0] === e3 && (s2 = t4);
            s2 || (s2 = [e3, []], n2.push(s2));
            const r2 = t3.parentVoiceEntry;
            s2[1].indexOf(r2) < 0 && s2[1].push(r2);
          }
          finalizeBeams() {
            if (this.vfbeams = {}, this.isTabMeasure && !this.rules.TabBeamsRendered) return;
            const t3 = [];
            for (const e3 in this.beams) if (this.beams.hasOwnProperty(e3)) {
              let i3 = this.vfbeams[e3];
              i3 || (i3 = this.vfbeams[e3] = []);
              for (const s2 of this.beams[e3]) {
                let e4 = false;
                for (const t4 of s2[0].Notes) if (t4.Length.RealValue >= new b.Fraction(1, 4).RealValue && (!t4.TypeLength || t4.TypeLength.RealValue > 0.125)) {
                  e4 = true;
                  break;
                }
                if (e4) {
                  u.default.debug("Beam between note >= quarter, likely tremolo, currently unsupported. continuing.");
                  continue;
                }
                const r2 = [], o2 = s2[0], a2 = s2[1];
                let l2 = true;
                for (const t4 of a2) t4.parentVoiceEntry.ParentVoice === o2.Notes[0].ParentVoiceEntry.ParentVoice && (l2 = t4.parentVoiceEntry.WantedStemDirection === p.StemDirectionType.Undefined);
                let h2, c2 = false;
                const d2 = [];
                for (const e5 of a2) {
                  const i4 = e5.vfStaveNote;
                  i4 && (r2.push(i4), t3.push(i4)), e5.parentVoiceEntry.IsGrace && (c2 = true), e5.parentVoiceEntry.StemColor && this.rules.ColoringEnabled && d2.push(e5.parentVoiceEntry.StemColor);
                }
                if (r2.length > 1) {
                  const t4 = new n.Beam(r2, l2);
                  if (c2 && (t4.render_options.beam_width = 3, t4.render_options.partial_beam_length = 4), d2.length >= 2 && this.rules.ColorBeams) {
                    h2 = d2[0];
                    for (const t5 of d2) if (t5 !== h2) {
                      h2 = void 0;
                      break;
                    }
                    t4.setStyle({ fillStyle: h2, strokeStyle: h2 });
                  }
                  this.rules.FlatBeams && (t4.render_options.flat_beams = true, t4.render_options.flat_beam_offset = this.rules.FlatBeamOffset, t4.render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam), i3.push(t4);
                } else u.default.debug("Warning! Beam with no notes!");
              }
            }
            this.rules.AutoBeamNotes && this.autoBeamNotes(t3);
          }
          autoBeamNotes(t3) {
            if (!this.rules.AutoBeamTabs && this.isTabMeasure) return;
            let e3, i3 = 60, s2 = [], r2 = [], o2 = [];
            this.autoTupletVfBeams = [];
            const a2 = [];
            this.autoVfBeams = [];
            let l2 = this.parentSourceMeasure.ActiveTimeSignature;
            l2 || (l2 = this.parentSourceMeasure.Duration);
            for (const c3 of this.staffEntries) for (const u3 of c3.graphicalVoiceEntries) {
              const d2 = u3.vfStaveNote, f2 = u3.notes[0], m2 = { vfStaveNote: d2, sourceNote: f2.sourceNote }, p2 = c3.relInMeasureTimestamp.isOnBeat(l2), g2 = r2.length >= 2, S2 = f2.sourceNote.Length.RealValue - new b.Fraction(1, 4).RealValue > -b.Fraction.FloatInaccuracyTolerance, y2 = u3.parentVoiceEntry.IsGrace || S2 || t3.contains(d2);
              if (y2 || p2) {
                if (g2) {
                  for (const t4 of r2) s2.push(t4);
                  a2.push(s2.slice()), s2 = [];
                }
                if (r2 = [], y2) continue;
              }
              const E2 = u3.notes[0].sourceNote.NoteTuplet;
              if (E2) {
                let t4 = false;
                for (const e4 of E2.Notes) {
                  for (const i4 of e4) if (i4.NoteTypeXml >= x.NoteType.QUARTER || i4.ParentVoiceEntry.IsGrace || i4.isRest() && !this.rules.AutoBeamOptions.beam_rests) {
                    t4 = true;
                    break;
                  }
                  if (t4) break;
                }
                if (e3) {
                  if (e3 !== E2) {
                    if (o2.length > 1) {
                      const t5 = [];
                      for (const e5 of o2) t5.push(e5.vfStaveNote);
                      const e4 = new n.Beam(t5, true);
                      this.rules.FlatBeams && (e4.render_options.flat_beams = true, e4.render_options.flat_beam_offset = this.rules.FlatBeamOffset, e4.render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam), this.autoTupletVfBeams.push(e4);
                      const s3 = new h.Beam(i3++);
                      s3.AutoGenerated = true;
                      for (const t6 of o2) s3.addNoteToBeam(t6.sourceNote);
                    }
                    o2 = [], e3 = E2;
                  }
                } else e3 = E2;
                t4 || o2.push(m2);
              } else e3 = void 0, r2.push(m2);
            }
            if (o2.length >= 2) {
              const t4 = [];
              for (const e5 of o2) t4.push(e5.vfStaveNote);
              const e4 = new n.Beam(t4, true);
              this.rules.FlatBeams && (e4.render_options.flat_beams = true, e4.render_options.flat_beam_offset = this.rules.FlatBeamOffset, e4.render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam), this.autoTupletVfBeams.push(e4);
              const s3 = new h.Beam(i3++);
              s3.AutoGenerated = true;
              for (const t5 of o2) s3.addNoteToBeam(t5.sourceNote);
            }
            if (r2.length >= 2) {
              for (const t4 of r2) s2.push(t4);
              a2.push(s2);
            }
            const c2 = this.rules.AutoBeamOptions, u2 = { beam_middle_only: c2.beam_middle_rests_only, beam_rests: c2.beam_rests, maintain_stem_directions: c2.maintain_stem_directions };
            if (c2.groups && c2.groups.length) {
              const t4 = [];
              for (const e4 of c2.groups) t4.push(new n.Fraction(e4[0], e4[1]));
              u2.groups = t4;
            }
            for (const t4 of a2) {
              const e4 = [];
              for (const i5 of t4) e4.push(i5.vfStaveNote);
              const i4 = n.Beam.generateBeams(e4, u2);
              for (const t5 of i4) this.rules.FlatBeams && (t5.render_options.flat_beams = true, t5.render_options.flat_beam_offset = this.rules.FlatBeamOffset, t5.render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam), this.autoVfBeams.push(t5);
            }
          }
          finalizeTuplets() {
            this.vftuplets = {};
            for (const t3 in this.tuplets) if (this.tuplets.hasOwnProperty(t3)) {
              let e3 = this.vftuplets[t3];
              e3 || (e3 = this.vftuplets[t3] = []);
              for (const i3 of this.tuplets[t3]) {
                const t4 = [], s2 = i3[1];
                for (const e4 of s2) t4.push(e4.vfStaveNote);
                if (t4.length > 1) {
                  const s3 = i3[0], r2 = s3.Notes[0][0].NormalNotes, o2 = s3.shouldBeBracketed(this.rules.TupletsBracketedUseXMLValue, this.rules.TupletsBracketed, this.rules.TripletsBracketed, this.isTabMeasure, this.rules.TabTupletsBracketed);
                  let a2 = n.Tuplet.LOCATION_TOP;
                  s3.tupletLabelNumberPlacement === E.PlacementEnum.Below && (a2 = n.Tuplet.LOCATION_BOTTOM);
                  let l2 = 0;
                  if (this.isTabMeasure && (l2 = 10 * this.rules.TabTupletYOffsetBottom, a2 === n.Tuplet.LOCATION_TOP)) {
                    l2 = -10 * this.rules.TabTupletYOffsetTop;
                    const t5 = s3.Notes[0][0];
                    (t5 == null ? void 0 : t5.hasTabEffects()) && (l2 -= 10 * this.rules.TabTupletYOffsetEffects);
                  }
                  const h2 = new n.Tuplet(t4, { bracketed: o2, location: a2, notes_occupied: r2, num_notes: s3.TupletLabelNumber, ratioed: this.rules.TupletsRatioed, y_offset: l2 });
                  e3.push(h2);
                } else u.default.debug("Warning! Tuplet with no notes! Trying to ignore, but this is a serious problem.");
              }
            }
          }
          layoutStaffEntry(t3) {
          }
          graphicalMeasureCreatedCalculations() {
            let t3, e3 = [];
            const i3 = [];
            for (const s3 of this.staffEntries) {
              t3 = false, e3 = [];
              for (const r2 of s3.graphicalVoiceEntries) if (r2.parentVoiceEntry.IsGrace) e3.push(r2), i3.push(r2), t3 || (t3 = r2.parentVoiceEntry.GraceSlur);
              else if (r2.vfStaveNote = l.VexFlowConverter.StaveNote(r2), e3.length > 0) {
                const i4 = [];
                for (let t4 = 0; t4 < e3.length; t4++) {
                  const s5 = e3[t4];
                  s5.GraceSlash = s5.parentVoiceEntry.GraceNoteSlash, t4 > 0 && (s5.GraceSlash = false);
                  const n2 = l.VexFlowConverter.StaveNote(s5);
                  s5.vfStaveNote = n2, i4.push(n2);
                }
                const s4 = new n.GraceNoteGroup(i4, t3);
                let o2 = this.rules.GraceNoteGroupXMargin;
                i4.length > 1 && (o2 /= 3), s4.spacing = 10 * o2, r2.vfStaveNote.addModifier(0, s4), e3 = [];
              }
            }
            if (e3.length > 0) for (const t4 of e3) t4.vfStaveNote = l.VexFlowConverter.StaveNote(t4), t4.parentVoiceEntry.GraceAfterMainNote = true;
            this.finalizeBeams(), this.finalizeTuplets();
            const s2 = this.getVoicesWithinMeasure();
            if (this.rules.RenderFingerings) for (const t4 of this.staffEntries) t4.setModifierXOffsets();
            for (const t4 of s2) {
              if (!t4) continue;
              this.vfVoices[t4.VoiceId] = new n.Voice({ beat_value: this.parentSourceMeasure.ActiveTimeSignature.Denominator, num_beats: this.parentSourceMeasure.ActiveTimeSignature.Numerator, resolution: n.RESOLUTION }).setMode(n.Voice.Mode.SOFT);
              const e4 = this.getRestFilledVexFlowStaveNotesPerVoice(t4);
              for (const i4 of e4) {
                if (i4.parentVoiceEntry && i4.parentVoiceEntry.IsGrace && !i4.parentVoiceEntry.GraceAfterMainNote) continue;
                const e5 = i4;
                if (0 === e5.vfStaveNote.getTicks().denominator && (e5.vfStaveNote.getTicks().denominator = 1), 0 === i4.notes.length || !i4.notes[0] || !i4.notes[0].sourceNote.PrintObject) {
                  this.vfVoices[t4.VoiceId].addTickable(e5.vfStaveNote);
                  continue;
                }
                const s3 = e5.parentStaffEntry;
                if (s3 && s3.vfClefBefore) {
                  const t5 = new c([s3.vfClefBefore]);
                  e5.vfStaveNote.getCategory && "stavenotes" === e5.vfStaveNote.getCategory() && e5.vfStaveNote.addModifier(0, t5);
                }
                i4.parentVoiceEntry && this.rules.RenderFingerings && (this.rules.FingeringPosition !== E.PlacementEnum.Left && this.rules.FingeringPosition !== E.PlacementEnum.Right || this.createFingerings(i4), this.createStringNumber(i4)), this.createArpeggio(i4), this.vfVoices[t4.VoiceId].addTickable(e5.vfStaveNote);
              }
            }
            this.setStemDirectionFromVexFlow();
            for (const t4 of i3) this.createFingerings(t4), this.createStringNumber(t4), this.createArpeggio(t4);
            this.createArticulations(), this.createOrnaments();
          }
          createArpeggio(t3) {
            if (t3.parentVoiceEntry && t3.parentVoiceEntry.Arpeggio) {
              const e3 = t3.parentVoiceEntry.Arpeggio;
              if (t3.notes && t3.notes.length > 1) {
                const i3 = l.VexFlowConverter.StrokeTypeFromArpeggioType(e3.type), s2 = new n.Stroke(i3, { all_voices: this.rules.ArpeggiosGoAcrossVoices });
                this.rules.RenderArpeggios && t3.vfStaveNote.addStroke(0, s2);
              } else u.default.debug(`[OSMD] arpeggio in measure ${this.MeasureNumber} could not be drawn.
                voice entry had less than two notes, arpeggio is likely between voice entries, not currently supported in Vexflow.`);
            }
          }
          setStemDirectionFromVexFlow() {
            for (const t3 of this.staffEntries) for (const e3 of t3.graphicalVoiceEntries) for (const t4 of e3.notes) {
              const i3 = t4.vfnote;
              if (i3 && i3[0]) switch (i3[0].getStemDirection()) {
                case n.Stem.UP:
                  e3.parentVoiceEntry.StemDirection = p.StemDirectionType.Up;
                  break;
                case n.Stem.DOWN:
                  e3.parentVoiceEntry.StemDirection = p.StemDirectionType.Down;
              }
            }
          }
          createArticulations() {
            for (let t3 = 0, e3 = this.staffEntries.length; t3 < e3; ++t3) {
              const e4 = this.staffEntries[t3].graphicalVoiceEntries;
              for (const t4 of e4) {
                const e5 = t4.vfStaveNote;
                l.VexFlowConverter.generateArticulations(e5, t4.notes[0], this.rules);
              }
            }
          }
          createOrnaments() {
            for (let t3 = 0, e3 = this.staffEntries.length; t3 < e3; ++t3) {
              const e4 = this.staffEntries[t3].graphicalVoiceEntries;
              for (const t4 in e4) if (e4.hasOwnProperty(t4)) {
                const i3 = e4[t4].vfStaveNote, s2 = e4[t4].notes[0].sourceNote.ParentVoiceEntry.OrnamentContainer;
                s2 && l.VexFlowConverter.generateOrnaments(i3, s2);
              }
            }
          }
          createFingerings(t3) {
            const e3 = t3;
            let i3 = 0;
            for (const e4 of t3.notes) e4.sourceNote.Fingering && i3++;
            const s2 = [];
            for (const e4 of t3.parentVoiceEntry.TechnicalInstructions) e4.type === y.TechnicalInstructionType.Fingering && s2.push(e4);
            if (s2.length > i3) {
              let e4 = 0;
              for (const i4 of t3.notes) if (i4.sourceNote.Fingering) e4++;
              else {
                if (e4 > s2.length - 1) break;
                i4.sourceNote.Fingering = s2[e4], e4++;
              }
            }
            let r2 = -1;
            for (const s3 of t3.notes) {
              const o2 = s3.sourceNote.Fingering;
              if (!o2) {
                r2++;
                continue;
              }
              r2++;
              let a2 = this.rules.FingeringPosition;
              this.rules.FingeringPositionGrace === E.PlacementEnum.AboveOrBelow && (this.isUpperStaffOfInstrument() ? a2 = E.PlacementEnum.Above : this.isLowerStaffOfInstrument() && (a2 = E.PlacementEnum.Below)), o2.placement !== E.PlacementEnum.NotYetDefined && (a2 = o2.placement);
              let l2, h2 = this.rules.FingeringOffsetX;
              switch (a2) {
                default:
                case E.PlacementEnum.Left:
                  l2 = n.StaveModifier.Position.LEFT, h2 -= s3.baseFingeringXOffset * d.unitInPixels;
                  break;
                case E.PlacementEnum.Right:
                  l2 = n.StaveModifier.Position.RIGHT, h2 += s3.baseFingeringXOffset * d.unitInPixels;
                  break;
                case E.PlacementEnum.Above:
                  l2 = n.StaveModifier.Position.ABOVE;
                  break;
                case E.PlacementEnum.Below:
                  l2 = n.StaveModifier.Position.BELOW;
                  break;
                case E.PlacementEnum.NotYetDefined:
                  const e4 = t3.parentStaffEntry.sourceStaffEntry.ParentStaff;
                  t3.notes.length > 1 || t3.parentStaffEntry.graphicalVoiceEntries.length > 1 ? l2 = n.StaveModifier.Position.LEFT : 0 === e4.idInMusicSheet ? (l2 = n.StaveModifier.Position.ABOVE, a2 = E.PlacementEnum.Above) : (l2 = n.StaveModifier.Position.BELOW, a2 = E.PlacementEnum.Below);
              }
              const c2 = new n.FretHandFinger(o2.value);
              if (c2.setPosition(l2), c2.setOffsetX(h2), a2 === E.PlacementEnum.Above || a2 === E.PlacementEnum.Below) {
                const t4 = a2 === E.PlacementEnum.Above ? -1 : 1, s4 = a2 === E.PlacementEnum.Above ? r2 : i3 - 1 - r2;
                if (this.rules.FingeringInsideStafflines && i3 > 1) {
                  const e4 = c2.getWidth() / 2, n2 = 2.5 * i3;
                  c2.setOffsetY(t4 * (s4 + n2) * e4);
                } else if (!this.rules.FingeringInsideStafflines) {
                  const i4 = new n.StringNumber(o2.value);
                  i4.radius = 0, i4.setPosition(l2), i4.setOffsetY(t4 * s4 * i4.getWidth() * 2 / 3), e3.vfStaveNote.addModifier(r2, i4);
                  continue;
                }
              }
              e3.vfStaveNote.addModifier(r2, c2);
            }
          }
          createStringNumber(t3) {
            if (!this.rules.RenderStringNumbersClassical) return;
            const e3 = t3;
            t3.notes.forEach((i3, s2) => {
              const r2 = i3.sourceNote.StringInstruction;
              if (r2) {
                let o2 = r2.value;
                switch (o2) {
                  case "1":
                    o2 = "I";
                    break;
                  case "2":
                    o2 = "II";
                    break;
                  case "3":
                    o2 = "III";
                    break;
                  case "4":
                    o2 = "IV";
                    break;
                  case "5":
                    o2 = "V";
                    break;
                  case "6":
                    o2 = "VI";
                }
                const a2 = new n.StringNumber(o2);
                a2.radius = 0;
                const l2 = -this.rules.StringNumberOffsetY;
                t3.notes.length > 1 || t3.parentStaffEntry.graphicalVoiceEntries.length > 1 ? (a2.setOffsetX(13 * i3.baseStringNumberXOffset), a2.setPosition(n.Modifier.Position.RIGHT)) : a2.setPosition(n.Modifier.Position.ABOVE), a2.setOffsetY(l2), e3.vfStaveNote.addModifier(s2, a2);
              }
            });
          }
          lineTo(t3, e3) {
            const i3 = new n.StaveConnector(t3.getVFStave(), this.stave);
            i3.setType(e3), this.connectors.push(i3);
          }
          getVFStave() {
            return this.stave;
          }
          updateInstructionWidth() {
            let t3 = 0, e3 = 0;
            const i3 = this.stave.getModifiers();
            for (const s2 of i3) s2.getPosition() === _.BEGIN ? t3 += s2.getWidth() + s2.getPadding(void 0) : s2.getPosition() === _.END && (e3 += s2.getWidth() + s2.getPadding(void 0));
            this.beginInstructionsWidth = (t3 ?? 0) / d.unitInPixels, this.endInstructionsWidth = (e3 ?? 0) / d.unitInPixels;
          }
          addStaveTie(t3, e3) {
            this.vfTies.push(t3), e3.vfTie = t3, e3.Tie.TieDirection === E.PlacementEnum.Below && t3.setDirection(1);
          }
        }
        var _;
        e2.VexFlowMeasure = v, function(t3) {
          t3[t3.LEFT = 1] = "LEFT", t3[t3.RIGHT = 2] = "RIGHT", t3[t3.ABOVE = 3] = "ABOVE", t3[t3.BELOW = 4] = "BELOW", t3[t3.BEGIN = 5] = "BEGIN", t3[t3.END = 6] = "END";
        }(_ || (e2.StavePositionEnum = _ = {}));
      }, 5274: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Tie = void 0;
        const n = i2(2561), r = i2(6362), o = s(i2(3065));
        e2.Tie = class {
          constructor(t3, e3) {
            this.notes = [], this.TieNumber = 1, this.TieDirection = r.PlacementEnum.NotYetDefined, this.NoteIndexToTieDirection = {}, this.AddNote(t3), this.type = e3;
          }
          getTieDirection(t3) {
            if (!t3) return this.TieDirection;
            for (let e3 = 0; e3 < this.Notes.length; e3++) if (this.Notes[e3] === t3) {
              return this.NoteIndexToTieDirection[e3] || this.TieDirection;
            }
            return o.default.debug("tie.getTieDuration note not in tie.Notes"), this.TieDirection;
          }
          get Notes() {
            return this.notes;
          }
          get Type() {
            return this.type;
          }
          get StartNote() {
            return this.notes[0];
          }
          get Duration() {
            const t3 = new n.Fraction();
            for (const e3 of this.notes) t3.Add(e3.Length);
            return t3;
          }
          get Pitch() {
            return this.StartNote.Pitch;
          }
          AddNote(t3) {
            this.notes.push(t3), t3.NoteTie = this;
          }
        };
      }, 5282: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.NoteTypeHandler = e2.NoteType = void 0;
        const s = i2(2561), n = i2(2148), r = i2(7307);
        var o;
        !function(t3) {
          t3[t3.UNDEFINED = 0] = "UNDEFINED", t3[t3._1024th = 1] = "_1024th", t3[t3._512th = 2] = "_512th", t3[t3._256th = 3] = "_256th", t3[t3._128th = 4] = "_128th", t3[t3._64th = 5] = "_64th", t3[t3._32nd = 6] = "_32nd", t3[t3._16th = 7] = "_16th", t3[t3.EIGTH = 8] = "EIGTH", t3[t3.QUARTER = 9] = "QUARTER", t3[t3.HALF = 10] = "HALF", t3[t3.WHOLE = 11] = "WHOLE", t3[t3.BREVE = 12] = "BREVE", t3[t3.LONG = 13] = "LONG", t3[t3.MAXIMA = 14] = "MAXIMA";
        }(o || (e2.NoteType = o = {}));
        class a {
          static NoteTypeToString(t3) {
            return this.NoteTypeXmlValues[t3];
          }
          static StringToNoteType(t3) {
            const e3 = this.NoteTypeXmlValues.indexOf(t3);
            return -1 !== e3 ? e3 : o.UNDEFINED;
          }
          static getNoteDurationFromType(t3) {
            switch (t3) {
              case "1024th":
                return new s.Fraction(1, 1024);
              case "512th":
                return new s.Fraction(1, 512);
              case "256th":
                return new s.Fraction(1, 256);
              case "128th":
                return new s.Fraction(1, 128);
              case "64th":
                return new s.Fraction(1, 64);
              case "32th":
              case "32nd":
                return new s.Fraction(1, 32);
              case "16th":
                return new s.Fraction(1, 16);
              case "eighth":
                return new s.Fraction(1, 8);
              case "quarter":
                return new s.Fraction(1, 4);
              case "half":
                return new s.Fraction(1, 2);
              case "whole":
                return new s.Fraction(1, 1);
              case "breve":
                return new s.Fraction(2, 1);
              case "long":
                return new s.Fraction(4, 1);
              case "maxima":
                return new s.Fraction(8, 1);
              default: {
                const t4 = n.ITextTranslation.translateText("ReaderErrorMessages/NoteDurationError", "Invalid note duration.");
                throw new r.MusicSheetReadingException(t4);
              }
            }
          }
        }
        e2.NoteTypeHandler = a, a.NoteTypeXmlValues = ["", "1024th", "512th", "256th", "128th", "64th", "32nd", "16th", "eigth", "quarter", "half", "whole", "breve", "long", "maxima"];
      }, 5294: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SubInstrument = void 0;
        const n = i2(164), r = s(i2(3065));
        class o {
          constructor(t3) {
            this.parentInstrument = t3, this.fixedKey = -1, this.name = this.parseMidiInstrument(this.parentInstrument.Name), this.midiInstrumentID = o.midiInstrument[this.name], this.volume = 1;
          }
          get ParentInstrument() {
            return this.parentInstrument;
          }
          static isPianoInstrument(t3) {
            return t3 === n.MidiInstrument.Acoustic_Grand_Piano || t3 === n.MidiInstrument.Bright_Acoustic_Piano || t3 === n.MidiInstrument.Electric_Grand_Piano || t3 === n.MidiInstrument.Electric_Piano_1 || t3 === n.MidiInstrument.Electric_Piano_2;
          }
          setMidiInstrument(t3) {
            this.midiInstrumentID = o.midiInstrument[this.parseMidiInstrument(t3)];
          }
          parseMidiInstrument(t3) {
            try {
              if (t3) {
                const e3 = t3.toLowerCase().trim();
                for (const t4 in o.midiInstrument) if (-1 !== e3.indexOf(t4)) return t4;
              }
              if (this.parentInstrument.Name) {
                const t4 = this.parentInstrument.Name.toLowerCase().trim();
                for (const e3 in o.midiInstrument) if (-1 !== t4.indexOf(e3)) return e3;
              }
            } catch (t4) {
              r.default.error("Error parsing MIDI Instrument. Default to Grand Piano.");
            }
            return "unnamed";
          }
        }
        e2.SubInstrument = o, o.midiInstrument = { alt: n.MidiInstrument.Synth_Voice, alto: n.MidiInstrument.Synth_Voice, banjo: n.MidiInstrument.Banjo, bariton: n.MidiInstrument.Synth_Voice, baritone: n.MidiInstrument.Synth_Voice, bass: n.MidiInstrument.Synth_Voice, blockfloete: n.MidiInstrument.Recorder, brass: n.MidiInstrument.Trombone, bratsche: n.MidiInstrument.Viola, cello: n.MidiInstrument.Cello, clarinet: n.MidiInstrument.Clarinet, contrabass: n.MidiInstrument.Contrabass, drums: n.MidiInstrument.Percussion, flute: n.MidiInstrument.Flute, floete: n.MidiInstrument.Flute, frenchhorn: n.MidiInstrument.French_Horn, gitarre: n.MidiInstrument.Acoustic_Guitar_nylon, guitar: n.MidiInstrument.Acoustic_Guitar_nylon, harfe: n.MidiInstrument.Orchestral_Harp, harp: n.MidiInstrument.Orchestral_Harp, klarinette: n.MidiInstrument.Clarinet, klavier: n.MidiInstrument.Acoustic_Grand_Piano, kontrabass: n.MidiInstrument.Contrabass, oboe: n.MidiInstrument.Oboe, organ: n.MidiInstrument.Church_Organ, orgel: n.MidiInstrument.Church_Organ, orgue: n.MidiInstrument.Church_Organ, percussion: n.MidiInstrument.Percussion, piano: n.MidiInstrument.Acoustic_Grand_Piano, piccolo: n.MidiInstrument.Piccolo, posaune: n.MidiInstrument.Trombone, recorder: n.MidiInstrument.Recorder, sax: n.MidiInstrument.Tenor_Sax, schlagwerk: n.MidiInstrument.Percussion, schlagzeug: n.MidiInstrument.Percussion, sopran: n.MidiInstrument.Synth_Voice, steeldrum: n.MidiInstrument.Steel_Drums, streicher: n.MidiInstrument.String_Ensemble_1, strings: n.MidiInstrument.String_Ensemble_1, tenor: n.MidiInstrument.Synth_Voice, tpt: n.MidiInstrument.Trumpet, trombone: n.MidiInstrument.Trombone, trompete: n.MidiInstrument.Trumpet, trumpet: n.MidiInstrument.Trumpet, tuba: n.MidiInstrument.Tuba, unnamed: n.MidiInstrument.Acoustic_Grand_Piano, viola: n.MidiInstrument.Viola, violin: n.MidiInstrument.Violin, "violon-c": n.MidiInstrument.Cello, "violon.": n.MidiInstrument.Violin, voice: n.MidiInstrument.Synth_Voice, woodblock: n.MidiInstrument.Woodblock };
      }, 5332: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.TempoExpressionEntry = e2.MultiTempoExpression = void 0;
        const s = i2(2561), n = i2(9161), r = i2(6362), o = i2(2570), a = i2(2221);
        e2.MultiTempoExpression = class {
          constructor(t3, e3) {
            this.expressions = [], this.sourceMeasure = t3, this.timestamp = e3;
          }
          get Timestamp() {
            return this.timestamp;
          }
          get AbsoluteTimestamp() {
            return s.Fraction.plus(this.sourceMeasure.AbsoluteTimestamp, this.timestamp);
          }
          get SourceMeasureParent() {
            return this.sourceMeasure;
          }
          set SourceMeasureParent(t3) {
            this.sourceMeasure = t3;
          }
          get InstantaneousTempo() {
            return this.instantaneousTempo;
          }
          get ContinuousTempo() {
            return this.continuousTempo;
          }
          get EntriesList() {
            return this.expressions;
          }
          get CombinedExpressionsText() {
            return this.combinedExpressionsText;
          }
          set CombinedExpressionsText(t3) {
            this.combinedExpressionsText = t3;
          }
          getPlacementOfFirstEntry() {
            let t3 = r.PlacementEnum.Above;
            return this.expressions.length > 0 && (this.expressions[0].Expression instanceof n.InstantaneousTempoExpression || this.expressions[0].Expression instanceof a.ContinuousTempoExpression) && (t3 = this.expressions[0].Expression.Placement), t3;
          }
          getFontstyleOfFirstEntry() {
            let t3 = o.FontStyles.Regular;
            return this.expressions[0].Expression instanceof n.InstantaneousTempoExpression ? t3 = o.FontStyles.Bold : this.expressions[0].Expression instanceof a.ContinuousTempoExpression && (t3 = o.FontStyles.Italic), t3;
          }
          addExpression(t3, e3) {
            if (this.checkIfAlreadyExists(t3)) return;
            t3 instanceof n.InstantaneousTempoExpression ? this.instantaneousTempo = t3 : t3 instanceof a.ContinuousTempoExpression && (this.continuousTempo = t3);
            const i3 = new l();
            i3.prefix = e3, i3.Expression = t3, i3.label = t3.Label, this.expressions.push(i3);
          }
          CompareTo(t3) {
            return this.Timestamp.RealValue > t3.Timestamp.RealValue ? 1 : this.Timestamp.RealValue < t3.Timestamp.RealValue ? -1 : 0;
          }
          checkIfAlreadyExists(t3) {
            for (const e3 of this.expressions) if (e3.label === t3.Label) return true;
            return false;
          }
        };
        class l {
          get Expression() {
            return this.expression;
          }
          set Expression(t3) {
            this.expression = t3;
          }
        }
        e2.TempoExpressionEntry = l;
      }, 5340: (t2) => {
        "use strict";
        t2.exports = "attribute vec4 a_position;\nvarying vec4 v_position;\n\nvoid main() {\n    gl_Position = a_position;\n    v_position = a_position;\n}\n";
      }, 5364: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.AbstractNotationInstruction = void 0, e2.AbstractNotationInstruction = class {
          constructor(t3) {
            this.printObject = true, this.parent = t3;
          }
          get Parent() {
            return this.parent;
          }
          set Parent(t3) {
            this.parent = t3;
          }
          get PrintObject() {
            return this.printObject;
          }
          set PrintObject(t3) {
            this.printObject = t3;
          }
        };
      }, 5377: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
      }, 5468: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowSlur = e2.CurvePositionEnum = void 0;
        var n, r = s(i2(3206)).default.Flow;
        !function(t3) {
          t3[t3.NEAR_HEAD = 1] = "NEAR_HEAD", t3[t3.NEAR_TOP = 2] = "NEAR_TOP";
        }(n || (e2.CurvePositionEnum = n = {}));
        class o {
          constructor(t3) {
            this.vfStartNote = void 0, this.vfEndNote = void 0, this.parentSlur = t3;
          }
          static createFromVexflowSlur(t3) {
            return new o(t3.parentSlur);
          }
          get vfSlur() {
            return this.parentSlur;
          }
          curve_Options() {
            return { cps: [{ x: 0, y: 10 }, { x: 0, y: 10 }], invert: false, position: n.NEAR_TOP, position_end: n.NEAR_TOP, spacing: 2, thickness: 2, x_shift: 0, y_shift: 10 };
          }
          createVexFlowCurve() {
            this.vfCurve = new r.Curve(this.vfStartNote, this.vfEndNote, void 0);
          }
        }
        e2.VexFlowSlur = o;
      }, 5479: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SkyBottomLineCalculationResult = void 0, e2.SkyBottomLineCalculationResult = class {
          constructor(t3, e3) {
            this.skyLine = t3, this.bottomLine = e3;
          }
        };
      }, 5534: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Voice = void 0, e2.Voice = class {
          constructor(t3, e3) {
            this.voiceEntries = [], this.volume = 1, this.parent = t3, this.visible = true, this.audible = true, this.following = true, this.voiceId = e3;
          }
          get VoiceEntries() {
            return this.voiceEntries;
          }
          get Parent() {
            return this.parent;
          }
          get Visible() {
            return this.visible;
          }
          set Visible(t3) {
            this.visible = t3;
          }
          get Audible() {
            return this.audible;
          }
          set Audible(t3) {
            this.audible = t3;
          }
          get Following() {
            return this.following;
          }
          set Following(t3) {
            this.following = t3;
          }
          get VoiceId() {
            return this.voiceId;
          }
          get Volume() {
            return this.volume;
          }
          set Volume(t3) {
            this.volume = t3;
          }
        };
      }, 5678: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
      }, 5748: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalMeasure = void 0;
        const s = i2(7741), n = i2(2561), r = i2(6438), o = i2(9409);
        class a extends s.GraphicalObject {
          constructor(t3 = void 0, e3 = void 0, i3 = void 0) {
            super(), this.hasOnlyRests = false, this.measureNumber = -1, this.ShowTimeSignature = true, this.ShowKeySignature = true, this.isTabMeasure = false, this.parentStaff = t3, this.parentSourceMeasure = e3, this.parentStaffLine = i3, i3 ? (this.parentStaff = i3.ParentStaff, this.PositionAndShape = new r.BoundingBox(this, i3.PositionAndShape)) : this.PositionAndShape = new r.BoundingBox(this), this.PositionAndShape.BorderBottom = 4, this.parentSourceMeasure && (this.measureNumber = this.parentSourceMeasure.MeasureNumber), this.staffEntries = [];
          }
          get ParentStaff() {
            return this.parentStaff;
          }
          get ParentMusicSystem() {
            return this.parentMusicSystem;
          }
          set ParentMusicSystem(t3) {
            this.parentMusicSystem = t3;
          }
          get MeasureNumber() {
            return this.measureNumber;
          }
          get FirstInstructionStaffEntry() {
            return this.firstInstructionStaffEntry;
          }
          set FirstInstructionStaffEntry(t3) {
            this.firstInstructionStaffEntry = t3;
          }
          get LastInstructionStaffEntry() {
            return this.lastInstructionStaffEntry;
          }
          set LastInstructionStaffEntry(t3) {
            this.lastInstructionStaffEntry = t3;
          }
          get ParentStaffLine() {
            return this.parentStaffLine;
          }
          set ParentStaffLine(t3) {
            this.parentStaffLine = t3, this.parentStaffLine && (this.PositionAndShape.Parent = this.parentStaffLine.PositionAndShape);
          }
          resetLayout() {
            throw new Error("not implemented");
          }
          getLineWidth(t3) {
            throw new Error("not implemented");
          }
          addClefAtBegin(t3) {
            throw new Error("not implemented");
          }
          addKeyAtBegin(t3, e3, i3) {
            throw new Error("not implemented");
          }
          addRhythmAtBegin(t3) {
            throw new Error("not implemented");
          }
          addClefAtEnd(t3, e3 = true) {
            throw new Error("not implemented");
          }
          setPositionInStaffline(t3) {
            this.PositionAndShape.RelativePosition = new o.PointF2D(t3, 0);
          }
          setWidth(t3) {
            this.PositionAndShape.BorderRight = t3;
          }
          layoutSymbols() {
            throw new Error("not implemented");
          }
          findGraphicalStaffEntryFromTimestamp(t3) {
            var _a2;
            for (let e3 = 0, i3 = this.staffEntries.length; e3 < i3; ++e3) {
              const i4 = this.staffEntries[e3];
              if ((_a2 = i4.relInMeasureTimestamp) == null ? void 0 : _a2.Equals(t3)) return i4;
            }
          }
          findGraphicalStaffEntryFromVerticalContainerTimestamp(t3) {
            for (let e3 = 0, i3 = this.staffEntries.length; e3 < i3; ++e3) {
              const i4 = this.staffEntries[e3];
              if (i4.sourceStaffEntry.VerticalContainerParent.getAbsoluteTimestamp().Equals(t3)) return i4;
            }
          }
          hasSameDurationWithSourceMeasureParent() {
            const t3 = new n.Fraction(0, 1);
            for (let e3 = 0, i3 = this.staffEntries.length; e3 < i3; ++e3) {
              const i4 = this.staffEntries[e3];
              t3.Add(i4.findStaffEntryMinNoteLength());
            }
            return t3.Equals(this.parentSourceMeasure.Duration);
          }
          hasMultipleVoices() {
            if (0 === this.staffEntries.length) return false;
            const t3 = [];
            for (let e3 = 0, i3 = this.staffEntries.length; e3 < i3; ++e3) {
              const i4 = this.staffEntries[e3];
              for (let e4 = 0, s2 = i4.sourceStaffEntry.VoiceEntries.length; e4 < s2; ++e4) {
                const s3 = i4.sourceStaffEntry.VoiceEntries[e4];
                t3.indexOf(s3.ParentVoice) < 0 && t3.push(s3.ParentVoice);
              }
            }
            return t3.length > 1;
          }
          isVisible() {
            return this.ParentStaff.ParentInstrument.Visible;
          }
          getGraphicalMeasureDurationFromStaffEntries() {
            let t3 = new n.Fraction(0, 1);
            const e3 = [];
            for (let t4 = 0, i3 = this.staffEntries.length; t4 < i3; ++t4) {
              const i4 = this.staffEntries[t4];
              for (let t5 = 0, s2 = i4.sourceStaffEntry.VoiceEntries.length; t5 < s2; ++t5) {
                const s3 = i4.sourceStaffEntry.VoiceEntries[t5];
                e3.indexOf(s3.ParentVoice) < 0 && e3.push(s3.ParentVoice);
              }
            }
            for (let i3 = 0, s2 = e3.length; i3 < s2; ++i3) {
              const s3 = e3[i3], r2 = new n.Fraction(0, 1);
              for (const t4 of this.staffEntries) for (const e4 of t4.graphicalVoiceEntries) e4.parentVoiceEntry.ParentVoice === s3 && e4.notes.length > 0 && r2.Add(e4.notes[0].graphicalNoteLength);
              t3.lt(r2) && (t3 = n.Fraction.createFromFraction(r2));
            }
            return t3;
          }
          addGraphicalStaffEntry(t3) {
            this.staffEntries.push(t3);
          }
          addGraphicalStaffEntryAtTimestamp(t3) {
            if (t3) if (0 === this.staffEntries.length || this.staffEntries[this.staffEntries.length - 1].relInMeasureTimestamp.lt(t3.relInMeasureTimestamp)) this.staffEntries.push(t3);
            else for (let e3 = this.staffEntries.length - 1; e3 >= 0; e3--) {
              if (this.staffEntries[e3].relInMeasureTimestamp.lt(t3.relInMeasureTimestamp)) {
                this.staffEntries.splice(e3 + 1, 0, t3);
                break;
              }
              0 === e3 && this.staffEntries.splice(e3, 0, t3);
            }
          }
          isPianoRightHand() {
            return this.isUpperStaffOfInstrument();
          }
          isPianoLeftHand() {
            return this.isLowerStaffOfInstrument();
          }
          isUpperStaffOfInstrument() {
            return 1 === this.parentStaff.ParentInstrument.Staves.length || this.ParentStaff === this.parentStaff.ParentInstrument.Staves[0];
          }
          isLowerStaffOfInstrument() {
            return 1 !== this.parentStaff.ParentInstrument.Staves.length && this.ParentStaff === this.ParentStaff.ParentInstrument.Staves.last();
          }
          beginsWithLineRepetition() {
            const t3 = this.parentSourceMeasure;
            return !!t3 && t3.beginsWithLineRepetition();
          }
          endsWithLineRepetition() {
            const t3 = this.parentSourceMeasure;
            return !!t3 && t3.endsWithLineRepetition();
          }
          beginsWithWordRepetition() {
            const t3 = this.parentSourceMeasure;
            return !!t3 && t3.beginsWithWordRepetition();
          }
          endsWithWordRepetition() {
            const t3 = this.parentSourceMeasure;
            return !!t3 && t3.endsWithWordRepetition();
          }
          getTransposedHalftones() {
            return this.parentStaff.ParentInstrument.GetMusicSheet.Transpose + this.parentStaff.ParentInstrument.Transpose;
          }
        }
        e2.GraphicalMeasure = a;
      }, 5749: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MusicSymbolModuleFactory = void 0;
        const s = i2(7631), n = i2(6302);
        e2.MusicSymbolModuleFactory = class {
          static createRepetitionInstructionReader() {
            return new s.RepetitionInstructionReader();
          }
          static createRepetitionCalculator() {
            return new n.RepetitionCalculator();
          }
        };
      }, 5824: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalUnknownExpression = void 0;
        const n = i2(9490), r = i2(6362), o = s(i2(3065));
        class a extends n.AbstractGraphicalExpression {
          constructor(t3, e3, i3, s2, n2 = void 0) {
            super(t3, new r.AbstractExpression(i3), s2), this.label = e3, this.sourceMultiExpression = n2;
          }
          updateSkyBottomLine() {
            const t3 = this.parentStaffLine.SkyBottomLineCalculator, e3 = this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginLeft, i3 = this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginRight;
            switch (this.Placement) {
              case r.PlacementEnum.Above:
                const s2 = this.label.PositionAndShape.BorderMarginTop + this.label.PositionAndShape.RelativePosition.y;
                t3.updateSkyLineInRange(e3, i3, s2);
                break;
              case r.PlacementEnum.Below:
                const n2 = this.label.PositionAndShape.BorderMarginBottom + this.label.PositionAndShape.RelativePosition.y;
                t3.updateBottomLineInRange(e3, i3, n2);
                break;
              default:
                o.default.error("Placement for GraphicalUnknownExpression is unknown");
            }
          }
        }
        e2.GraphicalUnknownExpression = a;
      }, 5866: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowStaffLine = void 0;
        const s = i2(2919), n = i2(1083);
        class r extends s.StaffLine {
          constructor(t3, e3) {
            super(t3, e3), this.slursInVFStaffLine = [], this.alignmentManager = new n.AlignmentManager(this);
          }
          get SlursInVFStaffLine() {
            return this.slursInVFStaffLine;
          }
          addVFSlurToVFStaffline(t3) {
            this.slursInVFStaffLine.push(t3);
          }
          get AlignmentManager() {
            return this.alignmentManager;
          }
        }
        e2.VexFlowStaffLine = r;
      }, 5875: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.ContDynamicEnum = e2.ContinuousDynamicExpression = void 0;
        const s = i2(6362), n = i2(2561);
        class r extends s.AbstractExpression {
          constructor(t3, e3, i3, s2, n2, r2 = "") {
            super(e3), this.parentMeasure = s2, this.NumberXml = n2, this.dynamicType = t3, this.label = r2, this.staffNumber = i3, this.startVolume = -1, this.endVolume = -1, "" !== r2 && this.setType();
          }
          get DynamicType() {
            return this.dynamicType;
          }
          set DynamicType(t3) {
            this.dynamicType = t3;
          }
          get StartMultiExpression() {
            return this.startMultiExpression;
          }
          set StartMultiExpression(t3) {
            this.startMultiExpression = t3;
          }
          get EndMultiExpression() {
            return this.endMultiExpression;
          }
          set EndMultiExpression(t3) {
            this.endMultiExpression = t3;
          }
          get Placement() {
            return this.placement;
          }
          set Placement(t3) {
            this.placement = t3;
          }
          get StartVolume() {
            return this.startVolume;
          }
          set StartVolume(t3) {
            this.startVolume = t3;
          }
          get EndVolume() {
            return this.endVolume;
          }
          set EndVolume(t3) {
            this.endVolume = t3;
          }
          get StaffNumber() {
            return this.staffNumber;
          }
          set StaffNumber(t3) {
            this.staffNumber = t3;
          }
          get Label() {
            return this.label;
          }
          set Label(t3) {
            this.label = t3, this.setType();
          }
          static isInputStringContinuousDynamic(t3) {
            return !!t3 && (r.isStringInStringList(r.listContinuousDynamicIncreasing, t3) || r.isStringInStringList(r.listContinuousDynamicDecreasing, t3));
          }
          getInterpolatedDynamic(t3) {
            const e3 = this.StartMultiExpression.AbsoluteTimestamp;
            let i3;
            if (i3 = this.EndMultiExpression ? this.EndMultiExpression.AbsoluteTimestamp : n.Fraction.plus(this.startMultiExpression.SourceMeasureParent.AbsoluteTimestamp, this.startMultiExpression.SourceMeasureParent.Duration), t3.lt(e3)) return -1;
            if (i3.lt(t3)) return -2;
            const s2 = n.Fraction.minus(t3, e3).RealValue / n.Fraction.minus(i3, e3).RealValue;
            return Math.max(0, Math.min(99.9, this.startVolume + (this.endVolume - this.startVolume) * s2));
          }
          isWedge() {
            return !this.label;
          }
          setType() {
            r.isStringInStringList(r.listContinuousDynamicIncreasing, this.label) ? this.dynamicType = o.crescendo : r.isStringInStringList(r.listContinuousDynamicDecreasing, this.label) && (this.dynamicType = o.diminuendo);
          }
        }
        var o;
        e2.ContinuousDynamicExpression = r, r.listContinuousDynamicIncreasing = ["crescendo", "cresc", "cresc.", "cres."], r.listContinuousDynamicDecreasing = ["decrescendo", "decresc", "decr.", "diminuendo", "dim.", "dim"], function(t3) {
          t3[t3.crescendo = 0] = "crescendo", t3[t3.diminuendo = 1] = "diminuendo";
        }(o || (e2.ContDynamicEnum = o = {}));
      }, 5951: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Fonts = void 0, function(t3) {
          t3[t3.TimesNewRoman = 0] = "TimesNewRoman", t3[t3.Kokila = 1] = "Kokila";
        }(i2 || (e2.Fonts = i2 = {}));
      }, 5955: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(3173), e2), n(i2(6597), e2), n(i2(624), e2), n(i2(7103), e2);
      }, 5984: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.ExpressionReader = void 0;
        const n = i2(2561), r = i2(5332), o = i2(5875), a = i2(2221), l = i2(9767), h = i2(437), c = i2(9019), u = i2(9161), d = i2(9803), f = i2(1112), m = i2(6362), p = i2(7533), g = i2(2148), b = s(i2(3065)), S = i2(2570), y = i2(9157), E = i2(3253);
        e2.ExpressionReader = class {
          constructor(t3, e3, i3) {
            this.openContinuousDynamicExpressions = [], this.musicSheet = t3, this.staffNumber = i3, this.globalStaffIndex = t3.getGlobalStaffIndexOfFirstStaff(e3) + (i3 - 1), this.initialize();
          }
          readExpressionParameters(t3, e3, i3, s2, r2, o2, a2) {
            this.initialize(), this.divisions = i3;
            const l2 = t3.element("offset");
            if (void 0 !== l2 && !a2) try {
              this.offsetDivisions = parseInt(l2.value, 10);
            } catch (t4) {
              const e4 = "ReaderErrorMessages/ExpressionOffsetError, Invalid expression offset -> set to default.";
              b.default.debug("ExpressionReader.readExpressionParameters", e4, t4), this.musicSheet.SheetErrors.pushMeasureError(e4), this.offsetDivisions = 0;
            }
            this.directionTimestamp = n.Fraction.createFromFraction(s2);
            let h2, c2 = new n.Fraction(Math.abs(this.offsetDivisions), 4 * i3);
            this.offsetDivisions > 0 ? s2.RealValue > 0 ? (c2 = n.Fraction.multiply(n.Fraction.minus(s2, r2), c2), this.directionTimestamp = n.Fraction.plus(c2, s2)) : this.directionTimestamp = n.Fraction.createFromFraction(c2) : this.offsetDivisions < 0 && (s2.RealValue > 0 ? (c2 = n.Fraction.multiply(n.Fraction.minus(s2, r2), c2), this.directionTimestamp = n.Fraction.minus(s2, c2)) : this.directionTimestamp = n.Fraction.createFromFraction(c2));
            const u2 = t3.element("direction-type");
            let d2;
            if (u2 && (d2 = u2.element("wedge"), d2)) {
              const t4 = d2.attribute("default-y");
              t4 && (h2 = this.readPosition(t4));
            }
            this.WedgeYPosXml = h2;
            const f2 = t3.attribute("placement");
            if (f2) try {
              const t4 = f2.value;
              "below" === t4 ? this.placement = m.PlacementEnum.Below : "above" === t4 && (this.placement = m.PlacementEnum.Above);
            } catch (t4) {
              const e4 = g.ITextTranslation.translateText("ReaderErrorMessages/ExpressionPlacementError", "Invalid expression placement -> set to default.");
              b.default.debug("ExpressionReader.readExpressionParameters", e4, t4), this.musicSheet.SheetErrors.pushMeasureError(e4), this.placement = m.PlacementEnum.Below;
            }
            if (this.placement === m.PlacementEnum.NotYetDefined) try {
              if (u2) {
                const t4 = u2.element("dynamics");
                if (t4) {
                  const e5 = t4.attribute("default-y");
                  e5 && this.readExpressionPlacement(e5, "read dynamics y pos");
                }
                if (d2) {
                  const t5 = d2.attribute("default-y");
                  t5 && this.readExpressionPlacement(t5, "read wedge y pos");
                }
                const e4 = u2.element("words");
                if (e4) {
                  const t5 = e4.attribute("default-y");
                  t5 && this.readExpressionPlacement(t5, "read words y pos");
                }
                const i4 = u2.element("rehearsal");
                if (i4) {
                  const t5 = i4.attribute("default-y");
                  t5 && this.readExpressionPlacement(t5, "read rehearsal pos");
                }
              }
            } catch (t4) {
              const e4 = g.ITextTranslation.translateText("ReaderErrorMessages/ExpressionPlacementError", "Invalid expression placement. Set to default.");
              b.default.debug("ExpressionReader.readExpressionParameters", e4, t4), this.musicSheet.SheetErrors.pushMeasureError(e4), this.placement = m.PlacementEnum.Below;
            }
            this.placement === m.PlacementEnum.NotYetDefined && (e3.Staves.length > 1 ? this.placement = m.PlacementEnum.Below : e3.HasLyrics ? this.placement = m.PlacementEnum.Above : this.placement = m.PlacementEnum.Below);
          }
          read(t3, e3, i3, s2 = void 0) {
            let r2 = false, o2 = false;
            const a2 = i3.clone(), l2 = t3.element("offset");
            if (l2 == null ? void 0 : l2.value) {
              const t4 = Number.parseInt(l2.value, 10);
              a2.Add(new n.Fraction(t4, 4 * this.divisions));
            }
            const h2 = t3.element("sound");
            if (h2) {
              const t4 = h2.attribute("tempo"), i4 = h2.attribute("dynamics");
              if (t4) {
                const i5 = t4.value.match(/^(\d+)(\.\d+)?$/);
                (i5 == null ? void 0 : i5.length) > 0 ? this.soundTempo = Math.round(Number.parseFloat(t4.value)) : (b.default.info("invalid xml tempo: " + t4.value), this.soundTempo = 100), e3.TempoInBPM = this.soundTempo, 0 === this.musicSheet.DefaultStartTempoInBpm && (this.musicSheet.DefaultStartTempoInBpm = this.soundTempo), this.musicSheet.HasBPMInfo = true, r2 = true;
              }
              if (i4) {
                const t5 = i4.value.match(/\d+/);
                this.soundDynamic = void 0 !== t5 ? parseInt(t5[0], 10) : 100, o2 = true;
              }
            }
            const c2 = t3.element("direction-type");
            if (!c2) return;
            let d2 = c2.element("metronome");
            if (d2) {
              const t4 = d2.element("beat-unit"), i4 = void 0 !== d2.element("beat-unit-dot"), s3 = d2.element("per-minute");
              if (void 0 !== t4 && s3) {
                d2.hasAttributes && void 0 !== d2.attribute("default-x") && (this.directionTimestamp = n.Fraction.createFromFraction(a2));
                const r3 = parseFloat(s3.value);
                this.createNewTempoExpressionIfNeeded(e3);
                const o3 = new u.InstantaneousTempoExpression(void 0, this.placement, this.staffNumber, r3, this.currentMultiTempoExpression, true);
                o3.parentMeasure = e3, this.soundTempo = r3, e3.TempoInBPM = this.soundTempo * (i4 ? 1.5 : 1), 0 === this.musicSheet.DefaultStartTempoInBpm && (this.musicSheet.DefaultStartTempoInBpm = this.soundTempo), this.musicSheet.HasBPMInfo = true, o3.dotted = i4, o3.beatUnit = t4.value, this.currentMultiTempoExpression.addExpression(o3, ""), this.currentMultiTempoExpression.CombinedExpressionsText = "test";
              }
            } else if (d2 = c2.element("dynamics"), d2) {
              const i4 = void 0 !== t3.element("notations");
              this.interpretInstantaneousDynamics(d2, e3, a2, i4);
            } else if (d2 = c2.element("words"), d2) if (r2) {
              this.createNewTempoExpressionIfNeeded(e3), this.currentMultiTempoExpression.CombinedExpressionsText = d2.value;
              const t4 = new u.InstantaneousTempoExpression(d2.value, this.placement, this.staffNumber, this.soundTempo, this.currentMultiTempoExpression);
              this.currentMultiTempoExpression.addExpression(t4, "");
            } else o2 || this.interpretWords(d2, e3, a2);
            else d2 = c2.element("wedge"), d2 ? this.interpretWedge(t3, d2, e3, s2, e3.MeasureNumber) : (d2 = c2.element("rehearsal"), d2 && this.interpretRehearsalMark(d2, e3, i3, e3.MeasureNumber));
          }
          closeOpenExpressions(t3, e3) {
            for (const i3 of this.openContinuousDynamicExpressions) this.createNewMultiExpressionIfNeeded(t3, i3.NumberXml, e3), this.closeOpenContinuousDynamic(i3, t3, e3);
            this.openContinuousTempoExpression && this.closeOpenContinuousTempo(n.Fraction.plus(t3.AbsoluteTimestamp, e3));
          }
          addOctaveShift(t3, e3, i3) {
            var _a;
            let s2 = 1;
            const n2 = t3.element("staff");
            if (n2) try {
              s2 = parseInt(n2.value, 10);
            } catch (t4) {
              const e4 = g.ITextTranslation.translateText("ReaderErrorMessages/OctaveShiftStaffError", "Invalid octave shift staff number. Set to default");
              this.musicSheet.SheetErrors.pushMeasureError(e4), s2 = 1, b.default.debug("ExpressionReader.addOctaveShift", e4, t4);
            }
            const r2 = t3.element("direction-type");
            if (r2) {
              const n3 = r2.element("octave-shift"), o2 = this.readPlacement(t3);
              if (void 0 !== n3 && n3.hasAttributes) try {
                const t4 = this.readNumber(n3);
                if (n3.attribute("size")) {
                  const r3 = parseInt(n3.attribute("size").value, 10);
                  let a2 = 0;
                  8 === r3 ? a2 = 1 : 15 === r3 && (a2 = 2);
                  let l2 = (_a = n3.attribute("type")) == null ? void 0 : _a.value;
                  if (l2 || (o2 === m.PlacementEnum.Above ? l2 = "down" : o2 === m.PlacementEnum.Below && (l2 = "up")), "up" === l2 || "down" === l2) {
                    const i4 = new h.OctaveShift(l2, a2);
                    i4.StaffNumber = s2, this.getMultiExpression = this.createNewMultiExpressionIfNeeded(e3, t4), this.getMultiExpression.OctaveShiftStart = i4, i4.ParentStartMultiExpression = this.getMultiExpression, this.openOctaveShift = i4;
                  } else "stop" === l2 ? this.openOctaveShift && (this.getMultiExpression = this.createNewMultiExpressionIfNeeded(e3, this.openOctaveShift.numberXml, i3), this.getMultiExpression.OctaveShiftEnd = this.openOctaveShift, this.openOctaveShift.ParentEndMultiExpression = this.getMultiExpression, this.openOctaveShift = void 0) : l2 || b.default.debug("octave-shift missing type in xml");
                }
              } catch (t4) {
                const e4 = g.ITextTranslation.translateText("ReaderErrorMessages/OctaveShiftError", "Error while reading octave shift.");
                this.musicSheet.SheetErrors.pushMeasureError(e4), b.default.debug("ExpressionReader.addOctaveShift", e4, t4);
              }
            }
          }
          addPedalMarking(t3, e3, i3) {
            var _a, _b, _c;
            const s2 = t3.element("direction-type");
            if (s2) {
              const t4 = s2.element("pedal");
              if (void 0 !== t4 && t4.hasAttributes) {
                let s3 = false, n2 = false;
                try {
                  switch ("yes" === ((_a = t4.attribute("line")) == null ? void 0 : _a.value) ? n2 = true : "no" === ((_b = t4.attribute("line")) == null ? void 0 : _b.value) ? (n2 = false, s3 = true) : "yes" === ((_c = t4.attribute("sign")) == null ? void 0 : _c.value) ? s3 = true : (s3 = false, n2 = true), t4.attribute("type").value) {
                    case "start":
                      this.openPedal && this.openPedal.IsLine && this.endOpenPedal(e3), this.createNewMultiExpressionIfNeeded(e3, -1), this.openPedal = new E.Pedal(n2, s3), this.getMultiExpression.PedalStart = this.openPedal, this.openPedal.ParentStartMultiExpression = this.getMultiExpression;
                      break;
                    case "stop":
                      this.openPedal && this.endOpenPedal(e3, i3);
                      break;
                    case "change":
                      this.openPedal && this.openPedal.IsLine && (this.openPedal.ChangeEnd = true, this.createNewMultiExpressionIfNeeded(e3, -1), this.getMultiExpression.PedalEnd = this.openPedal, this.openPedal.ParentEndMultiExpression = this.getMultiExpression, this.createNewMultiExpressionIfNeeded(e3, -1), this.openPedal = new E.Pedal(n2, s3), this.openPedal.ChangeBegin = true, this.getMultiExpression.PedalStart = this.openPedal, this.openPedal.ParentStartMultiExpression = this.getMultiExpression);
                  }
                } catch (t5) {
                  const e4 = g.ITextTranslation.translateText("ReaderErrorMessages/PedalError", "Error while reading pedal.");
                  this.musicSheet.SheetErrors.pushMeasureError(e4), b.default.debug("ExpressionReader.addPedalMarking", e4, t5);
                }
              }
            }
          }
          endOpenPedal(t3, e3) {
            this.createNewMultiExpressionIfNeeded(t3, -1, e3), this.getMultiExpression.PedalEnd = this.openPedal, this.openPedal.ParentEndMultiExpression = this.getMultiExpression, this.openPedal = void 0;
          }
          initialize() {
            this.placement = m.PlacementEnum.NotYetDefined, this.soundTempo = 0, this.soundDynamic = 0, this.offsetDivisions = 0;
          }
          readPlacement(t3) {
            var _a;
            const e3 = (_a = t3.attribute("placement")) == null ? void 0 : _a.value;
            return "above" === e3 ? m.PlacementEnum.Above : "below" === e3 ? m.PlacementEnum.Below : m.PlacementEnum.NotYetDefined;
          }
          readExpressionPlacement(t3, e3) {
            try {
              const e4 = this.readPosition(t3);
              e4 < 0 ? this.placement = m.PlacementEnum.Below : e4 > 0 && (this.placement = m.PlacementEnum.Above);
            } catch (t4) {
              b.default.debug("ExpressionReader.readExpressionParameters", e3, t4);
            }
          }
          readPosition(t3) {
            try {
              const e3 = parseInt(t3.value, 10);
              return e3 < 0 ? this.placement = m.PlacementEnum.Below : e3 > 0 && (this.placement = m.PlacementEnum.Above), e3;
            } catch (t4) {
              b.default.debug("ExpressionReader.readExpressionParameters", t4);
            }
          }
          interpretInstantaneousDynamics(t3, e3, i3, s2) {
            var _a, _b, _c;
            if (t3.hasElements) {
              t3.hasAttributes && t3.attribute("default-x") && (this.directionTimestamp = n.Fraction.createFromFraction(i3));
              const r2 = this.readNumber(t3);
              let o2 = (_a = t3.elements()[0]) == null ? void 0 : _a.name;
              if ("other-dynamics" === o2 && (o2 = t3.elements()[0].value), o2) {
                if ((_b = e3.Rules) == null ? void 0 : _b.IgnoreRepeatedDynamics) {
                  let t5;
                  try {
                    t5 = l.DynamicEnum[o2];
                  } catch (t6) {
                    const e4 = g.ITextTranslation.translateText("ReaderErrorMessages/DynamicError", "Error while reading dynamic.");
                    return void this.musicSheet.SheetErrors.pushMeasureError(e4);
                  }
                  if (((_c = this.activeInstantaneousDynamic) == null ? void 0 : _c.DynEnum) === t5) return;
                }
                s2 ? this.createNewMultiExpressionIfNeeded(e3, r2, n.Fraction.createFromFraction(i3)) : this.createNewMultiExpressionIfNeeded(e3, r2);
                const t4 = new l.InstantaneousDynamicExpression(o2, this.soundDynamic, this.placement, this.staffNumber, e3);
                t4.InMeasureTimestamp = i3.clone(), this.getMultiExpression.addExpression(t4, ""), this.initialize(), this.activeInstantaneousDynamic ? this.activeInstantaneousDynamic.DynEnum = t4.DynEnum : this.activeInstantaneousDynamic = new l.InstantaneousDynamicExpression(o2, 0, m.PlacementEnum.NotYetDefined, 1, e3);
              }
            }
          }
          interpretWords(t3, e3, i3) {
            var _a;
            const s2 = t3.value;
            if (e3.Rules.IgnoreBracketsWords && (/^\(\s*\)$/.test(s2) || /^\[\s*\]$/.test(s2))) return;
            let r2;
            const o2 = t3.attribute("font-style");
            let a2, l2, h2;
            o2 && (a2 = o2.value, "italic" === a2 && (r2 = S.FontStyles.Italic));
            const c2 = t3.attribute("font-weight");
            c2 && (l2 = c2.value, "bold" === l2 && (r2 = S.FontStyles.Bold, "italic" === a2 && (r2 = S.FontStyles.BoldItalic)));
            const u2 = t3.attribute("color");
            let d2;
            if (u2 && (h2 = u2.value), e3.Rules.PlaceWordsInsideStafflineFromXml) {
              const e4 = (_a = t3.attribute("default-y")) == null ? void 0 : _a.value;
              (e4 == null ? void 0 : e4.length) > 0 && (d2 = Number.parseInt(e4, 10));
            }
            if (s2.length > 0) {
              if (t3.hasAttributes && t3.attribute("default-x") && (this.directionTimestamp = n.Fraction.createFromFraction(i3)), this.checkIfWordsNodeIsRepetitionInstruction(s2)) return;
              this.fillMultiOrTempoExpression(s2, e3, i3, r2, h2, d2), this.initialize();
            }
          }
          readNumber(t3) {
            var _a;
            let e3 = 1;
            const i3 = (_a = t3.attribute("number")) == null ? void 0 : _a.value;
            return i3 && (e3 = Number.parseInt(i3, 10)), e3;
          }
          interpretWedge(t3, e3, i3, s2, r2) {
            var _a, _b;
            void 0 !== e3 && e3.hasAttributes && e3.attribute("default-x") && (this.directionTimestamp = n.Fraction.createFromFraction(s2));
            const a2 = this.readNumber(e3), l2 = (_b = (_a = e3.attribute("type")) == null ? void 0 : _a.value) == null ? void 0 : _b.toLowerCase();
            this.lastWedge && this.lastWedge.parentMeasure.MeasureNumberXML === i3.MeasureNumberXML && this.lastWedge.StaffNumber === this.staffNumber && this.placement === this.lastWedge.Placement && void 0 !== this.WedgeYPosXml && this.lastWedge.YPosXml === this.WedgeYPosXml && this.lastWedge.StartMultiExpression.Timestamp.Equals(this.directionTimestamp) && this.lastWedge.DynamicType === o.ContDynamicEnum[l2] || ("stop" === l2 ? (this.createNewMultiExpressionIfNeeded(i3, a2, s2), this.getMultiExpression.EndOffsetFraction = new n.Fraction(this.offsetDivisions, 4 * this.divisions)) : this.createNewMultiExpressionIfNeeded(i3, a2), this.addWedge(e3, i3, s2), this.initialize());
          }
          interpretRehearsalMark(t3, e3, i3, s2) {
            e3.rehearsalExpression = new y.RehearsalExpression(t3.value, this.placement);
          }
          createNewMultiExpressionIfNeeded(t3, e3, i3 = void 0) {
            i3 || (i3 = this.directionTimestamp);
            let s2 = this.getMultiExpression;
            return (!s2 || s2 && (s2.SourceMeasureParent !== t3 || s2.numberXml !== e3 || s2.SourceMeasureParent === t3 && !s2.Timestamp.Equals(i3))) && (this.getMultiExpression = s2 = new c.MultiExpression(t3, n.Fraction.createFromFraction(i3)), this.getMultiExpression.numberXml = e3, t3.StaffLinkedExpressions[this.globalStaffIndex].push(s2)), s2;
          }
          createNewTempoExpressionIfNeeded(t3) {
            this.currentMultiTempoExpression && this.currentMultiTempoExpression.SourceMeasureParent === t3 && this.currentMultiTempoExpression.Timestamp === this.directionTimestamp || (this.currentMultiTempoExpression = new r.MultiTempoExpression(t3, n.Fraction.createFromFraction(this.directionTimestamp)), t3.TempoExpressions.push(this.currentMultiTempoExpression));
          }
          addWedge(t3, e3, i3) {
            if (void 0 !== t3 && t3.hasAttributes) {
              const s2 = this.readNumber(t3), n2 = t3.attribute("type").value.toLowerCase();
              try {
                if ("crescendo" === n2 || "diminuendo" === n2) {
                  const t4 = new o.ContinuousDynamicExpression(o.ContDynamicEnum[n2], this.placement, this.staffNumber, e3, s2);
                  this.lastWedge = t4, this.lastWedge.YPosXml = this.WedgeYPosXml, this.openContinuousDynamicExpressions.push(t4);
                  let i4 = this.getMultiExpression;
                  i4 || (i4 = this.createNewMultiExpressionIfNeeded(e3, s2)), i4.StartingContinuousDynamic = t4, t4.StartMultiExpression = i4, void 0 !== this.activeInstantaneousDynamic && this.activeInstantaneousDynamic.StaffNumber === t4.StaffNumber && (this.activeInstantaneousDynamic = void 0);
                } else if ("stop" === n2) for (const t4 of this.openContinuousDynamicExpressions) t4.NumberXml === s2 && this.closeOpenContinuousDynamic(t4, e3, i3);
              } catch (t4) {
                const e4 = "ReaderErrorMessages/WedgeError, Error while reading Crescendo / Diminuendo.";
                this.musicSheet.SheetErrors.pushMeasureError(e4), b.default.debug("ExpressionReader.addWedge", e4, t4);
              }
            }
          }
          fillMultiOrTempoExpression(t3, e3, i3, s2, n2, r2 = void 0) {
            if (!t3) return;
            const o2 = t3.trim();
            this.createExpressionFromString("", o2, e3, i3, t3, s2, n2, r2);
          }
          createExpressionFromString(t3, e3, i3, s2, n2, r2, l2, h2 = void 0) {
            if (u.InstantaneousTempoExpression.isInputStringInstantaneousTempo(e3) || a.ContinuousTempoExpression.isInputStringContinuousTempo(e3)) {
              if (i3.TempoExpressions.length > 0) for (let t4 = 0, s3 = i3.TempoExpressions.length; t4 < s3; ++t4) {
                const s4 = i3.TempoExpressions[t4];
                if (s4.Timestamp === this.directionTimestamp && void 0 !== s4.InstantaneousTempo && -1 !== s4.InstantaneousTempo.Label.indexOf(e3)) return false;
              }
              if (this.createNewTempoExpressionIfNeeded(i3), this.currentMultiTempoExpression.CombinedExpressionsText = n2, u.InstantaneousTempoExpression.isInputStringInstantaneousTempo(e3)) {
                const i4 = new u.InstantaneousTempoExpression(e3, this.placement, this.staffNumber, this.soundTempo, this.currentMultiTempoExpression);
                return i4.ColorXML = l2, this.currentMultiTempoExpression.addExpression(i4, t3), true;
              }
              if (a.ContinuousTempoExpression.isInputStringContinuousTempo(e3)) {
                const i4 = new a.ContinuousTempoExpression(e3, this.placement, this.staffNumber, this.currentMultiTempoExpression);
                return i4.ColorXML = l2, this.currentMultiTempoExpression.addExpression(i4, t3), true;
              }
            }
            if (o.ContinuousDynamicExpression.isInputStringContinuousDynamic(e3)) {
              const n3 = new o.ContinuousDynamicExpression(void 0, this.placement, this.staffNumber, i3, -1, e3);
              n3.ColorXML = l2;
              const r3 = this.getMultiExpression;
              return r3 && this.closeOpenContinuousDynamic(r3.StartingContinuousDynamic, i3, s2), this.createNewMultiExpressionIfNeeded(i3, -1), void 0 !== this.activeInstantaneousDynamic && this.activeInstantaneousDynamic.StaffNumber === n3.StaffNumber && (this.activeInstantaneousDynamic = void 0), this.openContinuousDynamicExpressions.push(n3), n3.StartMultiExpression = this.getMultiExpression, this.getMultiExpression.addExpression(n3, t3), true;
            }
            if (d.MoodExpression.isInputStringMood(e3)) {
              const s3 = this.createNewMultiExpressionIfNeeded(i3, -1);
              i3.hasMoodExpressions = true;
              const n3 = new d.MoodExpression(e3, this.placement, this.staffNumber);
              return n3.fontStyle = r2, n3.ColorXML = l2, s3.addExpression(n3, t3), true;
            }
            const c2 = this.createNewMultiExpressionIfNeeded(i3, -1, s2);
            if (i3.TempoExpressions.length > 0) for (let t4 = 0, s3 = i3.TempoExpressions.length; t4 < s3; ++t4) {
              const s4 = i3.TempoExpressions[t4];
              if (s4.Timestamp === this.directionTimestamp && void 0 !== s4.InstantaneousTempo && s4.EntriesList.length > 0 && !this.hasDigit(e3) && this.globalStaffIndex > 0) {
                if (s4.EntriesList[0].label.indexOf(e3) >= 0) return false;
                break;
              }
            }
            let m2 = p.TextAlignmentEnum.CenterBottom;
            this.musicSheet.Rules.CompactMode && (m2 = p.TextAlignmentEnum.LeftBottom);
            const g2 = new f.UnknownExpression(e3, this.placement, m2, this.staffNumber);
            return g2.fontStyle = r2, g2.ColorXML = l2, g2.defaultYXml = h2, c2.addExpression(g2, t3), false;
          }
          closeOpenContinuousDynamic(t3, e3, i3) {
            if (!t3) return;
            const s2 = t3.NumberXml;
            t3.EndMultiExpression = this.createNewMultiExpressionIfNeeded(e3, s2, i3), t3.StartMultiExpression.EndingContinuousDynamic = t3, this.openContinuousDynamicExpressions = this.openContinuousDynamicExpressions.filter((e4) => e4 !== t3);
          }
          closeOpenContinuousTempo(t3) {
            this.openContinuousTempoExpression.AbsoluteEndTimestamp = t3, this.openContinuousTempoExpression = void 0;
          }
          checkIfWordsNodeIsRepetitionInstruction(t3) {
            return "coda" === (t3 = t3.trim().toLowerCase()) || "tocoda" === t3 || "to coda" === t3 || "fine" === t3 || "d.c." === t3 || "dacapo" === t3 || "da capo" === t3 || "d.s." === t3 || "dalsegno" === t3 || "dal segno" === t3 || "d.c. al fine" === t3 || "d.s. al fine" === t3 || "d.c. al coda" === t3 || "d.s. al coda" === t3;
          }
          hasDigit(t3) {
            return /\d/.test(t3);
          }
        };
      }, 6001: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.RepetitionEndingPart = e2.Repetition = void 0;
        const n = i2(3457), r = i2(2561), o = i2(7551), a = s(i2(3065));
        class l extends o.PartListEntry {
          constructor(t3, e3) {
            super(t3), this.backwardJumpInstructions = [], this.endingParts = [], this.endingIndexDict = {}, this.userNumberOfRepetitions = 0, this.visibles = [], this.fromWords = false, this.repetitonIterationOrder = [], this.numberOfEndings = 1, this.musicSheet2 = t3, this.virtualOverallRepetition = e3;
          }
          get BackwardJumpInstructions() {
            return this.backwardJumpInstructions;
          }
          get EndingIndexDict() {
            return this.endingIndexDict;
          }
          get EndingParts() {
            return this.endingParts;
          }
          get Visibles() {
            return this.visibles;
          }
          set Visibles(t3) {
            this.visibles = t3;
          }
          get DefaultNumberOfRepetitions() {
            let t3 = 2;
            return this.virtualOverallRepetition && (t3 = 1), Math.max(t3, Object.keys(this.endingIndexDict).length, this.checkRepetitionForMultipleLyricVerses());
          }
          get UserNumberOfRepetitions() {
            return this.userNumberOfRepetitions;
          }
          set UserNumberOfRepetitions(t3) {
            this.userNumberOfRepetitions = t3, this.repetitonIterationOrder = [];
            const e3 = this.userNumberOfRepetitions - this.NumberOfEndings;
            for (let t4 = 1; t4 <= this.userNumberOfRepetitions; t4++) t4 <= e3 ? this.repetitonIterationOrder.push(1) : this.repetitonIterationOrder.push(t4 - e3);
          }
          getForwardJumpTargetForIteration(t3) {
            const e3 = this.repetitonIterationOrder[t3 - 1];
            return this.endingIndexDict[e3] ? this.endingIndexDict[e3].part.StartIndex : -1;
          }
          getBackwardJumpTarget() {
            return this.startMarker.measureIndex;
          }
          SetEndingStartIndex(t3, e3) {
            const i3 = new h(new n.SourceMusicPart(this.musicSheet2, e3, e3));
            this.endingParts.push(i3);
            for (const e4 of t3) try {
              this.endingIndexDict[e4] = i3, i3.endingIndices.push(e4), this.numberOfEndings < e4 && (this.numberOfEndings = e4);
            } catch (t4) {
              a.default.error("Repetition: Exception.", t4);
            }
          }
          setEndingEndIndex(t3, e3) {
            this.endingIndexDict[t3] && this.endingIndexDict[t3].part.setEndIndex(e3);
          }
          get NumberOfEndings() {
            return this.numberOfEndings;
          }
          get FromWords() {
            return this.fromWords;
          }
          set FromWords(t3) {
            this.fromWords = t3;
          }
          get AbsoluteTimestamp() {
            return r.Fraction.createFromFraction(this.musicSheet2.SourceMeasures[this.startMarker.measureIndex].AbsoluteTimestamp);
          }
          get StartIndex() {
            return this.startMarker.measureIndex;
          }
          get EndIndex() {
            if (0 === this.BackwardJumpInstructions.length) return this.StartIndex;
            let t3 = this.backwardJumpInstructions[this.backwardJumpInstructions.length - 1].measureIndex;
            return this.endingIndexDict[this.NumberOfEndings] && (t3 = Math.max(this.endingIndexDict[this.NumberOfEndings].part.EndIndex, t3)), t3;
          }
          checkRepetitionForMultipleLyricVerses() {
            let t3 = 0;
            const e3 = this.StartIndex, i3 = this.EndIndex;
            for (let s2 = e3; s2 <= i3; s2++) {
              const e4 = this.musicSheet2.SourceMeasures[s2];
              for (let i4 = 0; i4 < e4.CompleteNumberOfStaves; i4++) for (const s3 of e4.VerticalSourceStaffEntryContainers[i4].StaffEntries) if (s3) {
                let e5 = 0;
                for (const t4 of s3.VoiceEntries) e5 += Object.keys(t4.LyricsEntries).length;
                t3 = Math.max(t3, e5);
              }
            }
            return t3;
          }
          get FirstSourceMeasureNumber() {
            return this.getFirstSourceMeasure().MeasureNumber;
          }
          get LastSourceMeasureNumber() {
            return this.getLastSourceMeasure().MeasureNumber;
          }
        }
        e2.Repetition = l;
        class h {
          constructor(t3) {
            this.endingIndices = [], this.part = t3;
          }
          ToString() {
            return this.endingIndices.join(", ");
          }
        }
        e2.RepetitionEndingPart = h;
      }, 6014: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowConverter = void 0;
        var n = s(i2(3206)).default.Flow;
        const r = i2(164), o = i2(8233), a = i2(2561), l = i2(9288), h = i2(4543), c = i2(8233), u = i2(8233), d = i2(6954), f = i2(2570), m = i2(5951), p = i2(2683), g = s(i2(3065)), b = i2(1336), S = i2(67), y = i2(8215), E = i2(4064), x = i2(9479), v = i2(4236), _ = i2(9647), M = i2(6362);
        class w {
          static durations(t3, e3) {
            const i3 = [], s2 = t3.clone();
            for (; s2.RealValue > 1e-4; ) {
              const t4 = s2.RealValue;
              if (t4 >= 2) i3.push("1/2"), s2.Sub(new a.Fraction(2, 1));
              else if (t4 >= 1) i3.push("w"), s2.Sub(new a.Fraction(1, 1));
              else if (t4 < 1 && t4 >= 0.5) {
                if (e3 && t4 > 0.5) return ["w"];
                i3.push("h"), s2.Sub(new a.Fraction(1, 2));
              } else if (t4 < 0.5 && t4 >= 0.25) {
                if (e3 && t4 > 0.25) return ["h"];
                i3.push("q"), s2.Sub(new a.Fraction(1, 4));
              } else if (t4 < 0.25 && t4 >= 0.125) {
                if (e3 && t4 > 0.125) return ["q"];
                i3.push("8"), s2.Sub(new a.Fraction(1, 8));
              } else if (t4 < 0.125 && t4 >= 0.0625) {
                if (e3 && t4 > 0.0625) return ["8"];
                i3.push("16"), s2.Sub(new a.Fraction(1, 16));
              } else if (t4 < 0.0625 && t4 >= 0.03125) {
                if (e3 && t4 > 0.03125) return ["16"];
                i3.push("32"), s2.Sub(new a.Fraction(1, 32));
              } else if (t4 < 0.03125 && t4 >= 0.015625) {
                if (e3 && t4 > 0.015625) return ["32"];
                i3.push("64"), s2.Sub(new a.Fraction(1, 64));
              } else {
                if (e3) return ["64"];
                i3.push("128"), s2.Sub(new a.Fraction(1, 128));
              }
            }
            return i3;
          }
          static pitch(t3, e3, i3, s2 = void 0, n2 = void 0) {
            let a2 = n2;
            void 0 === n2 && (a2 = 3), e3 && void 0 === n2 && (a2 = 0, i3.ClefType === r.ClefEnum.F && (a2 = 2), i3.ClefType === r.ClefEnum.C && (a2 = 2));
            const l2 = u.NoteEnum[t3.FundamentalNote].toLowerCase(), h2 = o.Pitch.accidentalVexflow(t3.Accidental), c2 = t3.Octave - i3.OctaveOffset + a2;
            let d2 = "";
            return s2 && (d2 = this.NoteHeadCode(s2)), [l2 + "n/" + c2 + d2, h2, i3];
          }
          static restToNotePitch(t3, e3) {
            let i3 = t3.Octave;
            switch (e3) {
              case r.ClefEnum.C:
              case r.ClefEnum.F:
                i3 += 2;
              case r.ClefEnum.G:
            }
            return new o.Pitch(t3.FundamentalNote, i3, c.AccidentalEnum.NONE);
          }
          static NoteHeadCode(t3) {
            const e3 = t3.Filled ? "2" : "1";
            switch (t3.Shape) {
              case E.NoteHeadShape.NORMAL:
                return "";
              case E.NoteHeadShape.DIAMOND:
                return "/D" + e3;
              case E.NoteHeadShape.TRIANGLE:
                return "/T" + e3;
              case E.NoteHeadShape.TRIANGLE_INVERTED:
                return "/TI";
              case E.NoteHeadShape.X:
                return "/X" + e3;
              case E.NoteHeadShape.CIRCLEX:
                return "/X3";
              case E.NoteHeadShape.RECTANGLE:
                return "/R" + e3;
              case E.NoteHeadShape.SQUARE:
                return "/S" + e3;
              case E.NoteHeadShape.SLASH:
              default:
                return "";
            }
          }
          static GhostNotes(t3) {
            const e3 = [], i3 = w.durations(t3, false);
            for (const t4 of i3) e3.push(new n.GhostNote({ duration: t4 }));
            return e3;
          }
          static StaveNote(t3) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
            t3.sortForVexflow();
            const e3 = t3.notes, i3 = t3.parentStaffEntry.parentMeasure.parentSourceMeasure.Rules, s2 = e3[0];
            let l2 = [];
            const h2 = [], c2 = s2.graphicalNoteLength, u2 = void 0 !== s2.sourceNote.NoteTuplet;
            let d2, f2 = w.durations(c2, u2)[0];
            void 0 !== s2.sourceNote.TypeLength && s2.sourceNote.TypeLength !== c2 && 0 !== s2.sourceNote.TypeLength.RealValue && (f2 = w.durations(s2.sourceNote.TypeLength, u2)[0], s2.numberOfDots = s2.sourceNote.DotsXml);
            let m2, p2, g2 = s2.numberOfDots, S2 = false, y2 = 0, v2 = false;
            for (const s3 of e3) {
              if (g2 < s3.numberOfDots && (g2 = s3.numberOfDots), s3.sourceNote.isRest()) {
                if (v2 = true, s3.sourceNote.Pitch) {
                  l2 = [s3.vfpitch[0]];
                  break;
                }
                {
                  l2 = ["b/4"];
                  const t4 = (_a = s3.parentVoiceEntry) == null ? void 0 : _a.parentVoiceEntry;
                  if (t4) {
                    const e5 = (_b = s3.parentVoiceEntry) == null ? void 0 : _b.parentStaffEntry.parentMeasure.staffEntries;
                    let i4, n2, r2 = -1;
                    for (let i5 = 0; i5 < e5.length; i5++) if (((_c = e5[i5]) == null ? void 0 : _c.graphicalVoiceEntries[0].parentVoiceEntry) === t4) {
                      r2 = i5;
                      break;
                    }
                    if (r2 >= 1 && e5.length - 1 >= r2 + 1 && (i4 = (_e = (_d = e5[r2 - 1]) == null ? void 0 : _d.graphicalVoiceEntries[0]) == null ? void 0 : _e.parentVoiceEntry, n2 = (_g = (_f = e5[r2 + 1]) == null ? void 0 : _f.graphicalVoiceEntries[0]) == null ? void 0 : _g.parentVoiceEntry, i4 && n2)) {
                      const t5 = i4.Notes[0], e6 = n2.Notes[0];
                      if ((_h = t5.NoteBeam) == null ? void 0 : _h.Notes.includes(e6)) {
                        const t6 = i4.Notes.last().Pitch, e7 = s3.Clef();
                        l2 = [w.pitch(w.restToNotePitch(t6.getTransposedPitch(-2), e7.ClefType), false, e7)[0]];
                      }
                    }
                  }
                }
                if ((s3.sourceNote.IsWholeMeasureRest || c2.RealValue === s3.sourceNote.SourceMeasure.ActiveTimeSignature.RealValue) && (l2 = ["d/5"], 1 === t3.parentStaffEntry.parentMeasure.ParentStaff.StafflineCount && (l2 = ["b/4"]), f2 = "w", g2 = 0, S2 = true, y2 = i3.WholeRestXShiftVexflow * x.unitInPixels), s3.sourceNote.ParentStaff.Voices.length > 1) {
                  const t4 = s3.parentVoiceEntry.parentStaffEntry.graphicalVoiceEntries, e5 = s3.parentVoiceEntry.parentVoiceEntry.ParentVoice.VoiceId;
                  let n2, a2;
                  for (const r2 of t4) for (const t5 of r2.notes) {
                    if (t5 === s3 || t5.sourceNote.isRest() || !t5.sourceNote.PrintObject) continue;
                    const r3 = t5.parentVoiceEntry.parentVoiceEntry.WantedStemDirection, o2 = 1 === e5 || 5 === e5, l3 = o2 ? 1 : -1, h3 = t5.sourceNote.Pitch.getHalfTone();
                    (!n2 || 1 === l3 && h3 > n2 || -1 === l3 && h3 < n2) && (n2 = h3, a2 = 0, o2 && r3 === b.StemDirectionType.Up ? a2 += 7 : o2 || r3 !== b.StemDirectionType.Down ? a2 += o2 ? 1 : 2 : a2 += 7, f2.includes("8") || r3 === b.StemDirectionType.Up && -1 === l3 && (a2 += 1), t5.sourceNote.NoteBeam && (a2 += 1), f2.includes("w") && (a2 /= 2), a2 += 0.5 * Math.ceil(i3.RestCollisionYPadding), a2 *= l3, s3.lineShift = a2);
                  }
                  if (n2 > 0) {
                    let t5 = 3;
                    const e6 = s3.Clef();
                    switch (e6.ClefType) {
                      case r.ClefEnum.F:
                        t5 = 5;
                        break;
                      case r.ClefEnum.C:
                        t5 = 4;
                    }
                    m2 = o.Pitch.fromHalftone(n2), l2 = [w.pitch(m2, true, e6, void 0, t5)[0]];
                  }
                }
                break;
              }
              const e4 = s3.vfpitch;
              l2.push(e4[0]), h2.push(e4[1]), d2 || (d2 = w.Clef(e4[2]).type);
            }
            for (let t4 = 0, e4 = g2; t4 < e4; ++t4) f2 += "d";
            1 === e3.length && ((_i = e3[0].sourceNote.Notehead) == null ? void 0 : _i.Shape) === E.NoteHeadShape.SLASH && (f2 += "s"), v2 && (f2 += "r");
            const _2 = { align_center: S2, auto_stem: true, clef: d2, duration: f2, keys: l2, slash: t3.GraceSlash }, M2 = t3.notes[0].sourceNote;
            if (M2.IsCueNote && (_2.glyph_font_scale = n.DEFAULT_NOTATION_FONT_SCALE * n.GraceNote.SCALE, _2.stroke_px = n.GraceNote.LEDGER_LINE_OFFSET), t3.parentVoiceEntry.IsGrace || t3.notes[0].sourceNote.IsCueNote) p2 = new n.GraceNote(_2);
            else {
              p2 = new n.StaveNote(_2), p2.stagger_same_whole_notes = i3.StaggerSameWholeNotes;
              const s3 = t3.parentStaffEntry.LyricsEntries;
              let r2 = true, o2 = 0;
              if (s3.length > 0 && i3.RenderLyrics && i3.LyricsUseXPaddingForLongLyrics) {
                const e4 = t3.parentStaffEntry.parentMeasure, i4 = [];
                for (let s5 = e4.staffEntries.indexOf(t3.parentStaffEntry) + 1; s5 < e4.staffEntries.length; s5++) {
                  const t4 = e4.staffEntries[s5];
                  t4.graphicalVoiceEntries[0] && i4.push(t4);
                }
                let s4, n2 = t3.parentStaffEntry.relInMeasureTimestamp.clone();
                for (const e5 of i4) {
                  const i5 = e5.relInMeasureTimestamp.clone();
                  if (s4 = a.Fraction.minus(i5, t3.parentVoiceEntry.Timestamp), s4.RealValue > 0.25) {
                    r2 = false;
                    break;
                  }
                  if (e5.LyricsEntries.length > 0) break;
                  o2 += 32 * a.Fraction.minus(i5, n2).RealValue, n2 = i5;
                }
              }
              if (i3.RenderLyrics && i3.LyricsUseXPaddingForLongLyrics && s3.length > 0 && r2) {
                let n2 = false, r3 = 0;
                for (const t4 of e3) if (t4.sourceNote.Length.RealValue <= 0.125) {
                  n2 = true;
                  break;
                }
                let a2 = false;
                for (const e4 of s3) {
                  const s4 = i3.LyricsXPaddingWidthThreshold;
                  let l3 = e4.GraphicalLabel.PositionAndShape.Size.width;
                  if (e4.hasDashFromLyricWord() && (l3 += 0.5), l3 > s4) {
                    r3 += l3 - s4;
                    const e5 = t3.parentStaffEntry, h3 = e5.parentMeasure.staffEntries, c3 = h3.indexOf(e5) === h3.length - 1;
                    c3 && (o2 += i3.LyricsXPaddingReductionForLastNoteInMeasure), n2 || (o2 += i3.LyricsXPaddingReductionForLongNotes), !i3.LyricsXPaddingForLastNoteInMeasure && c3 || l3 > s4 + o2 && (a2 = true, r3 -= o2);
                    break;
                  }
                }
                a2 && (p2.paddingRight = 10 * i3.LyricsXPaddingFactorForLongLyrics * r3);
              }
            }
            const P = t3.notes[0].lineShift;
            if (0 !== P && (p2.getKeyProps()[0].line += P), e3.length > 1) for (let t4 = 0; t4 < e3.length; t4++) {
              const i4 = e3[t4];
              ((_j = i4.sourceNote.Notehead) == null ? void 0 : _j.Shape) === E.NoteHeadShape.SLASH && (p2.note_heads[t4].note_type = "s");
            }
            if (p2.getKeyProps().forEach(({ line: e4 }, i4) => t3.notes[i4].staffLine = e4), (i3.LedgerLineWidth || i3.LedgerLineStrokeStyle) && (p2.ledgerLineStyle || (p2.ledgerLineStyle = {}), i3.LedgerLineWidth && (p2.ledgerLineStyle.lineWidth = i3.LedgerLineWidth), i3.LedgerLineStrokeStyle && (p2.ledgerLineStyle.strokeStyle = i3.LedgerLineStrokeStyle)), i3.ColoringEnabled) {
              const e4 = i3.DefaultColorStem;
              let s3 = t3.parentVoiceEntry.StemColor;
              !s3 && e4 && (s3 = e4);
              const n2 = { fillStyle: s3, strokeStyle: s3 };
              s3 && (p2.setStemStyle(n2), p2.flag && i3.ColorFlags && p2.setFlagStyle(n2));
            }
            if (p2.x_shift = y2, t3.parentVoiceEntry.IsGrace && t3.notes[0].sourceNote.NoteBeam && (t3.parentVoiceEntry.WantedStemDirection = t3.notes[0].sourceNote.NoteBeam.Notes[0].ParentVoiceEntry.WantedStemDirection), t3.parentVoiceEntry) switch (t3.parentVoiceEntry.WantedStemDirection) {
              case b.StemDirectionType.Up:
                p2.setStemDirection(n.Stem.UP), t3.parentVoiceEntry.StemDirection = b.StemDirectionType.Up;
                break;
              case b.StemDirectionType.Down:
                p2.setStemDirection(n.Stem.DOWN), t3.parentVoiceEntry.StemDirection = b.StemDirectionType.Down;
            }
            for (let t4 = 0, s3 = e3.length; t4 < s3; t4 += 1) {
              if (e3[t4].setIndex(p2, t4), h2[t4]) {
                if ("###" === h2[t4]) {
                  p2.addAccidental(t4, new n.Accidental("##")), p2.addAccidental(t4, new n.Accidental("#"));
                  continue;
                }
                if ("bbs" === h2[t4]) {
                  p2.addAccidental(t4, new n.Accidental("bb")), p2.addAccidental(t4, new n.Accidental("b"));
                  continue;
                }
                p2.addAccidental(t4, new n.Accidental(h2[t4]));
              }
              const s4 = e3[t4].sourceNote.TremoloStrokes;
              if (s4 > 0) {
                const e4 = new n.Tremolo(s4);
                e4.extra_stroke_scale = i3.TremoloStrokeScale, e4.y_spacing_scale = i3.TremoloYSpacingScale, p2.addModifier(t4, e4);
              }
            }
            if (0.25 === M2.Length.RealValue && M2.Notehead && false === M2.Notehead.Filled) {
              const t4 = p2.getKeyProps();
              for (let e4 = 0; e4 < t4.length; e4++) t4[e4].code = "v81";
            }
            for (let t4 = 0, e4 = g2; t4 < e4; ++t4) p2.addDotToAll();
            return p2;
          }
          static generateArticulations(t3, e3, i3) {
            if (t3 && "GhostNote" !== t3.getAttribute("type")) for (const s2 of e3.sourceNote.ParentVoiceEntry.Articulations) {
              let r2, o2 = n.Modifier.Position.ABOVE;
              if (t3.getStemDirection() === n.Stem.UP && (o2 = n.Modifier.Position.BELOW, i3.ArticulationAboveNoteForStemUp)) {
                const t4 = e3.parentVoiceEntry.parentStaffEntry.parentMeasure, i4 = t4 == null ? void 0 : t4.ParentStaff, s3 = i4 == null ? void 0 : i4.ParentInstrument.Staves;
                (1 === s3.length || 2 === s3.length && i4 !== s3[1]) && (o2 = n.Modifier.Position.ABOVE);
              }
              const a2 = s2.articulationEnum;
              switch (i3.ArticulationPlacementFromXML && (s2.placement === M.PlacementEnum.Above ? o2 = n.Modifier.Position.ABOVE : s2.placement === M.PlacementEnum.Below && (o2 = n.Modifier.Position.BELOW)), a2) {
                case b.ArticulationEnum.accent: {
                  r2 = new n.Articulation("a>");
                  const t4 = e3.sourceNote.NoteSlurs;
                  for (const s3 of t4) s3.StartNote === e3.sourceNote && (s3.PlacementXml === M.PlacementEnum.Above ? r2.setYShift(10 * -i3.SlurStartArticulationYOffsetOfArticulation) : s3.PlacementXml === M.PlacementEnum.Below && r2.setYShift(10 * i3.SlurStartArticulationYOffsetOfArticulation));
                  break;
                }
                case b.ArticulationEnum.breathmark:
                  r2 = new n.Articulation("abr"), s2.placement === M.PlacementEnum.Above && (o2 = n.Modifier.Position.ABOVE), r2.breathMarkDistance = i3.BreathMarkDistance;
                  break;
                case b.ArticulationEnum.downbow:
                  r2 = new n.Articulation("am"), void 0 === s2.placement && (o2 = n.Modifier.Position.ABOVE, s2.placement = M.PlacementEnum.Above);
                  break;
                case b.ArticulationEnum.fermata:
                  r2 = new n.Articulation("a@a"), o2 = n.Modifier.Position.ABOVE, s2.placement = M.PlacementEnum.Above;
                  break;
                case b.ArticulationEnum.marcatodown:
                  r2 = new n.Articulation("a|");
                  break;
                case b.ArticulationEnum.marcatoup:
                  r2 = new n.Articulation("a^"), o2 = n.Modifier.Position.ABOVE;
                  break;
                case b.ArticulationEnum.invertedfermata: {
                  const t4 = e3.sourceNote.ParentVoiceEntry;
                  if (t4 !== e3.sourceNote.ParentVoiceEntry.ParentSourceStaffEntry.VoiceEntries.last()) {
                    t4.Articulations = t4.Articulations.slice(t4.Articulations.indexOf(s2)), t4.ParentSourceStaffEntry.VoiceEntries.last().Articulations.push(s2);
                    continue;
                  }
                  r2 = new n.Articulation("a@u"), o2 = n.Modifier.Position.BELOW, s2.placement = M.PlacementEnum.Below;
                  break;
                }
                case b.ArticulationEnum.lefthandpizzicato:
                  r2 = new n.Articulation("a+");
                  break;
                case b.ArticulationEnum.naturalharmonic:
                  r2 = new n.Articulation("ah");
                  break;
                case b.ArticulationEnum.snappizzicato:
                  r2 = new n.Articulation("ao");
                  break;
                case b.ArticulationEnum.staccatissimo:
                  r2 = new n.Articulation("av");
                  break;
                case b.ArticulationEnum.staccato:
                  r2 = new n.Articulation("a.");
                  break;
                case b.ArticulationEnum.tenuto:
                  r2 = new n.Articulation("a-");
                  break;
                case b.ArticulationEnum.upbow:
                  r2 = new n.Articulation("a|"), void 0 === s2.placement && (o2 = n.Modifier.Position.ABOVE, s2.placement = M.PlacementEnum.Above);
                  break;
                case b.ArticulationEnum.strongaccent:
                  r2 = new n.Articulation("a^");
              }
              r2 && (r2.setPosition(o2), t3.addModifier(0, r2));
            }
          }
          static generateOrnaments(t3, e3) {
            let i3, s2 = n.Modifier.Position.ABOVE;
            switch (e3.placement === M.PlacementEnum.Below && (s2 = n.Modifier.Position.BELOW), e3.GetOrnament) {
              case y.OrnamentEnum.DelayedInvertedTurn:
                i3 = new n.Ornament("turn_inverted"), i3.setDelayed(true);
                break;
              case y.OrnamentEnum.DelayedTurn:
                i3 = new n.Ornament("turn"), i3.setDelayed(true);
                break;
              case y.OrnamentEnum.InvertedMordent:
                i3 = new n.Ornament("mordent"), i3.setDelayed(false);
                break;
              case y.OrnamentEnum.InvertedTurn:
                i3 = new n.Ornament("turn_inverted"), i3.setDelayed(false);
                break;
              case y.OrnamentEnum.Mordent:
                i3 = new n.Ornament("mordent_inverted"), i3.setDelayed(false);
                break;
              case y.OrnamentEnum.Trill:
                i3 = new n.Ornament("tr"), i3.setDelayed(false);
                break;
              case y.OrnamentEnum.Turn:
                i3 = new n.Ornament("turn"), i3.setDelayed(false);
                break;
              default:
                return void g.default.warn("unhandled OrnamentEnum type: " + e3.GetOrnament);
            }
            i3 && (e3.AccidentalBelow !== c.AccidentalEnum.NONE && i3.setLowerAccidental(o.Pitch.accidentalVexflow(e3.AccidentalBelow)), e3.AccidentalAbove !== c.AccidentalEnum.NONE && i3.setUpperAccidental(o.Pitch.accidentalVexflow(e3.AccidentalAbove)), i3.setPosition(s2), t3.addModifier(0, i3));
          }
          static StrokeTypeFromArpeggioType(t3) {
            switch (t3) {
              case v.ArpeggioType.ARPEGGIO_DIRECTIONLESS:
                return n.Stroke.Type.ARPEGGIO_DIRECTIONLESS;
              case v.ArpeggioType.BRUSH_DOWN:
                return n.Stroke.Type.BRUSH_UP;
              case v.ArpeggioType.BRUSH_UP:
                return n.Stroke.Type.BRUSH_DOWN;
              case v.ArpeggioType.RASQUEDO_DOWN:
                return n.Stroke.Type.RASQUEDO_UP;
              case v.ArpeggioType.RASQUEDO_UP:
                return n.Stroke.Type.RASQUEDO_DOWN;
              case v.ArpeggioType.ROLL_DOWN:
                return n.Stroke.Type.ROLL_UP;
              case v.ArpeggioType.ROLL_UP:
                return n.Stroke.Type.ROLL_DOWN;
              default:
                return n.Stroke.Type.ARPEGGIO_DIRECTIONLESS;
            }
          }
          static CreateTabNote(t3) {
            var _a;
            const e3 = [], i3 = t3.notes.reverse(), s2 = [], r2 = t3.notes[0].graphicalNoteLength, o2 = void 0 !== t3.notes[0].sourceNote.NoteTuplet;
            let a2 = w.durations(r2, o2)[0], l2 = 0, h2 = false;
            const c2 = t3.parentStaffEntry.parentMeasure.parentSourceMeasure.Rules;
            let u2 = false;
            for (const i4 of t3.notes) {
              const r3 = i4.sourceNote;
              let o3 = { str: r3.StringNumberTab, fret: r3.FretNumber };
              i4.sourceNote instanceof _.TabNote || (g.default.info(`invalid tab note: ${i4.sourceNote.Pitch.ToString()} in measure ${t3.parentStaffEntry.parentMeasure.MeasureNumber}, likely missing XML string+fret number.`), o3 = { str: 1, fret: 0 }), c2.TabUseXNoteheadShapeForTabNote && ((_a = i4.sourceNote.Notehead) == null ? void 0 : _a.Shape) === E.NoteHeadShape.X && (o3.fret = "x", u2 = true), e3.push(o3), r3.BendArray && r3.BendArray.forEach(function(t4) {
                let e4;
                const i5 = t4.bendalter - o3.fret;
                e4 = i5 > 1 ? "Full" : 1 === i5 ? "1/2" : "1/4", "up" === t4.direction ? s2.push({ type: n.Bend.UP, text: e4, width: 10 }) : s2.push({ type: n.Bend.DOWN, text: e4, width: 10 });
              }), r3.VibratoStroke && (h2 = true), l2 < i4.numberOfDots && (l2 = i4.numberOfDots);
            }
            for (let t4 = 0, e4 = l2; t4 < e4; ++t4) a2 += "d";
            const d2 = new n.TabNote({ duration: a2, positions: e3 });
            u2 && (d2.render_options.scale = c2.TabXNoteheadScale, d2.render_options.TabUseXNoteheadAlternativeGlyph = c2.TabUseXNoteheadAlternativeGlyph, d2.updateWidth()), c2.UsePageBackgroundColorForTabNotes && (d2.BackgroundColor = c2.PageBackgroundColor);
            for (let t4 = 0, e4 = i3.length; t4 < e4; t4 += 1) i3[t4].setIndex(d2, t4);
            return s2.forEach(function(t4) {
              t4.type === n.Bend.UP ? d2.addModifier(new n.Bend(t4.text, false)) : d2.addModifier(new n.Bend(t4.text, true));
            }), h2 && d2.addModifier(new n.Vibrato()), d2;
          }
          static Clef(t3, e3 = "default") {
            let i3, s2;
            switch ("default" !== e3 && "small" !== e3 && (g.default.warn(`Invalid VexFlow clef size "${e3}" specified. Using "default".`), e3 = "default"), t3.ClefType) {
              case r.ClefEnum.G:
                switch (t3.Line) {
                  case 1:
                    i3 = "french";
                    break;
                  case 2:
                    i3 = "treble";
                    break;
                  default:
                    i3 = "treble", g.default.error(`Clef ${r.ClefEnum[t3.ClefType]} on line ${t3.Line} not supported by VexFlow. Using default value "${i3}".`);
                }
                break;
              case r.ClefEnum.F:
                switch (t3.Line) {
                  case 4:
                    i3 = "bass";
                    break;
                  case 3:
                    i3 = "baritone-f";
                    break;
                  case 5:
                    i3 = "subbass";
                    break;
                  default:
                    i3 = "bass", g.default.error(`Clef ${r.ClefEnum[t3.ClefType]} on line ${t3.Line} not supported by VexFlow. Using default value "${i3}".`);
                }
                break;
              case r.ClefEnum.C:
                switch (t3.Line) {
                  case 3:
                    i3 = "alto";
                    break;
                  case 4:
                    i3 = "tenor";
                    break;
                  case 1:
                    i3 = "soprano";
                    break;
                  case 2:
                    i3 = "mezzo-soprano";
                    break;
                  default:
                    i3 = "alto", g.default.error(`Clef ${r.ClefEnum[t3.ClefType]} on line ${t3.Line} not supported by VexFlow. Using default value "${i3}".`);
                }
                break;
              case r.ClefEnum.percussion:
                i3 = "percussion";
                break;
              case r.ClefEnum.TAB:
                i3 = "treble";
                break;
              default:
                g.default.info("bad clef type: " + t3.ClefType), i3 = "treble";
            }
            return 1 === t3.OctaveOffset && "bass" !== i3 ? s2 = "8va" : -1 === t3.OctaveOffset && (s2 = "8vb"), { type: i3, size: e3, annotation: s2 };
          }
          static TimeSignature(t3) {
            let e3;
            switch (t3.SymbolEnum) {
              case l.RhythmSymbolEnum.NONE:
                e3 = t3.Rhythm.Numerator + "/" + t3.Rhythm.Denominator;
                break;
              case l.RhythmSymbolEnum.COMMON:
                e3 = "C";
                break;
              case l.RhythmSymbolEnum.CUT:
                e3 = "C|";
            }
            return new n.TimeSignature(e3);
          }
          static keySignature(t3) {
            if (!t3) return;
            let e3;
            switch (t3.Mode) {
              case h.KeyEnum.minor:
                e3 = w.minorMap[t3.Key] + "m";
                break;
              case h.KeyEnum.major:
              case h.KeyEnum.none:
                e3 = w.majorMap[t3.Key];
                break;
              default:
                e3 = "C";
            }
            return e3;
          }
          static line(t3, e3) {
            switch (t3) {
              case d.SystemLinesEnum.SingleThin:
                return e3 === S.SystemLinePosition.MeasureBegin ? n.StaveConnector.type.SINGLE : n.StaveConnector.type.SINGLE_RIGHT;
              case d.SystemLinesEnum.DoubleThin:
                return n.StaveConnector.type.THIN_DOUBLE;
              case d.SystemLinesEnum.ThinBold:
                return n.StaveConnector.type.BOLD_DOUBLE_RIGHT;
              case d.SystemLinesEnum.BoldThinDots:
                return n.StaveConnector.type.BOLD_DOUBLE_LEFT;
              case d.SystemLinesEnum.DotsThinBold:
              case d.SystemLinesEnum.DotsBoldBoldDots:
                return n.StaveConnector.type.BOLD_DOUBLE_RIGHT;
              case d.SystemLinesEnum.None:
                return n.StaveConnector.type.NONE;
            }
          }
          static font(t3, e3 = f.FontStyles.Regular, i3 = m.Fonts.TimesNewRoman, s2, n2 = void 0) {
            let r2 = "normal", o2 = "normal", a2 = `'${s2.DefaultFontFamily}'`;
            switch (e3) {
              case f.FontStyles.Bold:
                o2 = "bold";
                break;
              case f.FontStyles.Italic:
                r2 = "italic";
                break;
              case f.FontStyles.BoldItalic:
                r2 = "italic", o2 = "bold";
              case f.FontStyles.Underlined:
            }
            return m.Fonts.Kokila, n2 && "default" !== n2 && (a2 = `'${n2}'`), r2 + " " + o2 + " " + Math.floor(t3) + "px " + a2;
          }
          static fontStyle(t3) {
            switch (t3) {
              case f.FontStyles.Bold:
                return "bold";
              case f.FontStyles.Italic:
                return "italic";
              case f.FontStyles.BoldItalic:
                return "italic bold";
              default:
                return "normal";
            }
          }
          static style(t3) {
            return p.OUTLINE_AND_FILL_STYLE_DICT.getValue(t3);
          }
        }
        e2.VexFlowConverter = w, w.majorMap = { "-1": "F", "-2": "Bb", "-3": "Eb", "-4": "Ab", "-5": "Db", "-6": "Gb", "-7": "Cb", "-8": "Fb", 0: "C", 1: "G", 2: "D", 3: "A", 4: "E", 5: "B", 6: "F#", 7: "C#", 8: "G#" }, w.minorMap = { "-1": "D", "-2": "G", "-3": "C", "-4": "F", "-5": "Bb", "-6": "Eb", "-7": "Ab", "-8": "Db", 0: "A", 1: "E", 2: "B", 3: "F#", 4: "C#", 5: "G#", 6: "D#", 7: "A#", 8: "E#" };
      }, 6030: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.LyricsReader = void 0;
        const s = i2(649), n = i2(2317), r = i2(2148);
        e2.LyricsReader = class {
          constructor(t3) {
            this.openLyricWords = {}, this.musicSheet = t3;
          }
          addLyricEntry(t3, e3) {
            var _a, _b;
            if (t3) {
              const i3 = t3;
              for (let t4 = 0, o = i3.length; t4 < o; ++t4) {
                const o2 = i3[t4];
                try {
                  let t5 = "single";
                  if (o2.element("text")) {
                    let i4 = o2.element("text");
                    if (o2.element("syllabic") && (t5 = o2.element("syllabic").value), i4) {
                      let r2 = "";
                      const a = o2.elements();
                      for (const t6 of a) "text" !== t6.name && "elision" !== t6.name || (r2 += t6.value);
                      if (r2 = r2.replace("  ", " "), void 0 !== o2.element("elision") && "-" === r2) {
                        const e4 = o2.elements();
                        let s2, n2, r3 = 0;
                        for (let t6 = 0; t6 < e4.length; t6++) if ("elision" === e4[t6].name) {
                          r3 = t6;
                          break;
                        }
                        if (r3 > 0) for (let t6 = r3; t6 < e4.length; t6++) {
                          const i5 = e4[t6];
                          "text" === i5.name && (s2 = i5), "syllabic" === i5.name && (n2 = i5);
                        }
                        void 0 !== s2 && n2 && (i4 = s2, t5 = "middle");
                      }
                      let l, h = "1";
                      if (void 0 !== o2.attributes() && o2.attribute("number") && (h = o2.attribute("number").value), "single" === t5 || "end" === t5) {
                        if (this.openLyricWords[h]) {
                          this.currentLyricWord = this.openLyricWords[h];
                          const t6 = this.currentLyricWord.Syllables.length;
                          l = new n.LyricsEntry(r2, h, this.currentLyricWord, e3, t6), this.currentLyricWord.Syllables.push(l), delete this.openLyricWords[h], this.currentLyricWord = void 0;
                        } else l = new n.LyricsEntry(r2, h, void 0, e3);
                        l.extend = void 0 !== o2.element("extend");
                      } else if ("begin" === t5) this.openLyricWords[h] && (delete this.openLyricWords[h], this.currentLyricWord = void 0), this.currentLyricWord = new s.LyricWord(), this.openLyricWords[h] = this.currentLyricWord, l = new n.LyricsEntry(r2, h, this.currentLyricWord, e3, 0), this.currentLyricWord.Syllables.push(l);
                      else if ("middle" === t5) if (this.openLyricWords[h]) {
                        this.currentLyricWord = this.openLyricWords[h];
                        const t6 = this.currentLyricWord.Syllables.length;
                        l = new n.LyricsEntry(r2, h, this.currentLyricWord, e3, t6), this.currentLyricWord.Syllables.push(l);
                      } else l = new n.LyricsEntry(r2, h, void 0, e3);
                      l && (e3.LyricsEntries[h] || (e3.LyricsEntries.setValue(h, l), ((_b = (_a = e3.ParentSourceStaffEntry) == null ? void 0 : _a.VerticalContainerParent) == null ? void 0 : _b.ParentMeasure) && (e3.ParentSourceStaffEntry.VerticalContainerParent.ParentMeasure.hasLyrics = true)), e3.ParentVoice.Parent.LyricVersesNumbers.includes(h) || e3.ParentVoice.Parent.LyricVersesNumbers.push(h));
                    }
                  }
                } catch (t5) {
                  const e4 = r.ITextTranslation.translateText("ReaderErrorMessages/LyricError", "Error while reading lyric entry.");
                  this.musicSheet.SheetErrors.pushMeasureError(e4);
                  continue;
                }
              }
            }
          }
        };
      }, 6119: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4831), n = function() {
          function t3(t4) {
            this.table = {}, this.nElements = 0, this.toStr = t4 || s.defaultToString;
          }
          return t3.prototype.getValue = function(t4) {
            var e3 = this.table["$" + this.toStr(t4)];
            if (!s.isUndefined(e3)) return e3.value;
          }, t3.prototype.setValue = function(t4, e3) {
            if (!s.isUndefined(t4) && !s.isUndefined(e3)) {
              var i3, n2 = "$" + this.toStr(t4), r = this.table[n2];
              return s.isUndefined(r) ? (this.nElements++, i3 = void 0) : i3 = r.value, this.table[n2] = { key: t4, value: e3 }, i3;
            }
          }, t3.prototype.remove = function(t4) {
            var e3 = "$" + this.toStr(t4), i3 = this.table[e3];
            if (!s.isUndefined(i3)) return delete this.table[e3], this.nElements--, i3.value;
          }, t3.prototype.keys = function() {
            var t4 = [];
            for (var e3 in this.table) if (s.has(this.table, e3)) {
              var i3 = this.table[e3];
              t4.push(i3.key);
            }
            return t4;
          }, t3.prototype.values = function() {
            var t4 = [];
            for (var e3 in this.table) if (s.has(this.table, e3)) {
              var i3 = this.table[e3];
              t4.push(i3.value);
            }
            return t4;
          }, t3.prototype.forEach = function(t4) {
            for (var e3 in this.table) if (s.has(this.table, e3)) {
              var i3 = this.table[e3];
              if (false === t4(i3.key, i3.value)) return;
            }
          }, t3.prototype.containsKey = function(t4) {
            return !s.isUndefined(this.getValue(t4));
          }, t3.prototype.clear = function() {
            this.table = {}, this.nElements = 0;
          }, t3.prototype.size = function() {
            return this.nElements;
          }, t3.prototype.isEmpty = function() {
            return this.nElements <= 0;
          }, t3.prototype.toString = function() {
            var t4 = "{";
            return this.forEach(function(e3, i3) {
              t4 += "\n	" + e3 + " : " + i3;
            }), t4 + "\n}";
          }, t3;
        }();
        e2.default = n;
      }, 6173: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowTabMeasure = void 0;
        var n = s(i2(3206)).default.Flow;
        const r = i2(5246), o = i2(6014), a = s(i2(3065)), l = i2(164);
        class h extends r.VexFlowMeasure {
          constructor(t3, e3 = void 0, i3 = void 0) {
            super(t3, e3, i3), this.isTabMeasure = true;
          }
          resetLayout() {
            const t3 = this.ParentStaff.StafflineCount ?? 6;
            this.stave = new n.TabStave(0, 0, 0, { space_above_staff_ln: 0, space_below_staff_ln: 0, num_lines: t3 }), this.updateInstructionWidth();
          }
          graphicalMeasureCreatedCalculations() {
            for (let t4 = 0, e3 = this.staffEntries.length; t4 < e3; ++t4) {
              const e4 = this.staffEntries[t4];
              for (const t5 of e4.graphicalVoiceEntries) if (t5.notes[0].sourceNote.isRest()) {
                const e5 = o.VexFlowConverter.GhostNotes(t5.notes[0].sourceNote.Length);
                t5.vfStaveNote = e5[0], t5.vfGhostNotes = e5;
              } else t5.vfStaveNote = o.VexFlowConverter.CreateTabNote(t5);
            }
            this.finalizeTuplets();
            const t3 = this.getVoicesWithinMeasure();
            for (const e3 of t3) {
              if (!e3) continue;
              this.vfVoices[e3.VoiceId] = new n.Voice({ beat_value: this.parentSourceMeasure.Duration.Denominator, num_beats: this.parentSourceMeasure.Duration.Numerator, resolution: n.RESOLUTION }).setMode(n.Voice.Mode.SOFT);
              const t4 = this.getRestFilledVexFlowStaveNotesPerVoice(e3);
              for (const i3 of t4) {
                if (i3.parentVoiceEntry && i3.parentVoiceEntry.IsGrace && !i3.parentVoiceEntry.GraceAfterMainNote) continue;
                const t5 = i3;
                if (0 !== i3.notes.length && i3.notes[0] && i3.notes[0].sourceNote.PrintObject) {
                  if (i3.parentVoiceEntry && i3.parentVoiceEntry.Arpeggio) {
                    const e4 = i3.parentVoiceEntry.Arpeggio;
                    if (i3.notes && i3.notes.length > 1) {
                      const i4 = o.VexFlowConverter.StrokeTypeFromArpeggioType(e4.type), s2 = new n.Stroke(i4, { all_voices: this.rules.ArpeggiosGoAcrossVoices });
                      this.rules.RenderArpeggios && t5.vfStaveNote.addStroke(0, s2);
                    } else a.default.debug(`[OSMD] arpeggio in measure ${this.MeasureNumber} could not be drawn.
                        voice entry had less than two notes, arpeggio is likely between voice entries, not currently supported in Vexflow.`);
                  }
                  if (t5.vfGhostNotes) for (const i4 of t5.vfGhostNotes) this.vfVoices[e3.VoiceId].addTickable(i4);
                  else this.vfVoices[e3.VoiceId].addTickable(t5.vfStaveNote);
                } else if (t5.vfGhostNotes) for (const i4 of t5.vfGhostNotes) this.vfVoices[e3.VoiceId].addTickable(i4);
                else this.vfVoices[e3.VoiceId].addTickable(t5.vfStaveNote);
              }
            }
          }
          addClefAtBegin(t3) {
            t3.ClefType === l.ClefEnum.TAB && super.addClefAtBegin(t3);
          }
          draw(t3) {
            super.draw(t3);
            const e3 = this.parentSourceMeasure;
            e3.multipleRestMeasures && this.rules.RenderMultipleRestMeasures && (this.multiRestElement = new n.MultiMeasureRest(e3.multipleRestMeasures, {}), this.multiRestElement.setStave(this.stave), this.multiRestElement.setContext(t3), this.multiRestElement.draw());
          }
        }
        e2.VexFlowTabMeasure = h;
      }, 6229: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Slur = void 0;
        const s = i2(2561);
        e2.Slur = class {
          constructor() {
          }
          get StartNote() {
            return this.startNote;
          }
          set StartNote(t3) {
            this.startNote = t3;
          }
          get EndNote() {
            return this.endNote;
          }
          set EndNote(t3) {
            this.endNote = t3;
          }
          startNoteHasMoreStartingSlurs() {
            if (!this.startNote) return false;
            for (let t3 = 0, e3 = this.startNote.NoteSlurs.length; t3 < e3; ++t3) {
              const e4 = this.startNote.NoteSlurs[t3];
              if (e4 !== this && e4.StartNote === this.startNote) return true;
            }
            return false;
          }
          endNoteHasMoreEndingSlurs() {
            if (!this.endNote) return false;
            for (let t3 = 0, e3 = this.endNote.NoteSlurs.length; t3 < e3; ++t3) {
              const e4 = this.endNote.NoteSlurs[t3];
              if (e4 !== this && e4.EndNote === this.endNote) return true;
            }
            return false;
          }
          isCrossed() {
            return this.startNote.ParentStaffEntry.ParentStaff !== this.endNote.ParentStaffEntry.ParentStaff;
          }
          isSlurLonger() {
            if (!this.endNote || !this.startNote) return false;
            const t3 = s.Fraction.minus(this.endNote.getAbsoluteTimestamp(), this.startNote.getAbsoluteTimestamp());
            for (let e3 = 0, i3 = this.startNote.NoteSlurs.length; e3 < i3; ++e3) {
              const i4 = this.startNote.NoteSlurs[e3];
              if (i4 !== this && void 0 !== i4.EndNote && void 0 !== i4.StartNote && -1 === s.Fraction.minus(i4.EndNote.getAbsoluteTimestamp(), i4.StartNote.getAbsoluteTimestamp()).CompareTo(t3)) return true;
            }
            for (let e3 = 0, i3 = this.endNote.NoteSlurs.length; e3 < i3; ++e3) {
              const i4 = this.endNote.NoteSlurs[e3];
              if (i4 !== this && void 0 !== i4.EndNote && void 0 !== i4.StartNote && s.Fraction.minus(i4.EndNote.getAbsoluteTimestamp(), i4.StartNote.getAbsoluteTimestamp()).CompareTo(t3)) return true;
            }
            return false;
          }
        };
      }, 6302: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.RepetitionCalculator = void 0;
        const s = i2(1645), n = i2(1645), r = i2(7307);
        e2.RepetitionCalculator = class {
          constructor() {
            this.repetitionInstructions = [];
          }
          calculateRepetitions(t3, e3) {
            this.musicSheet = t3, this.repetitionInstructions = e3;
            const i3 = this.musicSheet.SourceMeasures;
            for (let t4 = 0, e4 = this.repetitionInstructions.length; t4 < e4; ++t4) {
              const e5 = this.repetitionInstructions[t4];
              this.currentMeasureIndex = e5.measureIndex, this.currentMeasure = i3[this.currentMeasureIndex], this.handleRepetitionInstructions(e5);
            }
            for (let t4 = 0, e4 = this.musicSheet.SourceMeasures.length; t4 < e4; ++t4) {
              const e5 = this.musicSheet.SourceMeasures[t4];
              e5.FirstRepetitionInstructions.length > 1 && e5.FirstRepetitionInstructions.sort(n.RepetitionInstructionComparer.Compare), e5.LastRepetitionInstructions.length > 1 && e5.LastRepetitionInstructions.sort(n.RepetitionInstructionComparer.Compare);
            }
          }
          handleRepetitionInstructions(t3) {
            if (!this.currentMeasure) return false;
            switch (t3.type) {
              case s.RepetitionInstructionEnum.StartLine:
                this.currentMeasure.FirstRepetitionInstructions.push(t3);
                break;
              case s.RepetitionInstructionEnum.BackJumpLine:
                this.currentMeasure.LastRepetitionInstructions.push(t3);
                break;
              case s.RepetitionInstructionEnum.Ending:
                if (t3.alignment === s.AlignmentType.Begin) this.currentMeasure.FirstRepetitionInstructions.push(t3);
                else for (let e3 = 0, i3 = t3.endingIndices.length; e3 < i3; ++e3) this.currentMeasure.LastRepetitionInstructions.push(t3);
                break;
              case s.RepetitionInstructionEnum.Segno:
                this.currentMeasure.FirstRepetitionInstructions.push(t3);
                break;
              case s.RepetitionInstructionEnum.Fine:
              case s.RepetitionInstructionEnum.ToCoda:
              case s.RepetitionInstructionEnum.Coda:
              case s.RepetitionInstructionEnum.DaCapo:
              case s.RepetitionInstructionEnum.DalSegno:
              case s.RepetitionInstructionEnum.DalSegnoAlFine:
              case s.RepetitionInstructionEnum.DaCapoAlFine:
              case s.RepetitionInstructionEnum.DalSegnoAlCoda:
              case s.RepetitionInstructionEnum.DaCapoAlCoda:
                this.currentMeasure.LastRepetitionInstructions.push(t3);
                break;
              case s.RepetitionInstructionEnum.None:
                break;
              default:
                throw new r.ArgumentOutOfRangeException("currentRepetitionInstruction");
            }
            return true;
          }
        };
      }, 6332: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
      }, 6352: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(1272), e2), n(i2(9099), e2), n(i2(5749), e2), n(i2(469), e2), n(i2(302), e2), n(i2(7503), e2);
      }, 6362: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.PlacementEnum = e2.AbstractExpression = void 0, e2.AbstractExpression = class {
          constructor(t3) {
            this.placement = t3;
          }
          static isStringInStringList(t3, e3) {
            for (let i3 = 0, s = t3.length; i3 < s; ++i3) {
              const s2 = t3[i3];
              if (e3.toLowerCase() === s2.toLowerCase().trim()) return true;
            }
            return false;
          }
          get Placement() {
            return this.placement;
          }
          static PlacementEnumFromString(t3) {
            switch (t3.toLowerCase()) {
              case "above":
                return i2.Above;
              case "below":
                return i2.Below;
              case "aboveorbelow":
              case "abovebelow":
                return i2.AboveOrBelow;
              case "left":
                return i2.Left;
              case "right":
                return i2.Right;
              default:
                return i2.NotYetDefined;
            }
          }
        }, function(t3) {
          t3[t3.Above = 0] = "Above", t3[t3.Below = 1] = "Below", t3[t3.Left = 2] = "Left", t3[t3.Right = 3] = "Right", t3[t3.NotYetDefined = 4] = "NotYetDefined", t3[t3.AboveOrBelow = 5] = "AboveOrBelow";
        }(i2 || (e2.PlacementEnum = i2 = {}));
      }, 6438: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.ColDirEnum = e2.BoundingBox = void 0;
        const n = s(i2(3065)), r = i2(7307), o = i2(9409), a = i2(6864), l = i2(200), h = i2(7741);
        var c;
        e2.BoundingBox = class {
          constructor(t3 = void 0, e3 = void 0, i3 = false) {
            this.isSymbol = false, this.relativePositionHasBeenSet = false, this.xBordersHaveBeenSet = false, this.yBordersHaveBeenSet = false, this.absolutePosition = new o.PointF2D(), this.relativePosition = new o.PointF2D(), this.size = new a.SizeF2D(), this.marginSize = new a.SizeF2D(), this.upperLeftCorner = new o.PointF2D(), this.upperLeftMarginCorner = new o.PointF2D(), this.borderLeft = 0, this.borderRight = 0, this.borderTop = 0, this.borderBottom = 0, this.borderMarginLeft = 0, this.borderMarginRight = 0, this.borderMarginTop = 0, this.borderMarginBottom = 0, this.childElements = [], this.parent = e3, this.dataObject = t3, this.isSymbol = i3, this.xBordersHaveBeenSet = false, this.yBordersHaveBeenSet = false, e3 && (this.Parent = e3);
          }
          get RelativePositionHasBeenSet() {
            return this.relativePositionHasBeenSet;
          }
          get XBordersHaveBeenSet() {
            return this.xBordersHaveBeenSet;
          }
          set XBordersHaveBeenSet(t3) {
            this.xBordersHaveBeenSet = t3;
          }
          get YBordersHaveBeenSet() {
            return this.yBordersHaveBeenSet;
          }
          set YBordersHaveBeenSet(t3) {
            this.yBordersHaveBeenSet = t3;
          }
          get AbsolutePosition() {
            return this.absolutePosition;
          }
          set AbsolutePosition(t3) {
            this.absolutePosition = t3;
          }
          get RelativePosition() {
            return this.relativePosition;
          }
          set RelativePosition(t3) {
            this.relativePosition = t3, this.relativePositionHasBeenSet = true;
          }
          get Size() {
            return this.size;
          }
          set Size(t3) {
            this.size = t3;
          }
          get MarginSize() {
            return this.marginSize;
          }
          get UpperLeftCorner() {
            return this.upperLeftCorner;
          }
          get UpperLeftMarginCorner() {
            return this.upperLeftMarginCorner;
          }
          get BorderLeft() {
            return this.borderLeft;
          }
          set BorderLeft(t3) {
            this.borderLeft = t3, this.calculateRectangle();
          }
          get BorderRight() {
            return this.borderRight;
          }
          set BorderRight(t3) {
            this.borderRight = t3, this.calculateRectangle();
          }
          get BorderTop() {
            return this.borderTop;
          }
          set BorderTop(t3) {
            this.borderTop = t3, this.calculateRectangle();
          }
          get BorderBottom() {
            return this.borderBottom;
          }
          set BorderBottom(t3) {
            this.borderBottom = t3, this.calculateRectangle();
          }
          get BorderMarginLeft() {
            return this.borderMarginLeft > this.borderLeft ? this.borderLeft : this.borderMarginLeft;
          }
          set BorderMarginLeft(t3) {
            this.borderMarginLeft = t3, this.calculateMarginRectangle();
          }
          get BorderMarginRight() {
            return this.borderMarginRight < this.borderRight ? this.borderRight : this.borderMarginRight;
          }
          set BorderMarginRight(t3) {
            this.borderMarginRight = t3, this.calculateMarginRectangle();
          }
          get BorderMarginTop() {
            return this.borderMarginTop > this.borderTop ? this.borderTop : this.borderMarginTop;
          }
          set BorderMarginTop(t3) {
            this.borderMarginTop = t3, this.calculateMarginRectangle();
          }
          get BorderMarginBottom() {
            return this.borderMarginBottom < this.borderBottom ? this.borderBottom : this.borderMarginBottom;
          }
          set BorderMarginBottom(t3) {
            this.borderMarginBottom = t3, this.calculateMarginRectangle();
          }
          get BoundingRectangle() {
            return this.boundingRectangle;
          }
          get BoundingMarginRectangle() {
            return this.boundingMarginRectangle;
          }
          get ChildElements() {
            return this.childElements;
          }
          set ChildElements(t3) {
            this.childElements = t3;
          }
          get Parent() {
            return this.parent;
          }
          set Parent(t3) {
            if (this.parent) {
              const t4 = this.parent.ChildElements.indexOf(this, 0);
              t4 > -1 && this.parent.ChildElements.splice(t4, 1);
            }
            this.parent = t3, this.parent.ChildElements.indexOf(this) > -1 ? n.default.error("BoundingBox of " + this.dataObject.constructor.name + " already in children list of " + this.parent.dataObject.constructor.name + "'s BoundingBox") : this.parent.ChildElements.push(this);
          }
          get DataObject() {
            return this.dataObject;
          }
          get Center() {
            return new o.PointF2D(this.RelativePosition.x + (this.BorderMarginRight + this.BorderMarginLeft), this.RelativePosition.y + (this.BorderMarginBottom + this.BorderMarginTop));
          }
          setAbsolutePositionFromParent() {
            this.parent ? (this.absolutePosition.x = this.parent.AbsolutePosition.x + this.relativePosition.x, this.absolutePosition.y = this.parent.AbsolutePosition.y + this.relativePosition.y) : this.absolutePosition = this.relativePosition;
          }
          calculateAbsolutePosition() {
            this.absolutePosition.x = this.relativePosition.x, this.absolutePosition.y = this.relativePosition.y;
            let t3 = this.parent;
            for (; t3; ) this.absolutePosition.x += t3.relativePosition.x, this.absolutePosition.y += t3.relativePosition.y, t3 = t3.parent;
          }
          calculateAbsolutePositionsRecursiveWithoutTopelement() {
            this.absolutePosition.x = 0, this.absolutePosition.y = 0;
            for (let t3 = 0, e3 = this.ChildElements.length; t3 < e3; ++t3) this.ChildElements[t3].calculateAbsolutePositionsRecursive(this.absolutePosition.x, this.absolutePosition.y);
          }
          calculateAbsolutePositionsRecursive(t3, e3) {
            this.absolutePosition.x = this.relativePosition.x + t3, this.absolutePosition.y = this.relativePosition.y + e3;
            for (let t4 = 0, e4 = this.ChildElements.length; t4 < e4; ++t4) this.ChildElements[t4].calculateAbsolutePositionsRecursive(this.absolutePosition.x, this.absolutePosition.y);
          }
          calculateAbsolutePositionsOfChildren() {
            for (let t3 = 0, e3 = this.ChildElements.length; t3 < e3; ++t3) this.ChildElements[t3].calculateAbsolutePositionsRecursive(this.absolutePosition.x, this.absolutePosition.y);
          }
          calculateBoundingBox(t3 = []) {
            if (0 === this.childElements.length) return;
            for (let e4 = 0, i4 = this.ChildElements.length; e4 < i4; ++e4) {
              const i5 = this.ChildElements[e4];
              let s3 = true;
              for (const e5 of t3) {
                const t4 = i5.DataObject;
                if (t4.isInstanceOfClass && t4.isInstanceOfClass(e5)) {
                  s3 = false;
                  break;
                }
              }
              s3 && i5.calculateBoundingBox(t3);
            }
            let e3 = Number.MAX_VALUE, i3 = Number.MIN_VALUE, s2 = Number.MAX_VALUE, n2 = Number.MIN_VALUE, r2 = Number.MAX_VALUE, o2 = Number.MIN_VALUE, a2 = Number.MAX_VALUE, l2 = Number.MIN_VALUE;
            this.isSymbol && (e3 = this.borderLeft, i3 = this.borderRight, s2 = this.borderTop, n2 = this.borderBottom, r2 = this.borderMarginLeft, o2 = this.borderMarginRight, a2 = this.borderMarginTop, l2 = this.borderMarginBottom);
            for (let t4 = 0, h2 = this.ChildElements.length; t4 < h2; ++t4) {
              const h3 = this.ChildElements[t4];
              e3 = Math.min(e3, h3.relativePosition.x + h3.borderLeft), i3 = Math.max(i3, h3.relativePosition.x + h3.borderRight), s2 = Math.min(s2, h3.relativePosition.y + h3.borderTop), n2 = Math.max(n2, h3.relativePosition.y + h3.borderBottom), r2 = Math.min(r2, h3.relativePosition.x + h3.borderMarginLeft), o2 = Math.max(o2, h3.relativePosition.x + h3.borderMarginRight), a2 = Math.min(a2, h3.relativePosition.y + h3.borderMarginTop), l2 = Math.max(l2, h3.relativePosition.y + h3.borderMarginBottom);
            }
            this.borderLeft = e3, this.borderRight = i3, this.borderTop = s2, this.borderBottom = n2, this.borderMarginLeft = r2, this.borderMarginRight = o2, this.borderMarginTop = a2, this.borderMarginBottom = l2, this.calculateRectangle(), this.calculateMarginRectangle(), this.xBordersHaveBeenSet = true, this.yBordersHaveBeenSet = true;
          }
          calculateTopBottomBorders() {
            if (0 === this.childElements.length) return;
            for (let t4 = 0, e4 = this.ChildElements.length; t4 < e4; ++t4) this.ChildElements[t4].calculateTopBottomBorders();
            let t3 = Number.MAX_VALUE, e3 = Number.MIN_VALUE, i3 = Number.MAX_VALUE, s2 = Number.MIN_VALUE;
            this.yBordersHaveBeenSet && (t3 = this.borderTop, e3 = this.borderBottom, i3 = this.borderMarginTop, s2 = this.borderMarginBottom);
            for (let n2 = 0, r2 = this.ChildElements.length; n2 < r2; ++n2) {
              const r3 = this.ChildElements[n2];
              t3 = Math.min(t3, r3.relativePosition.y + r3.borderTop), e3 = Math.max(e3, r3.relativePosition.y + r3.borderBottom), i3 = Math.min(i3, r3.relativePosition.y + r3.borderMarginTop), s2 = Math.max(s2, r3.relativePosition.y + r3.borderMarginBottom);
            }
            this.borderTop = t3, this.borderBottom = e3, this.borderMarginTop = i3, this.borderMarginBottom = s2, this.calculateRectangle(), this.calculateMarginRectangle();
          }
          computeNonOverlappingPositionWithMargin(t3, e3, i3) {
            this.RelativePosition = new o.PointF2D(i3.x, i3.y), this.setAbsolutePositionFromParent();
            let s2 = 0, n2 = false;
            do {
              switch (e3) {
                case c.Left:
                case c.Right:
                  s2 = this.relativePosition.x, t3.calculateMarginPositionAlongDirection(this, e3), n2 = Math.abs(s2 - this.relativePosition.x) > 1e-3;
                  break;
                case c.Up:
                case c.Down:
                  s2 = this.relativePosition.y, t3.calculateMarginPositionAlongDirection(this, e3), n2 = Math.abs(s2 - this.relativePosition.y) > 1e-3;
                  break;
                default:
                  throw new r.ArgumentOutOfRangeException("direction");
              }
            } while (n2);
          }
          collisionDetection(t3) {
            const e3 = Math.min(this.AbsolutePosition.x + this.borderRight, t3.absolutePosition.x + t3.borderRight) - Math.max(this.AbsolutePosition.x + this.borderLeft, t3.absolutePosition.x + t3.borderLeft), i3 = Math.min(this.AbsolutePosition.y + this.borderBottom, t3.absolutePosition.y + t3.borderBottom) - Math.max(this.AbsolutePosition.y + this.borderTop, t3.absolutePosition.y + t3.borderTop);
            return e3 >= 0 && i3 >= 0;
          }
          liesInsideBorders(t3) {
            const e3 = this.AbsolutePosition.x + this.borderLeft <= t3.absolutePosition.x + t3.borderLeft && t3.absolutePosition.x + t3.borderLeft <= this.AbsolutePosition.x + this.borderRight, i3 = this.AbsolutePosition.x + this.borderLeft <= t3.absolutePosition.x + t3.borderRight && t3.absolutePosition.x + t3.borderRight <= this.AbsolutePosition.x + this.borderRight;
            if (e3 && i3) {
              const e4 = this.AbsolutePosition.y + this.borderTop <= t3.absolutePosition.y + t3.borderTop && t3.absolutePosition.y + t3.borderTop <= this.AbsolutePosition.y + this.borderBottom, i4 = this.AbsolutePosition.y + this.borderTop <= t3.absolutePosition.y + t3.borderBottom && t3.absolutePosition.y + t3.borderBottom <= this.AbsolutePosition.y + this.borderBottom;
              if (e4 && i4) return true;
            }
            return false;
          }
          pointLiesInsideBorders(t3) {
            return this.AbsolutePosition.x + this.borderLeft <= t3.x && t3.x <= this.AbsolutePosition.x + this.borderRight && this.AbsolutePosition.y + this.borderTop <= t3.y && t3.y <= this.AbsolutePosition.y + this.borderBottom;
          }
          marginCollisionDetection(t3) {
            const e3 = Math.min(this.AbsolutePosition.x + this.borderMarginRight, t3.absolutePosition.x + t3.borderMarginRight) - Math.max(this.AbsolutePosition.x + this.borderMarginLeft, t3.absolutePosition.x + t3.borderMarginLeft), i3 = Math.min(this.AbsolutePosition.y + this.borderMarginBottom, t3.absolutePosition.y + t3.borderMarginBottom) - Math.max(this.AbsolutePosition.y + this.borderMarginTop, t3.absolutePosition.y + t3.borderMarginTop);
            return e3 > 0 && i3 > 0;
          }
          liesInsideMargins(t3) {
            const e3 = this.AbsolutePosition.x + this.borderMarginLeft <= t3.absolutePosition.x + t3.borderMarginLeft && t3.absolutePosition.x + t3.borderMarginLeft <= this.AbsolutePosition.x + this.borderMarginRight, i3 = this.AbsolutePosition.x + this.borderMarginLeft <= t3.absolutePosition.x + t3.borderMarginRight && t3.absolutePosition.x + t3.borderMarginRight <= this.AbsolutePosition.x + this.borderMarginRight;
            if (e3 && i3) {
              const e4 = this.AbsolutePosition.y + this.borderMarginTop <= t3.absolutePosition.y + t3.borderMarginTop && t3.absolutePosition.y + t3.borderMarginTop <= this.AbsolutePosition.y + this.borderMarginBottom, i4 = this.AbsolutePosition.y + this.borderMarginTop <= t3.absolutePosition.y + t3.borderMarginBottom && t3.absolutePosition.y + t3.borderMarginBottom <= this.AbsolutePosition.y + this.borderMarginBottom;
              if (e4 && i4) return true;
            }
            return false;
          }
          pointLiesInsideMargins(t3) {
            return this.AbsolutePosition.x + this.borderMarginLeft <= t3.x && t3.x <= this.AbsolutePosition.x + this.borderMarginRight && this.AbsolutePosition.y + this.borderMarginTop <= t3.y && t3.y <= this.AbsolutePosition.y + this.borderMarginBottom;
          }
          computeNonOverlappingPosition(t3, e3, i3) {
            this.RelativePosition = new o.PointF2D(i3.x, i3.y), this.setAbsolutePositionFromParent();
            let s2 = 0, n2 = false;
            do {
              switch (e3) {
                case c.Left:
                case c.Right:
                  s2 = this.relativePosition.x, t3.calculatePositionAlongDirection(this, e3), n2 = Math.abs(s2 - this.relativePosition.x) > 1e-4;
                  break;
                case c.Up:
                case c.Down:
                  s2 = this.relativePosition.y, t3.calculatePositionAlongDirection(this, e3), n2 = Math.abs(s2 - this.relativePosition.y) > 1e-4;
                  break;
                default:
                  throw new r.ArgumentOutOfRangeException("direction");
              }
            } while (n2);
          }
          getClickedObjectOfType(t3) {
            const e3 = this.dataObject;
            if (this.pointLiesInsideBorders(t3) && e3) return e3;
            for (let e4 = 0, i3 = this.childElements.length; e4 < i3; ++e4) {
              const i4 = this.childElements[e4].getClickedObjectOfType(t3);
              if (i4) return i4;
            }
          }
          getObjectsInRegion(t3, e3 = true, i3 = h.GraphicalObject.name) {
            let s2 = [];
            for (const n2 of this.childElements) s2 = s2.concat(n2.getObjectsInRegion(t3, e3, i3));
            return this.dataObject && this.dataObject.isInstanceOfClass(i3) && (e3 ? t3.liesInsideBorders(this) && s2.push(this.dataObject) : t3.collisionDetection(this) && s2.push(this.dataObject)), s2;
          }
          calculateRectangle() {
            this.upperLeftCorner = new o.PointF2D(this.BorderLeft, this.BorderTop), this.size = new a.SizeF2D(this.BorderRight - this.BorderLeft, this.BorderBottom - this.BorderTop), this.boundingRectangle = l.RectangleF2D.createFromLocationAndSize(this.upperLeftCorner, this.size);
          }
          calculateMarginRectangle() {
            this.upperLeftMarginCorner = new o.PointF2D(this.BorderMarginLeft, this.BorderMarginTop), this.marginSize = new a.SizeF2D(this.BorderMarginRight - this.BorderMarginLeft, this.BorderMarginBottom - this.BorderMarginTop), this.boundingMarginRectangle = l.RectangleF2D.createFromLocationAndSize(this.upperLeftMarginCorner, this.marginSize);
          }
          calculateMarginPositionAlongDirection(t3, e3) {
            if (this !== t3) {
              if (this.isSymbol && this.marginCollisionDetection(t3)) {
                let i3 = 0;
                switch (e3) {
                  case c.Left:
                    return i3 = this.absolutePosition.x + this.borderMarginLeft - (t3.absolutePosition.x + t3.borderMarginRight), t3.relativePosition.x += i3, void (t3.absolutePosition.x += i3);
                  case c.Right:
                    return i3 = this.absolutePosition.x + this.borderMarginRight - (t3.absolutePosition.x + t3.borderMarginLeft), t3.relativePosition.x += i3, void (t3.absolutePosition.x += i3);
                  case c.Up:
                    return i3 = this.absolutePosition.y + this.borderMarginTop - (t3.absolutePosition.y + t3.borderMarginBottom), t3.relativePosition.y += i3, void (t3.absolutePosition.y += i3);
                  case c.Down:
                    return i3 = this.absolutePosition.y + this.borderMarginBottom - (t3.absolutePosition.y + t3.borderMarginTop), t3.relativePosition.y += i3, void (t3.absolutePosition.y += i3);
                  default:
                    throw new r.ArgumentOutOfRangeException("direction");
                }
              }
              for (let i3 = 0, s2 = this.ChildElements.length; i3 < s2; ++i3) this.ChildElements[i3].calculateMarginPositionAlongDirection(t3, e3);
            }
          }
          calculatePositionAlongDirection(t3, e3) {
            if (this !== t3) {
              if (this.isSymbol && this.collisionDetection(t3)) {
                let i3;
                switch (e3) {
                  case c.Left:
                    return i3 = this.absolutePosition.x + this.borderLeft - (t3.absolutePosition.x + t3.borderRight), t3.relativePosition.x += i3, void (t3.absolutePosition.x += i3);
                  case c.Right:
                    return i3 = this.absolutePosition.x + this.borderRight - (t3.absolutePosition.x + t3.borderLeft), t3.relativePosition.x += i3, void (t3.absolutePosition.x += i3);
                  case c.Up:
                    return i3 = this.absolutePosition.y + this.borderTop - (t3.absolutePosition.y + t3.borderBottom), t3.relativePosition.y += i3, void (t3.absolutePosition.y += i3);
                  case c.Down:
                    return i3 = this.absolutePosition.y + this.borderBottom - (t3.absolutePosition.y + t3.borderTop), t3.relativePosition.y += i3, void (t3.absolutePosition.y += i3);
                  default:
                    throw new r.ArgumentOutOfRangeException("direction");
                }
              }
              for (let i3 = 0, s2 = this.ChildElements.length; i3 < s2; ++i3) this.ChildElements[i3].calculatePositionAlongDirection(t3, e3);
            }
          }
        }, function(t3) {
          t3[t3.Left = 0] = "Left", t3[t3.Right = 1] = "Right", t3[t3.Up = 2] = "Up", t3[t3.Down = 3] = "Down", t3[t3.NotYetDefined = 4] = "NotYetDefined";
        }(c || (e2.ColDirEnum = c = {}));
      }, 6452: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalLine = void 0;
        const s = i2(2683);
        e2.GraphicalLine = class {
          constructor(t3, e3, i3 = 0, n = s.OutlineAndFillStyleEnum.BaseWritingColor, r = void 0) {
            this.start = t3, this.end = e3, this.width = i3, this.styleId = n, this.colorHex = r;
          }
          get Start() {
            return this.start;
          }
          set Start(t3) {
            this.start = t3;
          }
          get End() {
            return this.end;
          }
          set End(t3) {
            this.end = t3;
          }
          get Width() {
            return this.width;
          }
          set Width(t3) {
            this.width = t3;
          }
        };
      }, 6597: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Cursor = void 0;
        const s = i2(2561), n = i2(624);
        e2.Cursor = class {
          constructor(t3, e3, i3) {
            this.hidden = true, this.currentPageNumber = 1, this.skipInvisibleNotes = true, this.container = t3, this.openSheetMusicDisplay = e3, this.rules = this.openSheetMusicDisplay.EngravingRules, this.cursorOptions = i3;
            let s2 = 0;
            for (this.cursorElementId = "cursorImg-0"; document.getElementById(this.cursorElementId); ) s2++, this.cursorElementId = `cursorImg-${s2}`;
            const n2 = document.createElement("img");
            n2.id = this.cursorElementId, n2.style.position = "absolute", true === this.cursorOptions.follow ? (this.wantedZIndex = "-1", n2.style.zIndex = this.wantedZIndex) : (this.wantedZIndex = "-2", n2.style.zIndex = this.wantedZIndex), this.cursorElement = n2, this.container.appendChild(n2);
          }
          adjustToBackgroundColor() {
            let t3;
            t3 = this.rules.PageBackgroundColor ? "1" : this.wantedZIndex, this.cursorElement.style.zIndex = t3;
          }
          init(t3, e3) {
            this.manager = t3, this.graphic = e3, this.reset(), this.hidden = true, this.hide();
          }
          show() {
            this.hidden = false, this.update(), this.adjustToBackgroundColor();
          }
          resetIterator() {
            if (!this.openSheetMusicDisplay.Sheet || !this.openSheetMusicDisplay.Sheet.SourceMeasures) return void console.log("OSMD.Cursor.resetIterator(): sheet or measures were null/undefined.");
            const t3 = this.openSheetMusicDisplay.Sheet.SourceMeasures.length - 1;
            let e3 = this.rules.MinMeasureToDrawIndex;
            e3 = Math.min(e3, t3);
            let i3 = this.rules.MaxMeasureToDrawIndex;
            if (i3 = Math.min(i3, t3), this.openSheetMusicDisplay.Sheet && this.openSheetMusicDisplay.Sheet.SourceMeasures.length > e3 && (this.openSheetMusicDisplay.Sheet.SelectionStart = this.openSheetMusicDisplay.Sheet.SourceMeasures[e3].AbsoluteTimestamp), this.openSheetMusicDisplay.Sheet && this.openSheetMusicDisplay.Sheet.SourceMeasures.length > i3) {
              const t4 = this.openSheetMusicDisplay.Sheet.SourceMeasures[i3];
              this.openSheetMusicDisplay.Sheet.SelectionEnd = s.Fraction.plus(t4.AbsoluteTimestamp, t4.Duration);
            }
            this.iterator = this.manager.getIterator(), this.iterator.SkipInvisibleNotes = this.skipInvisibleNotes;
          }
          getStaffEntryFromVoiceEntry(t3) {
            const e3 = t3.ParentSourceStaffEntry.VerticalContainerParent.ParentMeasure.measureListIndex, i3 = t3.ParentSourceStaffEntry.ParentStaff.idInMusicSheet;
            return this.graphic.findGraphicalStaffEntryFromMeasureList(i3, e3, t3.ParentSourceStaffEntry);
          }
          update() {
            if (this.hidden || void 0 === this.hidden || null === this.hidden) return;
            this.updateCurrentPage();
            const t3 = this.iterator;
            let e3, i3 = t3.CurrentVisibleVoiceEntries(), s2 = t3.CurrentMeasureIndex, n2 = 0, r = 0, o = 0;
            if (0 !== i3.length || t3.FrontReached || t3.EndReached || (t3.moveToPrevious(), i3 = t3.CurrentVisibleVoiceEntries(), t3.moveToNext()), t3.FrontReached && 0 === i3.length) {
              t3.moveToNext(), i3 = t3.CurrentVisibleVoiceEntries();
              const s3 = this.findVisibleGraphicalMeasure(t3.CurrentMeasureIndex);
              n2 = s3.PositionAndShape.AbsolutePosition.x, e3 = s3.ParentMusicSystem, t3.moveToPrevious();
            } else if (t3.EndReached || !t3.CurrentVoiceEntries || 0 === i3.length) {
              t3.moveToPrevious(), i3 = t3.CurrentVisibleVoiceEntries(), s2 = t3.CurrentMeasureIndex;
              const r2 = this.findVisibleGraphicalMeasure(t3.CurrentMeasureIndex);
              n2 = r2.PositionAndShape.AbsolutePosition.x + r2.PositionAndShape.Size.width, e3 = r2.ParentMusicSystem, t3.moveToNext();
            } else if (t3.CurrentMeasure.isReducedToMultiRest) {
              const i4 = this.findVisibleGraphicalMeasure(t3.CurrentMeasureIndex), s3 = i4.parentSourceMeasure.multipleRestMeasures, r2 = t3.CurrentMeasure.multipleRestMeasureNumber / (s3 + 1), o2 = i4.PositionAndShape.Size.width - i4.beginInstructionsWidth;
              n2 = i4.PositionAndShape.AbsolutePosition.x + i4.beginInstructionsWidth + r2 * o2, e3 = i4.ParentMusicSystem;
            } else {
              const t4 = i3.map((t5) => this.getStaffEntryFromVoiceEntry(t5)).sort((t5, e4) => {
                var _a, _b, _c, _d;
                return ((_b = (_a = t5 == null ? void 0 : t5.PositionAndShape) == null ? void 0 : _a.AbsolutePosition) == null ? void 0 : _b.x) <= ((_d = (_c = e4 == null ? void 0 : e4.PositionAndShape) == null ? void 0 : _c.AbsolutePosition) == null ? void 0 : _d.x) ? -1 : 1;
              })[0];
              t4 && (n2 = t4.PositionAndShape.AbsolutePosition.x, e3 = t4.parentMeasure.ParentMusicSystem);
            }
            if (!(e3 == null ? void 0 : e3.StaffLines[0])) return;
            r = e3.PositionAndShape.AbsolutePosition.y + e3.StaffLines[0].PositionAndShape.RelativePosition.y;
            let a = e3.PositionAndShape.AbsolutePosition.y;
            const l = e3.StaffLines[e3.StaffLines.length - 1];
            l && (a += l.PositionAndShape.RelativePosition.y + l.StaffHeight), o = a - r;
            const h = this.findVisibleGraphicalMeasure(s2);
            if (!h) return;
            const c = h.PositionAndShape;
            if (this.updateWidthAndStyle(c, n2, r, o), this.openSheetMusicDisplay.FollowCursor && this.cursorOptions.follow) if (this.openSheetMusicDisplay.EngravingRules.RenderSingleHorizontalStaffline) this.cursorElement.scrollIntoView({ behavior: "smooth", inline: "center" });
            else {
              const t4 = this.cursorElement.getBoundingClientRect().top;
              this.cursorElement.scrollIntoView({ behavior: t4 < 1e3 ? "smooth" : "auto", block: "center" });
            }
            this.cursorElement.style.display = "";
          }
          findVisibleGraphicalMeasure(t3) {
            for (let t4 = 0; t4 < this.graphic.NumberOfStaves; t4++) {
              const e3 = this.graphic.findGraphicalMeasure(this.iterator.CurrentMeasureIndex, t4);
              if (e3 == null ? void 0 : e3.ParentStaff.ParentInstrument.Visible) return e3;
            }
          }
          updateWidthAndStyle(t3, e3, i3, s2) {
            const r = this.cursorElement;
            let o = 0;
            switch (this.cursorOptions.type) {
              case n.CursorType.ThinLeft:
                r.style.top = 10 * i3 * this.openSheetMusicDisplay.zoom + "px", r.style.left = 10 * (e3 - 1.5) * this.openSheetMusicDisplay.zoom + "px", r.height = 10 * s2 * this.openSheetMusicDisplay.zoom, o = 5 * this.openSheetMusicDisplay.zoom;
                break;
              case n.CursorType.ShortThinTopLeft:
                r.style.top = 10 * (i3 - 2.5) * this.openSheetMusicDisplay.zoom + "px", r.style.left = 10 * e3 * this.openSheetMusicDisplay.zoom + "px", r.height = 15 * this.openSheetMusicDisplay.zoom, o = 5 * this.openSheetMusicDisplay.zoom;
                break;
              case n.CursorType.CurrentArea:
                r.style.top = 10 * t3.AbsolutePosition.y * this.openSheetMusicDisplay.zoom + "px", r.style.left = 10 * t3.AbsolutePosition.x * this.openSheetMusicDisplay.zoom + "px", r.height = 10 * s2 * this.openSheetMusicDisplay.zoom, o = 10 * t3.Size.width * this.openSheetMusicDisplay.zoom;
                break;
              case n.CursorType.CurrentAreaLeft:
                r.style.top = 10 * t3.AbsolutePosition.y * this.openSheetMusicDisplay.zoom + "px", r.style.left = 10 * t3.AbsolutePosition.x * this.openSheetMusicDisplay.zoom + "px", r.height = 10 * s2 * this.openSheetMusicDisplay.zoom, o = 10 * (e3 - t3.AbsolutePosition.x) * this.openSheetMusicDisplay.zoom;
                break;
              default:
                r.style.top = 10 * i3 * this.openSheetMusicDisplay.zoom + "px", r.style.left = 10 * (e3 - 1.5) * this.openSheetMusicDisplay.zoom + "px", r.height = 10 * s2 * this.openSheetMusicDisplay.zoom, o = 30 * this.openSheetMusicDisplay.zoom;
            }
            r.width = o, this.cursorOptionsRendered !== this.cursorOptions && this.updateStyle(o, this.cursorOptions);
          }
          hide() {
            this.cursorElement.style.display = "none", this.hidden = true;
          }
          previous() {
            this.iterator.moveToPreviousVisibleVoiceEntry(false), this.update();
          }
          next() {
            this.iterator.moveToNextVisibleVoiceEntry(false), this.update();
          }
          reset() {
            this.resetIterator(), this.update();
          }
          updateStyle(t3, e3 = void 0) {
            void 0 !== e3 && (this.cursorOptions = e3);
            const i3 = document.createElement("canvas");
            i3.width = this.cursorElement.width, i3.height = 1;
            const s2 = i3.getContext("2d");
            s2.globalAlpha = this.cursorOptions.alpha;
            const r = s2.createLinearGradient(0, 0, this.cursorElement.width, 0);
            switch (this.cursorOptions.type) {
              case n.CursorType.ThinLeft:
              case n.CursorType.ShortThinTopLeft:
              case n.CursorType.CurrentArea:
              case n.CursorType.CurrentAreaLeft:
                r.addColorStop(1, this.cursorOptions.color);
                break;
              default:
                r.addColorStop(0, "white"), r.addColorStop(0.2, this.cursorOptions.color), r.addColorStop(0.8, this.cursorOptions.color), r.addColorStop(1, "white");
            }
            s2.fillStyle = r, s2.fillRect(0, 0, t3, 1), this.cursorOptionsRendered = { ...this.cursorOptions }, this.cursorElement.src = i3.toDataURL("image/png");
          }
          get Iterator() {
            return this.iterator;
          }
          get Hidden() {
            return this.hidden;
          }
          VoicesUnderCursor(t3) {
            return this.iterator.CurrentVisibleVoiceEntries(t3);
          }
          NotesUnderCursor(t3) {
            const e3 = this.VoicesUnderCursor(t3), i3 = [];
            return e3.forEach((t4) => {
              i3.push.apply(i3, t4.Notes);
            }), i3;
          }
          GNotesUnderCursor(t3) {
            const e3 = this.VoicesUnderCursor(t3), i3 = [];
            return e3.forEach((t4) => {
              i3.push(...t4.Notes.map((t5) => this.rules.GNote(t5)));
            }), i3;
          }
          updateCurrentPage() {
            let t3 = this.iterator.currentTimeStamp;
            t3.RealValue < 0 && (t3 = new s.Fraction(0, 0));
            for (const e3 of this.graphic.MusicPages) if (e3.MusicSystems.last().GetSystemsLastTimeStamp().gt(t3)) {
              const t4 = e3.PageNumber;
              return t4 !== this.currentPageNumber && (this.container.removeChild(this.cursorElement), this.container = document.getElementById("osmdCanvasPage" + t4), this.container.appendChild(this.cursorElement)), this.currentPageNumber = t4;
            }
            return 1;
          }
          get SkipInvisibleNotes() {
            return this.skipInvisibleNotes;
          }
          set SkipInvisibleNotes(t3) {
            this.skipInvisibleNotes = t3, this.iterator.SkipInvisibleNotes = t3;
          }
          get CursorOptions() {
            return this.cursorOptions;
          }
          set CursorOptions(t3) {
            this.cursorOptions = t3;
          }
          Dispose() {
            this.hide(), this.container.removeChild(this.cursorElement), this.rules = void 0, this.openSheetMusicDisplay = void 0, this.cursorOptions = void 0;
          }
        };
      }, 6644: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.StaffEntryLink = void 0, e2.StaffEntryLink = class {
          constructor(t3) {
            this.linkStaffEntries = [], this.voiceEntry = t3;
          }
          get GetVoiceEntry() {
            return this.voiceEntry;
          }
          get LinkStaffEntries() {
            return this.linkStaffEntries;
          }
          set LinkStaffEntries(t3) {
            this.linkStaffEntries = t3;
          }
        };
      }, 6659: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalChordSymbolContainer = void 0;
        const s = i2(7435), n = i2(8254), r = i2(9719), o = i2(6438), a = i2(7741), l = i2(9409);
        class h extends a.GraphicalObject {
          constructor(t3, e3, i3, s2, n2, r2) {
            super(), this.chordSymbolContainer = t3, this.boundingBox = new o.BoundingBox(this, e3), this.rules = r2, this.calculateLabel(i3, n2, s2);
          }
          get GetChordSymbolContainer() {
            return this.chordSymbolContainer;
          }
          get GraphicalLabel() {
            return this.graphicalLabel;
          }
          calculateLabel(t3, e3, i3) {
            const o2 = r.ChordSymbolContainer.calculateChordText(this.chordSymbolContainer, e3, i3);
            this.graphicalLabel = new n.GraphicalLabel(new s.Label(o2), t3, this.rules.ChordSymbolTextAlignment, this.rules, this.boundingBox), this.graphicalLabel.PositionAndShape.RelativePosition = new l.PointF2D(this.rules.ChordSymbolRelativeXOffset, 0), this.graphicalLabel.Label.colorDefault = this.rules.DefaultColorChordSymbol;
          }
        }
        e2.GraphicalChordSymbolContainer = h;
      }, 6670: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowStaffEntry = void 0;
        const s = i2(348), n = i2(9479), r = i2(8233);
        class o extends s.GraphicalStaffEntry {
          constructor(t3, e3, i3) {
            super(t3, e3, i3);
          }
          calculateXPosition() {
            const t3 = this.parentMeasure.getVFStave();
            let e3 = 0;
            for (const i3 of this.graphicalVoiceEntries) if (i3.vfStaveNote) {
              if (i3.vfStaveNote.setStave(t3), !i3.vfStaveNote.preFormatted) continue;
              i3.applyBordersFromVexflow();
              let s2 = false, r2 = this.PositionAndShape;
              i3.notes[0].sourceNote.isWholeRest() && !this.hasOnlyRests() && (s2 = true, r2 = i3.PositionAndShape), this.parentMeasure.ParentStaff.isTab ? r2.RelativePosition.x = (i3.vfStaveNote.getAbsoluteX() + i3.vfStaveNote.glyph.getWidth()) / n.unitInPixels : (r2.RelativePosition.x = i3.vfStaveNote.getBoundingBox().getX() / n.unitInPixels, s2 && (r2.RelativePosition.x -= t3.getNoteStartX() / n.unitInPixels, r2.RelativePosition.x -= 1.3));
              const o2 = i3.notes[0].sourceNote;
              o2.isRest() && o2.Length.RealValue === this.parentMeasure.parentSourceMeasure.ActiveTimeSignature.RealValue && (r2.RelativePosition.x += this.parentMeasure.parentSourceMeasure.Rules.WholeRestXShiftVexflow - 0.1, i3.PositionAndShape.BorderLeft = -0.7, i3.PositionAndShape.BorderRight = 0.7), i3.PositionAndShape.BorderLeft < e3 && (e3 = i3.PositionAndShape.BorderLeft);
            }
            this.PositionAndShape.RelativePosition.x -= e3, this.PositionAndShape.calculateBoundingBox();
          }
          setMaxAccidentals() {
            for (const t3 of this.graphicalVoiceEntries) for (const e3 of t3.notes) if (e3.DrawnAccidental !== r.AccidentalEnum.NONE) return this.MaxAccidentals = 1;
            return this.MaxAccidentals = 0;
          }
          setModifierXOffsets() {
            let t3 = [];
            for (const e4 of this.graphicalVoiceEntries) t3 = t3.concat(e4.notes);
            const e3 = t3.map((t4) => t4.staffLine), i3 = this.calculateModifierXOffsets(e3, 1), s2 = this.calculateModifierXOffsets(e3, 0.5);
            t3.forEach((t4, e4) => {
              t4.baseFingeringXOffset = s2[e4], t4.baseStringNumberXOffset = i3[e4];
            });
          }
          calculateModifierXOffsets(t3, e3) {
            const i3 = [];
            for (let s2 = 0; s2 < t3.length; s2++) {
              let n2 = 0, r2 = true;
              for (; r2; ) for (let o2 = s2; o2 >= 0; o2--) {
                if (Math.abs(t3[s2] - t3[o2]) <= e3 && n2 === i3[o2]) {
                  n2++, r2 = true;
                  break;
                }
                r2 = false;
              }
              i3.push(n2);
            }
            return i3;
          }
        }
        e2.VexFlowStaffEntry = o;
      }, 6703: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
      }, 6711: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalCurve = void 0;
        const s = i2(9409);
        class n {
          constructor() {
            n.tPow3 = new Array(n.bezierCurveStepSize), n.oneMinusTPow3 = new Array(n.bezierCurveStepSize), n.bezierFactorOne = new Array(n.bezierCurveStepSize), n.bezierFactorTwo = new Array(n.bezierCurveStepSize);
            for (let t3 = 0; t3 < n.bezierCurveStepSize; t3++) {
              const e3 = t3 / n.bezierCurveStepSize;
              n.tPow3[t3] = Math.pow(e3, 3), n.oneMinusTPow3[t3] = Math.pow(1 - e3, 3), n.bezierFactorOne[t3] = 3 * Math.pow(1 - e3, 2) * e3, n.bezierFactorTwo[t3] = 3 * (1 - e3) * Math.pow(e3, 2);
            }
          }
          calculateCurvePointAtIndex(t3) {
            const e3 = Math.round(t3 * n.bezierCurveStepSize);
            return e3 < 0 || e3 >= n.bezierCurveStepSize ? new s.PointF2D() : new s.PointF2D(n.oneMinusTPow3[e3] * this.bezierStartPt.x + n.bezierFactorOne[e3] * this.bezierStartControlPt.x + n.bezierFactorTwo[e3] * this.bezierEndControlPt.x + n.tPow3[e3] * this.bezierEndPt.x, n.oneMinusTPow3[e3] * this.bezierStartPt.y + n.bezierFactorOne[e3] * this.bezierStartControlPt.y + n.bezierFactorTwo[e3] * this.bezierEndControlPt.y + n.tPow3[e3] * this.bezierEndPt.y);
          }
        }
        e2.GraphicalCurve = n, n.bezierCurveStepSize = 1e3;
      }, 6723: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VerticalGraphicalStaffEntryContainer = void 0, e2.VerticalGraphicalStaffEntryContainer = class {
          constructor(t3, e3) {
            this.staffEntries = [], this.absoluteTimestamp = e3, this.staffEntries = new Array(t3);
          }
          get Index() {
            return this.index;
          }
          set Index(t3) {
            this.index = t3;
          }
          get AbsoluteTimestamp() {
            return this.absoluteTimestamp;
          }
          get StaffEntries() {
            return this.staffEntries;
          }
          set StaffEntries(t3) {
            this.staffEntries = t3;
          }
          static compareByTimestamp(t3, e3) {
            const i2 = t3.absoluteTimestamp.RealValue, s = e3.absoluteTimestamp.RealValue;
            return i2 < s ? -1 : i2 > s ? 1 : 0;
          }
          getFirstNonNullStaffEntry() {
            for (let t3 = 0, e3 = this.staffEntries.length; t3 < e3; ++t3) {
              const e4 = this.staffEntries[t3];
              if (e4) return e4;
            }
          }
        };
      }, 6864: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SizeF2D = void 0, e2.SizeF2D = class {
          constructor(t3 = 0, e3 = 0) {
            this.width = t3, this.height = e3;
          }
        };
      }, 6873: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(813), e2), n(i2(2774), e2);
      }, 6888: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MXLHelper = void 0;
        const n = i2(3902), r = s(i2(1710)), o = s(i2(3065));
        e2.MXLHelper = class {
          static MXLtoIXmlElement(t3) {
            return this.MXLtoXMLstring(t3).then((t4) => {
              const e3 = new DOMParser().parseFromString(t4, "text/xml"), i3 = new n.IXmlElement(e3.documentElement);
              return Promise.resolve(i3);
            }, (t4) => {
              throw new Error("extractSheetFromMxl: " + t4.message);
            });
          }
          static MXLtoXMLstring(t3) {
            const e3 = new r.default();
            return e3.loadAsync(t3).then(async (t4) => {
              let i3 = await e3.file("META-INF/container.xml").async("text");
              if (!i3.startsWith("<")) {
                const t5 = await e3.file("META-INF/container.xml").async("uint8array");
                i3 = new TextDecoder("utf-8").decode(t5);
              }
              if (!i3.startsWith("<")) {
                const t5 = await e3.file("META-INF/container.xml").async("uint8array");
                i3 = new TextDecoder("utf-16").decode(t5);
              }
              const s2 = new DOMParser().parseFromString(i3, "text/xml").getElementsByTagName("rootfile")[0].getAttribute("full-path"), n2 = await e3.file(s2).async("text");
              if (!n2.substring(0, 1).startsWith("<")) {
                const t5 = await e3.file(s2).async("uint8array");
                return new TextDecoder("utf-16").decode(t5);
              }
              return n2;
            }, (t4) => {
              throw o.default.error(t4), t4;
            });
          }
        };
      }, 6904: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Matrix2D = void 0;
        const s = i2(9409);
        class n {
          constructor() {
            this.matrix = [];
            for (let t3 = 0; t3 < 2; t3++) {
              this.matrix[t3] = [];
              for (let e3 = 0; e3 < 2; e3++) this.matrix[t3][e3] = 0;
            }
          }
          static getRotationMatrix(t3) {
            const e3 = new n(), i3 = Math.cos(t3), s2 = Math.sin(t3);
            return e3.matrix[0][0] = i3, e3.matrix[0][1] = -s2, e3.matrix[1][0] = s2, e3.matrix[1][1] = i3, e3;
          }
          scalarMultiplication(t3) {
            for (let e3 = 0; e3 < 2; e3++) for (let i3 = 0; i3 < 2; i3++) this.matrix[e3][i3] *= t3;
          }
          getTransposeMatrix() {
            const t3 = new n();
            for (let e3 = 0; e3 < 2; e3++) for (let i3 = 0; i3 < 2; i3++) t3.matrix[e3][i3] = this.matrix[i3][e3];
            return t3;
          }
          vectorMultiplication(t3) {
            const e3 = new s.PointF2D();
            return e3.x = t3.x * this.matrix[0][0] + t3.y * this.matrix[0][1], e3.y = t3.x * this.matrix[1][0] + t3.y * this.matrix[1][1], e3;
          }
        }
        e2.Matrix2D = n;
      }, 6954: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SystemLinesEnumHelper = e2.SystemLinesEnum = void 0, function(t3) {
          t3[t3.SingleThin = 0] = "SingleThin", t3[t3.DoubleThin = 1] = "DoubleThin", t3[t3.ThinBold = 2] = "ThinBold", t3[t3.BoldThinDots = 3] = "BoldThinDots", t3[t3.DotsThinBold = 4] = "DotsThinBold", t3[t3.DotsBoldBoldDots = 5] = "DotsBoldBoldDots", t3[t3.None = 6] = "None", t3[t3.Dotted = 7] = "Dotted", t3[t3.Dashed = 8] = "Dashed", t3[t3.Bold = 9] = "Bold", t3[t3.BoldThin = 10] = "BoldThin", t3[t3.DoubleBold = 11] = "DoubleBold", t3[t3.Tick = 12] = "Tick", t3[t3.Short = 13] = "Short";
        }(i2 || (e2.SystemLinesEnum = i2 = {})), e2.SystemLinesEnumHelper = class {
          static xmlBarlineStyleToSystemLinesEnum(t3) {
            return "regular" === t3 ? i2.SingleThin : "dotted" === t3 ? i2.Dotted : "dashed" === t3 ? i2.Dashed : "heavy" === t3 ? i2.Bold : "light-light" === t3 ? i2.DoubleThin : "light-heavy" === t3 ? i2.ThinBold : "heavy-light" === t3 ? i2.BoldThin : "heavy-heavy" === t3 ? i2.DoubleBold : "tick" === t3 ? i2.Tick : "short" === t3 ? i2.Short : "none" === t3 ? i2.None : i2.SingleThin;
          }
        };
      }, 6990: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.DynamicExpressionSymbolEnum = void 0, function(t3) {
          t3[t3.p = 0] = "p", t3[t3.f = 1] = "f", t3[t3.s = 2] = "s", t3[t3.z = 3] = "z", t3[t3.m = 4] = "m", t3[t3.r = 5] = "r";
        }(i2 || (e2.DynamicExpressionSymbolEnum = i2 = {}));
      }, 7066: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MeasureBuildParameters = e2.SystemBuildParameters = e2.MusicSystemBuilder = void 0;
        const s = i2(1888), n = i2(9288), r = i2(4543), o = i2(164), a = i2(9409), l = i2(6452), h = i2(6954), c = i2(7921), u = i2(164), d = i2(813), f = i2(67);
        e2.MusicSystemBuilder = class {
          constructor() {
            this.musicSystems = [], this.globalSystemIndex = 0, this.leadSheet = false;
          }
          initialize(t3, e3, i3) {
            this.leadSheet = t3.LeadSheet, this.graphicalMusicSheet = t3, this.rules = this.graphicalMusicSheet.ParentMusicSheet.Rules, this.measureList = e3, this.numberOfVisibleStaffLines = i3, this.activeRhythm = new Array(this.numberOfVisibleStaffLines), this.activeKeys = new Array(this.numberOfVisibleStaffLines), this.activeClefs = new Array(this.numberOfVisibleStaffLines), this.initializeActiveInstructions(this.measureList[0]);
          }
          buildMusicSystems() {
            var _a, _b, _c;
            const t3 = this.getFullPageSystemWidth();
            let e3 = false;
            for (this.measureListIndex = 0, this.currentSystemParams = new m(), this.currentSystemParams.currentSystem = this.initMusicSystem(); this.measureListIndex < this.measureList.length; ) {
              const i3 = this.measureList[this.measureListIndex];
              if (!i3 || !i3[0]) {
                this.measureListIndex++;
                continue;
              }
              for (let t4 = 0, e4 = i3.length; t4 < e4; ++t4) i3[t4].resetLayout();
              const s2 = i3[0].parentSourceMeasure, n2 = s2.HasEndLine, r2 = n2 && this.rules.NewPartAndSystemAfterFinalBarline, o2 = this.currentSystemParams.IsSystemStartMeasure();
              s2.IsSystemStartMeasure = o2;
              const a2 = s2 === this.graphicalMusicSheet.ParentMusicSheet.getFirstSourceMeasure();
              let l2 = this.rules.MeasureLeftMargin, h2 = 0;
              const c2 = this.getMeasureStartLine();
              if (l2 += this.getLineWidth(i3[0], c2, o2), !this.leadSheet) {
                let t4 = false;
                e3 && this.rules.ShowRhythmAgainAfterPartEndOrFinalBarline && (t4 = true), l2 += this.addBeginInstructions(i3, o2, a2 || t4), h2 += this.addEndInstructions(i3);
              }
              let u2 = 0;
              for (let t4 = 0; t4 < this.numberOfVisibleStaffLines; t4++) u2 = Math.max(u2, i3[t4].minimumStaffEntriesWidth);
              const d2 = this.getMeasureEndLine();
              h2 += this.getLineWidth(i3[0], d2, o2);
              let f2, m2 = this.rules.MeasureLeftMargin;
              if (this.measureListIndex + 1 < this.measureList.length) {
                const t4 = this.measureList[this.measureListIndex + 1];
                f2 = (_a = t4[0]) == null ? void 0 : _a.parentSourceMeasure, (f2 == null ? void 0 : f2.hasBeginInstructions()) && (m2 += this.addBeginInstructions(t4, false, false));
              }
              let p = l2 + h2 + u2;
              ((_c = (_b = i3[0]) == null ? void 0 : _b.parentSourceMeasure) == null ? void 0 : _c.multipleRestMeasures) && (p = this.rules.MultipleRestMeasureDefaultWidth);
              const g = this.currentSystemParams.systemMeasures.length, b = this.currentSystemParams.currentWidth + p + m2 < t3, S = this.rules.NewPageAtXMLNewPageAttribute && s2.printNewPageXml, y = S || this.rules.NewSystemAtXMLNewPageAttribute && s2.printNewPageXml || this.rules.NewSystemAtXMLNewSystemAttribute && s2.printNewSystemXml || g === this.rules.RenderXMeasuresPerLineAkaSystem && g > 0;
              if (o2 || b && !y) {
                if (this.addMeasureToSystem(i3, c2, d2, p, l2, u2, h2), this.updateActiveClefs(s2, i3), this.measureListIndex++, r2) {
                  if (this.rules.MaxSystemToDrawNumber === this.musicSystems.length) return this.finalizeCurrentSystem(i3, !this.rules.StretchLastSystemLine, false), this.musicSystems;
                  this.finalizeCurrentAndCreateNewSystem(i3, !this.rules.StretchLastSystemLine, false);
                }
                e3 = n2;
              } else {
                if (this.rules.MaxSystemToDrawNumber === this.musicSystems.length) return this.finalizeCurrentSystem(i3, false, true, S), this.musicSystems;
                this.finalizeCurrentAndCreateNewSystem(i3, false, true, S);
              }
            }
            if (this.currentSystemParams.systemMeasures.length > 0) {
              if (this.rules.MaxSystemToDrawNumber === this.musicSystems.length) return this.finalizeCurrentSystem(this.measureList[this.measureList.length - 1], !this.rules.StretchLastSystemLine, false), this.musicSystems;
              this.finalizeCurrentAndCreateNewSystem(this.measureList[this.measureList.length - 1], !this.rules.StretchLastSystemLine, false);
            }
            return this.musicSystems;
          }
          calculateSystemYLayout() {
            for (const t3 of this.musicSystems) this.optimizeDistanceBetweenStaffLines(t3);
            this.calculateMusicSystemsRelativePositions();
          }
          setMeasureWidth(t3, e3, i3, s2) {
            for (let n2 = 0, r2 = t3.length; n2 < r2; ++n2) {
              const r3 = t3[n2];
              r3.setWidth(e3), i3 > 0 && (r3.beginInstructionsWidth = i3), s2 > 0 && (r3.endInstructionsWidth = s2);
            }
          }
          finalizeCurrentAndCreateNewSystem(t3, e3 = false, i3 = true, s2 = false) {
            this.finalizeCurrentSystem(t3, e3, i3, s2), this.currentSystemParams = new m(), void 0 !== t3 && this.measureListIndex < this.measureList.length && (this.currentSystemParams.currentSystem = this.initMusicSystem());
          }
          finalizeCurrentSystem(t3, e3 = false, i3 = true, s2 = false) {
            this.currentSystemParams.currentSystem.breaksPage = s2, this.adaptRepetitionLineWithIfNeeded(), void 0 !== t3 && i3 && this.checkAndCreateExtraInstructionMeasure(t3), this.stretchMusicSystem(e3);
          }
          adaptRepetitionLineWithIfNeeded() {
            const t3 = this.currentSystemParams.systemMeasures;
            if (t3.length >= 1) {
              const e3 = this.currentSystemParams.currentSystem.GraphicalMeasures[this.currentSystemParams.currentSystem.GraphicalMeasures.length - 1];
              let i3 = 0;
              const s2 = t3[t3.length - 1];
              s2.endLine === h.SystemLinesEnum.DotsBoldBoldDots && (s2.endLine = h.SystemLinesEnum.DotsThinBold, i3 = e3[0].getLineWidth(h.SystemLinesEnum.DotsBoldBoldDots) / 2 - e3[0].getLineWidth(h.SystemLinesEnum.DotsThinBold)), this.currentSystemParams.currentSystemFixWidth -= i3;
              for (let t4 = 0, s3 = e3.length; t4 < s3; ++t4) e3[t4].endInstructionsWidth -= i3;
            }
          }
          addMeasureToSystem(t3, e3, i3, s2, n2, r2, o2) {
            this.currentSystemParams.systemMeasures.push({ beginLine: e3, endLine: i3 }), this.setMeasureWidth(t3, s2, n2, o2), this.addStaveMeasuresToSystem(t3), this.currentSystemParams.currentWidth += s2, this.currentSystemParams.currentSystemFixWidth += n2 + o2, this.currentSystemParams.currentSystemVarWidth += r2, this.currentSystemParams.systemMeasureIndex++;
          }
          initMusicSystem() {
            const t3 = c.MusicSheetCalculator.symbolFactory.createMusicSystem(this.globalSystemIndex++, this.rules);
            return this.musicSystems.push(t3), this.layoutSystemStaves(t3), t3.createMusicSystemLabel(this.rules.InstrumentLabelTextHeight, this.rules.SystemLabelsRightMargin, this.rules.LabelMarginBorderFactor, 1 === this.musicSystems.length), t3;
          }
          getFullPageSystemWidth() {
            return this.graphicalMusicSheet.ParentMusicSheet.pageWidth - this.rules.PageLeftMargin - this.rules.PageRightMargin - this.rules.SystemLeftMargin - this.rules.SystemRightMargin;
          }
          layoutSystemStaves(t3) {
            const e3 = this.getFullPageSystemWidth(), i3 = t3.PositionAndShape;
            i3.BorderLeft = 0, i3.BorderRight = e3, i3.BorderTop = 0;
            const s2 = [], n2 = this.graphicalMusicSheet.ParentMusicSheet.Instruments;
            for (let t4 = 0, e4 = n2.length; t4 < e4; ++t4) {
              const e5 = n2[t4];
              if (e5.Visible && 0 !== e5.Voices.length) for (let t5 = 0, i4 = e5.Staves.length; t5 < i4; ++t5) {
                const i5 = e5.Staves[t5];
                s2.push(i5);
              }
            }
            let r2 = false;
            if (this.leadSheet) {
              for (let t4 = 0, e4 = s2.length; t4 < e4; ++t4) if (s2[t4].ParentInstrument.LyricVersesNumbers.length > 1) {
                r2 = true;
                break;
              }
            }
            let o2 = 0;
            for (let e4 = 0; e4 < s2.length; e4++) if (this.addStaffLineToMusicSystem(t3, o2, s2[e4]), o2 += this.rules.StaffHeight, e4 + 1 < s2.length) {
              let t4 = 0;
              t4 = this.leadSheet && !r2 ? 2.5 : s2[e4].ParentInstrument === s2[e4 + 1].ParentInstrument ? this.rules.BetweenStaffDistance : this.rules.StaffDistance, o2 += t4;
            }
            i3.BorderBottom = o2;
          }
          addStaffLineToMusicSystem(t3, e3, i3) {
            if (t3) {
              const s2 = c.MusicSheetCalculator.symbolFactory.createStaffLine(t3, i3);
              t3.StaffLines.push(s2);
              const n2 = s2.PositionAndShape, r2 = new a.PointF2D();
              r2.x = 0, n2.BorderRight = t3.PositionAndShape.Size.width, r2.y = e3, n2.RelativePosition = r2, n2.BorderLeft = 0, n2.BorderTop = 0, n2.BorderBottom = this.rules.StaffHeight;
              for (let t4 = 0; t4 < 5; t4++) {
                const e4 = new a.PointF2D();
                e4.x = 0, e4.y = t4 * this.rules.StaffHeight / 4;
                const i4 = new a.PointF2D();
                i4.x = s2.PositionAndShape.Size.width, i4.y = t4 * this.rules.StaffHeight / 4, this.leadSheet && (e4.y = i4.y = 0), s2.StaffLines[t4] = new l.GraphicalLine(e4, i4, this.rules.StaffLineWidth);
              }
            }
          }
          initializeActiveInstructions(t3) {
            const e3 = this.graphicalMusicSheet.ParentMusicSheet.getFirstSourceMeasure();
            if (e3) {
              this.visibleStaffIndices = this.graphicalMusicSheet.getVisibleStavesIndicesFromSourceMeasure(t3);
              for (let t4 = 0, i3 = this.visibleStaffIndices.length; t4 < i3; t4++) {
                const i4 = this.visibleStaffIndices[t4], s2 = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(e3, i4);
                this.activeClefs[t4] = e3.FirstInstructionsStaffEntries[i4].Instructions[0], s2.InitiallyActiveClef = this.activeClefs[t4];
                const n2 = e3.FirstInstructionsStaffEntries[i4].Instructions[1];
                if (n2) {
                  let e4 = r.KeyInstruction.copy(n2);
                  e4 = this.transposeKeyInstruction(e4, s2), this.activeKeys[t4] = e4;
                }
                const o2 = e3.FirstInstructionsStaffEntries[i4].Instructions[2];
                this.activeRhythm[t4] = o2;
              }
            }
          }
          transposeKeyInstruction(t3, e3) {
            const i3 = e3.getTransposedHalftones();
            return i3 !== t3.isTransposedBy && e3.ParentStaff.ParentInstrument.MidiInstrumentId !== u.MidiInstrument.Percussion && void 0 !== c.MusicSheetCalculator.transposeCalculator && c.MusicSheetCalculator.transposeCalculator.transposeKey(t3, i3), t3;
          }
          addBeginInstructions(t3, e3, i3) {
            const s2 = t3.length;
            if (0 === s2) return 0;
            let n2 = 0;
            const r2 = t3[0].parentSourceMeasure, o2 = [];
            for (let a2 = 0; a2 < s2; ++a2) {
              const s3 = t3[a2];
              s3 && o2.push(s3.getVFStave());
              const l2 = this.visibleStaffIndices[a2], h2 = r2.FirstInstructionsStaffEntries[l2], c2 = this.AddInstructionsAtMeasureBegin(h2, s3, a2, i3, e3);
              n2 = Math.max(n2, c2);
            }
            return o2[0].formatBegModifiers(o2), n2;
          }
          addEndInstructions(t3) {
            const e3 = t3.length;
            if (0 === e3) return 0;
            let i3 = 0.5;
            const s2 = t3[0].parentSourceMeasure;
            for (let n2 = 0; n2 < e3; n2++) {
              const e4 = t3[n2], r2 = this.visibleStaffIndices[n2], o2 = s2.LastInstructionsStaffEntries[r2], a2 = this.addInstructionsAtMeasureEnd(o2, e4, t3);
              i3 = Math.max(i3, a2);
            }
            return i3;
          }
          AddInstructionsAtMeasureBegin(t3, e3, i3, s2, a2) {
            var _a;
            let l2, h2, c2, u2 = 0;
            if (t3) for (let e4 = 0, i4 = t3.Instructions.length; e4 < i4; ++e4) {
              const i5 = t3.Instructions[e4];
              i5 instanceof o.ClefInstruction ? l2 = i5 : i5 instanceof r.KeyInstruction ? h2 = i5 : i5 instanceof n.RhythmInstruction && (c2 = i5);
            }
            e3.InitiallyActiveClef = l2 ?? this.activeClefs[i3], a2 && (l2 || (l2 = this.activeClefs[i3]), h2 || (h2 = r.KeyInstruction.copy(this.activeKeys[i3])), s2 && !c2 && (c2 = this.activeRhythm[i3]));
            let d2 = false, f2 = false, m2 = false;
            if (l2 ? (e3.addClefAtBegin(l2), d2 = true) : l2 = this.activeClefs[i3], h2) {
              h2 = this.transposeKeyInstruction(h2, e3);
              const t4 = a2 ? void 0 : this.activeKeys[i3];
              e3.addKeyAtBegin(h2, t4, l2), f2 = true;
            }
            if (void 0 !== c2 && c2.PrintObject && this.rules.RenderTimeSignatures) {
              let t4 = true;
              const i4 = e3.MeasureNumber - 1 - this.rules.MinMeasureToDrawIndex;
              if (e3.MeasureNumber - 1 >= 0 && this.measureList[i4]) {
                const e4 = this.measureList[i4], s3 = (_a = e4[0]) == null ? void 0 : _a.parentSourceMeasure;
                (s3 == null ? void 0 : s3.ImplicitMeasure) && (s3 == null ? void 0 : s3.RhythmPrinted) && (t4 = false);
              }
              t4 && (e3.addRhythmAtBegin(c2), e3.parentSourceMeasure.RhythmPrinted = c2, m2 = true);
            }
            return (d2 || f2 || m2) && (u2 += e3.beginInstructionsWidth, m2 && (u2 += this.rules.RhythmRightMargin)), u2;
          }
          addInstructionsAtMeasureEnd(t3, e3, i3) {
            if (!t3 || !t3.Instructions || 0 === t3.Instructions.length) return 0;
            for (let s2 = 0, n2 = t3.Instructions.length; s2 < n2; ++s2) {
              const n3 = t3.Instructions[s2];
              if (n3 instanceof o.ClefInstruction) {
                const t4 = n3;
                e3.addClefAtEnd(t4);
                for (const s3 of i3) s3 !== e3 && s3.addClefAtEnd(t4, false);
              }
            }
            return this.rules.MeasureRightMargin + e3.endInstructionsWidth;
          }
          updateActiveClefs(t3, e3) {
            for (let i3 = 0, s2 = e3.length; i3 < s2; i3++) {
              const e4 = this.visibleStaffIndices[i3], s3 = t3.FirstInstructionsStaffEntries[e4];
              if (s3) for (let t4 = 0, e5 = s3.Instructions.length; t4 < e5; ++t4) {
                const e6 = s3.Instructions[t4];
                e6 instanceof o.ClefInstruction ? this.activeClefs[i3] = e6 : e6 instanceof r.KeyInstruction ? this.activeKeys[i3] = e6 : e6 instanceof n.RhythmInstruction && (this.activeRhythm[i3] = e6);
              }
              const a2 = t3.getEntriesPerStaff(e4);
              for (let t4 = 0, e5 = a2.length; t4 < e5; ++t4) {
                const e6 = a2[t4];
                if (e6.Instructions) for (let t5 = 0, s4 = e6.Instructions.length; t5 < s4; ++t5) {
                  const s5 = e6.Instructions[t5];
                  s5 instanceof o.ClefInstruction && (this.activeClefs[i3] = s5);
                }
              }
              const l2 = t3.LastInstructionsStaffEntries[e4];
              if (l2) {
                const t4 = l2.Instructions;
                for (let e5 = 0, s4 = t4.length; e5 < s4; ++e5) {
                  const s5 = t4[e5];
                  s5 instanceof o.ClefInstruction && (this.activeClefs[i3] = s5);
                }
              }
            }
          }
          checkAndCreateExtraInstructionMeasure(t3) {
            const e3 = t3[0].parentSourceMeasure.FirstInstructionsStaffEntries, i3 = [];
            for (let s3 = 0, n2 = t3.length; s3 < n2; ++s3) {
              const n3 = t3[s3];
              i3.push(e3[n3.ParentStaff.idInMusicSheet]);
            }
            let s2 = 0;
            for (let t4 = 0, e4 = i3.length; t4 < e4; ++t4) {
              const e5 = i3[t4];
              if (!e5) continue;
              const o2 = e5.Instructions;
              let a2, l2;
              for (let e6 = 0, i4 = o2.length; e6 < i4; ++e6) {
                const i5 = o2[e6];
                i5 instanceof r.KeyInstruction && i5.Key !== this.activeKeys[t4].Key && (a2 = i5), i5 instanceof n.RhythmInstruction && i5 !== this.activeRhythm[t4] && (l2 = i5);
              }
              if (void 0 !== a2 || l2) {
                const e6 = this.addExtraInstructionMeasure(t4, a2, l2);
                s2 = Math.max(s2, e6);
              }
            }
            s2 > 0 && (this.currentSystemParams.systemMeasures.push({ beginLine: h.SystemLinesEnum.None, endLine: h.SystemLinesEnum.None }), this.currentSystemParams.currentWidth += s2, this.currentSystemParams.currentSystemFixWidth += s2);
          }
          addExtraInstructionMeasure(t3, e3, i3) {
            const s2 = this.currentSystemParams.currentSystem, n2 = c.MusicSheetCalculator.symbolFactory.createExtraGraphicalMeasure(s2.StaffLines[t3]);
            [].push(n2), e3 && n2.addKeyAtBegin(e3, this.activeKeys[t3], this.activeClefs[t3]), void 0 !== i3 && i3.PrintObject && n2.addRhythmAtBegin(i3), n2.PositionAndShape.BorderLeft = 0, n2.PositionAndShape.BorderTop = 0, n2.PositionAndShape.BorderBottom = this.rules.StaffHeight;
            const r2 = this.rules.MeasureLeftMargin + n2.beginInstructionsWidth + this.rules.MeasureRightMargin;
            return n2.PositionAndShape.BorderRight = r2, s2.StaffLines[t3].Measures.push(n2), r2;
          }
          addStaveMeasuresToSystem(t3) {
            if (t3[0]) {
              const e3 = [];
              for (let i4 = 0; i4 < t3.length; i4++) e3.push(t3[i4]);
              const i3 = this.currentSystemParams.currentSystem;
              for (let t4 = 0; t4 < this.numberOfVisibleStaffLines; t4++) {
                const s2 = e3[t4];
                i3.StaffLines[t4].Measures.push(s2), s2.ParentStaffLine = i3.StaffLines[t4];
              }
              i3.AddGraphicalMeasures(e3);
            }
          }
          getMeasureStartLine() {
            if (this.thisMeasureBeginsLineRepetition()) {
              const t3 = 0 === this.measureListIndex;
              if (t3 && this.rules.RepetitionAllowFirstMeasureBeginningRepeatBarline) return h.SystemLinesEnum.BoldThinDots;
              const e3 = this.currentSystemParams.IsSystemStartMeasure();
              if (this.previousMeasureEndsLineRepetition() && !e3) return h.SystemLinesEnum.DotsBoldBoldDots;
              if (!t3) return h.SystemLinesEnum.BoldThinDots;
            }
            return h.SystemLinesEnum.None;
          }
          getMeasureEndLine() {
            let t3;
            try {
              if (t3 = this.measureList[this.measureListIndex][0].parentSourceMeasure, this.rules.RenderMultipleRestMeasures && t3.multipleRestMeasures > 1) {
                const e3 = Math.min(this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length - 1, t3.measureListIndex + t3.multipleRestMeasures - 1);
                t3 = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[e3];
              }
            } finally {
            }
            return this.nextMeasureBeginsLineRepetition() && this.thisMeasureEndsLineRepetition() ? h.SystemLinesEnum.DotsBoldBoldDots : this.thisMeasureEndsLineRepetition() ? h.SystemLinesEnum.DotsThinBold : this.nextMeasureHasKeyInstructionChange() || this.thisMeasureEndsWordRepetition() || this.nextMeasureBeginsWordRepetition() ? h.SystemLinesEnum.DoubleThin : t3 && void 0 !== t3.endingBarStyleEnum ? t3.endingBarStyleEnum : h.SystemLinesEnum.SingleThin;
          }
          getLineWidth(t3, e3, i3) {
            let s2 = t3.getLineWidth(e3);
            return e3 === h.SystemLinesEnum.DotsBoldBoldDots && (s2 /= 2), i3 && e3 === h.SystemLinesEnum.BoldThinDots && (s2 += this.rules.DistanceBetweenLastInstructionAndRepetitionBarline), s2;
          }
          previousMeasureEndsLineRepetition() {
            if (0 === this.measureListIndex) return false;
            for (let t3 = 0, e3 = this.measureList[this.measureListIndex - 1].length; t3 < e3; ++t3) if (this.measureList[this.measureListIndex - 1][t3].endsWithLineRepetition()) return true;
            return false;
          }
          thisMeasureBeginsLineRepetition() {
            for (let t3 = 0, e3 = this.measureList[this.measureListIndex].length; t3 < e3; ++t3) if (this.measureList[this.measureListIndex][t3].beginsWithLineRepetition()) return true;
            return false;
          }
          nextMeasureBeginsLineRepetition() {
            const t3 = this.measureListIndex + 1;
            if (t3 >= this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length || !this.measureList[t3]) return false;
            for (let e3 = 0, i3 = this.measureList[t3].length; e3 < i3; ++e3) if (this.measureList[t3][e3].beginsWithLineRepetition()) return true;
            return false;
          }
          thisMeasureEndsLineRepetition() {
            var _a;
            for (let t3 = 0, e3 = this.measureList[this.measureListIndex].length; t3 < e3; ++t3) {
              const e4 = this.measureList[this.measureListIndex][t3];
              if (e4.endsWithLineRepetition()) return true;
              if ((_a = e4.parentSourceMeasure) == null ? void 0 : _a.isReducedToMultiRest) {
                const t4 = this.graphicalMusicSheet.ParentMusicSheet;
                let i3 = e4.parentSourceMeasure;
                const s2 = t4.SourceMeasures.indexOf(i3);
                let n2 = i3.multipleRestMeasureNumber;
                for (let e5 = s2 + 1; e5 < t4.SourceMeasures.length; e5++) {
                  const s3 = t4.SourceMeasures[e5];
                  if (!(s3.multipleRestMeasureNumber >= n2)) break;
                  i3 = s3, n2 = s3.multipleRestMeasureNumber;
                }
                return i3.endsWithLineRepetition();
              }
            }
            return false;
          }
          nextMeasureBeginsWordRepetition() {
            const t3 = this.measureListIndex + 1;
            if (t3 >= this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length || t3 > this.measureList.length - 1) return false;
            for (let e3 = 0, i3 = this.measureList[t3].length; e3 < i3; ++e3) if (this.measureList[t3][e3].beginsWithWordRepetition()) return true;
            return false;
          }
          thisMeasureEndsWordRepetition() {
            for (let t3 = 0, e3 = this.measureList[this.measureListIndex].length; t3 < e3; ++t3) if (this.measureList[this.measureListIndex][t3].endsWithWordRepetition()) return true;
            return false;
          }
          nextMeasureHasKeyInstructionChange() {
            return void 0 !== this.getNextMeasureKeyInstruction();
          }
          getNextMeasureKeyInstruction() {
            var _a;
            if (this.measureListIndex < this.measureList.length - 1) for (let t3 = 0; t3 < this.measureList[this.measureListIndex].length; t3++) {
              const e3 = (_a = this.measureList[this.measureListIndex + 1][t3]) == null ? void 0 : _a.parentSourceMeasure;
              if (!e3) return;
              return e3.getKeyInstruction(this.visibleStaffIndices[t3]);
            }
          }
          calculateXScalingFactor(t3, e3) {
            return Math.abs(e3 - 0) < 1e-5 || Math.abs(t3 - 0) < 1e-5 ? 1 : (this.currentSystemParams.currentSystem.StaffLines[0].PositionAndShape.Size.width - t3) / e3;
          }
          stretchMusicSystem(t3) {
            let e3 = this.calculateXScalingFactor(this.currentSystemParams.currentSystemFixWidth, this.currentSystemParams.currentSystemVarWidth);
            t3 && (e3 = Math.min(e3, this.rules.LastSystemMaxScalingFactor));
            const i3 = this.currentSystemParams.currentSystem;
            for (let t4 = 0, s2 = i3.StaffLines.length; t4 < s2; ++t4) {
              const s3 = i3.StaffLines[t4];
              let n2 = 0;
              for (let t5 = 0; t5 < s3.Measures.length; t5++) {
                const r2 = s3.Measures[t5];
                r2.setPositionInStaffline(n2);
                const o2 = r2.beginInstructionsWidth;
                if (r2.setWidth(o2 + r2.minimumStaffEntriesWidth * e3 + r2.endInstructionsWidth), t5 < this.currentSystemParams.systemMeasures.length) {
                  const e4 = this.currentSystemParams.systemMeasures[t5].beginLine, s4 = r2.getLineWidth(h.SystemLinesEnum.BoldThinDots);
                  if (e4 === h.SystemLinesEnum.BoldThinDots) {
                    let o3 = n2;
                    0 === t5 && (o3 = n2 + r2.beginInstructionsWidth - s4), i3.createVerticalLineForMeasure(o3, s4, e4, f.SystemLinePosition.MeasureBegin, t5, r2);
                  }
                }
                if (r2.staffEntriesScaleFactor = e3, r2.layoutSymbols(), !(t5 + 1 < this.currentSystemParams.systemMeasures.length && this.currentSystemParams.systemMeasures[t5 + 1].beginLine === h.SystemLinesEnum.BoldThinDots)) {
                  let e4 = h.SystemLinesEnum.SingleThin;
                  t5 < this.currentSystemParams.systemMeasures.length && (e4 = this.currentSystemParams.systemMeasures[t5].endLine);
                  const s4 = r2.getLineWidth(e4);
                  let n3 = r2.PositionAndShape.RelativePosition.x + r2.PositionAndShape.BorderRight - s4;
                  e4 === h.SystemLinesEnum.DotsBoldBoldDots && (n3 -= s4 / 2), i3.createVerticalLineForMeasure(n3, s4, e4, f.SystemLinePosition.MeasureEnd, t5, r2);
                }
                n2 = r2.PositionAndShape.RelativePosition.x + r2.PositionAndShape.BorderRight;
              }
            }
            t3 && this.decreaseMusicSystemBorders();
          }
          decreaseMusicSystemBorders() {
            const t3 = this.currentSystemParams.currentSystem, e3 = d.CollectionUtil.last(t3.StaffLines[0].Measures).PositionAndShape, i3 = e3.RelativePosition.x + e3.Size.width;
            for (let e4 = 0, s2 = t3.StaffLines.length; e4 < s2; ++e4) {
              const s3 = t3.StaffLines[e4];
              s3.PositionAndShape.BorderRight = i3;
              for (let t4 = 0, e5 = s3.StaffLines.length; t4 < e5; ++t4) {
                const e6 = s3.StaffLines[t4];
                e6.End = new a.PointF2D(i3, e6.End.y);
              }
            }
            t3.PositionAndShape.BorderRight = i3 + this.currentSystemParams.maxLabelLength + this.rules.SystemLabelsRightMargin;
          }
          updateStaffLinesRelativePosition(t3, e3, i3) {
            for (let s2 = e3; s2 < t3.StaffLines.length; s2++) t3.StaffLines[s2].PositionAndShape.RelativePosition.y = i3;
            t3.PositionAndShape.BorderBottom += i3;
          }
          createMusicPage() {
            const t3 = new s.GraphicalMusicPage(this.graphicalMusicSheet);
            return this.graphicalMusicSheet.MusicPages.push(t3), t3.PageNumber = this.graphicalMusicSheet.MusicPages.length, t3.PositionAndShape.BorderLeft = 0, t3.PositionAndShape.BorderRight = this.graphicalMusicSheet.ParentMusicSheet.pageWidth, t3.PositionAndShape.BorderTop = 0, t3.PositionAndShape.BorderBottom = this.rules.PageHeight, t3.PositionAndShape.RelativePosition = new a.PointF2D(0, 0), t3;
          }
          addSystemToPage(t3, e3) {
            t3.MusicSystems.push(e3), e3.Parent = t3;
          }
          optimizeDistanceBetweenStaffLines(t3) {
            if (!t3.checkStaffEntriesForStaffEntryLink()) for (let e4 = 0; e4 < t3.StaffLines.length - 1; e4++) {
              const i4 = t3.StaffLines[e4].BottomLine, s2 = t3.StaffLines[e4 + 1].SkyLine;
              let n2 = 0;
              for (let t4 = 0; t4 < i4.length; t4++) {
                const e5 = i4[t4], r3 = Math.max(0, t4 - 6), o2 = Math.min(s2.length - 1, t4 + 6);
                let a2 = 0;
                for (let t5 = r3; t5 <= o2; t5++) a2 = Math.min(a2, s2[t5]);
                const l2 = e5 - a2;
                n2 = Math.max(l2, n2);
              }
              n2 += this.rules.MinSkyBottomDistBetweenStaves, n2 = Math.max(n2, this.rules.StaffHeight + this.rules.MinimumStaffLineDistance);
              const r2 = n2 + t3.StaffLines[e4].PositionAndShape.RelativePosition.y;
              this.updateStaffLinesRelativePosition(t3, e4 + 1, r2);
            }
            const e3 = t3.StaffLines[0];
            t3.PositionAndShape.BorderTop = e3.PositionAndShape.RelativePosition.y + e3.PositionAndShape.BorderTop;
            const i3 = t3.StaffLines[t3.StaffLines.length - 1];
            t3.PositionAndShape.BorderBottom = i3.PositionAndShape.RelativePosition.y + i3.PositionAndShape.BorderBottom;
          }
          calculateMusicSystemsRelativePositions() {
            let t3 = this.createMusicPage(), e3 = 0, i3 = this.musicSystems[0], s2 = 0;
            for (let n2 = 0; n2 < this.musicSystems.length; n2++) if (i3 = this.musicSystems[n2], 0 === t3.MusicSystems.length) {
              this.addSystemToPage(t3, i3), e3 = this.rules.CompactMode ? this.rules.PageTopMarginNarrow : this.rules.PageTopMargin, 1 === this.graphicalMusicSheet.MusicPages.length && this.rules.RenderTitle && (e3 += this.rules.TitleTopDistance + this.rules.SheetTitleHeight + this.rules.TitleBottomDistance);
              const n3 = new a.PointF2D(this.rules.PageLeftMargin + this.rules.SystemLeftMargin, e3);
              i3.PositionAndShape.RelativePosition = n3, e3 + i3.PositionAndShape.BorderBottom > this.rules.PageHeight - this.rules.PageBottomMargin && (s2++, s2 <= 4 && console.log(`warning: could not fit a single system on page ${t3.PageNumber} and measure number ${i3.GraphicalMeasures[0][0].MeasureNumber}.
                            The PageFormat may be too small for this sheet."
                            Will not give further warnings for all pages, only total.`));
            } else {
              const s3 = this.musicSystems[n2 - 1], r2 = s3.StaffLines[s3.StaffLines.length - 1], o2 = r2.PositionAndShape;
              let l2 = this.findRequiredDistanceWithSkyBottomLine(s3, i3);
              l2 += this.rules.MinSkyBottomDistBetweenSystems, l2 = Math.max(l2, this.rules.MinimumDistanceBetweenSystems + r2.StaffHeight);
              const h2 = e3 + o2.RelativePosition.y + l2, c2 = h2 + i3.PositionAndShape.BorderMarginBottom;
              if (this.rules.NewPageAtXMLNewPageAttribute && s3.breaksPage || !(c2 < this.rules.PageHeight - this.rules.PageBottomMargin)) {
                t3 = this.createMusicPage(), n2 -= 1;
                continue;
              }
              {
                this.addSystemToPage(t3, i3), e3 = h2;
                const s4 = new a.PointF2D(this.rules.PageLeftMargin + this.rules.SystemLeftMargin, e3);
                i3.PositionAndShape.RelativePosition = s4;
              }
            }
            s2 > 0 && console.log(`total amount of pages that couldn't fit a single music system: ${s2} of ${t3.PageNumber}`);
          }
          findRequiredDistanceWithSkyBottomLine(t3, e3) {
            const i3 = t3.StaffLines[t3.StaffLines.length - 1], s2 = e3.StaffLines[0], n2 = i3.BottomLine, r2 = s2.SkyLine, o2 = i3.PositionAndShape, a2 = s2.PositionAndShape, l2 = 1 / this.rules.SamplingUnit;
            let h2 = 0;
            for (let t4 = 0; t4 < n2.length; t4++) {
              const e4 = n2[t4], i4 = t4 + Math.round((o2.RelativePosition.x - a2.RelativePosition.x) * l2);
              if (i4 < 0) continue;
              if (i4 >= r2.length) break;
              const s3 = Math.max(0, i4 - 6), c2 = Math.min(r2.length - 1, i4 + 6);
              let u2 = 0;
              for (let t5 = s3; t5 <= c2; t5++) u2 = Math.min(u2, r2[t5]);
              const d2 = e4 - u2;
              h2 = Math.max(d2, h2);
            }
            return 0 === h2 && (h2 = o2.BorderBottom - a2.BorderTop), h2;
          }
        };
        class m {
          constructor() {
            this.systemMeasures = [], this.systemMeasureIndex = 0, this.currentWidth = 0, this.currentSystemFixWidth = 0, this.currentSystemVarWidth = 0, this.maxLabelLength = 0;
          }
          IsSystemStartMeasure() {
            return 0 === this.systemMeasureIndex;
          }
        }
        e2.SystemBuildParameters = m, e2.MeasureBuildParameters = class {
        };
      }, 7098: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowInstrumentBrace = void 0;
        var n = s(i2(3206)).default.Flow;
        const r = i2(3109);
        class o extends r.VexFlowInstrumentBracket {
          constructor(t3, e3, i3 = 0) {
            super(t3, e3, i3), this.vexflowConnector.setType(n.StaveConnector.type.BRACE);
          }
        }
        e2.VexFlowInstrumentBrace = o;
      }, 7103: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.OpenSheetMusicDisplay = void 0;
        const n = i2(3902), r = i2(806), o = i2(9099), a = i2(8724), l = i2(7921), h = i2(9479), c = i2(9436), u = i2(9834), d = i2(6597), f = i2(6888), m = i2(3173), p = s(i2(3065)), g = i2(3661), b = i2(4146), S = i2(4434), y = i2(624), E = i2(9713), x = i2(6362), v = i2(3263), _ = i2(2683), M = i2(8233);
        class w {
          constructor(t3, e3 = y.OSMDOptions.OSMDOptionsStandard()) {
            if (this.version = "1.9.0-release", this.cursorsOptions = [], this.cursors = [], this.zoom = 1, this.zoomUpdated = false, this.loadUrlTimeout = 5e3, "string" == typeof t3 ? this.container = document.getElementById(t3) : t3 && "appendChild" in t3 && (this.container = t3), !this.container) throw new Error("Please pass a valid div container to OpenSheetMusicDisplay");
            void 0 === e3.autoResize && (e3.autoResize = true), this.backendType = y.BackendType.SVG, this.setOptions(e3);
          }
          get cursor() {
            return this.cursors[0];
          }
          get Cursor() {
            return this.cursor;
          }
          load(t3, e3 = "Untitled Score") {
            if (this.reset(), "string" == typeof t3) {
              const e4 = t3, i4 = this;
              if (e4.startsWith("PK")) return p.default.debug("[OSMD] This is a zip file, unpack it first: " + e4), f.MXLHelper.MXLtoXMLstring(e4).then((t4) => i4.load(t4), (t4) => {
                throw p.default.debug(t4), new Error("OpenSheetMusicDisplay: Invalid MXL file");
              });
              if (e4.startsWith("")) return p.default.debug("[OSMD] UTF with BOM detected, truncate first 3 bytes and pass along: " + e4), i4.load(e4.substring(3));
              let s3 = e4;
              if (/^\s/.test(s3) && (s3 = s3.trim()), s3.startsWith("<?xml")) {
                const e5 = this.OnXMLRead(s3);
                p.default.debug("[OSMD] Finally parsing XML content, length: " + e5.length), t3 = new DOMParser().parseFromString(e5, "application/xml");
              } else {
                if (s3.length < 2083) return p.default.debug("[OSMD] Retrieve the file at the given URL: " + s3), m.AJAX.ajax(s3, this.loadUrlTimeout).then((t4) => i4.load(t4), (t4) => {
                  throw t4;
                });
                console.error("[OSMD] osmd.load(string): Could not process string. Did not find <?xml at beginning.");
              }
            }
            if (!t3 || !t3.nodeName) return Promise.reject(new Error("OpenSheetMusicDisplay: The document which was provided is invalid"));
            const i3 = t3, s2 = i3.childNodes;
            let r2;
            p.default.debug("[OSMD] load(), Document url: " + i3.URL);
            for (let t4 = 0, e4 = s2.length; t4 < e4; t4 += 1) {
              const e5 = s2[t4];
              if (e5.nodeType === Node.ELEMENT_NODE && "score-partwise" === e5.nodeName.toLowerCase()) {
                r2 = e5;
                break;
              }
            }
            if (!r2) return console.error("Could not parse MusicXML, no valid partwise element found"), Promise.reject(new Error("OpenSheetMusicDisplay: Document is not a valid 'partwise' MusicXML"));
            const a2 = new n.IXmlElement(r2), l2 = new o.MusicSheetReader(void 0, this.rules);
            return this.sheet = l2.createMusicSheet(a2, e3), void 0 === this.sheet ? Promise.reject(new Error("given music sheet was incomplete or could not be loaded.")) : (p.default.info(`[OSMD] Loaded sheet ${this.sheet.TitleString} successfully.`), this.needBackendUpdate = true, this.updateGraphic(), Promise.resolve({}));
          }
          updateGraphic() {
            const t3 = new r.VexFlowMusicSheetCalculator(this.rules);
            this.graphic = new a.GraphicalMusicSheet(this.sheet, t3), this.drawingParameters.drawCursors && this.cursors.forEach((t4) => {
              t4.init(this.sheet.MusicPartManager, this.graphic);
            }), this.drawingParameters.DrawingParametersEnum === b.DrawingParametersEnum.leadsheet && (this.graphic.LeadSheet = true);
          }
          render() {
            var _a;
            if (!this.graphic) throw new Error("OSMD: Before render, please load a MusicXML file");
            (_a = this.drawer) == null ? void 0 : _a.clear(), this.Sheet.SourceMeasures[0].ImplicitMeasure && (this.rules.MinMeasureToDrawNumber > 1 && (this.rules.MinMeasureToDrawIndex = this.rules.MinMeasureToDrawNumber), this.rules.MaxMeasureToDrawNumber > 0 && (this.rules.MaxMeasureToDrawIndex = this.rules.MaxMeasureToDrawNumber));
            let t3 = this.container.offsetWidth;
            this.rules.RenderSingleHorizontalStaffline && (t3 = this.rules.SheetMaximumWidth), this.sheet.pageWidth = t3 / this.zoom / 10, this.rules.PageFormat && !this.rules.PageFormat.IsUndefined ? (this.rules.PageHeight = this.sheet.pageWidth / this.rules.PageFormat.aspectRatio, p.default.debug("[OSMD] PageHeight: " + this.rules.PageHeight)) : (p.default.debug("[OSMD] endless/undefined pageformat, id: " + this.rules.PageFormat.idString), this.rules.PageHeight = 100001), this.graphic.reCalculate(), this.drawingParameters.drawCursors && (this.graphic.Cursors.length = 0), this.createOrRefreshRenderBackend(), this.needBackendUpdate = false, this.drawer.setZoom(this.zoom), this.drawer.drawSheet(this.graphic), this.enableOrDisableCursors(this.drawingParameters.drawCursors), this.drawingParameters.drawCursors && this.cursors.forEach((t4) => {
              t4.update();
            }), this.zoomUpdated = false, this.rules.RenderCount++;
          }
          createOrRefreshRenderBackend() {
            if (this.drawer && this.drawer.Backends) {
              this.drawer.Backends[0] && this.drawer.Backends[0].removeAllChildrenFromContainer(this.container);
              for (const t4 of this.drawer.Backends) t4.free();
              this.drawer.Backends.clear();
            }
            this.drawingParameters.Rules = this.rules, this.drawer = new h.VexFlowMusicSheetDrawer(this.drawingParameters), this.drawer.drawableBoundingBoxElement = this.DrawBoundingBox, this.drawer.bottomLineVisible = this.drawBottomLine, this.drawer.skyLineVisible = this.drawSkyLine;
            let t3, e3 = this.container.offsetWidth;
            this.rules.RenderSingleHorizontalStaffline && (e3 = 10 * (this.EngravingRules.PageLeftMargin + this.graphic.MusicPages[0].PositionAndShape.Size.width + this.EngravingRules.PageRightMargin) * this.zoom);
            const i3 = 32767;
            for (const s2 of this.graphic.MusicPages) {
              if (s2.PageNumber > this.rules.MaxPageToDrawNumber) break;
              const n2 = this.createBackend(this.backendType, s2), r2 = " exceeds CanvasBackend limit of 32767. Cutting off score.";
              n2.getOSMDBackendType() === y.BackendType.Canvas && e3 > i3 && (p.default.warn("[OSMD] Warning: width of " + e3 + r2), e3 = i3), this.rules.PageFormat && !this.rules.PageFormat.IsUndefined ? t3 = e3 / this.rules.PageFormat.aspectRatio : (t3 = s2.PositionAndShape.Size.height, t3 += this.rules.PageBottomMargin, n2.getOSMDBackendType() === y.BackendType.Canvas && (t3 += 0.1), t3 += s2.PositionAndShape.BorderTop, this.rules.RenderTitle && (t3 += this.rules.TitleTopDistance), t3 *= 10 * this.zoom), n2.getOSMDBackendType() === y.BackendType.Canvas && t3 > i3 && (p.default.warn("[OSMD] Warning: height of " + t3 + r2), t3 = Math.min(t3, i3)), n2.resize(e3, t3), n2.clear(), n2.getContext().setFillStyle(this.rules.DefaultColorMusic), n2.getContext().setStrokeStyle(this.rules.DefaultColorMusic), this.drawer.Backends.push(n2), this.graphic.drawer = this.drawer;
            }
          }
          exportSVG() {
            var _a;
            for (const t3 of (_a = this.drawer) == null ? void 0 : _a.Backends) t3 instanceof c.SvgVexFlowBackend && t3.export();
          }
          IsReadyToRender() {
            return void 0 !== this.graphic;
          }
          clear() {
            var _a;
            (_a = this.drawer) == null ? void 0 : _a.clear(), this.reset();
          }
          setOptions(t3) {
            if (this.rules || (this.rules = new E.EngravingRules()), this.drawingParameters || t3.drawingParameters ? t3.drawingParameters && (this.drawingParameters ? this.drawingParameters.DrawingParametersEnum = b.DrawingParametersEnum[t3.drawingParameters.toLowerCase()] : this.drawingParameters = new g.DrawingParameters(b.DrawingParametersEnum[t3.drawingParameters], this.rules)) : this.drawingParameters = new g.DrawingParameters(b.DrawingParametersEnum.default, this.rules), null == t3) return void p.default.warn("warning: osmd.setOptions() called without an options parameter, has no effect.\nexample usage: osmd.setOptions({drawCredits: false, drawPartNames: false})");
            this.OnXMLRead = function(t4) {
              return t4;
            }, t3.onXMLRead && (this.OnXMLRead = t3.onXMLRead);
            let e3 = !this.drawer || !this.drawer.Backends || this.drawer.Backends.length < 1;
            if (void 0 !== t3.backend) {
              const i4 = y.OSMDOptions.BackendTypeFromString(t3.backend);
              e3 = e3 || this.backendType !== i4, this.backendType = i4;
            }
            this.needBackendUpdate = e3, void 0 !== t3.autoBeam && (this.rules.AutoBeamNotes = t3.autoBeam);
            const i3 = t3.autoBeamOptions;
            if (i3 && (void 0 === i3.maintain_stem_directions && (i3.maintain_stem_directions = false), this.rules.AutoBeamOptions = i3, i3.groups && i3.groups.length)) {
              for (const t4 of i3.groups) if (2 !== t4.length) throw new Error("Each fraction in autoBeamOptions.groups must be of length 2, e.g. [3,4] for beaming three fourths");
            }
            void 0 !== t3.percussionOneLineCutoff && (this.rules.PercussionOneLineCutoff = t3.percussionOneLineCutoff), 0 !== this.rules.PercussionOneLineCutoff && void 0 !== t3.percussionForceVoicesOneLineCutoff && (this.rules.PercussionForceVoicesOneLineCutoff = t3.percussionForceVoicesOneLineCutoff), void 0 !== t3.alignRests && (this.rules.AlignRests = t3.alignRests), void 0 !== t3.coloringMode && this.setColoringMode(t3), void 0 !== t3.coloringEnabled && (this.rules.ColoringEnabled = t3.coloringEnabled), void 0 !== t3.colorStemsLikeNoteheads && (this.rules.ColorStemsLikeNoteheads = t3.colorStemsLikeNoteheads), t3.disableCursor && (this.drawingParameters.drawCursors = false), t3.drawHiddenNotes && (this.drawingParameters.drawHiddenNotes = true), void 0 !== t3.drawCredits && (this.drawingParameters.DrawCredits = t3.drawCredits), void 0 !== t3.drawComposer && (this.drawingParameters.DrawComposer = t3.drawComposer), void 0 !== t3.drawTitle && (this.drawingParameters.DrawTitle = t3.drawTitle), void 0 !== t3.drawSubtitle && (this.drawingParameters.DrawSubtitle = t3.drawSubtitle), void 0 !== t3.drawLyricist && (this.drawingParameters.DrawLyricist = t3.drawLyricist), void 0 !== t3.drawMetronomeMarks && (this.rules.MetronomeMarksDrawn = t3.drawMetronomeMarks), void 0 !== t3.drawPartNames && (this.drawingParameters.DrawPartNames = t3.drawPartNames, t3.drawPartAbbreviations || (this.rules.RenderPartAbbreviations = t3.drawPartNames)), void 0 !== t3.drawPartAbbreviations && (this.rules.RenderPartAbbreviations = t3.drawPartAbbreviations), false === t3.drawFingerings && (this.rules.RenderFingerings = false), void 0 !== t3.drawMeasureNumbers && (this.rules.RenderMeasureNumbers = t3.drawMeasureNumbers), t3.drawMeasureNumbersOnlyAtSystemStart && (this.rules.RenderMeasureNumbersOnlyAtSystemStart = t3.drawMeasureNumbersOnlyAtSystemStart), void 0 !== t3.drawLyrics && (this.rules.RenderLyrics = t3.drawLyrics), void 0 !== t3.drawTimeSignatures && (this.rules.RenderTimeSignatures = t3.drawTimeSignatures), void 0 !== t3.drawSlurs && (this.rules.RenderSlurs = t3.drawSlurs), void 0 !== t3.measureNumberInterval && (this.rules.MeasureNumberLabelOffset = t3.measureNumberInterval), void 0 !== t3.useXMLMeasureNumbers && (this.rules.UseXMLMeasureNumbers = t3.useXMLMeasureNumbers), void 0 !== t3.fingeringPosition && (this.rules.FingeringPosition = x.AbstractExpression.PlacementEnumFromString(t3.fingeringPosition)), void 0 !== t3.fingeringInsideStafflines && (this.rules.FingeringInsideStafflines = t3.fingeringInsideStafflines), void 0 !== t3.newSystemFromXML && (this.rules.NewSystemAtXMLNewSystemAttribute = t3.newSystemFromXML), void 0 !== t3.newSystemFromNewPageInXML && (this.rules.NewSystemAtXMLNewPageAttribute = t3.newSystemFromNewPageInXML), void 0 !== t3.newPageFromXML && (this.rules.NewPageAtXMLNewPageAttribute = t3.newPageFromXML), void 0 !== t3.fillEmptyMeasuresWithWholeRest && (this.rules.FillEmptyMeasuresWithWholeRest = t3.fillEmptyMeasuresWithWholeRest), void 0 !== t3.followCursor && (this.FollowCursor = t3.followCursor), void 0 !== t3.setWantedStemDirectionByXml && (this.rules.SetWantedStemDirectionByXml = t3.setWantedStemDirectionByXml), t3.darkMode ? (this.rules.applyDefaultColorMusic("#FFFFFF"), this.rules.PageBackgroundColor = "#000000") : false === t3.darkMode && (this.rules.applyDefaultColorMusic("#000000"), this.rules.PageBackgroundColor = void 0), t3.defaultColorMusic && this.rules.applyDefaultColorMusic(t3.defaultColorMusic), t3.defaultColorNotehead && (this.rules.DefaultColorNotehead = t3.defaultColorNotehead), t3.defaultColorRest && (this.rules.DefaultColorRest = t3.defaultColorRest), t3.defaultColorStem && (this.rules.DefaultColorStem = t3.defaultColorStem), t3.defaultColorLabel && (this.rules.DefaultColorLabel = t3.defaultColorLabel), t3.defaultColorTitle && (this.rules.DefaultColorTitle = t3.defaultColorTitle), t3.defaultFontFamily && (this.rules.DefaultFontFamily = t3.defaultFontFamily), t3.defaultFontStyle && (this.rules.DefaultFontStyle = t3.defaultFontStyle), t3.drawUpToMeasureNumber >= 0 && (this.rules.MaxMeasureToDrawIndex = Math.max(t3.drawUpToMeasureNumber - 1, 0), this.rules.MaxMeasureToDrawNumber = t3.drawUpToMeasureNumber), t3.drawFromMeasureNumber >= 0 && (this.rules.MinMeasureToDrawIndex = Math.max(t3.drawFromMeasureNumber - 1, 0), this.rules.MinMeasureToDrawNumber = t3.drawFromMeasureNumber), t3.drawUpToPageNumber && (this.rules.MaxPageToDrawNumber = t3.drawUpToPageNumber), t3.drawUpToSystemNumber && (this.rules.MaxSystemToDrawNumber = t3.drawUpToSystemNumber), t3.tupletsRatioed && (this.rules.TupletsRatioed = true), t3.tupletsBracketed && (this.rules.TupletsBracketed = true), t3.tripletsBracketed && (this.rules.TripletsBracketed = true), t3.autoResize ? (this.resizeHandlerAttached || this.autoResize(), this.autoResizeEnabled = true) : false === t3.autoResize && (this.autoResizeEnabled = false), void 0 !== t3.pageFormat && this.setPageFormat(t3.pageFormat), void 0 !== t3.pageBackgroundColor && (this.rules.PageBackgroundColor = t3.pageBackgroundColor), void 0 !== t3.renderSingleHorizontalStaffline && (this.rules.RenderSingleHorizontalStaffline = t3.renderSingleHorizontalStaffline), void 0 !== t3.spacingFactorSoftmax && (this.rules.SoftmaxFactorVexFlow = t3.spacingFactorSoftmax), void 0 !== t3.spacingBetweenTextLines && (this.rules.SpacingBetweenTextLines = t3.spacingBetweenTextLines), void 0 !== t3.stretchLastSystemLine && (this.rules.StretchLastSystemLine = t3.stretchLastSystemLine), void 0 !== t3.autoGenerateMultipleRestMeasuresFromRestMeasures && (this.rules.AutoGenerateMultipleRestMeasuresFromRestMeasures = t3.autoGenerateMultipleRestMeasuresFromRestMeasures), void 0 !== t3.cursorsOptions ? this.cursorsOptions = t3.cursorsOptions : this.cursorsOptions = [{ type: y.CursorType.Standard, color: this.EngravingRules.DefaultColorCursor, alpha: 0.5, follow: true }], void 0 !== t3.preferredSkyBottomLineBatchCalculatorBackend && (this.rules.PreferredSkyBottomLineBatchCalculatorBackend = t3.preferredSkyBottomLineBatchCalculatorBackend), void 0 !== t3.skyBottomLineBatchMinMeasures && (this.rules.SkyBottomLineBatchMinMeasures = t3.skyBottomLineBatchMinMeasures);
          }
          setColoringMode(t3) {
            if (t3.coloringMode === S.ColoringModes.XML) return void (this.rules.ColoringMode = S.ColoringModes.XML);
            const e3 = [M.NoteEnum.C, M.NoteEnum.D, M.NoteEnum.E, M.NoteEnum.F, M.NoteEnum.G, M.NoteEnum.A, M.NoteEnum.B];
            let i3;
            if (t3.coloringMode === S.ColoringModes.CustomColorSet) {
              if (!t3.coloringSetCustom || 8 !== t3.coloringSetCustom.length) throw new Error("Invalid amount of colors: With coloringModes.customColorSet, you have to provide a coloringSetCustom parameter (array) with 8 strings (C to B, rest note).");
              for (const e4 of t3.coloringSetCustom) if (!/^\#[0-9a-fA-F]{6}$/.test(e4)) throw new Error("One of the color strings in options.coloringSetCustom was not a valid HTML Hex color:\n" + e4);
              i3 = t3.coloringSetCustom;
            } else if (t3.coloringMode === S.ColoringModes.AutoColoring) {
              i3 = [];
              const t4 = Object.keys(_.AutoColorSet);
              for (let e4 = 0; e4 < t4.length; e4++) i3.push(_.AutoColorSet[t4[e4]]);
            }
            const s2 = new v.Dictionary();
            for (let t4 = 0; t4 < e3.length; t4++) s2.setValue(e3[t4], i3[t4]);
            s2.setValue(-1, i3.last()), this.rules.ColoringSetCurrent = s2, this.rules.ColoringMode = t3.coloringMode;
          }
          setLogLevel(t3) {
            switch (t3) {
              case "trace":
                p.default.setLevel(p.default.levels.TRACE);
                break;
              case "debug":
                p.default.setLevel(p.default.levels.DEBUG);
                break;
              case "info":
                p.default.setLevel(p.default.levels.INFO);
                break;
              case "warn":
                p.default.setLevel(p.default.levels.WARN);
                break;
              case "error":
                p.default.setLevel(p.default.levels.ERROR);
                break;
              case "silent":
                p.default.setLevel(p.default.levels.SILENT);
                break;
              default:
                p.default.warn(`Could not set log level to ${t3}. Using warn instead.`), p.default.setLevel(p.default.levels.WARN);
            }
          }
          getLogLevel() {
            return p.default.getLevel();
          }
          reset() {
            this.drawingParameters.drawCursors && this.cursors.forEach((t3) => {
              t3.hide();
            }), this.sheet = void 0, this.graphic = void 0, this.zoom = 1, this.rules.RenderCount = 0;
          }
          autoResize() {
            const t3 = this;
            this.handleResize(() => {
            }, () => {
              var _a;
              ((_a = this.graphic) == null ? void 0 : _a.GetCalculator) instanceof r.VexFlowMusicSheetCalculator && (this.graphic.GetCalculator.beamsNeedUpdate = true), t3.IsReadyToRender() && t3.render();
            });
          }
          handleResize(t3, e3) {
            let i3, s2;
            const n2 = this;
            function r2() {
              n2.AutoResizeEnabled && (i3 = (/* @__PURE__ */ new Date()).getTime(), s2 || (t3(), i3 = (/* @__PURE__ */ new Date()).getTime(), s2 = window.setTimeout(o2, 200)));
            }
            function o2() {
              s2 = void 0, window.clearTimeout(s2), (/* @__PURE__ */ new Date()).getTime() - i3 < 200 ? s2 = window.setTimeout(o2, 200) : e3();
            }
            window.attachEvent ? window.attachEvent("onresize", r2) : window.addEventListener("resize", r2), this.resizeHandlerAttached = true, window.setTimeout(t3, 0), window.setTimeout(e3, 1);
          }
          enableOrDisableCursors(t3) {
            var _a, _b, _c, _d;
            if (this.drawingParameters.drawCursors = t3, t3) for (let t4 = 0; t4 < this.cursorsOptions.length; t4++) {
              const e3 = ((_a = this.cursors[t4]) == null ? void 0 : _a.Hidden) ?? true, i3 = (_b = this.cursors[t4]) == null ? void 0 : _b.Iterator;
              (_c = this.cursors[t4]) == null ? void 0 : _c.hide();
              let s2 = (_d = this.drawer) == null ? void 0 : _d.Backends[0];
              if (s2 && this.rules.RestoreCursorAfterRerender && this.cursors[t4]) {
                const e4 = this.cursors[t4].updateCurrentPage();
                s2 = this.drawer.Backends[e4 - 1];
              }
              s2 && s2.getRenderElement() && (this.cursors[t4] = new d.Cursor(s2.getRenderElement(), this, this.cursorsOptions[t4])), this.sheet && this.graphic && this.cursors[t4] && this.cursors[t4].init(this.sheet.MusicPartManager, this.graphic), this.rules.RestoreCursorAfterRerender && (this.cursors[t4].hidden = e3, i3 && (this.cursors[t4].iterator = i3, this.cursors[t4].update()));
            }
            else this.cursors.forEach((t4) => {
              t4.hide();
            });
          }
          createBackend(t3, e3) {
            let i3;
            return i3 = void 0 === t3 || t3 === y.BackendType.SVG ? new c.SvgVexFlowBackend(this.rules) : new u.CanvasVexFlowBackend(this.rules), i3.graphicalMusicPage = e3, i3.initialize(this.container, this.zoom), i3;
          }
          static StringToPageFormat(t3) {
            let e3 = E.PageFormat.UndefinedPageFormat;
            if (t3.match("^[0-9]+x[0-9]+$")) {
              const i3 = t3.split("x"), s2 = Number.parseInt(i3[0], 10), n2 = Number.parseInt(i3[1], 10);
              s2 > 0 && s2 < 32768 && n2 > 0 && n2 < 32768 && (e3 = new E.PageFormat(s2, n2, `customPageFormat${t3}`));
            }
            return t3 = (t3 = (t3 = t3.replace(" ", "_")).replace("Landscape", "L")).replace("Portrait", "P"), w.PageFormatStandards.hasOwnProperty(t3) ? (e3 = w.PageFormatStandards[t3], e3) : e3;
          }
          setPageFormat(t3) {
            const e3 = w.StringToPageFormat(t3);
            this.needBackendUpdate = !e3.Equals(this.rules.PageFormat), this.rules.PageFormat = e3;
          }
          setCustomPageFormat(t3, e3) {
            if (t3 > 0 && e3 > 0) {
              const i3 = new E.PageFormat(t3, e3);
              this.rules.PageFormat = i3;
            }
          }
          set DrawSkyLine(t3) {
            this.drawSkyLine = t3, this.drawer && (this.drawer.skyLineVisible = t3);
          }
          get DrawSkyLine() {
            return this.drawer.skyLineVisible;
          }
          set DrawBottomLine(t3) {
            this.drawBottomLine = t3, this.drawer && (this.drawer.bottomLineVisible = t3);
          }
          get DrawBottomLine() {
            return this.drawer.bottomLineVisible;
          }
          set DrawBoundingBox(t3) {
            this.setDrawBoundingBox(t3, true);
          }
          get DrawBoundingBox() {
            return this.drawBoundingBox;
          }
          setDrawBoundingBox(t3, e3 = false) {
            this.drawBoundingBox = t3, this.drawer && (this.drawer.drawableBoundingBoxElement = t3), e3 && this.render();
          }
          get AutoResizeEnabled() {
            return this.autoResizeEnabled;
          }
          set AutoResizeEnabled(t3) {
            this.autoResizeEnabled = t3;
          }
          get Zoom() {
            return this.zoom;
          }
          set Zoom(t3) {
            var _a;
            this.zoom = t3, this.zoomUpdated = true, ((_a = this.graphic) == null ? void 0 : _a.GetCalculator) instanceof r.VexFlowMusicSheetCalculator && (this.graphic.GetCalculator.beamsNeedUpdate = this.zoomUpdated);
          }
          set FollowCursor(t3) {
            this.followCursor = t3;
          }
          get FollowCursor() {
            return this.followCursor;
          }
          set TransposeCalculator(t3) {
            l.MusicSheetCalculator.transposeCalculator = t3;
          }
          get TransposeCalculator() {
            return l.MusicSheetCalculator.transposeCalculator;
          }
          get Sheet() {
            return this.sheet;
          }
          get Drawer() {
            return this.drawer;
          }
          get GraphicSheet() {
            return this.graphic;
          }
          get DrawingParameters() {
            return this.drawingParameters;
          }
          get EngravingRules() {
            return this.rules;
          }
          get Version() {
            return this.version;
          }
        }
        e2.OpenSheetMusicDisplay = w, w.PageFormatStandards = { A3_L: new E.PageFormat(420, 297, "A3_L"), A3_P: new E.PageFormat(297, 420, "A3_P"), A4_L: new E.PageFormat(297, 210, "A4_L"), A4_P: new E.PageFormat(210, 297, "A4_P"), A5_L: new E.PageFormat(210, 148, "A5_L"), A5_P: new E.PageFormat(148, 210, "A5_P"), A6_L: new E.PageFormat(148, 105, "A6_L"), A6_P: new E.PageFormat(105, 148, "A6_P"), Endless: E.PageFormat.UndefinedPageFormat, Letter_L: new E.PageFormat(279.4, 215.9, "Letter_L"), Letter_P: new E.PageFormat(215.9, 279.4, "Letter_P") };
      }, 7109: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowPedal = void 0;
        const n = s(i2(3206)), r = i2(6438), o = i2(7824), a = i2(512);
        class l extends o.GraphicalPedal {
          constructor(t3, e3, i3 = false, s2 = false) {
            switch (super(t3, e3), this.vfStyle = n.default.Flow.PedalMarking.Styles.BRACKET, this.ChangeBegin = false, this.ChangeEnd = false, this.line = -3, this.EndSymbolPositionAndShape = void 0, this.ChangeBegin = t3.ChangeBegin, this.ChangeEnd = t3.ChangeEnd, this.pedalSymbol) {
              case a.MusicSymbol.PEDAL_SYMBOL:
                this.vfStyle = n.default.Flow.PedalMarking.Styles.TEXT, this.EndSymbolPositionAndShape = new r.BoundingBox(this, e3);
                break;
              case a.MusicSymbol.PEDAL_MIXED:
                this.vfStyle = i3 && s2 ? n.default.Flow.PedalMarking.Styles.BRACKET_OPEN_BOTH : i3 ? n.default.Flow.PedalMarking.Styles.BRACKET_OPEN_BEGIN : s2 ? n.default.Flow.PedalMarking.Styles.MIXED_OPEN_END : n.default.Flow.PedalMarking.Styles.MIXED;
                break;
              case a.MusicSymbol.PEDAL_BRACKET:
              default:
                this.vfStyle = i3 && s2 ? n.default.Flow.PedalMarking.Styles.BRACKET_OPEN_BOTH : i3 ? n.default.Flow.PedalMarking.Styles.BRACKET_OPEN_BEGIN : s2 ? n.default.Flow.PedalMarking.Styles.BRACKET_OPEN_END : n.default.Flow.PedalMarking.Styles.BRACKET;
            }
          }
          setStartNote(t3) {
            if (!t3) return false;
            for (const e3 of t3.graphicalVoiceEntries) {
              const t4 = e3;
              if (t4 == null ? void 0 : t4.vfStaveNote) return this.startNote = t4.vfStaveNote, this.startVfVoiceEntry = t4, true;
            }
            return false;
          }
          setEndNote(t3) {
            if (!t3) return false;
            for (const e3 of t3.graphicalVoiceEntries) {
              const t4 = e3;
              if (t4 == null ? void 0 : t4.vfStaveNote) return this.endNote = t4.vfStaveNote, this.endVfVoiceEntry = t4, true;
            }
            return false;
          }
          setEndMeasure(t3) {
            this.endMeasure = t3;
          }
          CalculateBoundingBox() {
          }
          setLine(t3) {
            this.line = t3;
          }
          getPedalMarking() {
            const t3 = new n.default.Flow.PedalMarking([this.startNote, this.endNote]);
            return this.endMeasure && t3.setEndStave(this.endMeasure.getVFStave()), t3.setStyle(this.vfStyle), t3.setLine(this.line), t3.setCustomText(this.DepressText, this.ReleaseText), this.endVfVoiceEntry && !this.getPedal.EndsStave || (t3.EndsStave = true), this.getPedal.BeginsStave && (t3.BeginsStave = true), t3.ChangeBegin = this.ChangeBegin, t3.ChangeEnd = this.ChangeEnd, t3;
          }
          setEndsStave(t3, e3) {
            (e3 == null ? void 0 : e3.gte(t3.parentSourceMeasure.Duration)) && (this.getPedal.EndsStave = true);
          }
          setBeginsStave(t3, e3) {
            t3 && 0 === e3.RealValue && (this.getPedal.BeginsStave = true);
          }
        }
        e2.VexFlowPedal = l;
      }, 7225: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
      }, 7307: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.InvalidEnumArgumentException = e2.ArgumentOutOfRangeException = e2.MusicSheetReadingException = void 0, e2.MusicSheetReadingException = class {
          constructor(t3, e3) {
            this.message = t3, e3 && (this.message += " " + e3.toString());
          }
        }, e2.ArgumentOutOfRangeException = class {
          constructor(t3) {
            this.message = t3;
          }
        }, e2.InvalidEnumArgumentException = class {
          constructor(t3) {
            this.message = t3;
          }
        };
      }, 7435: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Label = void 0;
        const s = i2(7533);
        e2.Label = class {
          constructor(t3 = "", e3 = s.TextAlignmentEnum.CenterBottom, i3 = void 0, n = true) {
            this.IsCreditLabel = false, this.text = t3, this.print = n, this.textAlignment = e3, this.font = i3, this.fontFamily = void 0;
          }
          ToString() {
            return this.text;
          }
        };
      }, 7456: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(4236), e2), n(i2(8365), e2), n(i2(9719), e2), n(i2(7718), e2), n(i2(4249), e2), n(i2(1850), e2), n(i2(4064), e2), n(i2(5282), e2), n(i2(8215), e2), n(i2(4387), e2), n(i2(2369), e2), n(i2(1910), e2), n(i2(6644), e2), n(i2(5274), e2), n(i2(4268), e2), n(i2(3236), e2), n(i2(5534), e2), n(i2(1336), e2), n(i2(9184), e2), n(i2(1850), e2), n(i2(5282), e2), n(i2(4387), e2), n(i2(2369), e2), n(i2(3236), e2), n(i2(5274), e2);
      }, 7499: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(1083), e2), n(i2(9834), e2), n(i2(9436), e2), n(i2(1902), e2), n(i2(2400), e2), n(i2(6014), e2), n(i2(1216), e2), n(i2(9635), e2), n(i2(3753), e2), n(i2(7809), e2), n(i2(7098), e2), n(i2(3109), e2), n(i2(5246), e2), n(i2(3849), e2), n(i2(806), e2), n(i2(9479), e2), n(i2(4332), e2), n(i2(9310), e2), n(i2(5468), e2), n(i2(6670), e2), n(i2(5866), e2), n(i2(7506), e2), n(i2(6173), e2), n(i2(7785), e2), n(i2(4134), e2);
      }, 7503: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.ReaderPluginManager = void 0;
        const n = s(i2(3065));
        e2.ReaderPluginManager = class {
          constructor() {
            this.voiceMeasureReadPlugins = [];
          }
          addVoiceMeasureReadPlugin(t3) {
            this.voiceMeasureReadPlugins.push(t3);
          }
          processVoiceMeasureReadPlugins(t3, e3, i3) {
            for (const s2 of this.voiceMeasureReadPlugins) try {
              s2.measureReadCalculations(t3, e3, i3);
            } catch (t4) {
              n.default.info("VoiceGenerator.addSingleNote: ", t4);
            }
          }
        };
      }, 7506: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexflowStafflineNoteCalculator = void 0;
        const s = i2(8233), n = i2(9635), r = i2(3263), o = i2(164), a = i2(1336);
        class l {
          constructor(t3) {
            this.staffPitchListMapping = new r.Dictionary(), this.baseLineNote = s.NoteEnum.B, this.baseLineOctave = 1, this.rules = t3;
          }
          trackNote(t3) {
            if (!(t3 instanceof n.VexFlowGraphicalNote) || t3.Clef().ClefType !== o.ClefEnum.percussion || t3.sourceNote.isRest() || 0 === this.rules.PercussionOneLineCutoff || -1 === this.rules.PercussionForceVoicesOneLineCutoff) return;
            const e3 = t3.parentVoiceEntry.parentStaffEntry.sourceStaffEntry.ParentStaff.idInMusicSheet;
            let i3;
            this.staffPitchListMapping.containsKey(e3) || this.staffPitchListMapping.setValue(e3, new Array()), i3 = this.staffPitchListMapping.getValue(e3);
            const s2 = t3.sourceNote.Pitch;
            l.findOrInsert(i3, s2);
          }
          static PitchIndexOf(t3, e3, i3 = 0) {
            if (i3 > t3.length - 1) return -1;
            for (let s2 = i3; s2 < t3.length; s2++) {
              const i4 = t3[s2];
              if (e3.OperatorEquals(i4)) return s2;
            }
            return -1;
          }
          static findOrInsert(t3, e3) {
            for (let i3 = 0; i3 < t3.length; i3++) {
              const s2 = t3[i3];
              if (e3.OperatorEquals(s2)) return i3;
              if (e3.OperatorFundamentalLessThan(s2)) return t3.splice(i3, 0, e3), i3;
            }
            return t3.push(e3), t3.length - 1;
          }
          positionNote(t3) {
            const e3 = t3.parentVoiceEntry.parentStaffEntry.sourceStaffEntry.ParentStaff.idInMusicSheet;
            if (!(t3 instanceof n.VexFlowGraphicalNote) || t3.sourceNote.isRest() || !this.staffPitchListMapping.containsKey(e3)) return t3;
            const i3 = this.staffPitchListMapping.getValue(e3), r2 = this.rules.PercussionUseXMLDisplayStep && void 0 !== t3.sourceNote.displayStepUnpitched;
            if (i3.length > this.rules.PercussionOneLineCutoff && !r2 && !this.rules.PercussionUseCajon2NoteSystem) return t3;
            const o2 = t3, h = t3.sourceNote.Pitch;
            let c = this.baseLineNote, u = this.baseLineOctave;
            if (this.rules.PercussionUseCajon2NoteSystem ? h.FundamentalNote === s.NoteEnum.C && (c = s.NoteEnum.G, u = 1) : this.rules.PercussionUseXMLDisplayStep && void 0 !== t3.sourceNote.displayStepUnpitched && (c = t3.sourceNote.displayStepUnpitched, u = t3.sourceNote.displayOctaveUnpitched + this.rules.PercussionOneLineXMLDisplayStepOctaveOffset), i3.length <= this.rules.PercussionForceVoicesOneLineCutoff) o2.setAccidental(new s.Pitch(c, u, h.Accidental));
            else {
              const t4 = l.PitchIndexOf(i3, h);
              if (t4 > -1) {
                const e4 = Math.ceil(i3.length / 2);
                if (!this.rules.PercussionUseXMLDisplayStep) if (t4 >= e4) switch (u = 2, (t4 - e4) % 5) {
                  case 1:
                    c = s.NoteEnum.E;
                    break;
                  case 2:
                    c = s.NoteEnum.G;
                    break;
                  case 3:
                    c = s.NoteEnum.B;
                    break;
                  case 4:
                    c = s.NoteEnum.D, u = 3;
                    break;
                  default:
                    c = s.NoteEnum.C;
                }
                else switch (t4 % 5) {
                  case 1:
                    c = s.NoteEnum.F;
                    break;
                  case 2:
                    c = s.NoteEnum.D;
                    break;
                  case 3:
                    c = s.NoteEnum.B, u = 0;
                    break;
                  case 4:
                    c = s.NoteEnum.G, u = 0;
                    break;
                  default:
                    c = s.NoteEnum.A;
                }
                const n2 = new s.Pitch(c, u, h.Accidental);
                o2.setAccidental(n2);
                const r3 = o2.parentVoiceEntry.parentVoiceEntry;
                !this.rules.SetWantedStemDirectionByXml && r3.Notes.length < 2 && (n2.Octave > this.baseLineOctave || n2.FundamentalNote === this.baseLineNote && n2.Octave === this.baseLineOctave ? o2.parentVoiceEntry.parentVoiceEntry.WantedStemDirection = a.StemDirectionType.Up : o2.parentVoiceEntry.parentVoiceEntry.WantedStemDirection = a.StemDirectionType.Down);
              }
            }
            return o2;
          }
          getStafflineUniquePositionCount(t3) {
            return this.staffPitchListMapping.containsKey(t3) ? this.staffPitchListMapping.getValue(t3).length : 0;
          }
        }
        e2.VexflowStafflineNoteCalculator = l;
      }, 7533: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.TextAlignment = e2.TextAlignmentEnum = void 0, function(t3) {
          t3[t3.LeftTop = 0] = "LeftTop", t3[t3.LeftCenter = 1] = "LeftCenter", t3[t3.LeftBottom = 2] = "LeftBottom", t3[t3.CenterTop = 3] = "CenterTop", t3[t3.CenterCenter = 4] = "CenterCenter", t3[t3.CenterBottom = 5] = "CenterBottom", t3[t3.RightTop = 6] = "RightTop", t3[t3.RightCenter = 7] = "RightCenter", t3[t3.RightBottom = 8] = "RightBottom";
        }(i2 || (e2.TextAlignmentEnum = i2 = {})), e2.TextAlignment = class {
          static IsLeft(t3) {
            return t3 === i2.LeftTop || t3 === i2.LeftCenter || t3 === i2.LeftBottom;
          }
          static IsCenterAligned(t3) {
            return t3 === i2.CenterTop || t3 === i2.CenterCenter || t3 === i2.CenterBottom;
          }
          static IsRight(t3) {
            return t3 === i2.RightTop || t3 === i2.RightCenter || t3 === i2.RightBottom;
          }
        };
      }, 7551: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.PartListEntry = void 0, e2.PartListEntry = class {
          constructor(t3) {
            this.enrolledTimestamps = [], this.visible = true, this.musicSheet = t3;
          }
          get Visible() {
            return this.visible;
          }
          set Visible(t3) {
            this.visible = t3;
          }
          getFirstSourceMeasure() {
            return this.musicSheet.SourceMeasures[this.startIndex];
          }
          getLastSourceMeasure() {
            return this.musicSheet.SourceMeasures[this.endIndex];
          }
        };
      }, 7586: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.InstrumentalGroup = void 0, e2.InstrumentalGroup = class {
          constructor(t3, e3, i2) {
            this.instrumentalGroups = [], this.name = t3, this.musicSheet = e3, this.parent = i2;
          }
          get InstrumentalGroups() {
            return this.instrumentalGroups;
          }
          get Parent() {
            return this.parent;
          }
          get Name() {
            return this.name;
          }
          set Name(t3) {
            this.name = t3;
          }
          get GetMusicSheet() {
            return this.musicSheet;
          }
        };
      }, 7624: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SelectionEndSymbol = void 0;
        const s = i2(7741), n = i2(2683), r = i2(9409), o = i2(6438), a = i2(6452), l = i2(813);
        class h extends s.GraphicalObject {
          constructor(t3, e3) {
            super();
            const i3 = e3, s2 = t3.PositionAndShape.AbsolutePosition.y, h2 = l.CollectionUtil.last(t3.StaffLines).PositionAndShape.RelativePosition.y + 4;
            this.verticalLine = new a.GraphicalLine(new r.PointF2D(i3, s2), new r.PointF2D(i3, s2 + h2), 0.4, n.OutlineAndFillStyleEnum.SelectionSymbol);
            for (let e4 = 0, n2 = t3.StaffLines.length; e4 < n2; ++e4) {
              const n3 = t3.StaffLines[e4], o2 = new r.PointF2D(i3, s2 + n3.PositionAndShape.RelativePosition.y), a2 = new Array(3);
              o2.y -= 0.2, a2[0].x = o2.x - 3, a2[0].y = o2.y + 1.2, a2[1].x = o2.x - 2, a2[1].y = o2.y + 0.4, a2[2].x = o2.x - 2, a2[2].y = o2.y + 2, this.arrows.push(a2);
              const l2 = new Array(8), h3 = 0.8;
              o2.x -= 0.1, o2.y += 0.3;
              const c = 0.2;
              l2[0].x = o2.x - 2, l2[0].y = o2.y + 1.5 - c, l2[1].x = o2.x - 1, l2[1].y = o2.y + 1.5 - c, l2[2].x = o2.x - 1, l2[2].y = o2.y + 2.5, l2[3].x = o2.x - 2, l2[3].y = o2.y + 2.5, l2[4].x = l2[0].x, l2[4].y = l2[0].y - h3, l2[5].x = l2[4].x + h3 + 1, l2[5].y = l2[4].y, l2[6].x = l2[5].x, l2[6].y = l2[3].y + h3, l2[7].x = l2[3].x, l2[7].y = l2[6].y, this.arrowlines.push(l2);
            }
            this.boundingBox = new o.BoundingBox(this), this.boundingBox.AbsolutePosition = new r.PointF2D(i3, s2), this.boundingBox.BorderLeft = -0.4, this.boundingBox.BorderRight = 4, this.boundingBox.BorderBottom = h2;
          }
        }
        e2.SelectionEndSymbol = h;
      }, 7631: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.RepetitionInstructionReader = void 0;
        const s = i2(1645), n = i2(1645), r = i2(4356);
        e2.RepetitionInstructionReader = class {
          set MusicSheet(t3) {
            this.musicSheet = t3, this.xmlMeasureList = new Array(this.musicSheet.Instruments.length), this.repetitionInstructions = [];
          }
          prepareReadingMeasure(t3, e3) {
            this.currentMeasureIndex = e3;
          }
          handleLineRepetitionInstructions(t3) {
            var _a;
            let e3 = false;
            if (t3.elements().length > 0) {
              let i3 = "", n2 = false, r2 = "", o = "", a = "";
              const l = [], h = t3.element("bar-style");
              h && (a = h.value), i3 = t3.attributes().length > 0 && t3.attribute("location") ? t3.attribute("location").value : "right";
              const c = t3.elements();
              for (let t4 = 0, e4 = c.length; t4 < e4; ++t4) {
                const e5 = c[t4];
                if ("repeat" === e5.name && e5.hasAttributes) n2 = true, r2 = e5.attribute("direction").value;
                else if ("ending" === e5.name && e5.hasAttributes && void 0 !== e5.attribute("type") && e5.attribute("number")) {
                  if ("no" === ((_a = e5.attribute("print-object")) == null ? void 0 : _a.value)) continue;
                  o = e5.attribute("type").value;
                  let t5 = e5.attribute("number").value;
                  e5.value && (t5 = e5.value);
                  const i4 = t5.split("[,+]");
                  for (let t6 = 0, e6 = i4.length; t6 < e6; ++t6) {
                    const e7 = i4[t6], s2 = e7.match("[0-9]");
                    if (-1 !== e7.search("-") && 2 === s2.length) {
                      const t7 = parseInt(s2[0], 10), e8 = parseInt(s2[1], 10);
                      for (let i5 = t7; i5 <= e8; i5++) l.push(i5);
                    } else for (let t7 = 0, e8 = s2.length; t7 < e8; ++t7) {
                      const e9 = s2[t7];
                      l.push(parseInt(e9, 10));
                    }
                  }
                }
              }
              if ("light-heavy" !== a || 0 !== l.length || n2 || (e3 = true), n2 || l.length > 0) if ("left" === i3) {
                if ("start" === o) {
                  const t4 = new s.RepetitionInstruction(this.currentMeasureIndex, s.RepetitionInstructionEnum.Ending, s.AlignmentType.Begin, void 0, l);
                  this.addInstruction(this.repetitionInstructions, t4);
                }
                if ("forward" === r2) {
                  const t4 = new s.RepetitionInstruction(this.currentMeasureIndex, s.RepetitionInstructionEnum.StartLine);
                  this.addInstruction(this.repetitionInstructions, t4);
                }
              } else {
                if ("stop" === o) {
                  const t4 = new s.RepetitionInstruction(this.currentMeasureIndex, s.RepetitionInstructionEnum.Ending, s.AlignmentType.End, void 0, l);
                  this.addInstruction(this.repetitionInstructions, t4);
                }
                if ("backward" === r2) {
                  const t4 = new s.RepetitionInstruction(this.currentMeasureIndex, s.RepetitionInstructionEnum.BackJumpLine);
                  this.addInstruction(this.repetitionInstructions, t4);
                }
              }
            }
            return e3;
          }
          handleRepetitionInstructionsFromWordsOrSymbols(t3, e3) {
            const i3 = t3.element("words"), n2 = this.currentMeasureIndex;
            if (i3) {
              const t4 = "d\\s?\\.s\\.", e4 = i3.value.trim().toLowerCase();
              if (r.StringUtil.StringContainsSeparatedWord(e4, t4 + " al fine", true)) {
                const t5 = new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.DalSegnoAlFine);
                return this.addInstruction(this.repetitionInstructions, t5), true;
              }
              const o = "d\\.\\s?c\\.";
              if (r.StringUtil.StringContainsSeparatedWord(e4, o + " al coda", true)) {
                const t5 = new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.DaCapoAlCoda);
                return this.addInstruction(this.repetitionInstructions, t5), true;
              }
              if (r.StringUtil.StringContainsSeparatedWord(e4, o + " al fine", true)) {
                const t5 = new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.DaCapoAlFine);
                return this.addInstruction(this.repetitionInstructions, t5), true;
              }
              if (r.StringUtil.StringContainsSeparatedWord(e4, o + " al coda", true)) {
                const t5 = new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.DaCapoAlCoda);
                return this.addInstruction(this.repetitionInstructions, t5), true;
              }
              if (r.StringUtil.StringContainsSeparatedWord(e4, o) || r.StringUtil.StringContainsSeparatedWord(e4, "da\\s?capo", true)) {
                const t5 = new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.DaCapo);
                return this.addInstruction(this.repetitionInstructions, t5), true;
              }
              if (r.StringUtil.StringContainsSeparatedWord(e4, t4, true) || r.StringUtil.StringContainsSeparatedWord(e4, "dal\\s?segno", true)) {
                let t5;
                return t5 = r.StringUtil.StringContainsSeparatedWord(e4, "al\\s?coda", true) ? new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.DalSegnoAlCoda) : new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.DalSegno), this.addInstruction(this.repetitionInstructions, t5), true;
              }
              if (r.StringUtil.StringContainsSeparatedWord(e4, "to\\s?coda", true) || r.StringUtil.StringContainsSeparatedWord(e4, "a (la )?coda", true)) {
                const t5 = new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.ToCoda);
                return this.addInstruction(this.repetitionInstructions, t5), true;
              }
              if (r.StringUtil.StringContainsSeparatedWord(e4, "fine", true)) {
                const t5 = new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.Fine);
                return this.addInstruction(this.repetitionInstructions, t5), true;
              }
              if (r.StringUtil.StringContainsSeparatedWord(e4, "coda", true)) {
                const t5 = new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.Coda);
                return this.addInstruction(this.repetitionInstructions, t5), true;
              }
              if (r.StringUtil.StringContainsSeparatedWord(e4, "segno", true)) {
                const t5 = new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.Segno);
                return this.addInstruction(this.repetitionInstructions, t5), true;
              }
            } else {
              if (t3.element("segno")) {
                const t4 = new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.Segno);
                return this.addInstruction(this.repetitionInstructions, t4), true;
              }
              if (t3.element("coda")) {
                const t4 = new s.RepetitionInstruction(n2, s.RepetitionInstructionEnum.Coda);
                return this.addInstruction(this.repetitionInstructions, t4), true;
              }
            }
            return false;
          }
          removeRedundantInstructions() {
            let t3 = 0, e3 = 0, i3 = 0, r2 = 0;
            for (let n2 = 0; n2 < this.repetitionInstructions.length; n2++) {
              const o = this.repetitionInstructions[n2];
              switch (o.type) {
                case s.RepetitionInstructionEnum.Coda:
                  i3 > 0 && this.findInstructionInPreviousMeasure(n2, o.measureIndex, s.RepetitionInstructionEnum.ToCoda) && (o.type = s.RepetitionInstructionEnum.None);
                  break;
                case s.RepetitionInstructionEnum.Segno:
                  if (t3 - r2 > 0) {
                    let t4 = false;
                    for (let n3 = 0, r3 = this.repetitionInstructions.length; n3 < r3; ++n3) {
                      const r4 = this.repetitionInstructions[n3];
                      if (o.measureIndex - r4.measureIndex == 1) switch (r4.type) {
                        case s.RepetitionInstructionEnum.BackJumpLine:
                          r4.type = i3 - e3 > 0 ? s.RepetitionInstructionEnum.DalSegnoAlCoda : s.RepetitionInstructionEnum.DalSegno, o.type = s.RepetitionInstructionEnum.None, t4 = true;
                          break;
                        case s.RepetitionInstructionEnum.DalSegno:
                        case s.RepetitionInstructionEnum.DalSegnoAlFine:
                        case s.RepetitionInstructionEnum.DalSegnoAlCoda:
                          o.type = s.RepetitionInstructionEnum.None, t4 = true;
                      }
                      if (t4) break;
                    }
                    if (t4) break;
                    o.type = i3 - e3 > 0 ? s.RepetitionInstructionEnum.DalSegnoAlCoda : s.RepetitionInstructionEnum.DalSegno, o.alignment = s.AlignmentType.End, o.measureIndex--;
                  }
              }
              if (this.backwardSearchForPreviousIdenticalInstruction(n2, o) || o.type === s.RepetitionInstructionEnum.None) this.repetitionInstructions.splice(n2, 1), n2--;
              else switch (o.type) {
                case s.RepetitionInstructionEnum.Fine:
                  break;
                case s.RepetitionInstructionEnum.ToCoda:
                  i3++;
                  break;
                case s.RepetitionInstructionEnum.Coda:
                  e3++;
                  break;
                case s.RepetitionInstructionEnum.Segno:
                  t3++;
                  break;
                case s.RepetitionInstructionEnum.DalSegnoAlFine:
                case s.RepetitionInstructionEnum.DalSegnoAlCoda:
                  r2++;
              }
            }
            this.repetitionInstructions.sort(n.RepetitionInstructionComparer.Compare);
          }
          findInstructionInPreviousMeasure(t3, e3, i3) {
            for (let s2 = t3 - 1; s2 >= 0; s2--) {
              const t4 = this.repetitionInstructions[s2];
              if (e3 - t4.measureIndex == 1 && t4.type === i3) return true;
            }
            return false;
          }
          backwardSearchForPreviousIdenticalInstruction(t3, e3) {
            for (let i3 = t3 - 1; i3 >= 0; i3--) if (this.repetitionInstructions[i3].equals(e3)) return true;
            return false;
          }
          addInstruction(t3, e3) {
            let i3 = true;
            for (let s2 = 0, n2 = t3.length; s2 < n2; ++s2) {
              const n3 = t3[s2];
              if (e3.equals(n3)) {
                i3 = false;
                break;
              }
            }
            i3 && t3.push(e3);
          }
        };
      }, 7718: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Glissando = void 0;
        const s = i2(2561), n = i2(6438);
        e2.Glissando = class {
          constructor(t3) {
            this.notes = [], this.XMLNumber = 1, this.AddNote(t3), this.StartNote = t3, this.Direction = n.ColDirEnum.NotYetDefined;
          }
          get Notes() {
            return this.notes;
          }
          get Duration() {
            const t3 = new s.Fraction();
            for (const e3 of this.notes) t3.Add(e3.Length);
            return t3;
          }
          get Pitch() {
            return this.StartNote.Pitch;
          }
          AddNote(t3) {
            this.notes.push(t3), t3.NoteGlissando = this, 2 === this.notes.length && (this.notes[0].Pitch.getHalfTone() < this.notes[1].Pitch.getHalfTone() ? this.Direction = n.ColDirEnum.Up : this.Direction = n.ColDirEnum.Down);
          }
        };
      }, 7741: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalObject = void 0;
        const s = i2(7791);
        class n extends s.AClassHierarchyTrackable {
          get PositionAndShape() {
            return this.boundingBox;
          }
          set PositionAndShape(t3) {
            this.boundingBox = t3;
          }
        }
        e2.GraphicalObject = n;
      }, 7751: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalLyricWord = void 0, e2.GraphicalLyricWord = class {
          constructor(t3) {
            this.graphicalLyricsEntries = [], this.lyricWord = t3, this.initialize();
          }
          get GetLyricWord() {
            return this.lyricWord;
          }
          get GraphicalLyricsEntries() {
            return this.graphicalLyricsEntries;
          }
          set GraphicalLyricsEntries(t3) {
            this.graphicalLyricsEntries = t3;
          }
          isFilled() {
            for (let t3 = 0; t3 < this.graphicalLyricsEntries.length; t3++) if (!this.graphicalLyricsEntries[t3]) return false;
            return true;
          }
          initialize() {
            for (let t3 = 0; t3 < this.lyricWord.Syllables.length; t3++) this.graphicalLyricsEntries.push(void 0);
          }
        };
      }, 7785: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowTextMeasurer = void 0;
        const s = i2(6014);
        e2.VexFlowTextMeasurer = class {
          constructor(t3) {
            this.fontSize = 20, this.fontSizeStandard = this.fontSize;
            const e3 = document.createElement("canvas");
            this.context = e3.getContext("2d"), this.rules = t3;
          }
          computeTextWidthToHeightRatio(t3, e3, i3, n = void 0, r = this.fontSize) {
            return this.context.font = s.VexFlowConverter.font(r, i3, e3, this.rules, n), this.context.measureText(t3).width / r;
          }
          setFontSize(t3 = this.fontSizeStandard) {
            return this.fontSize = t3, t3;
          }
        };
      }, 7791: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.AClassHierarchyTrackable = void 0, e2.AClassHierarchyTrackable = class {
          isInstanceOfClass(t3) {
            let e3 = this.constructor.prototype;
            for (; e3; ) {
              if (t3 === e3.constructor.name) return true;
              e3 = e3.__proto__;
            }
            return false;
          }
        };
      }, 7809: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowInstantaneousDynamicExpression = void 0;
        const s = i2(5023), n = i2(9767), r = i2(8254), o = i2(7435), a = i2(7533), l = i2(2570);
        class h extends s.GraphicalInstantaneousDynamicExpression {
          constructor(t3, e3, i3) {
            super(t3, e3, i3);
            const s2 = new o.Label(this.Expression);
            this.label = new r.GraphicalLabel(s2, this.rules.ContinuousDynamicTextHeight, a.TextAlignmentEnum.CenterCenter, this.rules, this.PositionAndShape), this.label.Label.fontStyle = l.FontStyles.BoldItalic, this.label.setLabelPositionAndShapeBorders(), this.PositionAndShape.calculateBoundingBox();
          }
          get InstantaneousDynamic() {
            return this.mInstantaneousDynamicExpression;
          }
          get Expression() {
            return n.DynamicEnum[this.mInstantaneousDynamicExpression.DynEnum];
          }
        }
        e2.VexFlowInstantaneousDynamicExpression = h;
      }, 7824: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalPedal = void 0;
        const s = i2(7741), n = i2(6438), r = i2(512);
        class o extends s.GraphicalObject {
          constructor(t3, e3) {
            super(), this.getPedal = t3, this.setSymbol(), this.PositionAndShape = new n.BoundingBox(this, e3);
          }
          setSymbol() {
            !this.getPedal.IsLine && this.getPedal.IsSign ? this.pedalSymbol = r.MusicSymbol.PEDAL_SYMBOL : this.getPedal.IsLine && this.getPedal.IsSign ? this.pedalSymbol = r.MusicSymbol.PEDAL_MIXED : this.pedalSymbol = r.MusicSymbol.PEDAL_BRACKET;
          }
        }
        e2.GraphicalPedal = o;
      }, 7921: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MusicSheetCalculator = void 0;
        const n = i2(8724), r = i2(2561), o = i2(1850), a = i2(5748), l = i2(164), h = i2(437), c = i2(1336), u = i2(7066), d = i2(9409), f = i2(2369), m = i2(8254), p = i2(7533), g = i2(4543), b = i2(3123), S = i2(4249), y = i2(6438), E = i2(8033), x = i2(8927), v = i2(164), _ = s(i2(3065)), M = i2(3263), w = i2(6452), P = i2(7435), T = i2(3236), L = i2(6362), A = i2(3361), C = i2(9161), R = i2(2221), N = i2(5875), I = i2(1066), B = i2(624), F = i2(5824), D = i2(5534), O = i2(9647);
        class k {
          constructor() {
            this.staffEntriesWithGraphicalTies = [], this.staffEntriesWithOrnaments = [], this.staffEntriesWithChordSymbols = [], this.staffLinesWithLyricWords = [], this.graphicalLyricWords = [], this.abstractNotImplementedErrorMessage = "abstract, not implemented", this.dynamicExpressionMap = /* @__PURE__ */ new Map();
          }
          static get TextMeasurer() {
            return k.textMeasurer;
          }
          static set TextMeasurer(t3) {
            k.textMeasurer = t3;
          }
          get leadSheet() {
            return this.graphicalMusicSheet.LeadSheet;
          }
          static setMeasuresMinStaffEntriesWidth(t3, e3) {
            for (let i3 = 0, s2 = t3.length; i3 < s2; ++i3) {
              const s3 = t3[i3];
              s3 && (s3.minimumStaffEntriesWidth = e3);
            }
          }
          initialize(t3) {
            this.graphicalMusicSheet = t3, this.rules = t3.ParentMusicSheet.Rules, this.rules.clearMusicSheetObjects(), this.prepareGraphicalMusicSheet();
          }
          prepareGraphicalMusicSheet() {
            const t3 = this.graphicalMusicSheet.ParentMusicSheet;
            this.staffEntriesWithGraphicalTies = [], this.staffEntriesWithOrnaments = [], this.staffEntriesWithChordSymbols = [], this.staffLinesWithLyricWords = [], this.graphicalMusicSheet.Initialize();
            const e3 = this.graphicalMusicSheet.MeasureList, i3 = this.createAccidentalCalculators(), s2 = this.graphicalMusicSheet.initializeActiveClefs(), n2 = [], r2 = t3.getCompleteNumberOfStaves(), o2 = [];
            for (let t4 = 0; t4 < r2; t4++) o2.push(void 0);
            for (let r3 = 0, a3 = t3.SourceMeasures.length; r3 < a3; ++r3) {
              const a4 = t3.SourceMeasures[r3], l2 = this.createGraphicalMeasuresForSourceMeasure(a4, i3, n2, o2, s2);
              if (e3.push(l2), a4.multipleRestMeasures > 0 && this.rules.RenderMultipleRestMeasures) {
                a4.isReducedToMultiRest = true, a4.multipleRestMeasureNumber = 1;
                const i4 = a4.multipleRestMeasures - 1;
                r3 += i4;
                for (let s3 = 1; s3 <= i4; s3++) {
                  const i5 = t3.SourceMeasures.indexOf(a4) + s3;
                  if (i5 >= t3.SourceMeasures.length) break;
                  const n3 = t3.SourceMeasures[i5];
                  n3.multipleRestMeasureNumber = s3 + 1, n3.isReducedToMultiRest = true, e3.push([void 0]);
                }
              }
            }
            if (this.rules.AutoGenerateMultipleRestMeasuresFromRestMeasures && this.rules.RenderMultipleRestMeasures) {
              let r3, a3 = 0;
              for (let l2 = 0, h2 = t3.SourceMeasures.length; l2 < h2; ++l2) {
                const h3 = t3.SourceMeasures[l2];
                if (!h3.isReducedToMultiRest && h3.canBeReducedToMultiRest()) if (a3 > 0) {
                  r3.isReducedToMultiRest = true, r3.multipleRestMeasureNumber = 1, a3++, h3.multipleRestMeasureNumber = a3, h3.isReducedToMultiRest = true;
                  for (let t4 = 0; t4 < e3[l2].length; t4++) e3[l2][t4] = void 0;
                } else r3 = h3, a3 = 1;
                else if (a3 > 1) {
                  r3.multipleRestMeasures = a3;
                  const t4 = this.createGraphicalMeasuresForSourceMeasure(r3, i3, n2, o2, s2);
                  e3[r3.measureListIndex] = t4, a3 = 0, r3 = void 0;
                } else a3 = 0, r3 = void 0;
              }
              if (a3 > 1) {
                r3.multipleRestMeasures = a3, r3.isReducedToMultiRest = true;
                const t4 = this.createGraphicalMeasuresForSourceMeasure(r3, i3, n2, o2, s2);
                e3[r3.measureListIndex] = t4, a3 = 0, r3 = void 0;
              }
            }
            const a2 = s2.map((t4) => t4.ClefType === l.ClefEnum.percussion);
            this.handleStaffEntries(a2), this.calculateVerticalContainersList(), this.setIndicesToVerticalGraphicalContainers();
          }
          calculate() {
            this.musicSystems = [], this.clearSystemsAndMeasures(), this.clearRecreatedObjects(), this.createGraphicalTies(), this.calculateSheetLabelBoundingBoxes(), this.calculateXLayout(this.graphicalMusicSheet, this.maxInstrNameLabelLength()), this.graphicalMusicSheet.MusicPages.length = 0, this.calculateMusicSystems(), n.GraphicalMusicSheet.transformRelativeToAbsolutePosition(this.graphicalMusicSheet);
          }
          calculateXLayout(t3, e3) {
            var _a;
            if (this.graphicalMusicSheet.MeasureList.length > 0) {
              let t4, e4 = 0, i3 = 1;
              for (let s2 = 0; s2 < this.graphicalMusicSheet.MeasureList.length; s2++) {
                t4 = this.graphicalMusicSheet.MeasureList[s2];
                let n2 = this.calculateMeasureXLayout(t4);
                n2 = this.calculateMeasureWidthFromStaffEntries(t4, n2), n2 > e4 && (e4 = n2);
                const r2 = this.graphicalMusicSheet.ParentMusicSheet.MeasureWidthFactor;
                for (const e5 of t4) if (e5 == null ? void 0 : e5.parentSourceMeasure.WidthFactor) {
                  i3 = e5.parentSourceMeasure.WidthFactor;
                  break;
                }
                n2 *= r2 * i3, k.setMeasuresMinStaffEntriesWidth(t4, n2);
              }
              if (this.rules.FixedMeasureWidth) {
                let i4 = e4;
                this.rules.FixedMeasureWidthFixedValue && (i4 = this.rules.FixedMeasureWidthFixedValue);
                for (let e5 = 0; e5 < this.graphicalMusicSheet.MeasureList.length; e5++) t4 = this.graphicalMusicSheet.MeasureList[e5], !this.rules.FixedMeasureWidthUseForPickupMeasures && ((_a = t4[0]) == null ? void 0 : _a.parentSourceMeasure.ImplicitMeasure) || k.setMeasuresMinStaffEntriesWidth(t4, i4);
              }
            }
          }
          calculateMeasureWidthFromStaffEntries(t3, e3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          formatMeasures() {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          calculateMeasureXLayout(t3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          initGraphicalMeasuresCreation() {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          handleBeam(t3, e3, i3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          handleTiedGraphicalNote(t3, e3, i3, s2, n2, r2, o2, a2) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          handleVoiceEntryLyrics(t3, e3, i3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          handleVoiceEntryOrnaments(t3, e3, i3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          handleVoiceEntryArticulations(t3, e3, i3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          handleVoiceEntryTechnicalInstructions(t3, e3, i3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          handleTuplet(t3, e3, i3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          layoutVoiceEntry(t3, e3, i3, s2) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          layoutStaffEntry(t3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          createGraphicalTie(t3, e3, i3, s2, n2) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          updateStaffLineBorders(t3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          calculateMeasureNumberPlacement(t3) {
            const e3 = t3.StaffLines[0];
            if (!e3 || !e3.Measures[0]) return void _.default.warn("calculateMeasureNumberPlacement: measure undefined for system.Id " + t3.Id);
            let i3 = e3.Measures[0].MeasureNumber, s2 = 0;
            for (let n2 = 0; n2 < e3.Measures.length; n2++) {
              const r2 = e3.Measures[n2];
              let o2 = this.rules.RenderMeasureNumbersOnlyAtSystemStart && n2 > 1;
              if (1 === n2 && e3.Measures[0].parentSourceMeasure.ImplicitMeasure && (o2 = false), o2) return;
              0 !== r2.MeasureNumber && 1 !== r2.MeasureNumber || (i3 = r2.MeasureNumber), s2 = r2 !== e3.Measures[0] && this.rules.MeasureNumberLabelXOffset ? this.rules.MeasureNumberLabelXOffset : 0;
              const a2 = this.rules.UseXMLMeasureNumbers && 1 === r2.MeasureNumber && 1 !== r2.parentSourceMeasure.getPrintedMeasureNumber();
              ((r2.MeasureNumber === i3 || r2.MeasureNumber >= i3 + this.rules.MeasureNumberLabelOffset) && !r2.parentSourceMeasure.ImplicitMeasure || a2) && ((1 !== r2.MeasureNumber || 1 === r2.MeasureNumber && r2 !== e3.Measures[0] || a2) && this.calculateSingleMeasureNumberPlacement(r2, e3, t3, s2), i3 = r2.MeasureNumber);
            }
          }
          calculateSingleMeasureNumberPlacement(t3, e3, i3, s2 = 0) {
            const n2 = t3.parentSourceMeasure.getPrintedMeasureNumber().toString(), r2 = new P.Label(n2), o2 = new m.GraphicalLabel(r2, this.rules.MeasureNumberLabelHeight, p.TextAlignmentEnum.LeftBottom, this.rules), a2 = e3.SkyBottomLineCalculator;
            o2.setLabelPositionAndShapeBorders(), o2.PositionAndShape.Parent = i3.PositionAndShape;
            const l2 = e3.PositionAndShape.RelativePosition.x + t3.PositionAndShape.RelativePosition.x - o2.PositionAndShape.BorderMarginLeft + s2;
            let h2, c2 = l2, u2 = l2 - o2.PositionAndShape.BorderLeft + o2.PositionAndShape.BorderRight;
            c2 -= e3.PositionAndShape.RelativePosition.x, u2 -= e3.PositionAndShape.RelativePosition.x;
            const f2 = c2 + 0.5, g2 = u2 - 0.5, b2 = a2.getSkyLineMinInRange(f2, g2);
            if (t3 === e3.Measures[0]) {
              let e4 = 0;
              if (i3.GroupBrackets.length > 0) for (const t4 of i3.GroupBrackets) e4 = Math.min(e4, t4.PositionAndShape.BorderTop);
              else t3.ParentStaff.ParentInstrument.Parent && (e4 = -1);
              h2 = Math.min(b2, e4);
            } else h2 = b2;
            h2 = Math.min(0, h2), o2.PositionAndShape.RelativePosition = new d.PointF2D(l2, h2), i3.MeasureNumberLabels.push(o2);
          }
          calculateMeasureNumberSkyline(t3) {
            const e3 = t3.StaffLines[0];
            for (const i3 of t3.MeasureNumberLabels) {
              let t4 = i3.PositionAndShape.RelativePosition.x, s2 = t4 - i3.PositionAndShape.BorderLeft + i3.PositionAndShape.BorderRight;
              t4 -= e3.PositionAndShape.RelativePosition.x, s2 -= e3.PositionAndShape.RelativePosition.x, e3.SkyBottomLineCalculator.updateSkyLineInRange(t4, s2, i3.PositionAndShape.RelativePosition.y + i3.PositionAndShape.BorderMarginTop);
            }
          }
          layoutGraphicalTie(t3, e3, i3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          calculateSingleStaffLineLyricsPosition(t3, e3) {
            let i3 = 0, s2 = this.rules.StaffHeight;
            const n2 = /* @__PURE__ */ new Map(), r2 = [], o2 = t3.SkyBottomLineCalculator;
            let a2 = t3.Measures.length;
            for (let e4 = 0; e4 < a2; ++e4) {
              const a3 = t3.Measures[e4], l3 = a3.PositionAndShape.RelativePosition, h2 = a3.staffEntries.length;
              for (let t4 = 0; t4 < h2; ++t4) {
                const e5 = a3.staffEntries[t4], h3 = e5.LyricsEntries.length;
                for (let t5 = 0; t5 < h3; ++t5) {
                  const i4 = e5.LyricsEntries[t5].LyricsEntry;
                  n2[i4.VerseNumber] = i4.IsChorus;
                }
                if (h3 > 0) {
                  r2.push(e5), i3 = Math.max(i3, e5.LyricsEntries.length);
                  const t5 = e5.PositionAndShape.RelativePosition.x + l3.x;
                  let n3 = Number.MAX_VALUE, a4 = Number.MIN_VALUE;
                  for (let i4 = 0; i4 < e5.LyricsEntries.length; i4++) {
                    const s3 = e5.LyricsEntries[i4].GraphicalLabel;
                    n3 = Math.min(n3, t5 + s3.PositionAndShape.BorderMarginLeft), a4 = Math.max(a4, t5 + s3.PositionAndShape.BorderMarginRight);
                  }
                  const h4 = o2.getBottomLineMaxInRange(n3, a4);
                  s2 = Math.max(s2, h4 + this.rules.LyricsYMarginToBottomLine);
                }
              }
            }
            let l2 = 0;
            a2 = r2.length;
            for (const t4 of r2) {
              const i4 = [];
              let r3 = true;
              for (let e4 = 0; e4 < t4.LyricsEntries.length; e4++) r3 && (r3 = t4.LyricsEntries[e4].LyricsEntry.IsChorus);
              for (const t5 of e3) n2[t5] === r3 && i4.push(t5);
              for (let e4 = 0; e4 < t4.LyricsEntries.length; e4++) {
                const n3 = t4.LyricsEntries[e4], r4 = n3.GraphicalLabel, o3 = n3.LyricsEntry.VerseNumber, a3 = i4.indexOf(o3), h2 = s2 + this.rules.LyricsHeight + this.rules.VerticalBetweenLyricsDistance + this.rules.LyricsYOffsetToStaffHeight + (this.rules.VerticalBetweenLyricsDistance + this.rules.LyricsHeight) * a3, c2 = r4.PositionAndShape.RelativePosition.x;
                r4.PositionAndShape.RelativePosition = new d.PointF2D(c2, h2), r4.Label.fontStyle = n3.LyricsEntry.FontStyle, l2 = Math.max(l2, h2);
              }
            }
            if (r2.length > 0) {
              const e4 = t3.PositionAndShape.Size.width;
              let i4 = r2[0].PositionAndShape.RelativePosition.x + r2[0].PositionAndShape.BorderMarginLeft + r2[0].parentMeasure.PositionAndShape.RelativePosition.x;
              i4 = i4 > e4 ? e4 : i4, o2.updateBottomLineInRange(i4, e4, l2);
            }
            return r2;
          }
          calculateLyricsExtendsAndDashes(t3) {
            for (let e3 = 0, i3 = t3.length; e3 < i3; ++e3) {
              const i4 = t3[e3];
              for (let t4 = 0; t4 < i4.LyricsEntries.length; t4++) {
                const e4 = i4.LyricsEntries[t4];
                e4.ParentLyricWord && e4.ParentLyricWord.GraphicalLyricsEntries[e4.ParentLyricWord.GraphicalLyricsEntries.length - 1] !== e4 && this.calculateSingleLyricWord(e4), e4.LyricsEntry.extend && this.calculateLyricExtend(e4);
              }
            }
          }
          calculateSingleOctaveShift(t3, e3, i3, s2) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          calculateWordRepetitionInstruction(t3, e3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          calculateMoodAndUnknownExpression(t3, e3, i3) {
            var _a, _b;
            const s2 = t3.AbsoluteTimestamp, n2 = this.graphicalMusicSheet.MeasureList[e3];
            let r2 = new d.PointF2D();
            const o2 = (_a = t3.UnknownList[0]) == null ? void 0 : _a.defaultYXml;
            if (t3.MoodList.length > 0 || t3.UnknownList.length > 0) {
              let e4 = "";
              for (let i4 = 0, s3 = t3.EntriesList.length; i4 < s3; ++i4) {
                const s4 = t3.EntriesList[i4];
                "" !== s4.prefix && (e4 += "" === e4 ? s4.prefix : " " + s4.prefix), e4 += "" === e4 ? s4.label : " " + s4.label;
              }
              const a2 = n2[i3].ParentStaffLine;
              if (!a2) return void _.default.debug("MusicSheetCalculator.calculateMoodAndUnknownExpression: staffLine undefined. Returning.");
              r2 = this.getRelativePositionInStaffLineFromTimestamp(s2, i3, a2, a2 == null ? void 0 : a2.isPartOfMultiStaffInstrument()), Math.abs(r2.x - 0) < 1e-4 && (r2.x = n2[i3].beginInstructionsWidth + this.rules.RhythmRightMargin);
              const l2 = this.rules.UnknownTextHeight, h2 = t3.getPlacementOfFirstEntry(), c2 = this.calculateLabel(a2, r2, e4, t3.getFontstyleOfFirstEntry(), h2, l2);
              if (this.rules.PlaceWordsInsideStafflineFromXml && o2 < 0 && o2 > -50) {
                let t4 = o2 / 10;
                t4 += this.rules.PlaceWordsInsideStafflineYOffset, c2.PositionAndShape.RelativePosition.y = t4;
              }
              const u2 = new F.GraphicalUnknownExpression(a2, c2, h2, (_b = n2[i3]) == null ? void 0 : _b.parentSourceMeasure, t3);
              a2.AbstractExpressions.push(u2);
            }
          }
          clearRecreatedObjects() {
            for (let t3 = 0, e3 = this.staffEntriesWithGraphicalTies.length; t3 < e3; ++t3) this.staffEntriesWithGraphicalTies[t3].GraphicalTies.length = 0;
            this.staffEntriesWithGraphicalTies.length = 0;
          }
          handleStaffEntryLink(t3, e3) {
            _.default.debug("handleStaffEntryLink not implemented");
          }
          calculateMusicSystems() {
            if (!this.graphicalMusicSheet.MeasureList) return;
            const t3 = this.graphicalMusicSheet.MeasureList;
            if (!t3) return;
            this.rules.MinMeasureToDrawIndex > t3.length - 1 && (_.default.debug("minimum measure to draw index out of range. resetting min measure index to limit."), this.rules.MinMeasureToDrawIndex = t3.length - 1);
            const e3 = [];
            for (let i4 = this.rules.MinMeasureToDrawIndex, s3 = t3.length; i4 < s3 && i4 <= this.rules.MaxMeasureToDrawIndex; ++i4) {
              const s4 = [];
              for (let e4 = 0, n2 = t3[i4].length; e4 < n2; ++e4) {
                const n3 = t3[i4][e4];
                if ((n3 == null ? void 0 : n3.isVisible()) && (s4.push(n3), this.rules.ColoringEnabled)) for (const t4 of n3.staffEntries) for (const e5 of t4.graphicalVoiceEntries) e5.applyCustomNoteheads(), e5.color();
              }
              e3.push(s4);
            }
            let i3 = 0;
            for (let t4 = 0, s3 = e3.length; t4 < s3; ++t4) {
              const s4 = e3[t4];
              i3 = Math.max(s4.length, i3);
              break;
            }
            if (0 === i3) return;
            const s2 = new u.MusicSystemBuilder();
            if (s2.initialize(this.graphicalMusicSheet, e3, i3), this.musicSystems = s2.buildMusicSystems(), this.formatMeasures(), this.leadSheet || (this.optimizeRestPlacement(), this.calculateStaffEntryArticulationMarks(), this.rules.RenderSlurs && this.calculateTieCurves()), this.calculateSkyBottomLines(), this.calculateTupletNumbers(), this.rules.RenderMeasureNumbers) for (let t4 = 0, e4 = this.musicSystems.length; t4 < e4; ++t4) {
              const e5 = this.musicSystems[t4];
              this.calculateMeasureNumberPlacement(e5);
            }
            if (this.rules.RenderFingerings && this.calculateFingerings(), !this.leadSheet && this.rules.RenderSlurs && this.calculateSlurs(), this.calculateGlissandi(), this.rules.RenderMeasureNumbers) for (let t4 = 0, e4 = this.musicSystems.length; t4 < e4; ++t4) {
              const e5 = this.musicSystems[t4];
              this.calculateMeasureNumberSkyline(e5);
            }
            this.leadSheet || this.calculateOrnaments(), this.calculateChordSymbols(), this.leadSheet || (this.calculateDynamicExpressions(), this.calculateMoodAndUnknownExpressions(), this.calculateExpressionAlignements(), this.calculateOctaveShifts(), this.rules.RenderPedals && this.calculatePedals(), this.calculateWordRepetitionInstructions()), this.calculateRepetitionEndings(), this.leadSheet || this.calculateTempoExpressions(), this.calculateRehearsalMarks(), this.calculateLyricsPosition();
            for (let t4 = 0, e4 = this.musicSystems.length; t4 < e4; ++t4) {
              const e5 = this.musicSystems[t4];
              for (let t5 = 0, i4 = e5.StaffLines.length; t5 < i4; ++t5) {
                const i5 = e5.StaffLines[t5];
                this.updateStaffLineBorders(i5);
              }
            }
            s2.calculateSystemYLayout(), this.calculateComments(), this.calculateMarkedAreas();
            for (let t4 = 0, e4 = this.graphicalMusicSheet.MusicPages.length; t4 < e4; ++t4) {
              const e5 = this.graphicalMusicSheet.MusicPages[t4];
              for (let i5 = 0, s3 = e5.MusicSystems.length; i5 < s3; ++i5) {
                const s4 = 0 === t4 && 0 === i5, n2 = e5.MusicSystems[i5];
                n2.setMusicSystemLabelsYPosition(), this.leadSheet ? n2 === n2.Parent.MusicSystems[0] && n2.createSystemLeftLine(this.rules.SystemThinLineWidth, this.rules.SystemLabelsRightMargin, s4) : (n2.setYPositionsToVerticalLineObjectsAndCreateLines(this.rules), n2.createSystemLeftLine(this.rules.SystemThinLineWidth, this.rules.SystemLabelsRightMargin, s4), n2.createInstrumentBrackets(this.graphicalMusicSheet.ParentMusicSheet.Instruments, this.rules.StaffHeight), n2.createGroupBrackets(this.graphicalMusicSheet.ParentMusicSheet.InstrumentalGroups, this.rules.StaffHeight, 0), n2.alignBeginInstructions()), n2.calculateBorders(this.rules);
              }
              const i4 = e5.MusicSystems[0].PositionAndShape.BorderTop;
              for (let t5 = 0, s3 = e5.MusicSystems.length; t5 < s3; ++t5) {
                const s4 = e5.MusicSystems[t5];
                s4.PositionAndShape.RelativePosition = new d.PointF2D(s4.PositionAndShape.RelativePosition.x, s4.PositionAndShape.RelativePosition.y - i4);
              }
              e5.PositionAndShape.calculateTopBottomBorders(), e5 === this.graphicalMusicSheet.MusicPages[0] && this.calculatePageLabels(e5), e5.PositionAndShape.calculateTopBottomBorders();
            }
          }
          calculateMarkedAreas() {
          }
          calculateComments() {
          }
          calculateChordSymbols() {
            for (const t3 of this.musicSystems) for (const e3 of t3.StaffLines) {
              const i3 = e3.SkyBottomLineCalculator;
              let s2 = Number.MAX_SAFE_INTEGER;
              if (this.rules.ChordSymbolYAlignment && "staffline" === this.rules.ChordSymbolYAlignmentScope) {
                const t4 = [];
                for (const i4 of e3.Measures) t4.push(...i4.staffEntries);
                s2 = this.calculateAlignedChordSymbolsOffset(t4, i3);
              }
              for (let n2 = 0; n2 < e3.Measures.length; n2++) {
                const r2 = e3.Measures[n2];
                let o2;
                this.rules.ChordSymbolYAlignment && "measure" === this.rules.ChordSymbolYAlignmentScope && (s2 = this.calculateAlignedChordSymbolsOffset(r2.staffEntries, i3));
                for (const e4 of r2.staffEntries) if (e4.graphicalChordContainers && 0 !== e4.graphicalChordContainers.length) for (let l2 = 0; l2 < e4.graphicalChordContainers.length; l2++) {
                  const h2 = e4.graphicalChordContainers[l2];
                  if (0 === e4.graphicalVoiceEntries.length && e4.relInMeasureTimestamp.RealValue > 0) {
                    let t4 = 0;
                    0 === r2.staffEntries[0].relInMeasureTimestamp.RealValue && (t4 = r2.staffEntries[0].PositionAndShape.RelativePosition.x, 1 === r2.MeasureNumber && (t4 += this.rules.ChordSymbolWholeMeasureRestXOffsetMeasure1));
                    let i4 = t4 + (r2.PositionAndShape.Size.width - r2.endInstructionsWidth - t4) * (e4.relInMeasureTimestamp.RealValue / r2.parentSourceMeasure.Duration.RealValue) + h2.PositionAndShape.BorderMarginLeft;
                    o2 && (i4 = Math.max(i4, o2.PositionAndShape.RelativePosition.x + o2.GraphicalLabel.PositionAndShape.Size.width + this.rules.ChordSymbolXSpacing)), h2.PositionAndShape.RelativePosition.x = i4, h2.PositionAndShape.Parent = r2.staffEntries[0].PositionAndShape.Parent;
                  }
                  const c2 = h2.PositionAndShape, u2 = c2.Parent;
                  if (u2.DataObject instanceof a.GraphicalMeasure && 0 === e4.relInMeasureTimestamp.RealValue && (c2.RelativePosition.x = Math.max(r2.beginInstructionsWidth, c2.RelativePosition.x), 1 === r2.MeasureNumber && c2.RelativePosition.x > 3 && (c2.RelativePosition.x += this.rules.ChordSymbolWholeMeasureRestXOffsetMeasure1)), 0 === e4.PositionAndShape.RelativePosition.x) {
                    const i4 = t3.GraphicalMeasures[n2];
                    for (const t4 of i4) {
                      let i5 = false;
                      for (const s3 of t4.staffEntries) if (s3.relInMeasureTimestamp === e4.relInMeasureTimestamp && 0 !== s3.PositionAndShape.RelativePosition.x) {
                        c2.RelativePosition.x = s3.PositionAndShape.RelativePosition.x, i5 = true;
                        break;
                      }
                      if (i5) break;
                    }
                  }
                  const d2 = c2.BorderMarginLeft + u2.AbsolutePosition.x + c2.RelativePosition.x, f2 = c2.BorderMarginRight + u2.AbsolutePosition.x + c2.RelativePosition.x;
                  (!this.rules.ChordSymbolYAlignment || s2 > 0) && (s2 = i3.getSkyLineMinInRange(d2, f2));
                  let m2 = 0;
                  0 === l2 ? (m2 += this.rules.ChordSymbolYOffset, m2 += 0.1) : m2 += this.rules.ChordSymbolYPadding, m2 *= -1;
                  const p2 = h2.GraphicalLabel;
                  p2.PositionAndShape.RelativePosition.y = s2 + m2, p2.setLabelPositionAndShapeBorders(), p2.PositionAndShape.calculateBoundingBox(), i3.updateSkyLineInRange(d2, f2, s2 + p2.PositionAndShape.BorderMarginTop), o2 = h2;
                }
              }
            }
          }
          calculateAlignedChordSymbolsOffset(t3, e3) {
            let i3 = Number.MAX_SAFE_INTEGER;
            for (const s2 of t3) for (const t4 of s2.graphicalChordContainers) {
              const s3 = t4.PositionAndShape, n2 = s3.Parent;
              let r2 = s3.BorderMarginLeft + n2.AbsolutePosition.x, o2 = s3.BorderMarginRight + n2.AbsolutePosition.x;
              n2.DataObject instanceof a.GraphicalMeasure && (r2 += n2.DataObject.beginInstructionsWidth, o2 += n2.DataObject.beginInstructionsWidth), i3 = Math.min(i3, e3.getSkyLineMinInRange(r2, o2));
            }
            return i3;
          }
          layoutMeasureWithWholeRest(t3, e3, i3) {
          }
          layoutBeams(t3) {
          }
          layoutArticulationMarks(t3, e3, i3) {
          }
          layoutOrnament(t3, e3, i3) {
          }
          calculateRestNotePlacementWithinGraphicalBeam(t3, e3, i3, s2, n2) {
          }
          calculateTupletNumbers() {
            if (!this.rules.TupletNumberLimitConsecutiveRepetitions) return;
            let t3, e3, i3, s2 = -1, n2 = 0;
            const r2 = {};
            for (const o2 of this.graphicalMusicSheet.ParentMusicSheet.Instruments) for (const a2 of o2.Voices) {
              n2 = 0, r2[a2.VoiceId] = {};
              for (const o3 of a2.VoiceEntries) if (o3.Notes.length > 0) {
                const l2 = o3.Notes[0];
                if (!l2.NoteTuplet || l2.NoteTuplet.shouldBeBracketed(this.rules.TupletsBracketedUseXMLValue, this.rules.TupletsBracketed, this.rules.TripletsBracketed)) {
                  s2 = -1, n2 = 0, e3 = void 0, t3 = void 0;
                  continue;
                }
                if (l2.NoteTuplet === i3) continue;
                let h2 = l2.TypeLength;
                if (h2 || (_.default.warn("note missing TypeLength"), h2 = l2.NoteTuplet.Fractions[0]), l2.NoteTuplet !== e3 && r2[a2.VoiceId][l2.NoteTuplet.TupletLabelNumber] && r2[a2.VoiceId][l2.NoteTuplet.TupletLabelNumber][h2.RealValue]) {
                  l2.NoteTuplet.RenderTupletNumber = false, i3 = l2.NoteTuplet;
                  continue;
                }
                l2.NoteTuplet.TupletLabelNumber === s2 && h2.Equals(t3) && !l2.NoteTuplet.Bracket || (s2 = l2.NoteTuplet.TupletLabelNumber, t3 = h2, n2 = 0), e3 = l2.NoteTuplet, n2++, n2 <= this.rules.TupletNumberMaxConsecutiveRepetitions && (l2.NoteTuplet.RenderTupletNumber = true), n2 > this.rules.TupletNumberMaxConsecutiveRepetitions && (l2.NoteTuplet.RenderTupletNumber = false, this.rules.TupletNumberAlwaysDisableAfterFirstMax && (r2[a2.VoiceId][s2] || (r2[a2.VoiceId][s2] = {}), r2[a2.VoiceId][s2][h2.RealValue] = true)), i3 = e3;
              }
            }
          }
          calculateSlurs() {
          }
          calculateGlissandi() {
          }
          calculateDynamicExpressionsForMultiExpression(t3, e3, i3) {
          }
          calculateGraphicalVerbalContinuousDynamic(t3, e3) {
            const i3 = t3.Label, s2 = e3.x + i3.PositionAndShape.BorderMarginLeft, n2 = e3.x + i3.PositionAndShape.BorderMarginRight, r2 = t3.ContinuousDynamic.Placement, o2 = t3.ParentStaffLine.SkyBottomLineCalculator;
            let a2;
            r2 === L.PlacementEnum.Below ? (a2 = o2.getBottomLineMaxInRange(s2, n2), i3.PositionAndShape.RelativePosition = new d.PointF2D(e3.x, a2 - i3.PositionAndShape.BorderMarginTop)) : (a2 = o2.getSkyLineMinInRange(s2, n2), i3.PositionAndShape.RelativePosition = new d.PointF2D(e3.x, a2 - i3.PositionAndShape.BorderMarginBottom));
          }
          calculateGraphicalContinuousDynamic(t3, e3) {
            var _a;
            const i3 = t3.IsSoftAccent, s2 = t3.ParentStaffLine.ParentStaff.idInMusicSheet, n2 = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(t3.ContinuousDynamic.EndMultiExpression.SourceMeasureParent, s2);
            if (!n2) return void _.default.warn("MusicSheetCalculator.calculateGraphicalContinuousDynamic: No endMeasure found");
            t3.EndMeasure = n2;
            const o2 = t3.ParentStaffLine, a2 = n2.ParentStaffLine, l2 = a2 && o2 === a2;
            let h2 = false;
            a2 ? h2 = a2 == null ? void 0 : a2.isPartOfMultiStaffInstrument() : o2 && (h2 = o2 == null ? void 0 : o2.isPartOfMultiStaffInstrument());
            const c2 = r.Fraction.createFromFraction(t3.ContinuousDynamic.EndMultiExpression.AbsoluteTimestamp), u2 = this.graphicalMusicSheet.GetVerticalContainerFromTimestamp(c2), d2 = u2.getFirstNonNullStaffEntry().parentMeasure, f2 = d2.PositionAndShape.AbsolutePosition.x + d2.PositionAndShape.BorderRight;
            let m2 = new r.Fraction(0, 0, 0);
            for (const t4 of u2.StaffEntries) {
              const e4 = (_a = t4 == null ? void 0 : t4.sourceStaffEntry) == null ? void 0 : _a.calculateMaxNoteLength(false);
              (e4 == null ? void 0 : e4.gt(m2)) && (m2 = e4);
            }
            const p2 = !i3 && t3.ContinuousDynamic.DynamicType === N.ContDynamicEnum.diminuendo, g2 = this.getRelativePositionInStaffLineFromTimestamp(c2, s2, a2, h2, 0, p2), b2 = r.Fraction.plus(c2, m2).clone();
            t3.ContinuousDynamic.EndMultiExpression.EndOffsetFraction && this.rules.UseEndOffsetForExpressions && b2.Add(t3.ContinuousDynamic.EndMultiExpression.EndOffsetFraction);
            const S2 = this.getRelativePositionInStaffLineFromTimestamp(b2, s2, a2, h2, 0, t3.ContinuousDynamic.DynamicType === N.ContDynamicEnum.diminuendo), y2 = this.rules.SoftAccentWedgePadding, E2 = u2.getFirstNonNullStaffEntry().PositionAndShape.Size.width, x2 = this.rules.SoftAccentSizeFactor;
            i3 ? (e3.x -= E2 / 2 * x2 + y2, g2.x = e3.x + E2 / 2 * x2) : S2.x > g2.x && S2.x < f2 ? g2.x += (S2.x - g2.x) / this.rules.WedgeEndDistanceBetweenTimestampsFactor : g2.x = f2 - this.rules.WedgeHorizontalMargin;
            const v2 = this.dynamicExpressionMap.get(t3.ContinuousDynamic.StartMultiExpression.AbsoluteTimestamp.RealValue);
            v2 && v2.DataObject.ParentStaffLine === o2 && (e3.x = v2.RelativePosition.x + this.rules.WedgeHorizontalMargin, e3.x += v2.BorderMarginRight);
            const M2 = o2.ParentMusicSystem, w2 = M2.StaffLines.indexOf(o2), P2 = o2.SkyBottomLineCalculator, T2 = t3.ContinuousDynamic.Placement;
            let A2;
            l2 && g2.x - e3.x < this.rules.WedgeMinLength && !i3 && (g2.x = e3.x + this.rules.WedgeMinLength);
            const C2 = e3.x;
            let R2 = a2.Measures[0].beginInstructionsWidth - this.rules.WedgeHorizontalMargin - 2, B2 = 0, F2 = 0;
            const D2 = [];
            if (l2) B2 = g2.x;
            else {
              B2 = o2.PositionAndShape.Size.width, F2 = g2.x;
              const e4 = [o2, a2], i4 = t3.StartMeasure;
              let r2 = i4, l3 = 0, h3 = i4.parentSourceMeasure.measureListIndex;
              for (; r2 !== n2 && l3 < 1e3; ) {
                const i5 = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[h3], n3 = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(i5, s2);
                if (n3) {
                  r2 = n3;
                  const i6 = r2.ParentStaffLine;
                  if (!e4.includes(i6)) {
                    e4.push(i6);
                    const s3 = new I.GraphicalContinuousDynamicExpression(t3.ContinuousDynamic, i6, i6.Measures[0].parentSourceMeasure);
                    s3.IsSplittedPart = true, D2.push(s3);
                  }
                }
                h3++, l3++;
              }
              A2 = new I.GraphicalContinuousDynamicExpression(t3.ContinuousDynamic, a2, n2.parentSourceMeasure), A2.IsSplittedPart = true, t3.IsSplittedPart = true;
            }
            i3 && (R2 = g2.x + y2, F2 = R2 + E2 / 2 * x2);
            let O2 = 0, k2 = 0;
            if (T2 === L.PlacementEnum.Below) {
              let e4 = 0;
              if (w2 < M2.StaffLines.length - 1 && (e4 = w2 + 1), e4 > w2) {
                const t4 = M2.StaffLines[e4].PositionAndShape.RelativePosition.y - o2.PositionAndShape.RelativePosition.y - this.rules.StaffHeight;
                O2 = this.rules.StaffHeight + t4 / 2;
              } else O2 = this.rules.WedgePlacementBelowY;
              O2 -= this.rules.WedgeOpeningLength / 2, l2 || (k2 = O2);
              let i4 = P2.getBottomLineMaxInRange(C2, B2);
              i4 > O2 && (O2 = i4);
              const s3 = false;
              if (w2 < M2.StaffLines.length - 1) {
                const i5 = o2.findClosestStaffEntry(B2), n3 = o2.findClosestStaffEntry(C2);
                if (n3 && i5 && (n3.parentVerticalContainer, s3)) {
                  const i6 = M2.StaffLines[e4], s4 = i6.SkyBottomLineCalculator.getSkyLineMinInRange(C2, B2), n4 = i6.PositionAndShape.RelativePosition.y - o2.PositionAndShape.RelativePosition.y + s4;
                  O2 = n4 - this.rules.WedgeOpeningLength > this.rules.StaffHeight ? n4 - this.rules.WedgeVerticalMargin : this.rules.StaffHeight + this.rules.WedgeOpeningLength, t3.NotToBeRemoved = true;
                }
              }
              l2 || (i4 = a2.SkyBottomLineCalculator.getBottomLineMaxInRange(R2, F2), i4 > k2 && (k2 = i4), k2 += this.rules.WedgeOpeningLength / 2, k2 += this.rules.WedgeVerticalMargin), s3 || (O2 += this.rules.WedgeOpeningLength / 2, O2 += this.rules.WedgeVerticalMargin);
            } else if (T2 === L.PlacementEnum.Above) {
              if (1 === o2.ParentStaff.ParentInstrument.Staves.length) O2 = this.rules.WedgePlacementAboveY;
              else {
                let t5 = 0;
                w2 > 0 && (t5 = w2 - 1);
                const e5 = M2.StaffLines[t5];
                O2 = -(o2.PositionAndShape.RelativePosition.y - e5.PositionAndShape.RelativePosition.y - this.rules.StaffHeight) / 2;
              }
              O2 += this.rules.WedgeOpeningLength / 2, l2 || (k2 = O2);
              let t4 = P2.getSkyLineMinInRange(C2, B2);
              t4 < O2 && (O2 = t4);
              const e4 = false;
              if (o2.ParentStaff.ParentInstrument.Staves.length > 1 && w2 > 0) {
                const t5 = o2.findClosestStaffEntry(C2), i4 = o2.findClosestStaffEntry(B2);
                if (t5 && i4) {
                  t5.parentVerticalContainer;
                  const i5 = w2 - 1;
                  if (e4) {
                    const t6 = M2.StaffLines[i5], e5 = t6.SkyBottomLineCalculator.getBottomLineMaxInRange(C2, B2);
                    O2 = (o2.PositionAndShape.RelativePosition.y - t6.PositionAndShape.RelativePosition.y - e5 - this.rules.StaffHeight) / 2 + this.rules.StaffHeight;
                  }
                }
              }
              l2 || (t4 = a2.SkyBottomLineCalculator.getSkyLineMinInRange(R2, F2), t4 < k2 && (k2 = t4), k2 -= this.rules.WedgeOpeningLength / 2), e4 || (O2 -= this.rules.WedgeOpeningLength / 2, O2 -= this.rules.WedgeVerticalMargin), l2 || (k2 -= this.rules.WedgeVerticalMargin);
            }
            if (t3.Lines.clear(), i3) t3.createFirstHalfCrescendoLines(C2, B2, O2), t3.createSecondHalfDiminuendoLines(R2, F2, O2), t3.calcPsi();
            else if (l2 && !i3) t3.createLines(C2, B2, O2), t3.calcPsi();
            else {
              t3.createFirstHalfLines(C2, B2, O2), t3.calcPsi();
              for (let e4 = 0; e4 < D2.length; e4++) {
                const i4 = D2[e4], s3 = i4.ParentStaffLine;
                let n3 = k2;
                if (T2 === L.PlacementEnum.Below) {
                  const t4 = a2.SkyBottomLineCalculator.getBottomLineMaxInRange(R2, B2);
                  t4 > n3 && (n3 = t4), n3 += this.rules.WedgeOpeningLength / 2, n3 += this.rules.WedgeVerticalMargin;
                } else if (T2 === L.PlacementEnum.Above) {
                  const t4 = s3.SkyBottomLineCalculator.getSkyLineMinInRange(R2, F2);
                  t4 < k2 && (n3 = t4), n3 -= this.rules.WedgeOpeningLength / 2;
                }
                t3.ContinuousDynamic.DynamicType === N.ContDynamicEnum.crescendo ? i4.createSecondHalfCrescendoLines(0, s3.PositionAndShape.Size.width, n3) : i4.createFirstHalfDiminuendoLines(0, s3.PositionAndShape.Size.width, n3), i4.calcPsi();
              }
              A2.createSecondHalfLines(R2, F2, k2), A2.calcPsi();
            }
            this.dynamicExpressionMap.set(c2.RealValue, t3.PositionAndShape);
          }
          calculateGraphicalInstantaneousDynamicExpression(t3, e3, i3) {
            const s2 = t3.ParentStaffLine;
            if (!s2) return;
            const n2 = e3.x + t3.PositionAndShape.BorderMarginLeft, r2 = e3.x + t3.PositionAndShape.BorderMarginRight, o2 = s2.SkyBottomLineCalculator;
            let a2 = 0;
            if (t3.Placement === L.PlacementEnum.Above) {
              const i4 = o2.getSkyLineMinInRange(n2, r2);
              if (s2.isPartOfMultiStaffInstrument() && s2.ParentStaff !== s2.ParentStaff.ParentInstrument.Staves[0]) {
                const e4 = s2.ParentMusicSystem.StaffLines[s2.ParentMusicSystem.StaffLines.indexOf(s2) - 1], n3 = s2.PositionAndShape.RelativePosition.y - e4.PositionAndShape.RelativePosition.y - this.rules.StaffHeight;
                a2 = i4 > -n3 / 2 ? -n3 / 2 : i4 - t3.PositionAndShape.BorderMarginBottom;
              } else a2 = i4 - t3.PositionAndShape.BorderMarginBottom;
              t3.PositionAndShape.RelativePosition = new d.PointF2D(e3.x, a2);
            } else if (t3.Placement === L.PlacementEnum.Below) {
              const i4 = o2.getBottomLineMaxInRange(n2, r2), l2 = s2.ParentStaff.ParentInstrument.Staves[s2.ParentStaff.ParentInstrument.Staves.length - 1];
              if (s2.isPartOfMultiStaffInstrument() && s2.ParentStaff !== l2) {
                const e4 = s2.ParentMusicSystem.StaffLines[s2.ParentMusicSystem.StaffLines.indexOf(s2) + 1].PositionAndShape.RelativePosition.y - s2.PositionAndShape.RelativePosition.y - this.rules.StaffHeight;
                a2 = i4 + t3.PositionAndShape.BorderMarginBottom < this.rules.StaffHeight + e4 / 2 ? this.rules.StaffHeight + e4 / 2 : i4 - t3.PositionAndShape.BorderMarginTop;
              } else a2 = i4 - t3.PositionAndShape.BorderMarginTop;
              t3.PositionAndShape.RelativePosition = new d.PointF2D(e3.x, a2);
            }
            t3.updateSkyBottomLine();
          }
          calcGraphicalRepetitionEndingsRecursively(t3) {
          }
          layoutSingleRepetitionEnding(t3, e3, i3, s2, n2, r2) {
          }
          calculateLabel(t3, e3, i3, s2, n2, r2, o2 = p.TextAlignmentEnum.CenterBottom, a2 = 0) {
            const l2 = new P.Label(i3, o2);
            l2.fontStyle = s2, l2.fontHeight = r2;
            const h2 = new m.GraphicalLabel(l2, r2, l2.textAlignment, this.rules, t3.PositionAndShape), c2 = 1.1;
            n2 === L.PlacementEnum.Below && (h2.Label.textAlignment = p.TextAlignmentEnum.LeftTop), h2.setLabelPositionAndShapeBorders(), h2.PositionAndShape.BorderMarginBottom *= c2, h2.PositionAndShape.BorderMarginTop *= c2, h2.PositionAndShape.BorderMarginLeft *= c2, h2.PositionAndShape.BorderMarginRight *= c2;
            let u2, f2 = e3.x + h2.PositionAndShape.BorderMarginLeft, g2 = e3.x + h2.PositionAndShape.BorderMarginRight;
            g2 > t3.PositionAndShape.Size.width && (g2 = t3.PositionAndShape.Size.width - this.rules.MeasureRightMargin, f2 = g2 - h2.PositionAndShape.MarginSize.width, e3.x = f2 - h2.PositionAndShape.BorderMarginLeft);
            const b2 = t3.SkyBottomLineCalculator;
            return u2 = n2 === L.PlacementEnum.Below ? b2.getBottomLineMaxInRange(f2, g2) + a2 : b2.getSkyLineMinInRange(f2, g2) - a2, h2.PositionAndShape.RelativePosition = new d.PointF2D(e3.x, u2), n2 === L.PlacementEnum.Below ? b2.updateBottomLineInRange(f2, g2, h2.PositionAndShape.BorderMarginBottom + u2) : b2.updateSkyLineInRange(f2, g2, h2.PositionAndShape.BorderMarginTop + u2), h2;
          }
          calculateTempoExpressionsForMultiTempoExpression(t3, e3, i3) {
            const s2 = r.Fraction.plus(t3.AbsoluteTimestamp, e3.Timestamp), n2 = this.graphicalMusicSheet.MeasureList[i3];
            let o2 = new d.PointF2D();
            if (e3.ContinuousTempo || e3.InstantaneousTempo) {
              if (this.rules.MinMeasureToDrawIndex > 0) return;
              if (!n2[0]) return;
              let t4 = n2[0].ParentStaffLine, i4 = n2[0].PositionAndShape.RelativePosition.x, r2 = 0;
              for (let e4 = 0; e4 < n2.length; e4++) if (n2[e4].ParentStaffLine && 0 !== n2[e4].ParentStaffLine.Measures.length && n2[e4].ParentStaffLine.Measures.length > 0) {
                t4 = n2[e4].ParentStaffLine, i4 = n2[e4].PositionAndShape.RelativePosition.x, r2 = e4;
                break;
              }
              if (o2 = this.getRelativePositionInStaffLineFromTimestamp(s2, r2, t4, t4.isPartOfMultiStaffInstrument(), i4), e3.EntriesList.length > 0 && e3.EntriesList[0].Expression instanceof C.InstantaneousTempoExpression && (e3.EntriesList[0].Expression.Placement = L.PlacementEnum.Above, t4.Measures[0].staffEntries.length > 0 && 0 === Math.abs(o2.x - t4.Measures[0].staffEntries[0].PositionAndShape.RelativePosition.x) && t4.ParentMusicSystem === this.musicSystems[0])) {
                const e4 = t4.Measures[0].FirstInstructionStaffEntry;
                if (e4) {
                  const t5 = e4.GraphicalInstructions.last();
                  o2.x = t5.PositionAndShape.RelativePosition.x;
                }
                this.rules.CompactMode && (o2.x = t4.PositionAndShape.RelativePosition.x + t4.Measures[0].PositionAndShape.RelativePosition.x);
              }
              for (const i5 of e3.EntriesList) {
                let s3 = p.TextAlignmentEnum.CenterBottom;
                this.rules.CompactMode && (s3 = p.TextAlignmentEnum.LeftBottom);
                const n3 = this.calculateLabel(t4, o2, i5.label, e3.getFontstyleOfFirstEntry(), i5.Expression.Placement, this.rules.UnknownTextHeight, s3, this.rules.TempoYSpacing);
                if (i5.Expression.ColorXML && this.rules.ExpressionsUseXMLColor && (n3.ColorXML = i5.Expression.ColorXML), i5.Expression instanceof C.InstantaneousTempoExpression) {
                  for (const e4 of t4.AbstractExpressions) e4 instanceof A.GraphicalInstantaneousTempoExpression && (e4.SourceExpression.Label, i5.Expression.Label);
                  if (new A.GraphicalInstantaneousTempoExpression(i5.Expression, n3).ParentStaffLine || _.default.warn("Adding staffline didn't work"), this.rules.MetronomeMarksDrawn && i5.Expression.Enum === C.TempoEnum.metronomeMark) {
                    this.createMetronomeMark(i5.Expression);
                    continue;
                  }
                } else if (i5.Expression instanceof R.ContinuousTempoExpression) {
                  for (const e4 of t4.AbstractExpressions) e4 instanceof A.GraphicalInstantaneousTempoExpression && (e4.SourceExpression.Label, i5.Expression.Label);
                  t4.AbstractExpressions.push(new A.GraphicalInstantaneousTempoExpression(i5.Expression, n3));
                }
              }
            }
          }
          createMetronomeMark(t3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          graphicalMeasureCreatedCalculations(t3) {
          }
          clearSystemsAndMeasures() {
            for (let t3 = 0, e3 = this.graphicalMusicSheet.MusicPages.length; t3 < e3; ++t3) {
              const e4 = this.graphicalMusicSheet.MusicPages[t3];
              for (let t4 = 0, i3 = e4.MusicSystems.length; t4 < i3; ++t4) {
                const i4 = e4.MusicSystems[t4];
                for (let t5 = 0, e5 = i4.StaffLines.length; t5 < e5; ++t5) {
                  const e6 = i4.StaffLines[t5];
                  for (let t6 = 0, i5 = e6.Measures.length; t6 < i5; ++t6) {
                    const i6 = e6.Measures[t6];
                    if (i6.FirstInstructionStaffEntry) {
                      const t7 = i6.PositionAndShape.ChildElements.indexOf(i6.FirstInstructionStaffEntry.PositionAndShape);
                      t7 > -1 && i6.PositionAndShape.ChildElements.splice(t7, 1), i6.FirstInstructionStaffEntry = void 0, i6.beginInstructionsWidth = 0;
                    }
                    if (i6.LastInstructionStaffEntry) {
                      const t7 = i6.PositionAndShape.ChildElements.indexOf(i6.LastInstructionStaffEntry.PositionAndShape);
                      t7 > -1 && i6.PositionAndShape.ChildElements.splice(t7, 1), i6.LastInstructionStaffEntry = void 0, i6.endInstructionsWidth = 0;
                    }
                  }
                  e6.Measures = [], e6.PositionAndShape.ChildElements = [];
                }
                i4.StaffLines.length = 0, i4.PositionAndShape.ChildElements = [];
              }
              e4.MusicSystems = [], e4.PositionAndShape.ChildElements = [];
            }
            this.graphicalMusicSheet.MusicPages = [];
          }
          handleVoiceEntry(t3, e3, i3, s2, n2, r2, o2, a2, l2, h2 = void 0, u2 = void 0) {
            t3.StemDirectionXml !== c.StemDirectionType.Undefined && this.rules.SetWantedStemDirectionByXml && void 0 !== t3.StemDirectionXml ? t3.WantedStemDirection = t3.StemDirectionXml : this.calculateStemDirectionFromVoices(t3);
            const d2 = e3.findOrCreateGraphicalVoiceEntry(t3);
            d2.octaveShiftValue = a2;
            const f2 = e3.tabStaffEntry;
            let m2;
            f2 && (m2 = f2.findOrCreateGraphicalVoiceEntry(t3));
            for (let s3 = 0, l3 = t3.Notes.length; s3 < l3; ++s3) {
              const l4 = t3.Notes[s3];
              if (!l4) continue;
              if (void 0 !== u2 && void 0 !== u2.Link && void 0 !== h2 && h2.indexOf(l4) > -1) continue;
              let c2;
              if (t3.IsGrace ? c2 = k.symbolFactory.createGraceNote(l4, d2, n2, this.rules, a2) : (c2 = k.symbolFactory.createNote(l4, d2, n2, a2, this.rules, void 0), k.stafflineNoteCalculator.trackNote(c2)), l4.Pitch && this.checkNoteForAccidental(c2, i3, n2, a2), this.resetYPositionForLeadSheet(c2.PositionAndShape), e3.addGraphicalNoteToListAtCorrectYPosition(d2, c2), c2.PositionAndShape.calculateBoundingBox(), this.leadSheet || (void 0 !== l4.NoteBeam && l4.PrintObject && (l4 instanceof O.TabNote && !this.rules.TabBeamsRendered || this.handleBeam(c2, l4.NoteBeam, o2)), void 0 !== l4.NoteTuplet && l4.PrintObject && this.handleTuplet(c2, l4.NoteTuplet, r2)), m2) {
                const t4 = k.symbolFactory.createNote(l4, m2, n2, a2, this.rules, void 0);
                f2.addGraphicalNoteToListAtCorrectYPosition(m2, t4), t4.PositionAndShape.calculateBoundingBox(), this.leadSheet || l4.NoteTuplet && this.handleTuplet(t4, l4.NoteTuplet, r2);
              }
            }
            return t3.Articulations.length > 0 && this.handleVoiceEntryArticulations(t3.Articulations, t3, e3), t3.TechnicalInstructions.length > 0 && this.handleVoiceEntryTechnicalInstructions(t3.TechnicalInstructions, t3, e3), t3.LyricsEntries.size() > 0 && this.handleVoiceEntryLyrics(t3, e3, s2), t3.OrnamentContainer && this.handleVoiceEntryOrnaments(t3.OrnamentContainer, t3, e3), a2;
          }
          resetYPositionForLeadSheet(t3) {
            this.leadSheet && (t3.RelativePosition = new d.PointF2D(t3.RelativePosition.x, 0));
          }
          layoutVoiceEntries(t3, e3) {
            if (t3.PositionAndShape.RelativePosition = new d.PointF2D(0, 0), !this.leadSheet) for (const e4 of t3.graphicalVoiceEntries) {
              const i3 = e4.notes;
              if (0 === i3.length) continue;
              const s2 = i3[0].sourceNote.ParentVoiceEntry, n2 = void 0 !== i3[0].sourceNote.Pitch;
              this.layoutVoiceEntry(s2, i3, t3, n2);
            }
          }
          maxInstrNameLabelLength() {
            var _a;
            let t3 = 0;
            for (const e3 of this.graphicalMusicSheet.ParentMusicSheet.Instruments) if (((_a = e3.NameLabel) == null ? void 0 : _a.print) && e3.Voices.length > 0 && e3.Voices[0].Visible) {
              let i3 = e3.NameLabel;
              this.rules.RenderPartNames || (i3 = new P.Label("", i3.textAlignment, i3.font));
              const s2 = new m.GraphicalLabel(i3, this.rules.InstrumentLabelTextHeight, p.TextAlignmentEnum.LeftCenter, this.rules);
              s2.setLabelPositionAndShapeBorders(), t3 = Math.max(t3, s2.PositionAndShape.MarginSize.width);
            }
            return this.rules.RenderPartNames ? t3 : 0;
          }
          calculateSheetLabelBoundingBoxes() {
            const t3 = this.graphicalMusicSheet.ParentMusicSheet, e3 = this.rules.DefaultColorTitle;
            if (void 0 !== t3.Title && this.rules.RenderTitle) {
              const i3 = new m.GraphicalLabel(t3.Title, this.rules.SheetTitleHeight, p.TextAlignmentEnum.CenterBottom, this.rules);
              i3.Label.IsCreditLabel = true, i3.Label.colorDefault = e3, this.graphicalMusicSheet.Title = i3, i3.setLabelPositionAndShapeBorders();
            } else this.rules.RenderTitle || (this.graphicalMusicSheet.Title = void 0);
            if (void 0 !== t3.Subtitle && this.rules.RenderSubtitle) {
              const i3 = new m.GraphicalLabel(t3.Subtitle, this.rules.SheetSubtitleHeight, p.TextAlignmentEnum.CenterCenter, this.rules);
              i3.Label.IsCreditLabel = true, i3.Label.colorDefault = e3, this.graphicalMusicSheet.Subtitle = i3, i3.setLabelPositionAndShapeBorders();
            } else this.rules.RenderSubtitle || (this.graphicalMusicSheet.Subtitle = void 0);
            if (void 0 !== t3.Composer && this.rules.RenderComposer) {
              const i3 = new m.GraphicalLabel(t3.Composer, this.rules.SheetComposerHeight, p.TextAlignmentEnum.RightCenter, this.rules);
              i3.Label.IsCreditLabel = true, i3.Label.colorDefault = e3, this.graphicalMusicSheet.Composer = i3, i3.setLabelPositionAndShapeBorders();
            } else this.rules.RenderComposer || (this.graphicalMusicSheet.Composer = void 0);
            if (void 0 !== t3.Lyricist && this.rules.RenderLyricist) {
              const i3 = new m.GraphicalLabel(t3.Lyricist, this.rules.SheetAuthorHeight, p.TextAlignmentEnum.LeftCenter, this.rules);
              i3.Label.IsCreditLabel = true, i3.Label.colorDefault = e3, this.graphicalMusicSheet.Lyricist = i3, i3.setLabelPositionAndShapeBorders();
            } else this.rules.RenderLyricist || (this.graphicalMusicSheet.Lyricist = void 0);
            if (void 0 !== t3.Copyright && this.rules.RenderCopyright) {
              const i3 = new m.GraphicalLabel(t3.Copyright, this.rules.SheetCopyrightHeight, p.TextAlignmentEnum.CenterBottom, this.rules);
              i3.Label.IsCreditLabel = true, i3.Label.colorDefault = e3, this.graphicalMusicSheet.Copyright = i3, i3.setLabelPositionAndShapeBorders();
            } else this.rules.RenderCopyright || (this.graphicalMusicSheet.Copyright = void 0);
          }
          checkMeasuresForWholeRestNotes() {
            for (let t3 = 0, e3 = this.musicSystems.length; t3 < e3; ++t3) {
              const e4 = this.musicSystems[t3];
              for (let t4 = 0, i3 = e4.StaffLines.length; t4 < i3; ++t4) {
                const i4 = e4.StaffLines[t4];
                for (let t5 = 0, e5 = i4.Measures.length; t5 < e5; ++t5) {
                  const e6 = i4.Measures[t5];
                  if (1 === e6.staffEntries.length) {
                    const t6 = e6.staffEntries[0];
                    if (t6.graphicalVoiceEntries.length > 0 && 1 === t6.graphicalVoiceEntries[0].notes.length) {
                      const i5 = t6.graphicalVoiceEntries[0].notes[0];
                      !i5.sourceNote.Pitch && new r.Fraction(1, 2).lt(i5.sourceNote.Length) && this.layoutMeasureWithWholeRest(i5, t6, e6);
                    }
                  }
                }
              }
            }
          }
          optimizeRestNotePlacement(t3, e3) {
            if (0 === t3.graphicalVoiceEntries.length) return;
            const i3 = t3.graphicalVoiceEntries[0].notes;
            if (0 === i3.length) return;
            const s2 = i3[0], n2 = s2.sourceNote.isRest();
            if (2 === t3.graphicalVoiceEntries.length) {
              let e4 = false;
              const i4 = t3.graphicalVoiceEntries[1].notes;
              i4.length > 0 && (e4 = i4[0].sourceNote.isRest()), n2 && e4 ? this.calculateTwoRestNotesPlacementWithCollisionDetection(t3) : (n2 || e4) && this.calculateRestNotePlacementWithCollisionDetectionFromGraphicalNote(t3);
            } else if (n2 && t3 !== e3.staffEntries[0] && t3 !== e3.staffEntries[e3.staffEntries.length - 1]) {
              const i4 = e3.staffEntries.indexOf(t3), n3 = e3.staffEntries[i4 - 1], r2 = e3.staffEntries[i4 + 1];
              if (1 === n3.graphicalVoiceEntries.length) {
                const e4 = n3.graphicalVoiceEntries[0].notes[0];
                if (void 0 !== e4.sourceNote.NoteBeam && 1 === r2.graphicalVoiceEntries.length) {
                  const i5 = r2.graphicalVoiceEntries[0].notes[0];
                  void 0 !== i5.sourceNote.NoteBeam && e4.sourceNote.NoteBeam === i5.sourceNote.NoteBeam && (this.calculateRestNotePlacementWithinGraphicalBeam(t3, s2, e4, r2, i5), t3.PositionAndShape.calculateBoundingBox());
                }
              }
            }
          }
          getRelativePositionInStaffLineFromTimestamp(t3, e3, i3, s2, n2 = 0, o2 = false) {
            let a2, l2, h2 = new d.PointF2D();
            const c2 = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length, u2 = this.graphicalMusicSheet.GetInterpolatedIndexInVerticalContainers(t3), f2 = Math.min(Math.floor(u2), c2 - 1), m2 = Math.min(Math.ceil(u2), c2 - 1);
            if (f2 < 0 || e3 < 0) return h2;
            if (a2 = this.getFirstLeftNotNullStaffEntryFromContainer(f2, e3, s2), l2 = this.getFirstRightNotNullStaffEntryFromContainer(m2, e3, s2), a2 && l2) {
              let e4 = a2.parentMeasure.PositionAndShape.RelativePosition.x;
              n2 > 0 && (e4 = n2);
              let s3 = a2.PositionAndShape.RelativePosition.x + e4, c3 = l2.PositionAndShape.RelativePosition.x + l2.parentMeasure.PositionAndShape.RelativePosition.x;
              const u3 = t3.RealValue > l2.getAbsoluteTimestamp().RealValue;
              n2 > 0 ? c3 = l2.PositionAndShape.RelativePosition.x + e4 : o2 && (a2.getAbsoluteTimestamp().RealValue === t3.RealValue || u3) && (s3 = a2.PositionAndShape.RelativePosition.x + a2.PositionAndShape.BorderLeft + e4, c3 = s3);
              let f3 = 0;
              if (a2 !== l2) {
                const e5 = a2.getAbsoluteTimestamp(), i4 = l2.getAbsoluteTimestamp();
                f3 = r.Fraction.minus(t3, e5).RealValue / r.Fraction.minus(i4, e5).RealValue;
              }
              a2.parentMeasure.ParentStaffLine !== l2.parentMeasure.ParentStaffLine && (a2.parentMeasure.ParentStaffLine === i3 ? c3 = i3.PositionAndShape.Size.width : s3 = i3.PositionAndShape.RelativePosition.x), h2 = new d.PointF2D(s3 + (c3 - s3) * f3, 0);
            }
            return h2;
          }
          getRelativeXPositionFromTimestamp(t3) {
            const e3 = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length, i3 = this.graphicalMusicSheet.GetInterpolatedIndexInVerticalContainers(t3), s2 = Math.max(0, Math.min(Math.round(i3), e3 - 1)), n2 = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[s2].getFirstNonNullStaffEntry();
            return n2.PositionAndShape.RelativePosition.x + n2.parentMeasure.PositionAndShape.RelativePosition.x;
          }
          calculatePageLabels(t3) {
            var _a, _b;
            this.rules.RenderSingleHorizontalStaffline && (t3.PositionAndShape.calculateBoundingBox([a.GraphicalMeasure.name]), this.graphicalMusicSheet.ParentMusicSheet.pageWidth = t3.PositionAndShape.Size.width);
            let e3 = 10, i3 = -1;
            if (t3.MusicSystems.length > 0) {
              const s3 = t3.MusicSystems[0];
              e3 = s3.PositionAndShape.RelativePosition.y + s3.PositionAndShape.BorderTop;
              const n3 = t3.MusicSystems[t3.MusicSystems.length - 1];
              i3 = n3.PositionAndShape.RelativePosition.y + n3.PositionAndShape.BorderBottom;
            }
            const s2 = this.graphicalMusicSheet.Title;
            if (s2 && this.rules.RenderTitle) {
              s2.PositionAndShape.Parent = t3.PositionAndShape;
              const e4 = new d.PointF2D();
              e4.x = this.graphicalMusicSheet.ParentMusicSheet.pageWidth / 2, this.rules.RenderSingleHorizontalStaffline && (e4.x = Math.max(e4.x, s2.PositionAndShape.Size.width)), e4.y = this.rules.TitleTopDistance + this.rules.SheetTitleHeight, s2.PositionAndShape.RelativePosition = e4, t3.Labels.push(s2);
            }
            if (this.graphicalMusicSheet.Subtitle && this.rules.RenderTitle && this.rules.RenderSubtitle) {
              const e4 = this.graphicalMusicSheet.Subtitle;
              e4.PositionAndShape.Parent = t3.PositionAndShape;
              const i4 = new d.PointF2D();
              i4.x = this.graphicalMusicSheet.ParentMusicSheet.pageWidth / 2, this.rules.RenderSingleHorizontalStaffline && (i4.x = s2.PositionAndShape.RelativePosition.x), i4.y = this.rules.TitleTopDistance + this.rules.SheetTitleHeight + this.rules.SheetMinimumDistanceBetweenTitleAndSubtitle;
              const n3 = (_a = e4.TextLines) == null ? void 0 : _a.length;
              n3 > 1 && (i4.y += e4.PositionAndShape.BorderBottom * (n3 - 1) / n3), e4.PositionAndShape.RelativePosition = i4, t3.Labels.push(e4);
            }
            const n2 = this.graphicalMusicSheet.Composer;
            let r2;
            if (n2 && this.rules.RenderComposer) {
              n2.PositionAndShape.Parent = t3.PositionAndShape, n2.setLabelPositionAndShapeBorders();
              const i4 = new d.PointF2D();
              i4.x = this.graphicalMusicSheet.ParentMusicSheet.pageWidth - this.rules.PageRightMargin, i4.y = e3, i4.y -= this.rules.SystemComposerDistance;
              const s3 = (_b = n2.TextLines) == null ? void 0 : _b.length;
              s3 > 1 && (i4.y -= n2.PositionAndShape.BorderBottom * (s3 - 1) / s3), r2 = i4.y, n2.PositionAndShape.RelativePosition = i4, t3.Labels.push(n2);
            }
            const o2 = this.graphicalMusicSheet.Lyricist;
            if (o2 && this.rules.RenderLyricist) {
              o2.PositionAndShape.Parent = t3.PositionAndShape, o2.setLabelPositionAndShapeBorders();
              const i4 = new d.PointF2D();
              i4.x = this.rules.PageLeftMargin, i4.y = e3, i4.y -= this.rules.SystemLyricistDistance, i4.y += o2.PositionAndShape.BorderBottom, i4.y = Math.min(i4.y, r2 ?? Number.MAX_SAFE_INTEGER), o2.PositionAndShape.RelativePosition = i4, t3.Labels.push(o2);
            }
            const l2 = this.graphicalMusicSheet.Copyright;
            if (l2 && this.rules.RenderCopyright) {
              l2.PositionAndShape.Parent = t3.PositionAndShape, l2.setLabelPositionAndShapeBorders();
              const e4 = new d.PointF2D();
              e4.x = t3.PositionAndShape.Size.width / 2, e4.y = i3 + this.rules.SheetCopyrightMargin, e4.y -= l2.PositionAndShape.BorderTop, l2.PositionAndShape.RelativePosition = e4, t3.Labels.push(l2);
            }
            this.rules.RenderSingleHorizontalStaffline && (t3.PositionAndShape.calculateBoundingBox([a.GraphicalMeasure.name]), this.graphicalMusicSheet.ParentMusicSheet.pageWidth = t3.PositionAndShape.Size.width);
          }
          createGraphicalTies() {
            for (let t3 = 0; t3 < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; t3++) {
              const e3 = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[t3];
              for (let i3 = 0; i3 < e3.CompleteNumberOfStaves; i3++) for (let s2 = 0; s2 < e3.VerticalSourceStaffEntryContainers.length; s2++) {
                const n2 = e3.VerticalSourceStaffEntryContainers[s2].StaffEntries[i3];
                if (n2) {
                  const e4 = this.graphicalMusicSheet.findGraphicalStaffEntryFromMeasureList(i3, t3, n2);
                  e4 && (e4.GraphicalTies.clear(), e4.ties.clear());
                  for (let s3 = 0, r2 = n2.VoiceEntries.length; s3 < r2; ++s3) {
                    const r3 = n2.VoiceEntries[s3];
                    for (let s4 = 0, n3 = r3.Notes.length; s4 < n3; ++s4) {
                      const n4 = r3.Notes[s4];
                      if (n4.NoteTie) {
                        const s5 = n4.NoteTie;
                        if (n4 === n4.NoteTie.Notes.last()) continue;
                        if (e4) for (const t4 of e4.GraphicalTies) t4.Tie;
                        this.handleTie(s5, e4, i3, t3);
                      }
                    }
                  }
                  this.setTieDirections(e4);
                }
              }
            }
          }
          handleTie(t3, e3, i3, s2) {
            if (!e3) return;
            e3.ties.push(t3);
            let n2, r2, o2, a2 = e3;
            for (let e4 = 1; e4 < t3.Notes.length; e4++) if (n2 = a2.findTieGraphicalNoteFromNote(t3.Notes[e4 - 1]), r2 = this.graphicalMusicSheet.GetGraphicalFromSourceStaffEntry(t3.Notes[e4].ParentStaffEntry), r2) {
              if (o2 = r2.findTieGraphicalNoteFromNote(t3.Notes[e4]), void 0 !== n2 && void 0 !== o2 && r2) {
                if (!n2.sourceNote.PrintObject || !o2.sourceNote.PrintObject) continue;
                const e5 = this.createGraphicalTie(t3, a2, r2, n2, o2);
                a2.GraphicalTies.push(e5), this.staffEntriesWithGraphicalTies.indexOf(a2) >= 0 && this.staffEntriesWithGraphicalTies.push(a2);
              }
              a2 = r2;
            }
          }
          setTieDirections(t3) {
            if (!t3) return;
            const e3 = t3.ties;
            if (1 === e3.length) {
              const t4 = e3[0];
              if (t4.TieDirection === L.PlacementEnum.NotYetDefined) {
                const e4 = t4.Notes[0].ParentVoiceEntry.ParentVoice.VoiceId;
                2 !== e4 && 6 !== e4 || (t4.TieDirection = L.PlacementEnum.Below);
              }
            }
            if (e3.length > 1) {
              let t4;
              for (const i3 of e3) {
                const e4 = i3.Notes[0];
                (!t4 || e4.Pitch.getHalfTone() > t4.Pitch.getHalfTone()) && (t4 = e4);
              }
              for (const i3 of e3) i3.TieDirection === L.PlacementEnum.NotYetDefined && (i3.Notes[0] === t4 ? i3.TieDirection = L.PlacementEnum.Above : i3.TieDirection = L.PlacementEnum.Below);
            }
          }
          createAccidentalCalculators() {
            const t3 = [], e3 = this.graphicalMusicSheet.ParentMusicSheet.getFirstSourceMeasure();
            if (e3) for (let i3 = 0; i3 < e3.CompleteNumberOfStaves; i3++) {
              const s2 = new x.AccidentalCalculator();
              if (t3.push(s2), s2.Transpose = this.graphicalMusicSheet.ParentMusicSheet.Transpose, e3.FirstInstructionsStaffEntries[i3]) for (let t4 = 0, n2 = e3.FirstInstructionsStaffEntries[i3].Instructions.length; t4 < n2; ++t4) {
                const n3 = e3.FirstInstructionsStaffEntries[i3].Instructions[t4];
                if (n3 instanceof g.KeyInstruction) {
                  const t5 = n3;
                  s2.ActiveKeyInstruction = t5;
                }
              }
            }
            return t3;
          }
          calculateVerticalContainersList() {
            const t3 = this.graphicalMusicSheet.MeasureList[0].length;
            for (let e3 = 0; e3 < this.graphicalMusicSheet.MeasureList.length; e3++) for (let i3 = 0; i3 < t3; i3++) {
              const t4 = this.graphicalMusicSheet.MeasureList[e3][i3];
              if (t4) for (let e4 = 0, s2 = t4.staffEntries.length; e4 < s2; ++e4) {
                const s3 = t4.staffEntries[e4], n2 = this.graphicalMusicSheet.getOrCreateVerticalContainer(s3.getAbsoluteTimestamp());
                n2 && (n2.StaffEntries[i3] = s3, s3.parentVerticalContainer = n2);
              }
            }
          }
          setIndicesToVerticalGraphicalContainers() {
            for (let t3 = 0; t3 < this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length; t3++) this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[t3].Index = t3;
          }
          createGraphicalMeasuresForSourceMeasure(t3, e3, i3, s2, n2) {
            this.initGraphicalMeasuresCreation();
            const r2 = [], o2 = [], a2 = [], l2 = [];
            let h2 = true;
            for (let c2 = 0; c2 < t3.CompleteNumberOfStaves; c2++) {
              const u2 = this.createGraphicalMeasure(t3, a2, o2, e3[c2], n2, s2, i3, c2, l2);
              h2 = h2 && u2.hasOnlyRests, r2.push(u2);
            }
            return t3.allRests = h2, t3.VerticalMeasureList = r2, r2;
          }
          createGraphicalMeasure(t3, e3, i3, s2, n2, a2, u2, d2, m2) {
            var _a, _b, _c, _d, _e, _f;
            const p2 = this.graphicalMusicSheet.ParentMusicSheet.getStaffFromIndex(d2);
            let b2;
            if (n2[d2].ClefType === l.ClefEnum.TAB || p2.isTab) p2.isTab = true, b2 = k.symbolFactory.createTabStaffMeasure(t3, p2);
            else if (t3.multipleRestMeasures && this.rules.RenderMultipleRestMeasures) b2 = k.symbolFactory.createMultiRestMeasure(t3, p2);
            else {
              if (t3.multipleRestMeasureNumber > 1) return;
              b2 = k.symbolFactory.createGraphicalMeasure(t3, p2);
            }
            if (b2.hasError = t3.getErrorInMeasure(d2), t3.FirstInstructionsStaffEntries[d2]) for (let e4 = 0, i4 = t3.FirstInstructionsStaffEntries[d2].Instructions.length; e4 < i4; ++e4) {
              const i5 = t3.FirstInstructionsStaffEntries[d2].Instructions[e4];
              if (i5 instanceof g.KeyInstruction) {
                const t4 = g.KeyInstruction.copy(i5), e5 = b2.getTransposedHalftones();
                0 !== e5 && b2.ParentStaff.ParentInstrument.MidiInstrumentId !== v.MidiInstrument.Percussion && k.transposeCalculator && k.transposeCalculator.transposeKey(t4, e5), s2.ActiveKeyInstruction = t4;
              }
            }
            const S2 = [];
            for (let e4 = 0, i4 = t3.StaffLinkedExpressions[d2].length; e4 < i4; ++e4) {
              const i5 = t3.StaffLinkedExpressions[d2][e4];
              let s3;
              if (i5.OctaveShiftStart ? s3 = i5.OctaveShiftStart : i5.OctaveShiftEnd && (s3 = i5.OctaveShiftEnd), s3) {
                S2.push(i5);
                const e5 = s3;
                let n3 = (_a = e5 == null ? void 0 : e5.ParentEndMultiExpression) == null ? void 0 : _a.AbsoluteTimestamp;
                (e5 == null ? void 0 : e5.ParentEndMultiExpression) || (n3 = r.Fraction.plus(t3.AbsoluteTimestamp, t3.Duration)), a2[d2] = new E.OctaveShiftParams(e5, e5.ParentStartMultiExpression.AbsoluteTimestamp, n3);
              }
            }
            for (let r2 = 0; r2 < t3.VerticalSourceStaffEntryContainers.length; r2++) {
              const o2 = t3.VerticalSourceStaffEntryContainers[r2].StaffEntries[d2];
              if (o2) {
                for (let t5 = 0, e4 = o2.Instructions.length; t5 < e4; ++t5) {
                  const e5 = o2.Instructions[t5];
                  e5 instanceof l.ClefInstruction && ((_b = n2[d2]) == null ? void 0 : _b.ClefType) !== l.ClefEnum.TAB && (n2[d2] = e5);
                }
                const t4 = k.symbolFactory.createStaffEntry(o2, b2);
                r2 < b2.staffEntries.length ? b2.addGraphicalStaffEntryAtTimestamp(t4) : b2.addGraphicalStaffEntry(t4);
                const c2 = [];
                o2.Link && (o2.findLinkedNotes(c2), this.handleStaffEntryLink(t4, m2));
                let f2 = h.OctaveEnum.NONE;
                if (a2[d2] && a2[d2].getAbsoluteStartTimestamp.lte(o2.AbsoluteTimestamp) && o2.AbsoluteTimestamp.lte(a2[d2].getAbsoluteEndTimestamp) && (f2 = a2[d2].getOpenOctaveShift.Type), f2 === h.OctaveEnum.NONE) for (const t5 of S2) {
                  let e4;
                  if (t5.OctaveShiftStart ? e4 = t5.OctaveShiftStart : t5.OctaveShiftEnd && (e4 = t5.OctaveShiftEnd), ((_c = e4 == null ? void 0 : e4.ParentStartMultiExpression) == null ? void 0 : _c.AbsoluteTimestamp.lte(o2.AbsoluteTimestamp)) && !((_d = e4.ParentEndMultiExpression) == null ? void 0 : _d.AbsoluteTimestamp.lt(o2.AbsoluteTimestamp))) {
                    f2 = e4.Type;
                    break;
                  }
                }
                for (let r3 = 0, a3 = o2.VoiceEntries.length; r3 < a3; ++r3) {
                  const a4 = o2.VoiceEntries[r3];
                  f2 = this.handleVoiceEntry(a4, t4, s2, u2, n2[d2], e3, i3, f2, d2, c2, o2);
                }
                if (o2.Instructions.length > 0) {
                  const e4 = o2.Instructions[0];
                  k.symbolFactory.createInStaffClef(t4, e4);
                }
                this.rules.RenderChordSymbols && ((_e = o2.ChordContainers) == null ? void 0 : _e.length) > 0 && (o2.ParentStaff.ParentInstrument.HasChordSymbols = true, k.symbolFactory.createChordSymbols(o2, t4, s2.ActiveKeyInstruction, this.graphicalMusicSheet.ParentMusicSheet.Transpose));
              }
            }
            if (s2.doCalculationsAtEndOfMeasure(), t3.LastInstructionsStaffEntries[d2]) {
              const e4 = t3.LastInstructionsStaffEntries[d2];
              for (let t4 = 0, i4 = e4.Instructions.length; t4 < i4; ++t4) {
                const i5 = e4.Instructions[t4];
                i5 instanceof l.ClefInstruction && ((_f = n2[d2]) == null ? void 0 : _f.ClefType) !== l.ClefEnum.TAB && (n2[d2] = i5);
              }
            }
            for (let e4 = 0, i4 = t3.StaffLinkedExpressions[d2].length; e4 < i4; ++e4) {
              const i5 = t3.StaffLinkedExpressions[d2][e4];
              void 0 !== i5.OctaveShiftEnd && void 0 !== a2[d2] && i5.OctaveShiftEnd === a2[d2].getOpenOctaveShift && (a2[d2] = void 0);
            }
            for (const t4 of b2.staffEntries) for (const e4 of t4.graphicalVoiceEntries) this.setBeamNotesWantedStemDirections(e4.parentVoiceEntry);
            if (this.rules.FillEmptyMeasuresWithWholeRest >= 1 && 0 === b2.staffEntries.length) {
              const e4 = new f.SourceStaffEntry(new T.VerticalSourceStaffEntryContainer(b2.parentSourceMeasure, b2.parentSourceMeasure.AbsoluteTimestamp, b2.parentSourceMeasure.CompleteNumberOfStaves), p2);
              if (0 === p2.Voices.length) {
                const t4 = new D.Voice(b2.ParentStaff.ParentInstrument, -1);
                p2.Voices.push(t4);
              }
              const i4 = new c.VoiceEntry(new r.Fraction(0, 1), p2.Voices[0], e4);
              let s3 = t3.Duration;
              0 === s3.RealValue && (s3 = t3.ActiveTimeSignature.clone());
              const n3 = new o.Note(i4, e4, s3, void 0, t3, true);
              n3.IsWholeMeasureRest = true, n3.PrintObject = this.rules.FillEmptyMeasuresWithWholeRest === B.FillEmptyMeasuresWithWholeRests.YesVisible, i4.Notes.push(n3);
              const a3 = k.symbolFactory.createStaffEntry(e4, b2);
              b2.addGraphicalStaffEntry(a3), a3.relInMeasureTimestamp = i4.Timestamp;
              const u3 = k.symbolFactory.createVoiceEntry(i4, a3);
              a3.graphicalVoiceEntries.push(u3);
              const d3 = k.symbolFactory.createNote(n3, u3, new l.ClefInstruction(), h.OctaveEnum.NONE, this.rules);
              k.stafflineNoteCalculator.trackNote(d3), u3.notes.push(d3);
            }
            b2.hasOnlyRests = true;
            for (const t4 of b2.staffEntries) if (b2.hasOnlyRests = t4.hasOnlyRests(), !b2.hasOnlyRests) break;
            return b2;
          }
          checkNoteForAccidental(t3, e3, i3, s2) {
            let n2 = t3.sourceNote.Pitch;
            const r2 = t3.parentVoiceEntry.parentStaffEntry.parentMeasure.getTransposedHalftones();
            0 !== r2 && t3.sourceNote.ParentStaffEntry.ParentStaff.ParentInstrument.MidiInstrumentId !== v.MidiInstrument.Percussion && (n2 = t3.Transpose(e3.ActiveKeyInstruction, i3, r2, s2), t3.sourceNote.TransposedPitch = n2), t3.sourceNote.halfTone = n2.getHalfTone(), e3.checkAccidental(t3, n2);
          }
          handleStaffEntries(t3) {
            for (let e3 = 0, i3 = this.graphicalMusicSheet.MeasureList.length; e3 < i3; ++e3) {
              const i4 = this.graphicalMusicSheet.MeasureList[e3];
              for (let e4 = 0, s2 = i4.length; e4 < s2; ++e4) {
                const s3 = i4[e4];
                if (s3) {
                  this.rules.PercussionOneLineCutoff > 0 && !this.rules.PercussionUseCajon2NoteSystem && t3[e4] && (-1 === this.rules.PercussionOneLineCutoff || k.stafflineNoteCalculator.getStafflineUniquePositionCount(e4) < this.rules.PercussionOneLineCutoff) && (s3.ParentStaff.StafflineCount = 1);
                  for (const t4 of s3.staffEntries) void 0 !== t4.parentMeasure && t4.graphicalVoiceEntries.length > 0 && t4.graphicalVoiceEntries[0].notes.length > 0 && (this.layoutVoiceEntries(t4, e4), this.layoutStaffEntry(t4));
                  this.graphicalMeasureCreatedCalculations(s3);
                }
              }
            }
          }
          calculateSkyBottomLines() {
          }
          calculateExpressionAlignements() {
          }
          calculateStaffEntryArticulationMarks() {
            for (let t3 = 0, e3 = this.musicSystems.length; t3 < e3; ++t3) {
              const e4 = this.musicSystems[t3];
              for (let t4 = 0, i3 = e4.StaffLines.length; t4 < i3; ++t4) {
                const i4 = e4.StaffLines[t4];
                for (let t5 = 0, e5 = i4.Measures.length; t5 < e5; ++t5) {
                  const e6 = i4.Measures[t5];
                  for (let t6 = 0, i5 = e6.staffEntries.length; t6 < i5; ++t6) {
                    const i6 = e6.staffEntries[t6];
                    for (let t7 = 0, e7 = i6.sourceStaffEntry.VoiceEntries.length; t7 < e7; ++t7) {
                      const e8 = i6.sourceStaffEntry.VoiceEntries[t7];
                      e8.Articulations.length > 0 && this.layoutArticulationMarks(e8.Articulations, e8, i6);
                    }
                  }
                }
              }
            }
          }
          calculateOrnaments() {
            for (let t3 = 0, e3 = this.musicSystems.length; t3 < e3; ++t3) {
              const e4 = this.musicSystems[t3];
              for (let t4 = 0, i3 = e4.StaffLines.length; t4 < i3; ++t4) {
                const i4 = e4.StaffLines[t4];
                for (let t5 = 0, e5 = i4.Measures.length; t5 < e5; ++t5) {
                  const e6 = i4.Measures[t5];
                  for (let t6 = 0, i5 = e6.staffEntries.length; t6 < i5; ++t6) {
                    const i6 = e6.staffEntries[t6];
                    for (let t7 = 0, e7 = i6.sourceStaffEntry.VoiceEntries.length; t7 < e7; ++t7) {
                      const e8 = i6.sourceStaffEntry.VoiceEntries[t7];
                      if (e8.OrnamentContainer) {
                        if (e8.hasTie() && !i6.relInMeasureTimestamp.Equals(e8.Timestamp)) continue;
                        this.layoutOrnament(e8.OrnamentContainer, e8, i6), -1 === this.staffEntriesWithOrnaments.indexOf(i6) && this.staffEntriesWithOrnaments.push(i6);
                      }
                    }
                  }
                }
              }
            }
          }
          getFingeringPlacement(t3) {
            let e3 = this.rules.FingeringPosition;
            return e3 !== L.PlacementEnum.NotYetDefined && e3 !== L.PlacementEnum.AboveOrBelow || (e3 = t3.isUpperStaffOfInstrument() ? L.PlacementEnum.Above : L.PlacementEnum.Below), e3;
          }
          calculateFingerings() {
            var _a, _b;
            if (this.rules.FingeringPosition !== L.PlacementEnum.Left && this.rules.FingeringPosition !== L.PlacementEnum.Right) for (const t3 of this.musicSystems) for (const e3 of t3.StaffLines) for (const t4 of e3.Measures) {
              if (t4.isTabMeasure && !this.rules.TabFingeringsRendered) continue;
              const i3 = this.getFingeringPlacement(t4);
              for (const s2 of t4.staffEntries) {
                s2.FingeringEntries = [];
                const n2 = e3.SkyBottomLineCalculator, r2 = s2.PositionAndShape.RelativePosition.x + t4.PositionAndShape.RelativePosition.x, o2 = [];
                for (const t5 of s2.graphicalVoiceEntries) if (!t5.parentVoiceEntry.IsGrace) for (const e4 of t5.parentVoiceEntry.TechnicalInstructions) e4.type === b.TechnicalInstructionType.Fingering && o2.push(e4);
                if (i3 === L.PlacementEnum.Below && o2.reverse(), o2.length > 0) {
                  let t5;
                  for (const e4 of s2.graphicalVoiceEntries) for (const i4 of e4.notes) (!t5 || ((_a = i4.sourceNote.Pitch) == null ? void 0 : _a.getHalfTone()) > ((_b = t5.Pitch) == null ? void 0 : _b.getHalfTone())) && (t5 = i4.sourceNote);
                  (o2[0].sourceNote === t5 && i3 === L.PlacementEnum.Above || o2[0].sourceNote !== t5 && i3 === L.PlacementEnum.Below) && o2.reverse();
                }
                for (let t5 = 0; t5 < o2.length; t5++) {
                  const a2 = o2[t5], l2 = i3 === L.PlacementEnum.Above ? p.TextAlignmentEnum.CenterBottom : p.TextAlignmentEnum.CenterTop, h2 = new P.Label(a2.value, l2), c2 = new m.GraphicalLabel(h2, this.rules.FingeringTextSize, h2.textAlignment, this.rules, e3.PositionAndShape);
                  a2.fontFamily && (h2.fontFamily = a2.fontFamily);
                  const u2 = r2 + c2.PositionAndShape.BorderMarginLeft, d2 = r2 + c2.PositionAndShape.BorderMarginRight;
                  let f2;
                  f2 = i3 === L.PlacementEnum.Above ? n2.getSkyLineMinInRange(u2, d2) : n2.getBottomLineMaxInRange(u2, d2);
                  let g2 = 0;
                  0 === t5 ? (g2 += this.rules.FingeringOffsetY, i3 === L.PlacementEnum.Above && (g2 += 0.1)) : g2 += this.rules.FingeringPaddingY, i3 === L.PlacementEnum.Above && (g2 *= -1), c2.PositionAndShape.RelativePosition.y += f2 + g2, c2.PositionAndShape.RelativePosition.x = r2, c2.setLabelPositionAndShapeBorders(), c2.PositionAndShape.calculateBoundingBox(), s2.FingeringEntries.push(c2);
                  const b2 = c2.PositionAndShape.RelativePosition.x + c2.PositionAndShape.BorderLeft, S2 = b2 - c2.PositionAndShape.BorderLeft + c2.PositionAndShape.BorderRight;
                  i3 === L.PlacementEnum.Above ? n2.updateSkyLineInRange(b2, S2, c2.PositionAndShape.RelativePosition.y + c2.PositionAndShape.BorderTop) : i3 === L.PlacementEnum.Below && n2.updateBottomLineInRange(b2, S2, c2.PositionAndShape.RelativePosition.y + c2.PositionAndShape.BorderBottom);
                }
              }
            }
          }
          optimizeRestPlacement() {
            for (let t3 = 0, e3 = this.musicSystems.length; t3 < e3; ++t3) {
              const e4 = this.musicSystems[t3];
              for (let t4 = 0, i3 = e4.StaffLines.length; t4 < i3; ++t4) {
                const i4 = e4.StaffLines[t4];
                for (let t5 = 0, e5 = i4.Measures.length; t5 < e5; ++t5) {
                  const e6 = i4.Measures[t5];
                  for (let t6 = 0, i5 = e6.staffEntries.length; t6 < i5; ++t6) {
                    const i6 = e6.staffEntries[t6];
                    this.optimizeRestNotePlacement(i6, e6);
                  }
                }
              }
            }
          }
          calculateTwoRestNotesPlacementWithCollisionDetection(t3) {
            const e3 = t3.graphicalVoiceEntries[0].notes[0], i3 = t3.graphicalVoiceEntries[1].notes[0];
            i3.PositionAndShape.RelativePosition = new d.PointF2D(0, 2.5), t3.PositionAndShape.calculateAbsolutePositionsRecursiveWithoutTopelement(), e3.PositionAndShape.computeNonOverlappingPositionWithMargin(t3.PositionAndShape, y.ColDirEnum.Up, new d.PointF2D(0, i3.PositionAndShape.RelativePosition.y));
            const s2 = e3.PositionAndShape.RelativePosition;
            s2.y -= 1, e3.PositionAndShape.RelativePosition = s2, t3.PositionAndShape.calculateBoundingBox();
          }
          calculateRestNotePlacementWithCollisionDetectionFromGraphicalNote(t3) {
            let e3, i3;
            t3.graphicalVoiceEntries[0].notes[0].sourceNote.isRest() ? (e3 = t3.graphicalVoiceEntries[0].notes[0], i3 = t3.graphicalVoiceEntries[1].notes) : (i3 = t3.graphicalVoiceEntries[0].notes, e3 = t3.graphicalVoiceEntries[1].notes[0]);
            let s2 = false;
            t3.PositionAndShape.calculateAbsolutePositionsRecursiveWithoutTopelement();
            for (let t4 = 0, n2 = i3.length; t4 < n2; ++t4) {
              const n3 = i3[t4];
              if (e3.PositionAndShape.marginCollisionDetection(n3.PositionAndShape)) {
                s2 = true;
                break;
              }
            }
            if (s2) if (e3.sourceNote.ParentVoiceEntry.ParentVoice instanceof S.LinkedVoice) {
              const t4 = i3[0].PositionAndShape.BorderMarginBottom + i3[0].PositionAndShape.RelativePosition.y;
              e3.PositionAndShape.RelativePosition = new d.PointF2D(0, t4 - e3.PositionAndShape.BorderMarginTop + 0.5);
            } else {
              const t4 = i3[i3.length - 1], s3 = t4.PositionAndShape.BorderMarginTop + t4.PositionAndShape.RelativePosition.y;
              if (i3[0].sourceNote.ParentVoiceEntry.ParentVoice instanceof S.LinkedVoice) e3.PositionAndShape.RelativePosition = new d.PointF2D(0, s3 - e3.PositionAndShape.BorderMarginBottom - 0.5);
              else {
                const t5 = i3[0].PositionAndShape.BorderMarginBottom + i3[0].PositionAndShape.RelativePosition.y;
                e3.PositionAndShape.RelativePosition = t5 < 2 ? new d.PointF2D(0, t5 - e3.PositionAndShape.BorderMarginTop + 0.5) : new d.PointF2D(0, s3 - e3.PositionAndShape.BorderMarginBottom - 0);
              }
            }
            t3.PositionAndShape.calculateBoundingBox();
          }
          calculateTieCurves() {
            for (const t3 of this.musicSystems) for (const e3 of t3.StaffLines) for (const t4 of e3.Measures) for (const e4 of t4.staffEntries) for (const i3 of e4.GraphicalTies) if (void 0 !== i3.StartNote && i3.StartNote.parentVoiceEntry.parentStaffEntry === e4) {
              const e5 = i3.StartNote.parentVoiceEntry.parentStaffEntry.parentMeasure.ParentStaffLine !== i3.EndNote.parentVoiceEntry.parentStaffEntry.parentMeasure.ParentStaffLine;
              this.layoutGraphicalTie(i3, e5, t4.ParentStaff.isTab);
            }
          }
          calculateLyricsPosition() {
            const t3 = new M.Dictionary();
            for (let t4 = 0, e3 = this.graphicalMusicSheet.ParentMusicSheet.Instruments.length; t4 < e3; ++t4) {
              const e4 = this.graphicalMusicSheet.ParentMusicSheet.Instruments[t4];
              e4.HasLyrics && e4.LyricVersesNumbers.length > 0 && e4.LyricVersesNumbers.sort();
            }
            for (let e3 = 0, i3 = this.musicSystems.length; e3 < i3; ++e3) {
              const i4 = this.musicSystems[e3];
              for (let e4 = 0, s2 = i4.StaffLines.length; e4 < s2; ++e4) {
                const s3 = i4.StaffLines[e4], n2 = this.calculateSingleStaffLineLyricsPosition(s3, s3.ParentStaff.ParentInstrument.LyricVersesNumbers);
                t3.setValue(s3, n2), this.calculateLyricsExtendsAndDashes(t3.getValue(s3));
              }
            }
            for (let e3 = 0, i3 = this.musicSystems.length; e3 < i3; ++e3) {
              const i4 = this.musicSystems[e3];
              for (let e4 = 0, s2 = i4.StaffLines.length; e4 < s2; ++e4) {
                const s3 = i4.StaffLines[e4];
                this.calculateLyricsExtendsAndDashes(t3.getValue(s3));
              }
            }
          }
          calculateSingleLyricWord(t3) {
            const e3 = t3.ParentLyricWord, i3 = e3.GraphicalLyricsEntries.indexOf(t3);
            let s2;
            if (i3 >= 0 && (s2 = e3.GraphicalLyricsEntries[i3 + 1]), !s2) return;
            const n2 = t3.StaffEntryParent.parentMeasure.ParentStaffLine, r2 = s2.StaffEntryParent.parentMeasure.ParentStaffLine, o2 = t3.StaffEntryParent, a2 = s2.StaffEntryParent;
            if (t3.StaffEntryParent.parentMeasure.ParentStaffLine === s2.StaffEntryParent.parentMeasure.ParentStaffLine) {
              const e4 = o2.parentMeasure.PositionAndShape.RelativePosition.x + o2.PositionAndShape.RelativePosition.x + t3.GraphicalLabel.PositionAndShape.RelativePosition.x + t3.GraphicalLabel.PositionAndShape.BorderMarginRight - t3.GraphicalLabel.CenteringXShift, i4 = a2.parentMeasure.PositionAndShape.RelativePosition.x + a2.PositionAndShape.RelativePosition.x + t3.GraphicalLabel.PositionAndShape.RelativePosition.x + s2.GraphicalLabel.PositionAndShape.BorderMarginLeft, r3 = t3.GraphicalLabel.PositionAndShape.RelativePosition.y;
              let l2 = 1;
              i4 - e4 > 3 * this.rules.MinimumDistanceBetweenDashes && (l2 = Math.floor((i4 - e4) / this.rules.MinimumDistanceBetweenDashes) - 1), 1 === l2 ? this.calculateSingleDashForLyricWord(n2, e4, i4, r3) : this.calculateDashes(n2, e4, i4, r3);
            } else {
              const e4 = o2.parentMeasure.PositionAndShape.RelativePosition.x + o2.PositionAndShape.RelativePosition.x + t3.GraphicalLabel.PositionAndShape.BorderMarginRight, i4 = n2.Measures[n2.Measures.length - 1], l2 = i4.PositionAndShape.RelativePosition.x + i4.PositionAndShape.Size.width;
              let h2 = t3.GraphicalLabel.PositionAndShape.RelativePosition.y;
              if (this.calculateDashes(n2, e4, l2, h2), r2 && r2.Measures[0] && a2.parentMeasure.ParentStaffLine && (a2 !== a2.parentMeasure.staffEntries[0] || a2.parentMeasure !== a2.parentMeasure.ParentStaffLine.Measures[0])) {
                const t4 = r2.Measures[0].staffEntries[0].PositionAndShape.RelativePosition.x, e5 = a2.parentMeasure.PositionAndShape.RelativePosition.x + a2.PositionAndShape.RelativePosition.x + s2.GraphicalLabel.PositionAndShape.BorderMarginLeft;
                h2 = s2.GraphicalLabel.PositionAndShape.RelativePosition.y, this.calculateDashes(r2, t4, e5, h2);
              }
            }
          }
          calculateDashes(t3, e3, i3, s2) {
            let n2 = i3 - e3;
            if (n2 < 3 * this.rules.MinimumDistanceBetweenDashes) this.calculateSingleDashForLyricWord(t3, e3, i3, s2);
            else {
              const r2 = Math.floor(n2 / this.rules.MinimumDistanceBetweenDashes) - 1, o2 = n2 / (r2 + 1);
              let a2 = 0;
              for (e3 += o2, i3 -= o2; a2 <= Math.floor(r2 / 2) && i3 > e3; ) n2 = this.calculateRightAndLeftDashesForLyricWord(t3, e3, i3, s2), e3 += o2, i3 -= o2, a2++;
              n2 > 2 * o2 && this.calculateSingleDashForLyricWord(t3, e3, i3, s2);
            }
          }
          calculateSingleDashForLyricWord(t3, e3, i3, s2) {
            const n2 = new P.Label("-");
            n2.colorDefault = this.rules.DefaultColorLyrics;
            let r2 = this.rules.LyricsHeight;
            i3 - e3 < 0.8 && (r2 *= 0.8, s2 -= 0.1 * r2);
            const o2 = new m.GraphicalLabel(n2, r2, p.TextAlignmentEnum.CenterBottom, this.rules);
            o2.setLabelPositionAndShapeBorders(), t3.LyricsDashes.push(o2), -1 === this.staffLinesWithLyricWords.indexOf(t3) && this.staffLinesWithLyricWords.push(t3), o2.PositionAndShape.Parent = t3.PositionAndShape;
            const a2 = new d.PointF2D(e3 + (i3 - e3) / 2, s2);
            o2.PositionAndShape.RelativePosition = a2;
          }
          calculateLyricExtend(t3) {
            let e3 = t3.GraphicalLabel.PositionAndShape.RelativePosition.y;
            const i3 = t3.StaffEntryParent, s2 = i3.parentMeasure.ParentStaffLine;
            let n2, r2;
            const o2 = i3.parentMeasure.ParentStaff.idInMusicSheet;
            for (let t4 = i3.parentVerticalContainer.Index + 1; t4 < this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length; ++t4) {
              const e4 = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[t4].StaffEntries[o2];
              if (e4) {
                if (e4.hasOnlyRests()) break;
                if (e4.LyricsEntries.length > 0) break;
                n2 = e4, r2 = n2.parentMeasure.ParentStaffLine, r2 || (r2 = i3.parentMeasure.ParentStaffLine);
              }
            }
            if (n2 && r2) if (s2 === r2 && n2.parentMeasure.ParentStaffLine) {
              const r3 = i3.parentMeasure.PositionAndShape.RelativePosition.x + i3.PositionAndShape.RelativePosition.x + t3.GraphicalLabel.PositionAndShape.BorderMarginRight, o3 = n2.parentMeasure.PositionAndShape.RelativePosition.x + n2.PositionAndShape.RelativePosition.x + n2.PositionAndShape.BorderMarginRight;
              e3 -= t3.GraphicalLabel.PositionAndShape.Size.height / 4, this.calculateSingleLyricWordWithUnderscore(s2, r3, o3, e3);
            } else {
              const o3 = s2.Measures[s2.Measures.length - 1].PositionAndShape, a2 = i3.parentMeasure.PositionAndShape.RelativePosition.x + i3.PositionAndShape.RelativePosition.x + t3.GraphicalLabel.PositionAndShape.BorderMarginRight, l2 = o3.RelativePosition.x + o3.Size.width;
              if (e3 -= t3.GraphicalLabel.PositionAndShape.Size.height / 4, this.calculateSingleLyricWordWithUnderscore(s2, a2, l2, e3), !n2) return;
              if (n2.parentMeasure.ParentStaffLine && n2.parentMeasure.staffEntries && (n2 !== n2.parentMeasure.staffEntries[0] || n2.parentMeasure !== n2.parentMeasure.ParentStaffLine.Measures[0])) {
                const t4 = r2.Measures[0].staffEntries[0].PositionAndShape.RelativePosition.x, i4 = n2.parentMeasure.PositionAndShape.RelativePosition.x + n2.PositionAndShape.RelativePosition.x + n2.PositionAndShape.BorderMarginRight;
                this.calculateSingleLyricWordWithUnderscore(r2, t4, i4, e3);
              }
            }
          }
          calculateSingleLyricWordWithUnderscore(t3, e3, i3, s2) {
            const n2 = new d.PointF2D(e3, s2), r2 = new d.PointF2D(i3, s2), o2 = new w.GraphicalLine(n2, r2, this.rules.LyricUnderscoreLineWidth);
            o2.colorHex = this.rules.DefaultColorLyrics, t3.LyricLines.push(o2), -1 === this.staffLinesWithLyricWords.indexOf(t3) && this.staffLinesWithLyricWords.push(t3);
          }
          calculateRightAndLeftDashesForLyricWord(t3, e3, i3, s2) {
            const n2 = new P.Label("-");
            n2.colorDefault = this.rules.DefaultColorLyrics;
            const r2 = new m.GraphicalLabel(n2, this.rules.LyricsHeight, p.TextAlignmentEnum.CenterBottom, this.rules);
            r2.setLabelPositionAndShapeBorders(), t3.LyricsDashes.push(r2), -1 === this.staffLinesWithLyricWords.indexOf(t3) && this.staffLinesWithLyricWords.push(t3), r2.PositionAndShape.Parent = t3.PositionAndShape;
            const o2 = new d.PointF2D(e3, s2);
            r2.PositionAndShape.RelativePosition = o2;
            const a2 = new P.Label("-"), l2 = new m.GraphicalLabel(a2, this.rules.LyricsHeight, p.TextAlignmentEnum.CenterBottom, this.rules);
            l2.setLabelPositionAndShapeBorders(), t3.LyricsDashes.push(l2), l2.PositionAndShape.Parent = t3.PositionAndShape;
            const h2 = new d.PointF2D(i3, s2);
            return l2.PositionAndShape.RelativePosition = h2, l2.PositionAndShape.RelativePosition.x - r2.PositionAndShape.RelativePosition.x;
          }
          calculateDynamicExpressions() {
            const t3 = Math.min(this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length - 1, this.rules.MaxMeasureToDrawIndex);
            for (let e3 = Math.min(this.rules.MinMeasureToDrawIndex, this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length); e3 <= t3; e3++) {
              const t4 = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[e3];
              this.dynamicExpressionMap.clear();
              for (let i3 = 0; i3 < t4.StaffLinkedExpressions.length; i3++) if (this.graphicalMusicSheet.MeasureList[e3] && this.graphicalMusicSheet.MeasureList[e3][i3] && this.graphicalMusicSheet.MeasureList[e3][i3].ParentStaff.ParentInstrument.Visible) for (let s2 = 0; s2 < t4.StaffLinkedExpressions[i3].length; s2++) (void 0 !== t4.StaffLinkedExpressions[i3][s2].InstantaneousDynamic || void 0 !== t4.StaffLinkedExpressions[i3][s2].StartingContinuousDynamic && t4.StaffLinkedExpressions[i3][s2].StartingContinuousDynamic.StartMultiExpression === t4.StaffLinkedExpressions[i3][s2] && 0 === t4.StaffLinkedExpressions[i3][s2].UnknownList.length) && this.calculateDynamicExpressionsForMultiExpression(t4.StaffLinkedExpressions[i3][s2], e3, i3);
            }
            this.dynamicExpressionMap.clear();
          }
          calculateOctaveShifts() {
            for (let t3 = 0; t3 < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; t3++) {
              const e3 = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[t3];
              for (let i3 = 0; i3 < e3.StaffLinkedExpressions.length; i3++) if (this.graphicalMusicSheet.MeasureList[t3] && this.graphicalMusicSheet.MeasureList[t3][i3] && this.graphicalMusicSheet.MeasureList[t3][i3].ParentStaff.ParentInstrument.Visible) for (let s2 = 0; s2 < e3.StaffLinkedExpressions[i3].length; s2++) e3.StaffLinkedExpressions[i3][s2].OctaveShiftStart && this.calculateSingleOctaveShift(e3, e3.StaffLinkedExpressions[i3][s2], t3, i3);
            }
          }
          calculatePedals() {
            for (let t3 = 0; t3 < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; t3++) {
              const e3 = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[t3];
              for (let i3 = 0; i3 < e3.StaffLinkedExpressions.length; i3++) if (this.graphicalMusicSheet.MeasureList[t3] && this.graphicalMusicSheet.MeasureList[t3][i3] && this.graphicalMusicSheet.MeasureList[t3][i3].ParentStaff.ParentInstrument.Visible) for (let s2 = 0; s2 < e3.StaffLinkedExpressions[i3].length; s2++) e3.StaffLinkedExpressions[i3][s2].PedalStart && this.calculateSinglePedal(e3, e3.StaffLinkedExpressions[i3][s2], t3, i3);
            }
          }
          getFirstLeftNotNullStaffEntryFromContainer(t3, e3, i3) {
            if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[t3].StaffEntries[e3]) return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[t3].StaffEntries[e3];
            for (let i4 = t3 - 1; i4 >= 0; i4--) if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i4].StaffEntries[e3]) return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i4].StaffEntries[e3];
          }
          getFirstRightNotNullStaffEntryFromContainer(t3, e3, i3) {
            if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[t3].StaffEntries[e3]) return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[t3].StaffEntries[e3];
            for (let i4 = t3 + 1; i4 < this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length; i4++) if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i4].StaffEntries[e3]) return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i4].StaffEntries[e3];
          }
          calculateWordRepetitionInstructions() {
            for (let t3 = 0; t3 < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; t3++) {
              const e3 = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[t3];
              for (let i3 = 0, s2 = e3.FirstRepetitionInstructions.length; i3 < s2; ++i3) {
                const s3 = e3.FirstRepetitionInstructions[i3];
                this.calculateWordRepetitionInstruction(s3, t3);
              }
              for (let i3 = 0, s2 = e3.LastRepetitionInstructions.length; i3 < s2; ++i3) {
                const s3 = e3.LastRepetitionInstructions[i3];
                this.calculateWordRepetitionInstruction(s3, t3);
              }
            }
          }
          calculateRepetitionEndings() {
            const t3 = this.graphicalMusicSheet.ParentMusicSheet;
            for (let e3 = 0, i3 = t3.Repetitions.length; e3 < i3; ++e3) {
              const i4 = t3.Repetitions[e3];
              this.calcGraphicalRepetitionEndingsRecursively(i4);
            }
          }
          calculateTempoExpressions() {
            const t3 = Math.min(this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length - 1, this.rules.MaxMeasureToDrawIndex);
            for (let e3 = this.rules.MinMeasureToDrawIndex; e3 <= t3; e3++) {
              const t4 = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[e3];
              for (let i3 = 0; i3 < t4.TempoExpressions.length; i3++) this.calculateTempoExpressionsForMultiTempoExpression(t4, t4.TempoExpressions[i3], e3);
            }
          }
          calculateRehearsalMarks() {
            if (this.rules.RenderRehearsalMarks) for (const t3 of this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures) this.calculateRehearsalMark(t3);
          }
          calculateRehearsalMark(t3) {
            throw new Error(this.abstractNotImplementedErrorMessage);
          }
          calculateMoodAndUnknownExpressions() {
            for (let t3 = 0; t3 < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; t3++) {
              const e3 = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[t3];
              for (let i3 = 0; i3 < e3.StaffLinkedExpressions.length; i3++) if (this.graphicalMusicSheet.MeasureList[t3] && this.graphicalMusicSheet.MeasureList[t3][i3] && this.graphicalMusicSheet.MeasureList[t3][i3].ParentStaff.ParentInstrument.Visible) for (let s2 = 0; s2 < e3.StaffLinkedExpressions[i3].length; s2++) (e3.StaffLinkedExpressions[i3][s2].MoodList.length > 0 || e3.StaffLinkedExpressions[i3][s2].UnknownList.length > 0) && this.calculateMoodAndUnknownExpression(e3.StaffLinkedExpressions[i3][s2], t3, i3);
            }
          }
          calculateStemDirectionFromVoices(t3) {
            if (void 0 !== t3.ParentSourceStaffEntry.Link) return t3 === t3.ParentSourceStaffEntry.VoiceEntries[0] ? void (t3.WantedStemDirection = c.StemDirectionType.Up) : void (t3.WantedStemDirection = c.StemDirectionType.Down);
            t3.ParentVoice instanceof S.LinkedVoice ? t3.WantedStemDirection = c.StemDirectionType.Down : t3.ParentSourceStaffEntry.VoiceEntries.length > 1 && (t3.WantedStemDirection = c.StemDirectionType.Up);
          }
          setBeamNotesWantedStemDirections(t3) {
            if (!(t3.Notes.length > 0)) return;
            const e3 = t3.Notes[0].NoteBeam;
            if (e3) {
              for (const i3 of e3.Notes) if (i3.ParentVoiceEntry.WantedStemDirection !== c.StemDirectionType.Undefined && i3.ParentVoiceEntry.ParentSourceStaffEntry.ParentStaff.Id === t3.ParentSourceStaffEntry.ParentStaff.Id) {
                t3.WantedStemDirection = i3.ParentVoiceEntry.WantedStemDirection;
                break;
              }
            }
          }
        }
        e2.MusicSheetCalculator = k;
      }, 8033: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.OctaveShiftParams = void 0, e2.OctaveShiftParams = class {
          constructor(t3, e3, i2) {
            this.getOpenOctaveShift = t3, this.getAbsoluteStartTimestamp = e3, this.getAbsoluteEndTimestamp = i2;
          }
        };
      }, 8045: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(5875), e2), n(i2(2221), e2), n(i2(437), e2), n(i2(6229), e2);
      }, 8156: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(5955), e2), n(i2(1745), e2), n(i2(6873), e2), n(i2(2552), e2), n(i2(363), e2);
      }, 8215: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.OrnamentEnum = e2.OrnamentContainer = void 0;
        const s = i2(8233), n = i2(6362);
        var r;
        e2.OrnamentContainer = class {
          constructor(t3) {
            this.placement = n.PlacementEnum.Above, this.accidentalAbove = s.AccidentalEnum.NONE, this.accidentalBelow = s.AccidentalEnum.NONE, this.ornament = t3;
          }
          get GetOrnament() {
            return this.ornament;
          }
          get AccidentalAbove() {
            return this.accidentalAbove;
          }
          set AccidentalAbove(t3) {
            this.accidentalAbove = t3;
          }
          get AccidentalBelow() {
            return this.accidentalBelow;
          }
          set AccidentalBelow(t3) {
            this.accidentalBelow = t3;
          }
        }, function(t3) {
          t3[t3.Trill = 0] = "Trill", t3[t3.Turn = 1] = "Turn", t3[t3.InvertedTurn = 2] = "InvertedTurn", t3[t3.DelayedTurn = 3] = "DelayedTurn", t3[t3.DelayedInvertedTurn = 4] = "DelayedInvertedTurn", t3[t3.Mordent = 5] = "Mordent", t3[t3.InvertedMordent = 6] = "InvertedMordent";
        }(r || (e2.OrnamentEnum = r = {}));
      }, 8233: (t2, e2) => {
        "use strict";
        var i2, s;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Pitch = e2.AccidentalEnum = e2.NoteEnum = void 0, function(t3) {
          t3[t3.C = 0] = "C", t3[t3.D = 2] = "D", t3[t3.E = 4] = "E", t3[t3.F = 5] = "F", t3[t3.G = 7] = "G", t3[t3.A = 9] = "A", t3[t3.B = 11] = "B";
        }(i2 || (e2.NoteEnum = i2 = {})), function(t3) {
          t3[t3.SHARP = 0] = "SHARP", t3[t3.FLAT = 1] = "FLAT", t3[t3.NONE = 2] = "NONE", t3[t3.NATURAL = 3] = "NATURAL", t3[t3.DOUBLESHARP = 4] = "DOUBLESHARP", t3[t3.DOUBLEFLAT = 5] = "DOUBLEFLAT", t3[t3.TRIPLESHARP = 6] = "TRIPLESHARP", t3[t3.TRIPLEFLAT = 7] = "TRIPLEFLAT", t3[t3.QUARTERTONESHARP = 8] = "QUARTERTONESHARP", t3[t3.QUARTERTONEFLAT = 9] = "QUARTERTONEFLAT", t3[t3.SLASHFLAT = 10] = "SLASHFLAT", t3[t3.THREEQUARTERSSHARP = 11] = "THREEQUARTERSSHARP", t3[t3.THREEQUARTERSFLAT = 12] = "THREEQUARTERSFLAT", t3[t3.SLASHQUARTERSHARP = 13] = "SLASHQUARTERSHARP", t3[t3.SLASHSHARP = 14] = "SLASHSHARP", t3[t3.DOUBLESLASHFLAT = 15] = "DOUBLESLASHFLAT", t3[t3.SORI = 16] = "SORI", t3[t3.KORON = 17] = "KORON";
        }(s || (e2.AccidentalEnum = s = {}));
        class n {
          static getNoteEnumString(t3) {
            switch (t3) {
              case i2.C:
                return "C";
              case i2.D:
                return "D";
              case i2.E:
                return "E";
              case i2.F:
                return "F";
              case i2.G:
                return "G";
              case i2.A:
                return "A";
              case i2.B:
                return "B";
              default:
                return "";
            }
          }
          static lineShiftFromNoteEnum(t3, e3) {
            if (0 === e3) return [t3, 0];
            const i3 = n.pitchEnumValues, s2 = i3.indexOf(t3);
            let r = 0, o = (s2 + e3) % i3.length;
            return s2 + e3 > i3.length - 1 && (r = 1), o < 0 && (o = i3.length + o, r = -1), [i3[o], r];
          }
          static CalculateTransposedHalfTone(t3, e3) {
            const i3 = t3.fundamentalNote + t3.AccidentalHalfTones + e3;
            return n.WrapAroundCheck(i3, 12);
          }
          static WrapAroundCheck(t3, e3) {
            let i3 = 0;
            for (; t3 < 0; ) t3 += e3, i3--;
            for (; t3 >= e3; ) t3 -= e3, i3++;
            return { overflow: i3, halftone: t3 };
          }
          static calcFrequency(t3) {
            let e3, s2 = 0;
            if (t3 instanceof n) {
              const n2 = t3;
              s2 = n2.octave - 1, e3 = n2.fundamentalNote - i2.A + n2.AccidentalHalfTones;
            } else "number" == typeof t3 && (e3 = t3 - 57);
            return 440 * Math.pow(2, s2) * Math.pow(2, e3 / 12);
          }
          static calcFractionalKey(t3) {
            return Math.log(t3 / 440) / Math.LN10 * n.halftoneFactor + 57;
          }
          static fromFrequency(t3) {
            const e3 = n.calcFractionalKey(t3) + 0.5, i3 = Math.floor(e3 / 12) - n.octXmlDiff, r = Math.floor(e3) % 12;
            let o = r, a = s.NONE;
            return -1 === this.pitchEnumValues.indexOf(o) && (o = r - 1, a = s.SHARP), new n(o, i3, a);
          }
          static fromHalftone(t3) {
            const e3 = Math.floor(t3 / 12) - n.octXmlDiff, i3 = t3 % 12;
            let r = i3, o = s.NONE;
            return -1 === this.pitchEnumValues.indexOf(r) && (r = i3 - 1, o = s.SHARP), new n(r, e3, o);
          }
          static ceiling(t3) {
            let e3 = t3 %= 12;
            return -1 === this.pitchEnumValues.indexOf(e3) && (e3 = t3 + 1), e3;
          }
          static floor(t3) {
            let e3 = t3 %= 12;
            return -1 === this.pitchEnumValues.indexOf(e3) && (e3 = t3 - 1), e3;
          }
          constructor(t3, e3, i3, r = void 0, o = false, a = void 0) {
            this.accidental = s.NONE, this.fundamentalNote = t3, this.octave = e3, this.accidental = i3, this.accidentalXml = r, this.halfTone = t3 + 12 * (e3 + n.octXmlDiff) + n.HalfTonesFromAccidental(i3), o || (this.frequency = n.calcFrequency(this)), this.OctaveShiftApplied = a;
          }
          static HalfTonesFromAccidental(t3) {
            switch (t3) {
              case s.NONE:
                return 0;
              case s.SHARP:
                return 1;
              case s.FLAT:
                return -1;
              case s.NATURAL:
                return 0;
              case s.DOUBLESHARP:
                return 2;
              case s.DOUBLEFLAT:
                return -2;
              case s.TRIPLESHARP:
                return 3;
              case s.TRIPLEFLAT:
                return -3;
              case s.QUARTERTONESHARP:
                return 0.5;
              case s.QUARTERTONEFLAT:
                return -0.5;
              case s.SLASHFLAT:
                return -0.51;
              case s.THREEQUARTERSSHARP:
                return 1.5;
              case s.THREEQUARTERSFLAT:
                return -1.5;
              case s.SLASHQUARTERSHARP:
                return 13e-4;
              case s.SLASHSHARP:
                return 14e-4;
              case s.DOUBLESLASHFLAT:
                return -15e-4;
              case s.SORI:
                return 16e-4;
              case s.KORON:
                return 17e-4;
              default:
                throw new Error("Unhandled AccidentalEnum value");
            }
          }
          static AccidentalFromHalfTones(t3) {
            switch (t3) {
              case 0:
                return s.NONE;
              case 1:
                return s.SHARP;
              case -1:
                return s.FLAT;
              case 2:
                return s.DOUBLESHARP;
              case -2:
                return s.DOUBLEFLAT;
              case 3:
                return s.TRIPLESHARP;
              case -3:
                return s.TRIPLEFLAT;
              case 0.5:
                return s.QUARTERTONESHARP;
              case -0.5:
                return s.QUARTERTONEFLAT;
              case 1.5:
                return s.THREEQUARTERSSHARP;
              case -1.5:
                return s.THREEQUARTERSFLAT;
              default:
                return t3 > 0 && t3 < 1 ? s.QUARTERTONESHARP : t3 < 0 && t3 > -1 ? s.QUARTERTONEFLAT : s.QUARTERTONESHARP;
            }
          }
          static accidentalVexflow(t3) {
            let e3;
            switch (t3) {
              case s.NATURAL:
                e3 = "n";
                break;
              case s.FLAT:
                e3 = "b";
                break;
              case s.SHARP:
                e3 = "#";
                break;
              case s.DOUBLESHARP:
                e3 = "##";
                break;
              case s.TRIPLESHARP:
                e3 = "###";
                break;
              case s.DOUBLEFLAT:
                e3 = "bb";
                break;
              case s.TRIPLEFLAT:
                e3 = "bbs";
                break;
              case s.QUARTERTONESHARP:
                e3 = "+";
                break;
              case s.QUARTERTONEFLAT:
                e3 = "d";
                break;
              case s.SLASHFLAT:
                e3 = "bs";
                break;
              case s.THREEQUARTERSSHARP:
                e3 = "++";
                break;
              case s.THREEQUARTERSFLAT:
                e3 = "db";
                break;
              case s.SLASHQUARTERSHARP:
                e3 = "+-";
                break;
              case s.SLASHSHARP:
                e3 = "++-";
                break;
              case s.DOUBLESLASHFLAT:
                e3 = "bss";
                break;
              case s.SORI:
                e3 = "o";
                break;
              case s.KORON:
                e3 = "k";
            }
            return e3;
          }
          get AccidentalHalfTones() {
            return n.HalfTonesFromAccidental(this.accidental);
          }
          get Octave() {
            return this.octave;
          }
          get FundamentalNote() {
            return this.fundamentalNote;
          }
          get Accidental() {
            return this.accidental;
          }
          get AccidentalXml() {
            return this.accidentalXml;
          }
          get Frequency() {
            return this.frequency;
          }
          static get OctaveXmlDifference() {
            return n.octXmlDiff;
          }
          getHalfTone() {
            return this.halfTone;
          }
          getTransposedPitch(t3) {
            if (t3 > 12) throw new Error("rewrite this method to handle bigger octave changes or don't use is with bigger octave changes!");
            return t3 > 0 ? this.getHigherPitchByTransposeFactor(t3) : t3 < 0 ? this.getLowerPitchByTransposeFactor(-t3) : this;
          }
          DoEnharmonicChange() {
            switch (this.accidental) {
              case s.FLAT:
              case s.DOUBLEFLAT:
                this.fundamentalNote = this.getPreviousFundamentalNote(this.fundamentalNote), this.accidental = n.AccidentalFromHalfTones(this.halfTone - (this.fundamentalNote + 12 * (this.octave + n.octXmlDiff)));
                break;
              case s.SHARP:
              case s.DOUBLESHARP:
                this.fundamentalNote = this.getNextFundamentalNote(this.fundamentalNote), this.accidental = n.AccidentalFromHalfTones(this.halfTone - (this.fundamentalNote + 12 * (this.octave + n.octXmlDiff)));
                break;
              default:
                return;
            }
          }
          ToString() {
            let t3 = n.accidentalVexflow(this.accidental);
            return t3 || (t3 = ""), "Key: " + n.getNoteEnumString(this.fundamentalNote) + t3 + ", Note: " + this.fundamentalNote + ", octave: " + this.octave.toString();
          }
          ToStringShort(t3 = 0) {
            let e3 = n.accidentalVexflow(this.accidental);
            e3 || (e3 = "");
            const i3 = this.octave + t3;
            return n.getNoteEnumString(this.fundamentalNote) + e3 + i3;
          }
          get ToStringShortGet() {
            return this.ToStringShort(0);
          }
          OperatorEquals(t3) {
            const e3 = this;
            return !(!e3 || !t3) && e3.FundamentalNote === t3.FundamentalNote && e3.Octave === t3.Octave && e3.Accidental === t3.Accidental;
          }
          OperatorNotEqual(t3) {
            return !(this === t3);
          }
          OperatorFundamentalGreaterThan(t3) {
            const e3 = this;
            return e3.Octave === t3.Octave ? e3.FundamentalNote > t3.FundamentalNote : e3.Octave > t3.Octave;
          }
          OperatorFundamentalLessThan(t3) {
            const e3 = this;
            return e3.Octave === t3.Octave ? e3.FundamentalNote < t3.FundamentalNote : e3.Octave < t3.Octave;
          }
          getHigherPitchByTransposeFactor(t3) {
            const e3 = n.pitchEnumValues.indexOf(this.fundamentalNote);
            let i3, r = this.octave;
            return e3 + t3 > n.pitchEnumValues.length - 1 ? (i3 = n.pitchEnumValues[e3 + t3 - n.pitchEnumValues.length], r++) : i3 = n.pitchEnumValues[e3 + t3], new n(i3, r, s.NONE);
          }
          getLowerPitchByTransposeFactor(t3) {
            const e3 = n.pitchEnumValues.indexOf(this.fundamentalNote);
            let i3, r = this.octave;
            return e3 - t3 < 0 ? (i3 = n.pitchEnumValues[n.pitchEnumValues.length + e3 - t3], r--) : i3 = n.pitchEnumValues[e3 - t3], new n(i3, r, s.NONE);
          }
          getNextFundamentalNote(t3) {
            let e3 = n.pitchEnumValues.indexOf(t3);
            return e3 = (e3 + 1) % n.pitchEnumValues.length, n.pitchEnumValues[e3];
          }
          getPreviousFundamentalNote(t3) {
            const e3 = n.pitchEnumValues.indexOf(t3);
            return e3 > 0 ? n.pitchEnumValues[e3 - 1] : n.pitchEnumValues[n.pitchEnumValues.length - 1];
          }
        }
        e2.Pitch = n, n.pitchEnumValues = [i2.C, i2.D, i2.E, i2.F, i2.G, i2.A, i2.B], n.halftoneFactor = 12 / (Math.LN2 / Math.LN10), n.octXmlDiff = 3;
      }, 8254: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalLabel = void 0;
        const s = i2(7533), n = i2(6438), r = i2(995), o = i2(7921);
        class a extends r.Clickable {
          constructor(t3, e3, i3, s2, r2 = void 0) {
            super(), this.CenteringXShift = 0, this.label = t3, this.boundingBox = new n.BoundingBox(this, r2), this.label.fontHeight = e3, this.label.textAlignment = i3, this.rules = s2;
          }
          get Label() {
            return this.label;
          }
          toString() {
            return `${this.label.text} (${this.boundingBox.RelativePosition.x},${this.boundingBox.RelativePosition.y})`;
          }
          setLabelPositionAndShapeBorders() {
            var _a2;
            if ("" === this.Label.text.trim()) return;
            this.TextLines = [];
            const t3 = ((_a2 = this.rules) == null ? void 0 : _a2.LabelMarginBorderFactor) ?? 0.1, e3 = this.Label.text.split(/[\n\r]+/g), i3 = e3.length;
            let n2 = 0;
            for (let t4 = 0; t4 < i3; t4++) {
              const i4 = e3[t4].trim(), s2 = o.MusicSheetCalculator.TextMeasurer.computeTextWidthToHeightRatio(i4, this.Label.font, this.Label.fontStyle, this.label.fontFamily), r3 = this.Label.fontHeight * s2;
              n2 = Math.max(n2, r3), this.TextLines.push({ text: i4, xOffset: 0, width: r3 });
            }
            for (const t4 of this.TextLines) {
              let e4 = 0;
              switch (this.Label.textAlignment) {
                case s.TextAlignmentEnum.RightBottom:
                case s.TextAlignmentEnum.RightCenter:
                case s.TextAlignmentEnum.RightTop:
                  e4 = n2 - t4.width;
                  break;
                case s.TextAlignmentEnum.CenterBottom:
                case s.TextAlignmentEnum.CenterCenter:
                case s.TextAlignmentEnum.CenterTop:
                  e4 = (n2 - t4.width) / 2;
              }
              t4.xOffset = e4;
            }
            let r2 = this.Label.fontHeight * i3;
            this.rules.SpacingBetweenTextLines > 0 && this.TextLines.length > 1 && (r2 += this.rules.SpacingBetweenTextLines * i3 / 10);
            const a2 = this.PositionAndShape;
            switch (this.Label.textAlignment) {
              case s.TextAlignmentEnum.CenterBottom:
                a2.BorderTop = -r2, a2.BorderLeft = -n2 / 2, a2.BorderBottom = 0, a2.BorderRight = n2 / 2;
                break;
              case s.TextAlignmentEnum.CenterCenter:
                a2.BorderTop = -r2 / 2, a2.BorderLeft = -n2 / 2, a2.BorderBottom = r2 / 2, a2.BorderRight = n2 / 2;
                break;
              case s.TextAlignmentEnum.CenterTop:
                a2.BorderTop = 0, a2.BorderLeft = -n2 / 2, a2.BorderBottom = r2, a2.BorderRight = n2 / 2;
                break;
              case s.TextAlignmentEnum.LeftBottom:
                a2.BorderTop = -r2, a2.BorderLeft = 0, a2.BorderBottom = 0, a2.BorderRight = n2;
                break;
              case s.TextAlignmentEnum.LeftCenter:
                a2.BorderTop = -r2 / 2, a2.BorderLeft = 0, a2.BorderBottom = r2 / 2, a2.BorderRight = n2;
                break;
              case s.TextAlignmentEnum.LeftTop:
                a2.BorderTop = 0, a2.BorderLeft = 0, a2.BorderBottom = r2, a2.BorderRight = n2;
                break;
              case s.TextAlignmentEnum.RightBottom:
                a2.BorderTop = -r2, a2.BorderLeft = -n2, a2.BorderBottom = 0, a2.BorderRight = 0;
                break;
              case s.TextAlignmentEnum.RightCenter:
                a2.BorderTop = -r2 / 2, a2.BorderLeft = -n2, a2.BorderBottom = r2 / 2, a2.BorderRight = 0;
                break;
              case s.TextAlignmentEnum.RightTop:
                a2.BorderTop = 0, a2.BorderLeft = -n2, a2.BorderBottom = r2, a2.BorderRight = 0;
            }
            a2.BorderMarginTop = a2.BorderTop - r2 * t3, a2.BorderMarginLeft = a2.BorderLeft - r2 * t3, a2.BorderMarginBottom = a2.BorderBottom + r2 * t3, a2.BorderMarginRight = a2.BorderRight + r2 * t3;
          }
        }
        e2.GraphicalLabel = a;
      }, 8365: (t2, e2) => {
        "use strict";
        var i2;
        Object.defineProperty(e2, "__esModule", { value: true }), e2.BeamEnum = e2.Beam = void 0, e2.Beam = class {
          constructor(t3 = 1, e3 = 0) {
            this.notes = [], this.extendedNoteList = [], this.BeamNumberOffsetToXML = 0, this.AutoGenerated = false, this.BeamNumber = t3, this.BeamNumberOffsetToXML = e3;
          }
          get Notes() {
            return this.notes;
          }
          set Notes(t3) {
            this.notes = t3;
          }
          get ExtendedNoteList() {
            return this.extendedNoteList;
          }
          set ExtendedNoteList(t3) {
            this.extendedNoteList = t3;
          }
          addNoteToBeam(t3) {
            t3 && (t3.NoteBeam = this, this.notes.push(t3), this.extendedNoteList.push(t3));
          }
        }, function(t3) {
          t3[t3.BeamNone = -1] = "BeamNone", t3[t3.BeamBegin = 0] = "BeamBegin", t3[t3.BeamContinue = 1] = "BeamContinue", t3[t3.BeamEnd = 2] = "BeamEnd", t3[t3.BeamForward = 3] = "BeamForward", t3[t3.BeamBackward = 4] = "BeamBackward";
        }(i2 || (e2.BeamEnum = i2 = {}));
      }, 8464: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
        var s = i2(4831), n = i2(4589), r = function() {
          function t3(t4) {
            this.heap = new n.default(s.reverseCompareFunction(t4));
          }
          return t3.prototype.enqueue = function(t4) {
            return this.heap.add(t4);
          }, t3.prototype.add = function(t4) {
            return this.heap.add(t4);
          }, t3.prototype.dequeue = function() {
            if (0 !== this.heap.size()) {
              var t4 = this.heap.peek();
              return this.heap.removeRoot(), t4;
            }
          }, t3.prototype.peek = function() {
            return this.heap.peek();
          }, t3.prototype.contains = function(t4) {
            return this.heap.contains(t4);
          }, t3.prototype.isEmpty = function() {
            return this.heap.isEmpty();
          }, t3.prototype.size = function() {
            return this.heap.size();
          }, t3.prototype.clear = function() {
            this.heap.clear();
          }, t3.prototype.forEach = function(t4) {
            this.heap.forEach(t4);
          }, t3;
        }();
        e2.default = r;
      }, 8628: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.TransposeCalculator = void 0;
        const s = i2(9735);
        class n {
          transposePitch(t3, e3, i3) {
            let r = s.NoteEnum.C, o = 0, a = s.AccidentalEnum.NONE;
            const l = s.Pitch.CalculateTransposedHalfTone(t3, i3);
            let h = l.halftone, c = l.overflow;
            for (let e4 = 0; e4 < n.noteEnums.length; e4++) {
              const i4 = n.noteEnums[e4];
              if (i4 === h) {
                const i5 = e4;
                return r = n.noteEnums[i5], o = t3.Octave + c, a = s.AccidentalEnum.NONE, new s.Pitch(r, o, a);
              }
              if (i4 > h) break;
            }
            for (let i4 = 0; i4 < n.noteEnums.length; i4++) if (n.noteEnums[i4] > h) {
              let l2 = i4;
              const u = s.Pitch.HalfTonesFromAccidental(t3.Accidental);
              for ((u > 0 || 0 === u && e3.Key >= 0) && l2--; l2 < 0; ) l2 += 7, h += 12, c--;
              for (; l2 >= 7; ) l2 -= 7, h -= 12, c++;
              r = n.noteEnums[l2], a = s.Pitch.AccidentalFromHalfTones(h - r), o = t3.Octave + c;
              break;
            }
            return new s.Pitch(r, o, a);
          }
          transposeKey(t3, e3) {
            let i3 = 0, s2 = 0;
            for (; i3 < n.keyMapping.length && (s2 = n.keyMapping[i3], s2 !== t3.keyTypeOriginal); i3++) ;
            let r = i3 + e3;
            for (; r >= 12; ) r -= 12;
            for (; r < 0; ) r += 12;
            t3.Key = n.keyMapping[r], t3.isTransposedBy = e3;
          }
        }
        e2.TransposeCalculator = n, n.keyMapping = [0, -5, 2, -3, 4, -1, 6, 1, -4, 3, -2, 5], n.noteEnums = [s.NoteEnum.C, s.NoteEnum.D, s.NoteEnum.E, s.NoteEnum.F, s.NoteEnum.G, s.NoteEnum.A, s.NoteEnum.B];
      }, 8659: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(8628), e2);
      }, 8705: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.OSMDColor = void 0;
        class i2 {
          constructor(t3, e3, i3) {
            this.alpha = 255, this.red = t3, this.green = e3, this.blue = i3;
          }
          static get Black() {
            return new i2(0, 0, 0);
          }
          static get DeepSkyBlue() {
            return new i2(0, 191, 255);
          }
          static get Green() {
            return new i2(20, 160, 20);
          }
          static get Magenta() {
            return new i2(255, 0, 255);
          }
          static get Orange() {
            return new i2(255, 128, 0);
          }
          static get Red() {
            return new i2(240, 20, 20);
          }
          static get Disabled() {
            return new i2(225, 225, 225);
          }
          static get DarkBlue() {
            return new i2(0, 0, 140);
          }
          static get Debug1() {
            return new i2(200, 0, 140);
          }
          static get Debug2() {
            return new i2(100, 100, 200);
          }
          static get Debug3() {
            return new i2(0, 50, 140);
          }
          toString() {
            return "rgb(" + this.red + "," + this.green + "," + this.blue + "," + this.alpha + ")";
          }
        }
        e2.OSMDColor = i2;
      }, 8713: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SelectionStartSymbol = void 0;
        const s = i2(9409), n = i2(2683), r = i2(6452), o = i2(7741), a = i2(6438), l = i2(813);
        class h extends o.GraphicalObject {
          constructor(t3, e3) {
            super();
            const i3 = e3, o2 = t3.PositionAndShape.AbsolutePosition.y, h2 = l.CollectionUtil.last(t3.StaffLines).PositionAndShape.RelativePosition.y + 4;
            this.verticalLine = new r.GraphicalLine(new s.PointF2D(i3, o2), new s.PointF2D(i3, o2 + h2), 0.4, n.OutlineAndFillStyleEnum.SelectionSymbol);
            for (let e4 = 0, n2 = t3.StaffLines.length; e4 < n2; ++e4) {
              const n3 = t3.StaffLines[e4], r2 = new s.PointF2D(i3, o2 + n3.PositionAndShape.RelativePosition.y), a2 = new Array(7);
              a2[0].x = r2.x + 4, a2[0].y = r2.y + 2, a2[1].x = r2.x + 2.5, a2[1].y = r2.y + 0.5, a2[2].x = r2.x + 2.5, a2[2].y = r2.y + 1.3, a2[3].x = r2.x + 1, a2[3].y = r2.y + 1.3, a2[4].x = r2.x + 1, a2[4].y = r2.y + 2.7, a2[5].x = r2.x + 2.5, a2[5].y = r2.y + 2.7, a2[6].x = r2.x + 2.5, a2[6].y = r2.y + 3.5, this.arrows.push(a2);
            }
            this.boundingBox = new a.BoundingBox(this), this.boundingBox.AbsolutePosition = new s.PointF2D(i3, o2), this.boundingBox.BorderLeft = -0.4, this.boundingBox.BorderRight = 4, this.boundingBox.BorderBottom = h2;
          }
        }
        e2.SelectionStartSymbol = h;
      }, 8724: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SystemImageProperties = e2.GraphicalMusicSheet = void 0;
        const n = i2(6723), r = i2(6452), o = i2(348), a = i2(9409), l = i2(164), h = i2(4543), c = i2(2561), u = i2(6438), d = s(i2(3065)), f = i2(813), m = i2(4548), p = i2(7741);
        e2.GraphicalMusicSheet = class {
          constructor(t3, e3) {
            this.musicPages = [], this.measureList = [], this.verticalGraphicalStaffEntryContainers = [], this.cursors = [], this.leadSheet = false, this.musicSheet = t3, this.numberOfStaves = this.musicSheet.Staves.length, this.calculator = e3, this.calculator.initialize(this);
          }
          get ParentMusicSheet() {
            return this.musicSheet;
          }
          get GetCalculator() {
            return this.calculator;
          }
          get MusicPages() {
            return this.musicPages;
          }
          set MusicPages(t3) {
            this.musicPages = t3;
          }
          get MeasureList() {
            return this.measureList;
          }
          set MeasureList(t3) {
            this.measureList = t3;
          }
          get VerticalGraphicalStaffEntryContainers() {
            return this.verticalGraphicalStaffEntryContainers;
          }
          set VerticalGraphicalStaffEntryContainers(t3) {
            this.verticalGraphicalStaffEntryContainers = t3;
          }
          get Title() {
            return this.title;
          }
          set Title(t3) {
            this.title = t3;
          }
          get Subtitle() {
            return this.subtitle;
          }
          set Subtitle(t3) {
            this.subtitle = t3;
          }
          get Composer() {
            return this.composer;
          }
          set Composer(t3) {
            this.composer = t3;
          }
          get Lyricist() {
            return this.lyricist;
          }
          set Lyricist(t3) {
            this.lyricist = t3;
          }
          get Copyright() {
            return this.copyright;
          }
          set Copyright(t3) {
            this.copyright = t3;
          }
          get Cursors() {
            return this.cursors;
          }
          get SelectionStartSymbol() {
            return this.selectionStartSymbol;
          }
          get SelectionEndSymbol() {
            return this.selectionEndSymbol;
          }
          get MinAllowedSystemWidth() {
            return this.minAllowedSystemWidth;
          }
          set MinAllowedSystemWidth(t3) {
            this.minAllowedSystemWidth = t3;
          }
          get NumberOfStaves() {
            return this.numberOfStaves;
          }
          get LeadSheet() {
            return this.leadSheet;
          }
          set LeadSheet(t3) {
            this.leadSheet = t3;
          }
          static transformRelativeToAbsolutePosition(t3) {
            for (let e3 = 0; e3 < t3.MusicPages.length; e3++) {
              const i3 = t3.MusicPages[e3].setMusicPageAbsolutePosition(e3, t3.ParentMusicSheet.Rules);
              t3.MusicPages[e3].PositionAndShape.calculateAbsolutePositionsRecursive(i3.x, i3.y);
            }
          }
          Initialize() {
            this.verticalGraphicalStaffEntryContainers = [], this.musicPages = [], this.measureList = [];
          }
          reCalculate() {
            this.calculator.calculate();
          }
          EnforceRedrawOfMusicSystems() {
            for (let t3 = 0, e3 = this.musicPages.length; t3 < e3; ++t3) {
              const e4 = this.musicPages[t3];
              for (let t4 = 0, i3 = e4.MusicSystems.length; t4 < i3; ++t4) e4.MusicSystems[t4].needsToBeRedrawn = true;
            }
          }
          getClickedObject(t3) {
            for (let e3 = 0, i3 = this.MusicPages.length; e3 < i3; ++e3) return this.MusicPages[e3].PositionAndShape.getClickedObjectOfType(t3);
          }
          findGraphicalMeasure(t3, e3) {
            var _a;
            for (let i3 = t3; i3 >= 0; i3--) {
              const t4 = (_a = this.measureList[i3]) == null ? void 0 : _a[e3];
              if (t4) return t4;
            }
          }
          findGraphicalMeasureByMeasureNumber(t3, e3) {
            for (let i3 = t3; i3 >= 0; i3--) if (this.MeasureList[i3]) {
              const s2 = this.MeasureList[i3][e3];
              if ((s2 == null ? void 0 : s2.MeasureNumber) === t3) return s2;
            }
          }
          findGraphicalStaffEntryFromMeasureList(t3, e3, i3) {
            for (let s2 = e3; s2 < this.measureList.length; s2++) {
              const e4 = this.measureList[s2][t3];
              if (e4) for (let t4 = 0, s3 = e4.staffEntries.length; t4 < s3; ++t4) {
                const s4 = e4.staffEntries[t4];
                if (s4.sourceStaffEntry === i3) return s4;
              }
            }
          }
          findNextGraphicalStaffEntry(t3, e3, i3) {
            const s2 = i3.parentMeasure, n2 = s2.staffEntries.indexOf(i3);
            if (n2 < s2.staffEntries.length - 1) return s2.staffEntries[n2 + 1];
            if (e3 < this.measureList.length - 1) {
              const i4 = this.measureList[e3 + 1][t3];
              if (i4.staffEntries.length > 0) return i4.staffEntries[0];
            }
          }
          getFirstVisibleMeasuresListFromIndices(t3, e3) {
            const i3 = [], s2 = this.measureList[0].length;
            for (let n2 = t3; n2 <= e3; n2++) for (let t4 = 0; t4 < s2; t4++) if (this.measureList[n2][t4].isVisible()) {
              i3.push(this.measureList[n2][t4]);
              break;
            }
            return i3;
          }
          orderMeasuresByStaffLine(t3) {
            const e3 = [];
            let i3 = [];
            e3.push(i3);
            for (let s2 = 0; s2 < t3.length; s2++) 0 === s2 ? i3.push(t3[0]) : (t3[s2].ParentStaffLine === t3[s2 - 1].ParentStaffLine || (-1 === e3.indexOf(i3) && e3.push(i3), i3 = [], e3.push(i3)), i3.push(t3[s2]));
            return e3;
          }
          initializeActiveClefs() {
            const t3 = [], e3 = this.musicSheet.getFirstSourceMeasure();
            if (e3) for (let i3 = 0; i3 < e3.CompleteNumberOfStaves; i3++) {
              let s2 = new l.ClefInstruction();
              if (e3.FirstInstructionsStaffEntries[i3]) for (let t4 = 0, n2 = e3.FirstInstructionsStaffEntries[i3].Instructions.length; t4 < n2; ++t4) {
                const n3 = e3.FirstInstructionsStaffEntries[i3].Instructions[t4];
                n3 instanceof l.ClefInstruction && (s2 = n3);
              }
              t3.push(s2);
            }
            return t3;
          }
          GetMainKey() {
            const t3 = this.musicSheet.getFirstSourceMeasure();
            if (t3) for (let e3 = 0; e3 < t3.CompleteNumberOfStaves; e3++) for (let i3 = 0, s2 = t3.FirstInstructionsStaffEntries[e3].Instructions.length; i3 < s2; ++i3) {
              const s3 = t3.FirstInstructionsStaffEntries[e3].Instructions[i3];
              if (s3 instanceof h.KeyInstruction) return s3;
            }
          }
          getOrCreateVerticalContainer(t3) {
            if (0 === this.verticalGraphicalStaffEntryContainers.length || f.CollectionUtil.getLastElement(this.verticalGraphicalStaffEntryContainers).AbsoluteTimestamp.lt(t3)) {
              const e3 = new n.VerticalGraphicalStaffEntryContainer(this.numberOfStaves, t3);
              return this.verticalGraphicalStaffEntryContainers.push(e3), e3;
            }
            for (let e3 = this.verticalGraphicalStaffEntryContainers.length - 1; e3 >= 0; e3--) {
              if (this.verticalGraphicalStaffEntryContainers[e3].AbsoluteTimestamp.lt(t3)) {
                const i3 = new n.VerticalGraphicalStaffEntryContainer(this.numberOfStaves, t3);
                return this.verticalGraphicalStaffEntryContainers.splice(e3 + 1, 0, i3), i3;
              }
              if (this.verticalGraphicalStaffEntryContainers[e3].AbsoluteTimestamp.Equals(t3)) return this.verticalGraphicalStaffEntryContainers[e3];
            }
          }
          GetVerticalContainerFromTimestamp(t3, e3 = 0) {
            const i3 = f.CollectionUtil.binarySearch(this.verticalGraphicalStaffEntryContainers, new n.VerticalGraphicalStaffEntryContainer(0, t3), n.VerticalGraphicalStaffEntryContainer.compareByTimestamp, e3);
            if (i3 >= 0) return this.verticalGraphicalStaffEntryContainers[i3];
          }
          GetInterpolatedIndexInVerticalContainers(t3) {
            const e3 = this.verticalGraphicalStaffEntryContainers;
            if (1 === e3.length) return 0;
            let i3, s2, n2 = 0, r2 = e3.length - 1;
            if (t3.lte(e3[e3.length - 1].AbsoluteTimestamp)) {
              for (; r2 - n2 > 1; ) {
                const i4 = Math.floor((r2 + n2) / 2);
                if (e3[n2].AbsoluteTimestamp.Equals(t3)) {
                  r2 = n2;
                  break;
                }
                if (e3[r2].AbsoluteTimestamp.Equals(t3)) {
                  n2 = r2;
                  break;
                }
                if (e3[i4].AbsoluteTimestamp.Equals(t3)) return this.verticalGraphicalStaffEntryContainers.indexOf(e3[i4]);
                t3.lt(e3[i4].AbsoluteTimestamp) ? r2 = i4 : n2 = i4;
              }
              if (n2 === r2) return this.verticalGraphicalStaffEntryContainers.indexOf(e3[n2]);
              i3 = e3[n2].AbsoluteTimestamp, s2 = e3[r2].AbsoluteTimestamp;
            } else i3 = e3[e3.length - 1].AbsoluteTimestamp, s2 = c.Fraction.plus(this.getLongestStaffEntryDuration(e3.length - 1), i3), r2 = e3.length;
            const o2 = s2.RealValue - i3.RealValue, a2 = r2 - (s2.RealValue - t3.RealValue) / o2;
            return Math.min(a2, this.verticalGraphicalStaffEntryContainers.length - 1);
          }
          getVisibleStavesIndicesFromSourceMeasure(t3) {
            const e3 = [], i3 = [];
            for (let i4 = 0, s2 = t3.length; i4 < s2; ++i4) {
              const s3 = t3[i4].ParentStaff.ParentInstrument;
              -1 === e3.indexOf(s3) && e3.push(s3);
            }
            for (let t4 = 0, s2 = e3.length; t4 < s2; ++t4) {
              const s3 = e3[t4], n2 = this.musicSheet.getGlobalStaffIndexOfFirstStaff(s3);
              for (let t5 = 0; t5 < s3.Staves.length; t5++) i3.push(n2 + t5);
            }
            return i3;
          }
          getGraphicalMeasureFromSourceMeasureAndIndex(t3, e3) {
            var _a;
            for (let i3 = 0; i3 < this.measureList.length; i3++) if (((_a = this.measureList[i3][0]) == null ? void 0 : _a.parentSourceMeasure) === t3) return this.measureList[i3][e3];
          }
          getLastGraphicalMeasureFromIndex(t3, e3 = true) {
            let i3 = this.measureList.length - 1;
            e3 && (i3 = Math.min(i3, this.musicSheet.Rules.MaxMeasureToDrawIndex));
            let s2 = this.measureList[i3][t3];
            for (; !s2 && i3 >= 0; ) s2 = this.measureList[--i3][t3];
            return this.measureList[i3][t3];
          }
          getMeasureIndex(t3, e3, i3) {
            for (e3 = 0; e3 < this.measureList.length; e3++) for (let i4 = 0, s2 = this.measureList[e3].length; i4 < s2; ++i4) if (this.measureList[e3][i4] === t3) return true;
            return false;
          }
          GetNearestGraphicalObject(t3, e3 = p.GraphicalObject.name, i3 = 5, s2 = 20, n2 = 5, r2 = void 0) {
            const o2 = [];
            for (; 0 === o2.length && i3 <= s2; ) {
              const s3 = new u.BoundingBox(void 0);
              s3.BorderLeft = t3.x - i3, s3.BorderTop = t3.y - i3, s3.BorderRight = t3.x + i3, s3.BorderBottom = t3.y + i3, s3.AbsolutePosition = new a.PointF2D(t3.x, t3.y), s3.calculateAbsolutePosition();
              for (let t4 = 0, i4 = this.MusicPages.length; t4 < i4; ++t4) {
                const i5 = this.MusicPages[t4].PositionAndShape.getObjectsInRegion(s3, false, e3);
                if (i5 && 0 !== i5.length) for (let t5 = 0, e4 = i5.length; t5 < e4; ++t5) r2 ? r2(i5[t5]) && o2.push(i5[t5]) : o2.push(i5[t5]);
              }
              i3 += n2;
            }
            let l2;
            for (let e4 = 0, i4 = o2.length; e4 < i4; ++e4) {
              const i5 = o2[e4];
              (void 0 === l2 || this.CalculateDistance(i5.PositionAndShape.AbsolutePosition, t3) < this.CalculateDistance(l2.PositionAndShape.AbsolutePosition, t3)) && (l2 = i5);
            }
            if (l2) return l2;
          }
          GetNearestVoiceEntry(t3) {
            return this.GetNearestGraphicalObject(t3, m.GraphicalVoiceEntry.name, 5, 20, 5, (t4) => {
              var _a;
              return void 0 !== ((_a = t4.parentStaffEntry) == null ? void 0 : _a.relInMeasureTimestamp);
            });
          }
          GetNearestNote(t3, e3) {
            const i3 = this.GetNearestVoiceEntry(t3);
            if (!i3) return;
            let s2, n2 = Number.MAX_SAFE_INTEGER;
            for (const e4 of i3.notes) {
              const i4 = e4.PositionAndShape.AbsolutePosition.y, r2 = Math.abs(e4.PositionAndShape.AbsolutePosition.x - t3.x), o2 = Math.abs(i4 - t3.y);
              r2 + o2 < n2 && (s2 = e4, n2 = r2 + o2);
            }
            return s2;
          }
          domToSvg(t3) {
            return this.domToSvgTransform(t3, true);
          }
          svgToDom(t3) {
            return this.domToSvgTransform(t3, false);
          }
          svgToOsmd(t3) {
            const e3 = new a.PointF2D(t3.x, t3.y);
            return e3.x /= 10, e3.y /= 10, e3;
          }
          domToSvgTransform(t3, e3) {
            const i3 = this.drawer.Backends[0].getSvgElement(), s2 = i3.createSVGPoint();
            s2.x = t3.x, s2.y = t3.y;
            let n2 = i3.getScreenCTM();
            e3 && (n2 = n2.inverse());
            const r2 = s2.matrixTransform(n2);
            return new a.PointF2D(r2.x, r2.y);
          }
          GetClickableLabel(t3) {
            const e3 = new u.BoundingBox();
            e3.BorderLeft = t3.x - 4, e3.BorderTop = t3.y - 4, e3.BorderRight = t3.x + 4, e3.BorderBottom = t3.y + 4, e3.AbsolutePosition = new a.PointF2D(0, 0);
            for (let t4 = 0, i3 = this.MusicPages.length; t4 < i3; ++t4) {
              const i4 = this.MusicPages[t4].PositionAndShape.getObjectsInRegion(e3);
              if (1 === i4.length) for (let t5 = 0, e4 = i4.length; t5 < e4; ++t5) return i4[t5];
            }
          }
          GetNearestStaffEntry(t3) {
            const e3 = [], i3 = new u.BoundingBox(void 0);
            i3.BorderLeft = t3.x - 10, i3.BorderTop = t3.y - 10, i3.BorderRight = t3.x + 10, i3.BorderBottom = t3.y + 10, i3.AbsolutePosition = new a.PointF2D(0, 0);
            for (let t4 = 0, s3 = this.MusicPages.length; t4 < s3; ++t4) {
              const s4 = this.MusicPages[t4].PositionAndShape.getObjectsInRegion(i3, false, o.GraphicalStaffEntry.name);
              if (s4 && 0 !== s4.length) for (let t5 = 0, i4 = s4.length; t5 < i4; ++t5) {
                const i5 = s4[t5];
                e3.push(i5);
              }
            }
            let s2;
            for (let i4 = 0, n2 = e3.length; i4 < n2; ++i4) {
              const n3 = e3[i4];
              if (void 0 === s2) s2 = n3;
              else {
                if (!n3.relInMeasureTimestamp) continue;
                this.CalculateDistance(n3.PositionAndShape.AbsolutePosition, t3) < this.CalculateDistance(s2.PositionAndShape.AbsolutePosition, t3) && (s2 = n3);
              }
            }
            if (s2) return s2;
          }
          GetNearestObject(t3, e3) {
            const i3 = [], s2 = new u.BoundingBox(void 0);
            s2.BorderLeft = t3.x - 10, s2.BorderTop = t3.y - 10, s2.BorderRight = t3.x + 10, s2.BorderBottom = t3.y + 10, s2.AbsolutePosition = new a.PointF2D(0, 0);
            for (let t4 = 0, n3 = this.MusicPages.length; t4 < n3; ++t4) {
              const n4 = this.MusicPages[t4].PositionAndShape.getObjectsInRegion(s2, false, e3);
              if (n4 && 0 !== n4.length) for (let t5 = 0, e4 = n4.length; t5 < e4; ++t5) {
                const e5 = n4[t5];
                i3.push(e5);
              }
            }
            let n2;
            for (let e4 = 0, s3 = i3.length; e4 < s3; ++e4) {
              const s4 = i3[e4];
              (void 0 === n2 || this.CalculateDistance(s4.PositionAndShape.AbsolutePosition, t3) < this.CalculateDistance(n2.PositionAndShape.AbsolutePosition, t3)) && (n2 = s4);
            }
            if (n2) return n2;
          }
          GetPossibleCommentAnchor(t3) {
            const e3 = this.GetNearestStaffEntry(t3);
            if (e3) return e3.sourceStaffEntry;
          }
          getClickedObjectOfType(t3) {
            for (let e3 = 0, i3 = this.musicPages.length; e3 < i3; ++e3) {
              const i4 = this.musicPages[e3].PositionAndShape.getClickedObjectOfType(t3);
              if (i4) return i4;
            }
          }
          tryGetTimestampFromPosition(t3) {
            const e3 = this.getClickedObjectOfType(t3);
            if (e3) return e3.getAbsoluteTimestamp();
          }
          tryGetClickableLabel(t3) {
            try {
              return this.GetClickableLabel(t3);
            } catch (e3) {
              d.default.info("GraphicalMusicSheet.tryGetClickableObject", "positionOnMusicSheet: " + t3, e3);
            }
          }
          tryGetTimeStampFromPosition(t3) {
            try {
              const e3 = this.GetNearestStaffEntry(t3);
              if (!e3) return;
              return e3.getAbsoluteTimestamp();
            } catch (e3) {
              d.default.info("GraphicalMusicSheet.tryGetTimeStampFromPosition", "positionOnMusicSheet: " + t3, e3);
            }
          }
          getStaffEntry(t3) {
            const e3 = this.VerticalGraphicalStaffEntryContainers[t3];
            let i3;
            try {
              for (let t4 = 0, s2 = e3.StaffEntries.length; t4 < s2; ++t4) {
                const s3 = e3.StaffEntries[t4];
                s3 && s3.sourceStaffEntry.ParentStaff.ParentInstrument.Visible && (i3 ? s3.PositionAndShape && i3.PositionAndShape && i3.PositionAndShape.RelativePosition.x > s3.PositionAndShape.RelativePosition.x && (i3 = s3) : i3 = s3);
              }
            } catch (t4) {
              d.default.info("GraphicalMusicSheet.getStaffEntry", t4);
            }
            return i3;
          }
          GetPreviousVisibleContainerIndex(t3) {
            for (let e3 = t3 - 1; e3 >= 0; e3--) {
              const t4 = this.verticalGraphicalStaffEntryContainers[e3].StaffEntries;
              for (let i3 = 0, s2 = t4.length; i3 < s2; ++i3) {
                const s3 = t4[i3];
                if (s3 && s3.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) return e3;
              }
            }
            return -1;
          }
          GetNextVisibleContainerIndex(t3) {
            for (let e3 = t3 + 1; e3 < this.verticalGraphicalStaffEntryContainers.length; ++e3) {
              const t4 = this.verticalGraphicalStaffEntryContainers[e3].StaffEntries;
              for (let i3 = 0, s2 = t4.length; i3 < s2; ++i3) {
                const s3 = t4[i3];
                if (s3 && s3.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) return e3;
              }
            }
            return -1;
          }
          findClosestLeftStaffEntry(t3, e3) {
            let i3, s2 = Math.floor(t3);
            s2 = Math.min(this.VerticalGraphicalStaffEntryContainers.length - 1, s2);
            for (let t4 = s2; t4 >= 0; t4--) if (i3 = this.getStaffEntry(t4), i3) {
              if (!e3) return i3;
              if (i3.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) return i3;
            }
          }
          findClosestRightStaffEntry(t3, e3) {
            let i3;
            for (let s2 = Math.max(0, Math.ceil(t3)); s2 < this.VerticalGraphicalStaffEntryContainers.length; s2++) if (i3 = this.getStaffEntry(s2), i3) {
              if (!e3) return i3;
              if (i3.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) return i3;
            }
          }
          calculateCursorLineAtTimestamp(t3, e3) {
            const i3 = this.calculateXPositionFromTimestamp(t3), s2 = i3[0], n2 = i3[1];
            if (!n2 || 0 === n2.StaffLines.length) return;
            const o2 = n2.PositionAndShape.AbsolutePosition.y, l2 = f.CollectionUtil.last(n2.StaffLines).PositionAndShape.RelativePosition.y + 4;
            return new r.GraphicalLine(new a.PointF2D(s2, o2), new a.PointF2D(s2, o2 + l2), 3, e3);
          }
          calculateXPositionFromTimestamp(t3) {
            var _a, _b, _c, _d;
            let e3;
            const i3 = this.GetInterpolatedIndexInVerticalContainers(t3), s2 = this.findClosestLeftStaffEntry(i3, true), n2 = this.findClosestRightStaffEntry(i3, true), r2 = t3.RealValue;
            if (!s2 && !n2) return [0, void 0];
            let o2, a2;
            if (o2 = s2 ? (_a = s2.parentMeasure.ParentStaffLine) == null ? void 0 : _a.ParentMusicSystem : (_b = n2.parentMeasure.ParentStaffLine) == null ? void 0 : _b.ParentMusicSystem, a2 = n2 ? (_c = n2.parentMeasure.ParentStaffLine) == null ? void 0 : _c.ParentMusicSystem : (_d = s2.parentMeasure.ParentStaffLine) == null ? void 0 : _d.ParentMusicSystem, o2 === a2) {
              let t4, i4, a3;
              if (e3 = o2, s2) if (n2) i4 = s2.PositionAndShape.AbsolutePosition.x, a3 = n2.PositionAndShape.AbsolutePosition.x, t4 = s2 === n2 ? 0 : (r2 - s2.getAbsoluteTimestamp().RealValue) / (n2.getAbsoluteTimestamp().RealValue - s2.getAbsoluteTimestamp().RealValue);
              else {
                i4 = s2.PositionAndShape.AbsolutePosition.x, a3 = e3.GetRightBorderAbsoluteXPosition();
                const n3 = s2.parentMeasure.parentSourceMeasure;
                t4 = (r2 - s2.getAbsoluteTimestamp().RealValue) / (c.Fraction.plus(n3.AbsoluteTimestamp, n3.Duration).RealValue - s2.getAbsoluteTimestamp().RealValue);
              }
              else i4 = a3 = n2.PositionAndShape.AbsolutePosition.x, t4 = 0;
              return t4 = Math.min(1, Math.max(0, t4)), [i4 + t4 * (a3 - i4), e3];
            }
            {
              const t4 = n2.parentMeasure.parentSourceMeasure.AbsoluteTimestamp.RealValue;
              let i4, l2;
              if (r2 < t4 && o2.StaffLines[0]) {
                e3 = o2;
                const n3 = s2.PositionAndShape.AbsolutePosition.x, a3 = e3.GetRightBorderAbsoluteXPosition();
                i4 = (r2 - s2.getAbsoluteTimestamp().RealValue) / (t4 - s2.getAbsoluteTimestamp().RealValue), i4 = Math.min(1, Math.max(0, i4)), l2 = n3 + i4 * (a3 - n3);
              } else {
                e3 = a2;
                const s3 = n2.PositionAndShape.AbsolutePosition.x, o3 = e3.GetLeftBorderAbsoluteXPosition();
                i4 = (r2 - t4) / (n2.getAbsoluteTimestamp().RealValue - t4), i4 = Math.min(1, Math.max(0, i4)), l2 = o3 + i4 * (s3 - o3);
              }
              return [l2, e3];
            }
          }
          GetNumberOfVisibleInstruments() {
            let t3 = 0;
            for (let e3 = 0, i3 = this.musicSheet.Instruments.length; e3 < i3; ++e3) true === this.musicSheet.Instruments[e3].Visible && t3++;
            return t3;
          }
          GetNumberOfFollowedInstruments() {
            let t3 = 0;
            for (let e3 = 0, i3 = this.musicSheet.Instruments.length; e3 < i3; ++e3) true === this.musicSheet.Instruments[e3].Following && t3++;
            return t3;
          }
          GetGraphicalFromSourceStaffEntry(t3) {
            var _a;
            if (!((_a = t3.VerticalContainerParent.ParentMeasure) == null ? void 0 : _a.VerticalMeasureList)) return;
            const e3 = t3.VerticalContainerParent.ParentMeasure.VerticalMeasureList[t3.ParentStaff.idInMusicSheet];
            return e3 == null ? void 0 : e3.findGraphicalStaffEntryFromTimestamp(t3.Timestamp);
          }
          CalculateDistance(t3, e3) {
            const i3 = t3.x - e3.x, s2 = t3.y - e3.y;
            return i3 * i3 + s2 * s2;
          }
          getLongestStaffEntryDuration(t3) {
            let e3 = new c.Fraction(0, 1);
            for (const i3 of this.verticalGraphicalStaffEntryContainers[t3].StaffEntries) {
              if (!i3) continue;
              const t4 = i3.findStaffEntryMaxNoteLength();
              e3.lt(t4) && (e3 = t4);
            }
            return e3;
          }
        }, e2.SystemImageProperties = class {
        };
      }, 8786: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MusicSheetErrors = void 0, e2.MusicSheetErrors = class {
          constructor() {
            this.measureErrors = {}, this.errors = [], this.tempErrors = [];
          }
          finalizeMeasure(t3) {
            let e3 = this.measureErrors[t3];
            e3 || (e3 = []), this.measureErrors[t3] = e3.concat(this.tempErrors), this.tempErrors = [];
          }
          pushMeasureError(t3) {
            this.tempErrors.push(t3);
          }
          push(t3) {
            this.errors.push(t3);
          }
        };
      }, 8900: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
      }, 8927: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.AccidentalCalculator = void 0;
        const s = i2(8233), n = i2(8233), r = i2(3263), o = i2(7921);
        e2.AccidentalCalculator = class {
          constructor() {
            this.keySignatureNoteAlterationsDict = new r.Dictionary(), this.currentAlterationsComparedToKeyInstructionList = [], this.currentInMeasureNoteAlterationsDict = new r.Dictionary();
          }
          get ActiveKeyInstruction() {
            return this.activeKeyInstruction;
          }
          set ActiveKeyInstruction(t3) {
            this.activeKeyInstruction = t3, this.reactOnKeyInstructionChange();
          }
          doCalculationsAtEndOfMeasure() {
            this.currentInMeasureNoteAlterationsDict.clear(), this.currentAlterationsComparedToKeyInstructionList.clear();
            for (const t3 of this.keySignatureNoteAlterationsDict.keys()) this.currentInMeasureNoteAlterationsDict.setValue(t3, this.keySignatureNoteAlterationsDict.getValue(t3));
          }
          checkAccidental(t3, e3) {
            if (!e3) return;
            const i3 = e3.FundamentalNote + 12 * e3.Octave, r2 = t3.sourceNote.NoteTie;
            if (r2 && t3.sourceNote !== r2.StartNote) return;
            const a = this.currentAlterationsComparedToKeyInstructionList.indexOf(i3) >= 0;
            if (this.currentInMeasureNoteAlterationsDict.containsKey(i3)) if (a && this.currentAlterationsComparedToKeyInstructionList.splice(this.currentAlterationsComparedToKeyInstructionList.indexOf(i3), 1), this.currentInMeasureNoteAlterationsDict.getValue(i3) !== e3.AccidentalHalfTones) {
              this.keySignatureNoteAlterationsDict.containsKey(i3) && this.keySignatureNoteAlterationsDict.getValue(i3) !== e3.AccidentalHalfTones ? (this.currentAlterationsComparedToKeyInstructionList.push(i3), this.currentInMeasureNoteAlterationsDict.setValue(i3, e3.AccidentalHalfTones)) : e3.Accidental !== s.AccidentalEnum.NONE && this.currentInMeasureNoteAlterationsDict.remove(i3);
              const r3 = this.currentInMeasureNoteAlterationsDict.getValue(i3);
              if (e3.Accidental === s.AccidentalEnum.NONE && (e3 = 0.5 === Math.abs(r3) ? new n.Pitch(e3.FundamentalNote, e3.Octave, s.AccidentalEnum.NONE, void 0, false, e3.OctaveShiftApplied) : new n.Pitch(e3.FundamentalNote, e3.Octave, s.AccidentalEnum.NATURAL, void 0, false, e3.OctaveShiftApplied)), this.isAlterAmbiguousAccidental(e3.Accidental) && !e3.AccidentalXml) return;
              o.MusicSheetCalculator.symbolFactory.addGraphicalAccidental(t3, e3);
            } else e3.AccidentalXml && 0 === this.Transpose && !a && o.MusicSheetCalculator.symbolFactory.addGraphicalAccidental(t3, e3);
            else if (e3.Accidental !== s.AccidentalEnum.NONE) {
              if (a || this.currentAlterationsComparedToKeyInstructionList.push(i3), this.currentInMeasureNoteAlterationsDict.setValue(i3, e3.AccidentalHalfTones), this.isAlterAmbiguousAccidental(e3.Accidental) && !e3.AccidentalXml) return;
              o.MusicSheetCalculator.symbolFactory.addGraphicalAccidental(t3, e3);
            } else a && (e3 = new n.Pitch(e3.FundamentalNote, e3.Octave, s.AccidentalEnum.NATURAL, void 0, false, e3.OctaveShiftApplied), this.currentAlterationsComparedToKeyInstructionList.splice(this.currentAlterationsComparedToKeyInstructionList.indexOf(i3), 1), o.MusicSheetCalculator.symbolFactory.addGraphicalAccidental(t3, e3));
          }
          isAlterAmbiguousAccidental(t3) {
            return t3 === s.AccidentalEnum.SLASHFLAT || t3 === s.AccidentalEnum.QUARTERTONEFLAT;
          }
          reactOnKeyInstructionChange() {
            const t3 = this.activeKeyInstruction.AlteratedNotes;
            let e3;
            e3 = this.activeKeyInstruction.Key > 0 ? s.AccidentalEnum.SHARP : s.AccidentalEnum.FLAT, this.keySignatureNoteAlterationsDict.clear(), this.currentAlterationsComparedToKeyInstructionList.length = 0;
            for (let i3 = -9; i3 < 9; i3++) for (let s2 = 0; s2 < t3.length; s2++) this.keySignatureNoteAlterationsDict.setValue(t3[s2] + 12 * i3, n.Pitch.HalfTonesFromAccidental(e3));
            this.doCalculationsAtEndOfMeasure();
          }
        };
      }, 9003: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Articulation = void 0, e2.Articulation = class {
          constructor(t3, e3) {
            this.articulationEnum = t3, this.placement = e3;
          }
          Equals(t3) {
            return t3.articulationEnum === this.articulationEnum && t3.placement === this.placement;
          }
        };
      }, 9019: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MultiExpressionEntry = e2.MultiExpression = void 0;
        const s = i2(2561), n = i2(9767), r = i2(5875), o = i2(9803), a = i2(1112), l = i2(6362), h = i2(2570);
        e2.MultiExpression = class {
          constructor(t3, e3) {
            this.unknownList = [], this.moodList = [], this.expressions = [], this.sourceMeasure = t3, this.timestamp = e3;
          }
          get SourceMeasureParent() {
            return this.sourceMeasure;
          }
          set SourceMeasureParent(t3) {
            this.sourceMeasure = t3;
          }
          get StaffNumber() {
            return this.staffNumber;
          }
          set StaffNumber(t3) {
            this.staffNumber = t3;
          }
          get Timestamp() {
            return this.timestamp;
          }
          set Timestamp(t3) {
            this.timestamp = t3;
          }
          get AbsoluteTimestamp() {
            return s.Fraction.plus(this.timestamp, this.sourceMeasure.AbsoluteTimestamp);
          }
          get InstantaneousDynamic() {
            return this.instantaneousDynamic;
          }
          set InstantaneousDynamic(t3) {
            this.instantaneousDynamic = t3;
          }
          get EndingContinuousDynamic() {
            return this.endingContinuousDynamic;
          }
          set EndingContinuousDynamic(t3) {
            this.endingContinuousDynamic = t3;
          }
          get StartingContinuousDynamic() {
            return this.startingContinuousDynamic;
          }
          set StartingContinuousDynamic(t3) {
            this.startingContinuousDynamic = t3;
          }
          get MoodList() {
            return this.moodList;
          }
          get UnknownList() {
            return this.unknownList;
          }
          get EntriesList() {
            return this.expressions;
          }
          get OctaveShiftStart() {
            return this.octaveShiftStart;
          }
          set OctaveShiftStart(t3) {
            this.octaveShiftStart = t3;
          }
          get OctaveShiftEnd() {
            return this.octaveShiftEnd;
          }
          set OctaveShiftEnd(t3) {
            this.octaveShiftEnd = t3;
          }
          get CombinedExpressionsText() {
            return this.combinedExpressionsText;
          }
          set CombinedExpressionsText(t3) {
            this.combinedExpressionsText = t3;
          }
          getPlacementOfFirstEntry() {
            let t3 = l.PlacementEnum.Above;
            return this.expressions.length > 0 && (this.expressions[0].expression instanceof n.InstantaneousDynamicExpression || this.expressions[0].expression instanceof r.ContinuousDynamicExpression || this.expressions[0].expression instanceof o.MoodExpression || this.expressions[0].expression instanceof a.UnknownExpression) && (t3 = this.expressions[0].expression.Placement), t3;
          }
          getFontstyleOfFirstEntry() {
            let t3 = h.FontStyles.Regular;
            return this.expressions.length > 0 && (this.expressions[0].expression instanceof r.ContinuousDynamicExpression || this.expressions[0].expression instanceof o.MoodExpression ? t3 = h.FontStyles.Italic : this.expressions[0].expression instanceof a.UnknownExpression && (t3 = this.expressions[0].expression.fontStyle ?? h.FontStyles.Regular)), t3;
          }
          addExpression(t3, e3) {
            t3 instanceof n.InstantaneousDynamicExpression ? (this.instantaneousDynamic && this.removeExpressionFromEntryList(this.InstantaneousDynamic), this.instantaneousDynamic = t3, this.instantaneousDynamic.ParentMultiExpression = this) : t3 instanceof r.ContinuousDynamicExpression ? this.startingContinuousDynamic = t3 : t3 instanceof o.MoodExpression ? this.moodList.push(t3) : t3 instanceof a.UnknownExpression && this.unknownList.push(t3), this.addExpressionToEntryList(t3, e3);
          }
          CompareTo(t3) {
            return this.Timestamp.RealValue > t3.Timestamp.RealValue ? 1 : this.Timestamp.RealValue < t3.Timestamp.RealValue ? -1 : 0;
          }
          addExpressionToEntryList(t3, e3) {
            const i3 = new c();
            i3.prefix = e3, i3.expression = t3, t3 instanceof r.ContinuousDynamicExpression || t3 instanceof o.MoodExpression || t3 instanceof a.UnknownExpression ? i3.label = t3.Label : i3.label = "", this.expressions.push(i3);
          }
          removeExpressionFromEntryList(t3) {
            for (let e3 = 0, i3 = this.expressions.length; e3 < i3; ++e3) if (this.expressions[e3].expression === t3) {
              this.expressions.splice(e3, 1);
              break;
            }
          }
        };
        class c {
        }
        e2.MultiExpressionEntry = c;
      }, 9024: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.TimestampTransform = e2.MusicPartManager = void 0;
        const s = i2(2561), n = i2(474);
        e2.MusicPartManager = class {
          constructor(t3) {
            this.musicSheet = t3;
          }
          reInit() {
            this.init();
          }
          init() {
            this.parts = this.musicSheet.Repetitions.slice(), this.sheetStart = this.musicSheet.SelectionStart = new s.Fraction(0, 1), this.sheetEnd = this.musicSheet.SelectionEnd = this.musicSheet.SheetEndTimestamp, this.calcMapping();
          }
          getCurrentRepetitionTimestampTransform(t3) {
            let e3;
            for (let i3 = this.timestamps.length - 1; i3 >= 0; i3--) if (e3 = this.timestamps[i3], t3.gte(e3.$from)) return e3;
            return this.timestamps[0];
          }
          absoluteEnrolledToSheetTimestamp(t3) {
            if (0 === this.timestamps.length) return t3;
            const e3 = this.getCurrentRepetitionTimestampTransform(t3);
            return s.Fraction.plus(t3, s.Fraction.minus(e3.to, e3.$from));
          }
          get Parts() {
            return this.parts;
          }
          get MusicSheet() {
            return this.musicSheet;
          }
          getIterator(t3) {
            return t3 ? new n.MusicPartManagerIterator(this.musicSheet, t3, void 0) : new n.MusicPartManagerIterator(this.musicSheet, this.musicSheet.SelectionStart, this.musicSheet.SelectionEnd);
          }
          setSelectionStart(t3) {
            this.musicSheet.SelectionStart = t3, this.musicSheet.SelectionEnd = void 0;
          }
          setSelectionRange(t3, e3) {
            this.musicSheet.SelectionStart = t3 ?? this.sheetStart, this.musicSheet.SelectionEnd = e3 ?? this.sheetEnd;
          }
          calcMapping() {
            const t3 = [], e3 = this.getIterator();
            let i3 = e3.CurrentRepetition, s2 = new r(e3.CurrentEnrolledTimestamp.clone(), e3.CurrentSourceTimestamp.clone(), void 0, 0);
            for (t3.push(s2); !e3.EndReached; ) {
              if (e3.JumpOccurred || i3 !== e3.CurrentRepetition) {
                if (i3 = e3.CurrentRepetition, e3.backJumpOccurred) {
                  const i4 = e3.JumpResponsibleRepetition;
                  s2.nextBackJump = e3.CurrentEnrolledTimestamp, s2.curRepetition = i4, s2.curRepetitionIteration = e3.CurrentJumpResponsibleRepetitionIterationBeforeJump;
                  for (let e4 = this.timestamps.length - 2; e4 >= 0 && !t3[e4].to.lt(i4.AbsoluteTimestamp) && !t3[e4].curRepetition; e4--) t3[e4].nextBackJump = s2.nextBackJump, t3[e4].curRepetition = i4, t3[e4].curRepetitionIteration = s2.curRepetitionIteration;
                }
                s2 = new r(e3.CurrentEnrolledTimestamp.clone(), e3.CurrentSourceTimestamp.clone(), void 0, 0), t3.push(s2);
              }
              e3.moveToNext();
            }
            this.timestamps = t3;
          }
        };
        class r {
          constructor(t3, e3, i3, s2) {
            this.$from = t3, this.to = e3, this.curRepetition = i3, this.curRepetitionIteration = s2, this.nextBackJump = void 0, this.nextForwardJump = void 0;
          }
        }
        e2.TimestampTransform = r;
      }, 9099: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MusicSheetReader = void 0;
        const n = i2(427), r = i2(4387), o = i2(2561), a = i2(1272), l = i2(9252), h = i2(2148), c = i2(7307), u = s(i2(3065)), d = i2(9288), f = i2(9288), m = i2(2369), p = i2(7586), g = i2(5294), b = i2(164), S = i2(7435), y = i2(5749), E = i2(9713), x = i2(7503), v = i2(7533);
        e2.MusicSheetReader = class {
          constructor(t3 = void 0, e3 = new E.EngravingRules()) {
            this.completeNumberOfStaves = 0, this.pluginManager = new x.ReaderPluginManager(), this.afterSheetReadingModules = t3 || [], this.repetitionInstructionReader = y.MusicSymbolModuleFactory.createRepetitionInstructionReader(), this.repetitionCalculator = y.MusicSymbolModuleFactory.createRepetitionCalculator(), this.rules = e3;
          }
          get PluginManager() {
            return this.pluginManager;
          }
          get CompleteNumberOfStaves() {
            return this.completeNumberOfStaves;
          }
          static doCalculationsAfterDurationHasBeenSet(t3) {
            for (const e3 of t3) e3.doCalculationsAfterDurationHasBeenSet();
          }
          createMusicSheet(t3, e3) {
            try {
              return this._createMusicSheet(t3, e3);
            } catch (t4) {
              return void u.default.error("MusicSheetReader.CreateMusicSheet", t4);
            }
          }
          _removeFromArray(t3, e3) {
            const i3 = t3.indexOf(e3);
            -1 !== i3 && t3.splice(i3, 1);
          }
          trimString(t3) {
            return t3.replace(/^\s+|\s+$/g, "");
          }
          _lastElement(t3) {
            return t3[t3.length - 1];
          }
          _createMusicSheet(t3, e3) {
            const i3 = [];
            let s2 = 0;
            this.musicSheet = new n.MusicSheet(), this.musicSheet.Path = e3, this.musicSheet.Rules = this.rules;
            const a2 = t3.attribute("osmdMeasureWidthFactor");
            if (a2) {
              const t4 = Number.parseFloat(a2.value);
              "number" != typeof t4 || isNaN(t4) ? u.default.info("xml parse: osmdMeasureWidthFactor invalid") : this.musicSheet.MeasureWidthFactor = t4;
            }
            if (!t3) throw new c.MusicSheetReadingException("Undefined root element");
            this.pushSheetLabels(t3, e3);
            const l2 = t3.element("part-list");
            if (!l2) throw new c.MusicSheetReadingException("Undefined partListNode");
            const d2 = t3.elements("part"), f2 = l2.elements();
            this.initializeReading(f2, d2, i3);
            let m2 = true;
            this.currentFraction = new o.Fraction(0, 1);
            let p2 = false, g2 = t3.element("identification");
            for (g2 && (g2 = g2.element("encoding")), g2 && (g2 = g2.element("software")), void 0 !== g2 && "Guitar Pro 5" === g2.value && (p2 = true); m2; ) {
              void 0 !== this.currentMeasure && this.currentMeasure.HasEndLine && this.rules.NewPartAndSystemAfterFinalBarline && (s2 = 0), this.currentMeasure = new r.SourceMeasure(this.completeNumberOfStaves, this.musicSheet.Rules);
              for (const t4 of i3) try {
                m2 = m2 && t4.readNextXmlMeasure(this.currentMeasure, this.currentFraction, p2);
              } catch (t5) {
                const e4 = h.ITextTranslation.translateText("ReaderErrorMessages/InstrumentError", "Error while reading instruments.");
                throw new c.MusicSheetReadingException(e4, t5);
              }
              m2 && (this.musicSheet.addMeasure(this.currentMeasure), this.checkIfRhythmInstructionsAreSetAndEqual(i3), this.checkSourceMeasureForNullEntries(), s2 = this.setSourceMeasureDuration(i3, s2), this.currentMeasure.AbsoluteTimestamp = this.currentFraction.clone(), this.musicSheet.SheetErrors.finalizeMeasure(this.currentMeasure.MeasureNumber), this.currentFraction.Add(this.currentMeasure.Duration), this.previousMeasure = this.currentMeasure);
            }
            this.repetitionInstructionReader && (this.repetitionInstructionReader.removeRedundantInstructions(), this.repetitionCalculator && this.repetitionCalculator.calculateRepetitions(this.musicSheet, this.repetitionInstructionReader.repetitionInstructions)), this.musicSheet.checkForInstrumentWithNoVoice(), this.musicSheet.fillStaffList();
            for (let t4 = 0, e4 = this.afterSheetReadingModules.length; t4 < e4; ++t4) this.afterSheetReadingModules[t4].calculate(this.musicSheet);
            return this.musicSheet.userStartTempoInBPM = this.musicSheet.userStartTempoInBPM || this.musicSheet.DefaultStartTempoInBpm, this.musicSheet;
          }
          initializeReading(t3, e3, i3) {
            const s2 = this.createInstrumentGroups(t3);
            this.completeNumberOfStaves = this.getCompleteNumberOfStavesFromXml(e3), 0 !== e3.length && (this.repetitionInstructionReader.MusicSheet = this.musicSheet, this.currentFraction = new o.Fraction(0, 1), this.currentMeasure = void 0, this.previousMeasure = void 0);
            let n2 = 0;
            for (const t4 of e3) {
              const e4 = t4.attribute("id");
              if (e4) {
                const r2 = s2[e4.value], o2 = t4.elements("measure");
                let l2 = 1;
                try {
                  l2 = this.getInstrumentNumberOfStavesFromXml(t4);
                } catch (t5) {
                  const e5 = h.ITextTranslation.translateText("ReaderErrorMessages/InstrumentStavesNumberError", "Invalid number of staves at instrument: ");
                  this.musicSheet.SheetErrors.push(e5 + r2.Name);
                  continue;
                }
                r2.createStaves(l2), i3.push(new a.InstrumentReader(this.pluginManager, this.repetitionInstructionReader, o2, r2)), this.repetitionInstructionReader && (this.repetitionInstructionReader.xmlMeasureList[n2] = o2), n2++;
              }
            }
          }
          checkIfRhythmInstructionsAreSetAndEqual(t3) {
            const e3 = [];
            for (let t4 = 0; t4 < this.completeNumberOfStaves; t4++) if (this.currentMeasure.FirstInstructionsStaffEntries[t4]) {
              const i4 = this.currentMeasure.FirstInstructionsStaffEntries[t4].Instructions[this.currentMeasure.FirstInstructionsStaffEntries[t4].Instructions.length - 1];
              i4 instanceof d.RhythmInstruction && e3.push(i4);
            }
            let i3 = 0, s2 = -1;
            for (let t4 = 0, n2 = e3.length; t4 < n2; ++t4) {
              const n3 = e3[t4];
              if (n3.Rhythm.RealValue > i3) {
                if (this.areRhythmInstructionsMixed(e3) && n3.SymbolEnum !== f.RhythmSymbolEnum.NONE) continue;
                i3 = n3.Rhythm.RealValue, s2 = e3.indexOf(n3);
              }
            }
            if (e3.length > 0 && e3.length < this.completeNumberOfStaves) {
              const i4 = e3[s2].clone();
              for (let t4 = 0; t4 < this.completeNumberOfStaves; t4++) void 0 === this.currentMeasure.FirstInstructionsStaffEntries[t4] || this._lastElement(this.currentMeasure.FirstInstructionsStaffEntries[t4].Instructions) instanceof d.RhythmInstruction || (this.currentMeasure.FirstInstructionsStaffEntries[t4].removeAllInstructionsOfTypeRhythmInstruction(), this.currentMeasure.FirstInstructionsStaffEntries[t4].Instructions.push(i4.clone())), this.currentMeasure.FirstInstructionsStaffEntries[t4] || (this.currentMeasure.FirstInstructionsStaffEntries[t4] = new m.SourceStaffEntry(void 0, void 0), this.currentMeasure.FirstInstructionsStaffEntries[t4].Instructions.push(i4.clone()));
              for (let e4 = 0, s3 = t3.length; e4 < s3; ++e4) t3[e4].ActiveRhythm = i4;
            }
            if (0 === e3.length && this.currentMeasure === this.musicSheet.SourceMeasures[0]) {
              const e4 = new d.RhythmInstruction(new o.Fraction(4, 4, 0, false), f.RhythmSymbolEnum.NONE);
              for (let t4 = 0; t4 < this.completeNumberOfStaves; t4++) this.currentMeasure.FirstInstructionsStaffEntries[t4] ? this.currentMeasure.FirstInstructionsStaffEntries[t4].removeAllInstructionsOfTypeRhythmInstruction() : this.currentMeasure.FirstInstructionsStaffEntries[t4] = new m.SourceStaffEntry(void 0, void 0), this.currentMeasure.FirstInstructionsStaffEntries[t4].Instructions.push(e4);
              for (let i4 = 0, s3 = t3.length; i4 < s3; ++i4) t3[i4].ActiveRhythm = e4;
            }
            for (let t4 = 0, n2 = e3.length; t4 < n2; ++t4) {
              const n3 = e3[t4];
              if (n3.Rhythm.RealValue < i3 && this._lastElement(this.currentMeasure.FirstInstructionsStaffEntries[e3.indexOf(n3)].Instructions) instanceof d.RhythmInstruction) {
                const t5 = this.currentMeasure.FirstInstructionsStaffEntries[e3.indexOf(n3)].Instructions;
                t5[t5.length - 1] = e3[s2].clone();
              }
              Math.abs(n3.Rhythm.RealValue - i3) < 1e-6 && n3.SymbolEnum !== f.RhythmSymbolEnum.NONE && this.areRhythmInstructionsMixed(e3) && (n3.SymbolEnum = f.RhythmSymbolEnum.NONE);
            }
          }
          areRhythmInstructionsMixed(t3) {
            for (let e3 = 1; e3 < t3.length; e3++) if (Math.abs(t3[e3].Rhythm.RealValue - t3[0].Rhythm.RealValue) < 1e-6 && t3[e3].SymbolEnum !== t3[0].SymbolEnum) return true;
            return false;
          }
          setSourceMeasureDuration(t3, e3) {
            let i3 = new o.Fraction(0, 1);
            const s2 = [];
            for (const e4 of t3) {
              s2.push(e4.MaxTieNoteFraction);
              const t4 = e4.ActiveRhythm.Rhythm;
              i3.lt(t4) && (i3 = new o.Fraction(t4.Numerator, t4.Denominator, 0, false));
            }
            const n2 = this.currentMeasure.calculateInstrumentsDuration(this.musicSheet, s2);
            let r2 = new o.Fraction(0, 1);
            for (const t4 of n2) r2.lt(t4) && (r2 = t4);
            o.Fraction.Equal(r2, i3) ? this.checkFractionsForEquivalence(r2, i3) : r2.lt(i3) && (r2 = this.currentMeasure.reverseCheck(this.musicSheet, r2), this.checkFractionsForEquivalence(r2, i3)), this.currentMeasure.ImplicitMeasure = this.checkIfMeasureIsImplicit(r2, i3), (!this.currentMeasure.ImplicitMeasure || e3 > 0) && e3++, this.currentMeasure.Duration = r2, this.currentMeasure.ActiveTimeSignature = i3, this.currentMeasure.MeasureNumber = e3;
            for (let t4 = 0; t4 < n2.length; t4++) {
              const e4 = n2[t4];
              if (this.currentMeasure.ImplicitMeasure && e4 !== r2 || !o.Fraction.Equal(e4, i3) && !this.allInstrumentsHaveSameDuration(n2, r2)) {
                const e5 = this.musicSheet.getGlobalStaffIndexOfFirstStaff(this.musicSheet.Instruments[t4]);
                for (let i4 = 0; i4 < this.musicSheet.Instruments[t4].Staves.length; i4++) if (!this.graphicalMeasureIsEmpty(e5 + i4)) {
                  this.currentMeasure.setErrorInGraphicalMeasure(e5 + i4, true);
                  const t5 = h.ITextTranslation.translateText("ReaderErrorMessages/MissingNotesError", "Given Notes don't correspond to measure duration.");
                  this.musicSheet.SheetErrors.pushMeasureError(t5);
                }
              }
            }
            return e3;
          }
          checkFractionsForEquivalence(t3, e3) {
            if (e3.Denominator > t3.Denominator) {
              const i3 = e3.Denominator / t3.Denominator;
              t3.expand(i3);
            }
          }
          checkIfMeasureIsImplicit(t3, e3) {
            return !(this.previousMeasure || !t3.lt(e3)) || !!this.previousMeasure && o.Fraction.plus(this.previousMeasure.Duration, t3).Equals(e3);
          }
          allInstrumentsHaveSameDuration(t3, e3) {
            let i3 = 0;
            for (let s2 = 0, n2 = t3.length; s2 < n2; ++s2) t3[s2].Equals(e3) && i3++;
            return i3 === t3.length && e3 !== new o.Fraction(0, 1);
          }
          graphicalMeasureIsEmpty(t3) {
            let e3 = 0;
            for (let i3 = 0; i3 < this.currentMeasure.VerticalSourceStaffEntryContainers.length; i3++) this.currentMeasure.VerticalSourceStaffEntryContainers[i3].StaffEntries[t3] || e3++;
            return e3 === this.currentMeasure.VerticalSourceStaffEntryContainers.length;
          }
          checkSourceMeasureForNullEntries() {
            for (let t3 = this.currentMeasure.VerticalSourceStaffEntryContainers.length - 1; t3 >= 0; t3--) for (let e3 = this.currentMeasure.VerticalSourceStaffEntryContainers[t3].StaffEntries.length - 1; e3 >= 0; e3--) {
              const i3 = this.currentMeasure.VerticalSourceStaffEntryContainers[t3].StaffEntries[e3];
              if (i3) for (let t4 = i3.VoiceEntries.length - 1; t4 >= 0; t4--) {
                const e4 = i3.VoiceEntries[t4];
                0 === e4.Notes.length && (this._removeFromArray(e4.ParentVoice.VoiceEntries, e4), this._removeFromArray(i3.VoiceEntries, e4));
              }
              void 0 !== i3 && 0 === i3.VoiceEntries.length && 0 === i3.ChordContainers.length && (this.currentMeasure.VerticalSourceStaffEntryContainers[t3].StaffEntries[e3] = void 0);
            }
            for (let t3 = this.currentMeasure.VerticalSourceStaffEntryContainers.length - 1; t3 >= 0; t3--) {
              let e3 = 0;
              for (let i3 = 0, s2 = this.currentMeasure.VerticalSourceStaffEntryContainers[t3].StaffEntries.length; i3 < s2; ++i3) this.currentMeasure.VerticalSourceStaffEntryContainers[t3].StaffEntries[i3] || e3++;
              e3 === this.currentMeasure.VerticalSourceStaffEntryContainers[t3].StaffEntries.length && this._removeFromArray(this.currentMeasure.VerticalSourceStaffEntryContainers, this.currentMeasure.VerticalSourceStaffEntryContainers[t3]);
            }
          }
          pushSheetLabels(t3, e3) {
            this.readComposer(t3), this.readTitle(t3), this.readCopyright(t3);
            try {
              this.musicSheet.Title && this.musicSheet.Composer && this.musicSheet.Subtitle || this.readTitleAndComposerFromCredits(t3);
            } catch (t4) {
              u.default.info("MusicSheetReader.pushSheetLabels", "readTitleAndComposerFromCredits", t4);
            }
            try {
              if (!this.musicSheet.Title) {
                const t4 = Math.max(0, e3.lastIndexOf("/"), e3.lastIndexOf("\\")), i3 = e3.substr(t4).split(".", 1);
                this.musicSheet.Title = new S.Label(i3[0]);
              }
            } catch (t4) {
              u.default.info("MusicSheetReader.pushSheetLabels", "read title from file name", t4);
            }
          }
          presentAttrsWithValue(t3, e3) {
            for (const i3 of t3.attributes()) if (i3.value === e3) return true;
            return false;
          }
          readComposer(t3) {
            const e3 = t3.element("identification");
            if (e3) {
              const t4 = e3.elements("creator");
              for (let e4 = 0, i3 = t4.length; e4 < i3; ++e4) {
                const i4 = t4[e4];
                if (i4.hasAttributes) {
                  if (this.presentAttrsWithValue(i4, "composer")) {
                    this.musicSheet.Composer = new S.Label(this.trimString(i4.value));
                    continue;
                  }
                  (this.presentAttrsWithValue(i4, "lyricist") || this.presentAttrsWithValue(i4, "poet")) && (this.musicSheet.Lyricist = new S.Label(this.trimString(i4.value)));
                }
              }
            }
          }
          readCopyright(t3) {
            const e3 = t3.elements("identification");
            if (e3.length > 0) {
              const t4 = e3[0].elements("rights");
              if (t4.length > 0) for (let e4 = 0, i3 = t4.length; e4 < i3; ++e4) {
                const i4 = t4[e4];
                if (i4.value) {
                  this.musicSheet.Copyright = new S.Label(i4.value, v.TextAlignmentEnum.CenterBottom, void 0, true);
                  break;
                }
              }
            }
          }
          readTitleAndComposerFromCredits(t3) {
            var _a, _b, _c;
            if (this.rules.SheetComposerSubtitleUseLegacyParsing) return void this.readTitleAndComposerFromCreditsLegacy(t3);
            const e3 = this.computeSystemYCoordinates(t3);
            if (0 === e3) return;
            let i3, s2, n2;
            const r2 = t3.elements("credit");
            for (let t4 = 0, o2 = r2.length; t4 < o2; ++t4) {
              const o3 = r2[t4];
              if (!o3.attribute("page")) return;
              if ("1" === o3.attribute("page").value) {
                let t5;
                if (o3) {
                  let r3 = false, a2 = false;
                  const l2 = o3.element("credit-type");
                  "subtitle" === (l2 == null ? void 0 : l2.value) ? r3 = true : "composer" === (l2 == null ? void 0 : l2.value) && (a2 = true);
                  let h2 = r3 || a2;
                  t5 = o3.elements("credit-words");
                  for (const o4 of t5) {
                    const t6 = (_a = o4.value) == null ? void 0 : _a.trim();
                    if ("Copyright ©" === t6) continue;
                    const l3 = (_b = o4.attribute("justify")) == null ? void 0 : _b.value;
                    "right" === l3 ? (a2 = true, h2 = true) : "center" === l3 && i3 && (r3 = true, h2 = true);
                    const c2 = (_c = o4.attribute("default-y")) == null ? void 0 : _c.value, u2 = null != c2, d2 = u2 ? parseFloat(c2) : Number.MIN_VALUE;
                    if (u2 && d2 > e3 || h2) if (i3 || h2) {
                      if (a2 || "right" === l3) n2 ? n2 += "\n" + t6 : n2 = t6;
                      else if (r3 || "right" !== l3 && "left" !== l3) s2 ? s2 += "\n" + t6 : s2 = t6;
                      else if ("left" === l3) {
                        this.musicSheet.Lyricist || (this.musicSheet.Lyricist = new S.Label(t6));
                        break;
                      }
                    } else i3 = t6;
                  }
                }
              }
            }
            if (!this.musicSheet.Title && i3 && (this.musicSheet.Title = new S.Label(this.trimString(i3))), !this.musicSheet.Subtitle && s2 && (this.musicSheet.Subtitle = new S.Label(this.trimString(s2))), n2) {
              let t4 = false;
              this.musicSheet.Composer ? (n2.match("\n") ?? []).length + 1 >= (this.musicSheet.Composer.text.match("\n") ?? []).length + 1 && (t4 = true) : t4 = true, t4 && (this.musicSheet.Composer = new S.Label(this.trimString(n2)));
            }
          }
          readTitleAndComposerFromCreditsLegacy(t3) {
            var _a, _b, _c;
            const e3 = this.computeSystemYCoordinates(t3);
            if (0 === e3) return;
            let i3, s2, n2, r2 = 1, o2 = 0;
            const a2 = t3.elements("credit");
            for (let t4 = 0, l2 = a2.length; t4 < l2; ++t4) {
              const l3 = a2[t4];
              if (!l3.attribute("page")) return;
              if ("1" === l3.attribute("page").value) {
                let t5;
                if (l3) {
                  if (t5 = l3.element("credit-words"), !t5.attribute("justify")) break;
                  const a3 = (_a = t5.attribute("justify")) == null ? void 0 : _a.value, h2 = (_b = t5.attribute("default-y")) == null ? void 0 : _b.value, c2 = null != h2, u2 = c2 ? parseFloat(h2) : Number.MIN_VALUE;
                  let d2 = false;
                  const f2 = l3.element("credit-type");
                  if ("subtitle" === (f2 == null ? void 0 : f2.value) && (d2 = true), c2 && u2 > e3 || d2) {
                    if (!this.musicSheet.Title && !d2) {
                      const e4 = (_c = t5.attribute("font-size")) == null ? void 0 : _c.value;
                      if (e4) {
                        const s3 = parseFloat(e4);
                        r2 < s3 && (r2 = s3, i3 = t5.value);
                      }
                    }
                    switch (this.musicSheet.Subtitle || ("right" !== a3 && "left" !== a3 || d2) && (o2 < u2 ? (o2 = u2, n2 ? (s2 = n2, n2 = t5.value) : n2 = t5.value) : s2 ? s2 += "\n" + t5.value : s2 = t5.value), a3) {
                      case "right":
                        this.musicSheet.Composer || (this.musicSheet.Composer = new S.Label(this.trimString(t5.value)));
                        break;
                      case "left":
                        this.musicSheet.Lyricist || (this.musicSheet.Lyricist = new S.Label(this.trimString(t5.value)));
                    }
                  }
                }
              }
            }
            !this.musicSheet.Title && i3 && (this.musicSheet.Title = new S.Label(this.trimString(i3))), !this.musicSheet.Subtitle && s2 && (this.musicSheet.Subtitle = new S.Label(this.trimString(s2)));
          }
          computeSystemYCoordinates(t3) {
            if (!t3.element("defaults")) return 0;
            let e3 = 0, i3 = 0;
            try {
              const i4 = t3.element("defaults").element("page-layout").element("page-height").value;
              e3 = parseFloat(i4);
            } catch (t4) {
              return u.default.info("MusicSheetReader.computeSystemYCoordinates(): couldn't find page height, not reading title/composer."), 0;
            }
            let s2 = false;
            const n2 = t3.elements("part");
            for (let t4 = 0, e4 = n2.length; t4 < e4; ++t4) {
              const e5 = n2[t4].elements("measure");
              for (let t5 = 0, n3 = e5.length; t5 < n3; ++t5) {
                const n4 = e5[t5];
                if (n4.element("print")) {
                  const t6 = n4.element("print").elements("system-layout");
                  for (let e6 = 0, n5 = t6.length; e6 < n5; ++e6) {
                    const n6 = t6[e6];
                    if (n6.element("top-system-distance")) {
                      const t7 = n6.element("top-system-distance").value;
                      i3 = parseFloat(t7), s2 = true;
                      break;
                    }
                  }
                  break;
                }
              }
              if (s2) break;
            }
            if (t3.element("defaults").element("system-layout") && t3.element("defaults").element("system-layout").element("top-system-distance")) {
              const e4 = t3.element("defaults").element("system-layout").element("top-system-distance").value;
              i3 = parseFloat(e4);
            }
            return 0 === i3 ? 0 : e3 - i3;
          }
          readTitle(t3) {
            const e3 = t3.element("work");
            let i3;
            e3 && (i3 = e3.element("work-title"), i3 && i3.value && (this.musicSheet.Title = new S.Label(this.trimString(i3.value))));
            const s2 = t3.element("movement-title");
            let n2 = "";
            if (s2 && (this.musicSheet.Title ? n2 = this.trimString(s2.value) : this.musicSheet.Title = new S.Label(this.trimString(s2.value))), e3) {
              const t4 = e3.element("work-number");
              if (t4) {
                const e4 = t4.value;
                e4 && (n2 = "" === n2 ? e4 : n2 + ", " + e4);
              }
            }
            n2 && (this.musicSheet.Subtitle = new S.Label(n2));
          }
          createInstrumentGroups(t3) {
            let e3 = 0;
            const i3 = {};
            let s2;
            try {
              const n2 = t3;
              for (let t4 = 0, r2 = n2.length; t4 < r2; ++t4) {
                const r3 = n2[t4];
                if ("score-part" === r3.name) {
                  const t5 = r3.attribute("id").value, n3 = new l.Instrument(e3, t5, this.musicSheet, s2);
                  e3++;
                  const o2 = r3.elements();
                  for (let t6 = 0, e4 = o2.length; t6 < e4; ++t6) {
                    const e5 = o2[t6];
                    try {
                      if ("part-name" === e5.name) n3.Name = e5.value, e5.attribute("print-object") && "no" === e5.attribute("print-object").value && (n3.NameLabel.print = false);
                      else if ("part-abbreviation" === e5.name) n3.PartAbbreviation = e5.value;
                      else if ("score-instrument" === e5.name) {
                        const t7 = new g.SubInstrument(n3);
                        t7.idString = e5.firstAttribute.value, n3.SubInstruments.push(t7);
                        const i4 = e5.element("instrument-name");
                        i4 && (t7.name = i4.value, t7.setMidiInstrument(i4.value));
                      } else if ("midi-instrument" === e5.name) {
                        let t7 = n3.getSubInstrument(e5.firstAttribute.value);
                        for (let i5 = 0, s3 = n3.SubInstruments.length; i5 < s3; ++i5) {
                          const s4 = n3.SubInstruments[i5];
                          if (s4.idString === e5.value) {
                            t7 = s4;
                            break;
                          }
                        }
                        const i4 = e5.elements();
                        for (let e6 = 0, s3 = i4.length; e6 < s3; ++e6) {
                          const s4 = i4[e6];
                          try {
                            if ("midi-channel" === s4.name) 10 === parseInt(s4.value, 10) && (n3.MidiInstrumentId = b.MidiInstrument.Percussion);
                            else if ("midi-program" === s4.name) n3.SubInstruments.length > 0 && n3.MidiInstrumentId !== b.MidiInstrument.Percussion && (t7.midiInstrumentID = Math.max(0, parseInt(s4.value, 10) - 1));
                            else if ("midi-unpitched" === s4.name) t7.fixedKey = Math.max(0, parseInt(s4.value, 10));
                            else if ("volume" === s4.name) try {
                              const e7 = parseFloat(s4.value);
                              t7.volume = e7 / 127;
                            } catch (t8) {
                              u.default.debug("ExpressionReader.readExpressionParameters", "read volume", t8);
                            }
                            else if ("pan" === s4.name) try {
                              const e7 = parseFloat(s4.value);
                              t7.pan = e7 / 64;
                            } catch (t8) {
                              u.default.debug("ExpressionReader.readExpressionParameters", "read pan", t8);
                            }
                          } catch (t8) {
                            u.default.info("MusicSheetReader.createInstrumentGroups midi settings: ", t8);
                          }
                        }
                      }
                    } catch (t7) {
                      u.default.info("MusicSheetReader.createInstrumentGroups: ", t7);
                    }
                  }
                  if (0 === n3.SubInstruments.length) {
                    const t6 = new g.SubInstrument(n3);
                    n3.SubInstruments.push(t6);
                  }
                  i3[t5] = n3, s2 ? (s2.InstrumentalGroups.push(n3), this.musicSheet.Instruments.push(n3)) : (this.musicSheet.InstrumentalGroups.push(n3), this.musicSheet.Instruments.push(n3));
                } else if ("part-group" === r3.name && "start" === r3.attribute("type").value) {
                  const t5 = new p.InstrumentalGroup("group", this.musicSheet, s2);
                  s2 ? s2.InstrumentalGroups.push(t5) : this.musicSheet.InstrumentalGroups.push(t5), s2 = t5;
                } else if ("part-group" === r3.name && "stop" === r3.attribute("type").value && s2) {
                  if (1 === s2.InstrumentalGroups.length) {
                    const t5 = s2.InstrumentalGroups[0];
                    s2.Parent ? (s2.Parent.InstrumentalGroups.push(t5), this._removeFromArray(s2.Parent.InstrumentalGroups, s2)) : (this.musicSheet.InstrumentalGroups.push(t5), this._removeFromArray(this.musicSheet.InstrumentalGroups, s2));
                  }
                  s2 = s2.Parent;
                }
              }
            } catch (t4) {
              const e4 = h.ITextTranslation.translateText("ReaderErrorMessages/InstrumentError", "Error while reading Instruments");
              throw new c.MusicSheetReadingException(e4, t4);
            }
            for (let t4 = 0, e4 = this.musicSheet.Instruments.length; t4 < e4; ++t4) {
              const e5 = this.musicSheet.Instruments[t4];
              e5.Name || (e5.Name = "Instr. " + e5.IdString);
            }
            return i3;
          }
          getCompleteNumberOfStavesFromXml(t3) {
            let e3 = 0;
            for (const i3 of t3) {
              const t4 = i3.elements("measure");
              if (t4.length > 0) {
                const i4 = t4[0];
                if (i4) {
                  let t5 = i4.element("attributes");
                  t5 && (t5 = t5.element("staves")), t5 ? e3 += parseInt(t5.value, 10) : e3++;
                }
              }
            }
            if (isNaN(e3) || e3 <= 0) {
              const t4 = h.ITextTranslation.translateText("ReaderErrorMessages/StaffError", "Invalid number of staves.");
              throw new c.MusicSheetReadingException(t4);
            }
            return e3;
          }
          getInstrumentNumberOfStavesFromXml(t3) {
            let e3 = 0;
            const i3 = t3.element("measure");
            if (i3) {
              const t4 = i3.element("attributes");
              let s2;
              t4 && (s2 = t4.element("staves")), e3 = t4 && s2 ? parseInt(s2.value, 10) : 1;
            }
            if (isNaN(e3) || e3 <= 0) {
              const t4 = h.ITextTranslation.translateText("ReaderErrorMessages/StaffError", "Invalid number of Staves.");
              throw new c.MusicSheetReadingException(t4);
            }
            return e3;
          }
        };
      }, 9147: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.AbstractTempoExpression = void 0;
        const s = i2(6362);
        class n extends s.AbstractExpression {
          constructor(t3, e3, i3, s2) {
            super(e3), this.label = t3, this.staffNumber = i3, this.parentMultiTempoExpression = s2;
          }
          get Label() {
            return this.label;
          }
          set Label(t3) {
            this.label = t3;
          }
          get Placement() {
            return this.placement;
          }
          set Placement(t3) {
            this.placement = t3;
          }
          get StaffNumber() {
            return this.staffNumber;
          }
          set StaffNumber(t3) {
            this.staffNumber = t3;
          }
          get ParentMultiTempoExpression() {
            return this.parentMultiTempoExpression;
          }
          static isStringInStringList(t3, e3) {
            for (const i3 of t3) if (n.stringContainsSeparatedWord(e3.toLowerCase().trim(), i3.toLowerCase().trim())) return true;
            return false;
          }
          static stringContainsSeparatedWord(t3, e3) {
            return t3 === e3 || -1 !== t3.indexOf(" " + e3) || -1 !== t3.indexOf(e3 + " ");
          }
        }
        e2.AbstractTempoExpression = n;
      }, 9157: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.RehearsalExpression = void 0;
        const s = i2(6362);
        class n extends s.AbstractExpression {
          constructor(t3, e3) {
            super(e3), this.label = t3;
          }
        }
        e2.RehearsalExpression = n;
      }, 9161: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.TempoEnum = e2.InstantaneousTempoExpression = void 0;
        const s = i2(9147), n = i2(7307), r = i2(2561);
        class o extends s.AbstractTempoExpression {
          constructor(t3, e3, i3, s2, n2, r2 = false) {
            super(t3, e3, i3, n2), this.parentMeasure = n2.SourceMeasureParent, this.isMetronomeMark = r2, this.setTempoAndTempoType(s2);
          }
          static getDefaultValueForTempoType(t3) {
            switch (t3) {
              case a.larghissimo:
                return 20;
              case a.grave:
                return 30;
              case a.lento:
                return 48;
              case a.largo:
                return 52;
              case a.larghetto:
                return 63;
              case a.adagio:
                return 70;
              case a.adagietto:
                return 75;
              case a.andanteModerato:
                return 88;
              case a.andante:
                return 92;
              case a.andantino:
                return 96;
              case a.moderato:
                return 106;
              case a.allegretto:
                return 112;
              case a.allegroModerato:
                return 118;
              case a.allegro:
                return 130;
              case a.vivace:
                return 140;
              case a.vivacissimo:
                return 155;
              case a.allegrissimo:
                return 170;
              case a.presto:
                return 184;
              case a.prestissimo:
                return 200;
              default:
                throw new n.ArgumentOutOfRangeException("tempoEnum");
            }
          }
          static isInputStringInstantaneousTempo(t3) {
            return !!t3 && (o.isStringInStringList(o.listInstantaneousTempoLarghissimo, t3) || o.isStringInStringList(o.listInstantaneousTempoGrave, t3) || o.isStringInStringList(o.listInstantaneousTempoLento, t3) || o.isStringInStringList(o.listInstantaneousTempoLargo, t3) || o.isStringInStringList(o.listInstantaneousTempoLarghetto, t3) || o.isStringInStringList(o.listInstantaneousTempoAdagio, t3) || o.isStringInStringList(o.listInstantaneousTempoAdagietto, t3) || o.isStringInStringList(o.listInstantaneousTempoAndanteModerato, t3) || o.isStringInStringList(o.listInstantaneousTempoAndante, t3) || o.isStringInStringList(o.listInstantaneousTempoAndantino, t3) || o.isStringInStringList(o.listInstantaneousTempoModerato, t3) || o.isStringInStringList(o.listInstantaneousTempoAllegretto, t3) || o.isStringInStringList(o.listInstantaneousTempoAllegroModerato, t3) || o.isStringInStringList(o.listInstantaneousTempoAllegro, t3) || o.isStringInStringList(o.listInstantaneousTempoVivace, t3) || o.isStringInStringList(o.listInstantaneousTempoVivacissimo, t3) || o.isStringInStringList(o.listInstantaneousTempoAllegrissimo, t3) || o.isStringInStringList(o.listInstantaneousTempoPresto, t3) || o.isStringInStringList(o.listInstantaneousTempoPrestissimo, t3) || o.isStringInStringList(o.listInstantaneousTempoChangesGeneral, t3));
          }
          get Label() {
            return this.label;
          }
          set Label(t3) {
            this.label = t3;
          }
          get Placement() {
            return this.placement;
          }
          set Placement(t3) {
            this.placement = t3;
          }
          get StaffNumber() {
            return this.staffNumber;
          }
          set StaffNumber(t3) {
            this.staffNumber = t3;
          }
          get Enum() {
            return this.tempoEnum;
          }
          get TempoInBpm() {
            return this.tempoInBpm;
          }
          set TempoInBpm(t3) {
            this.tempoInBpm = t3;
          }
          get ParentMultiTempoExpression() {
            return this.parentMultiTempoExpression;
          }
          getAbsoluteTimestamp() {
            return r.Fraction.plus(this.ParentMultiTempoExpression.SourceMeasureParent.AbsoluteTimestamp, this.ParentMultiTempoExpression.Timestamp);
          }
          getAbsoluteFloatTimestamp() {
            return r.Fraction.plus(this.ParentMultiTempoExpression.SourceMeasureParent.AbsoluteTimestamp, this.ParentMultiTempoExpression.Timestamp).RealValue;
          }
          setTempoAndTempoType(t3) {
            return this.label ? o.isStringInStringList(o.listInstantaneousTempoLarghissimo, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.larghissimo)), this.tempoInBpm = t3, void (this.tempoEnum = a.larghissimo)) : o.isStringInStringList(o.listInstantaneousTempoGrave, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.grave)), this.tempoInBpm = t3, void (this.tempoEnum = a.grave)) : o.isStringInStringList(o.listInstantaneousTempoLento, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.lento)), this.tempoInBpm = t3, void (this.tempoEnum = a.lento)) : o.isStringInStringList(o.listInstantaneousTempoLargo, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.largo)), this.tempoInBpm = t3, void (this.tempoEnum = a.largo)) : o.isStringInStringList(o.listInstantaneousTempoLarghetto, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.larghetto)), this.tempoInBpm = t3, void (this.tempoEnum = a.larghetto)) : o.isStringInStringList(o.listInstantaneousTempoAdagio, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.adagio)), this.tempoInBpm = t3, void (this.tempoEnum = a.adagio)) : o.isStringInStringList(o.listInstantaneousTempoAdagietto, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.adagietto)), this.tempoInBpm = t3, void (this.tempoEnum = a.adagietto)) : o.isStringInStringList(o.listInstantaneousTempoAndanteModerato, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.andanteModerato)), this.tempoInBpm = t3, void (this.tempoEnum = a.andanteModerato)) : o.isStringInStringList(o.listInstantaneousTempoAndante, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.andante)), this.tempoInBpm = t3, void (this.tempoEnum = a.andante)) : o.isStringInStringList(o.listInstantaneousTempoAndantino, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.andantino)), this.tempoInBpm = t3, void (this.tempoEnum = a.andantino)) : o.isStringInStringList(o.listInstantaneousTempoModerato, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.moderato)), this.tempoInBpm = t3, void (this.tempoEnum = a.moderato)) : o.isStringInStringList(o.listInstantaneousTempoAllegretto, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.allegretto)), this.tempoInBpm = t3, void (this.tempoEnum = a.allegretto)) : o.isStringInStringList(o.listInstantaneousTempoAllegroModerato, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.allegroModerato)), this.tempoInBpm = t3, void (this.tempoEnum = a.allegroModerato)) : o.isStringInStringList(o.listInstantaneousTempoAllegro, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.allegro)), this.tempoInBpm = t3, void (this.tempoEnum = a.allegro)) : o.isStringInStringList(o.listInstantaneousTempoVivace, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.vivace)), this.tempoInBpm = t3, void (this.tempoEnum = a.vivace)) : o.isStringInStringList(o.listInstantaneousTempoVivacissimo, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.vivacissimo)), this.tempoInBpm = t3, void (this.tempoEnum = a.vivacissimo)) : o.isStringInStringList(o.listInstantaneousTempoAllegrissimo, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.allegrissimo)), this.tempoInBpm = t3, void (this.tempoEnum = a.allegrissimo)) : o.isStringInStringList(o.listInstantaneousTempoPresto, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.presto)), this.tempoInBpm = t3, void (this.tempoEnum = a.presto)) : o.isStringInStringList(o.listInstantaneousTempoPrestissimo, this.label) ? (0 === t3 && (t3 = o.getDefaultValueForTempoType(a.prestissimo)), this.tempoInBpm = t3, void (this.tempoEnum = a.prestissimo)) : o.isStringInStringList(o.listInstantaneousTempoAddons, this.label) ? (this.tempoInBpm = 0, void (this.tempoEnum = a.addon)) : o.isStringInStringList(o.listInstantaneousTempoChangesGeneral, this.label) ? (this.tempoInBpm = 0, void (this.tempoEnum = a.changes)) : void 0 : (this.tempoInBpm = t3, void (this.tempoEnum = a.metronomeMark));
          }
        }
        var a;
        e2.InstantaneousTempoExpression = o, o.listInstantaneousTempoLarghissimo = ["Larghissimo", "Sehr breit", "very, very slow"], o.listInstantaneousTempoGrave = ["Grave", "Schwer", "slow and solemn"], o.listInstantaneousTempoLento = ["Lento", "Lent", "Langsam", "slowly"], o.listInstantaneousTempoLargo = ["Largo", "Breit", "broadly"], o.listInstantaneousTempoLarghetto = ["Larghetto", "Etwas breit", "rather broadly"], o.listInstantaneousTempoAdagio = ["Adagio", "Langsam", "Ruhig", "slow and stately"], o.listInstantaneousTempoAdagietto = ["Adagietto", "Ziemlich ruhig", "Ziemlich langsam", "rather slow"], o.listInstantaneousTempoAndanteModerato = ["Andante moderato"], o.listInstantaneousTempoAndante = ["Andante", "Gehend", "Schreitend", "at a walking pace"], o.listInstantaneousTempoAndantino = ["Andantino", "Maestoso"], o.listInstantaneousTempoModerato = ["Moderato", "Mäßig", "Modéré", "moderately"], o.listInstantaneousTempoAllegretto = ["Allegretto", "Animato", "fast"], o.listInstantaneousTempoAllegroModerato = ["Allegro moderato"], o.listInstantaneousTempoAllegro = ["Allegro", "Rapide", "Vite", "Rasch", "Schnell", "Fröhlich"], o.listInstantaneousTempoVivace = ["Vivace", "Allegro Assai", "Lebhaft", "Lebendig", "lively and fast"], o.listInstantaneousTempoVivacissimo = ["Vivacissimo", "Sehr lebhaft", "Sehr lebendig"], o.listInstantaneousTempoAllegrissimo = ["Allegrissimo", "very fast"], o.listInstantaneousTempoPresto = ["Presto", "Sehr schnell", "Geschwind"], o.listInstantaneousTempoPrestissimo = ["Prestissimo", "äußerst schnell"], o.listInstantaneousTempoChangesGeneral = ["tempo primo", "a tempo", "tempo i", "rubato", "doppio movimento", "rallentando", "ritardando", "ritard.", "rit.", "ritard", "rall...", "accelerando", "accel"], o.listInstantaneousTempoAddons = ["assai", "amoroso", "cantabile", "con brio", "con dolore", "con espressione", "con fuoco", "con moto", "con spirito", "spiritoso", "espressivo", "giocoso", "giusto", "grazioso", "lesto", "lugubre", "maestoso", "ma non troppo", "marcato", "molto", "morendo", "mosso", "non tanto", "piu", "un poco", "poco", "quasi", "risoluto", "scherzando", "sostenuto", "teneramente", "tempo giusto", "tranquillo", "sehr", "lieblich", "liebevoll", "mit Leidenschaft", "mit Liebe", "amourös", "gesanglich", "mit Schwung", "mit Feuer", "mit Schmerz", "mit Ausdruck", "mit Bewegung", "geistvoll", "ausdrucksvoll", "freudig", "verspielt", "angemessen", "graziös", "mit Grazie", "flink", "behände", "traurig", "klagend", "majestätisch", "aber nicht zu sehr", "markant", "gemäßigt", "viel", "sehr", "ersterbend", "bewegt", "nicht zu sehr", "mehr", "ein wenig", "gleichsam", "entschlossen", "zupackend", "heiter", "nachdrücklich", "getragen", "gewichtig", "zart", "zärtlich", "im angemessenen Zeitmaß", "ruhig", "ein wenig", "alla marcia", "ad libitum", "alla breve"], function(t3) {
          t3[t3.none = 0] = "none", t3[t3.larghissimo = 1] = "larghissimo", t3[t3.grave = 2] = "grave", t3[t3.lento = 3] = "lento", t3[t3.largo = 4] = "largo", t3[t3.larghetto = 5] = "larghetto", t3[t3.adagio = 6] = "adagio", t3[t3.adagietto = 7] = "adagietto", t3[t3.andanteModerato = 8] = "andanteModerato", t3[t3.andante = 9] = "andante", t3[t3.andantino = 10] = "andantino", t3[t3.moderato = 11] = "moderato", t3[t3.allegretto = 12] = "allegretto", t3[t3.allegroModerato = 13] = "allegroModerato", t3[t3.allegro = 14] = "allegro", t3[t3.vivace = 15] = "vivace", t3[t3.vivacissimo = 16] = "vivacissimo", t3[t3.allegrissimo = 17] = "allegrissimo", t3[t3.presto = 18] = "presto", t3[t3.prestissimo = 19] = "prestissimo", t3[t3.lastRealTempo = 20] = "lastRealTempo", t3[t3.addon = 21] = "addon", t3[t3.changes = 22] = "changes", t3[t3.metronomeMark = 23] = "metronomeMark";
        }(a || (e2.TempoEnum = a = {}));
      }, 9184: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(5364), e2), n(i2(164), e2), n(i2(4543), e2), n(i2(1645), e2), n(i2(9288), e2), n(i2(3123), e2);
      }, 9252: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Instrument = void 0;
        const s = i2(7586), n = i2(7435), r = i2(1910);
        class o extends s.InstrumentalGroup {
          constructor(t3, e3, i3, s2) {
            super(void 0, i3, s2), this.Transpose = 0, this.voices = [], this.staves = [], this.hasLyrics = false, this.hasChordSymbols = false, this.lyricVersesNumbers = [], this.subInstruments = [], this.id = t3, this.idString = e3, this.nameLabel = new n.Label(e3);
          }
          get Voices() {
            return this.voices;
          }
          get Staves() {
            return this.staves;
          }
          get NameLabel() {
            return this.nameLabel;
          }
          get HasLyrics() {
            return this.hasLyrics;
          }
          set HasLyrics(t3) {
            this.hasLyrics = t3;
          }
          get HasChordSymbols() {
            return this.hasChordSymbols;
          }
          set HasChordSymbols(t3) {
            this.hasChordSymbols = t3;
          }
          get LyricVersesNumbers() {
            return this.lyricVersesNumbers;
          }
          set LyricVersesNumbers(t3) {
            this.lyricVersesNumbers = t3;
          }
          get Name() {
            return this.nameLabel.text;
          }
          set Name(t3) {
            this.nameLabel.text = t3;
          }
          get IdString() {
            return this.idString;
          }
          get Id() {
            return this.id;
          }
          get MidiInstrumentId() {
            return this.subInstruments[0].midiInstrumentID;
          }
          set MidiInstrumentId(t3) {
            this.subInstruments[0].midiInstrumentID = t3;
          }
          get Volume() {
            return this.subInstruments[0].volume;
          }
          set Volume(t3) {
            for (let e3 = 0, i3 = this.subInstruments.length; e3 < i3; ++e3) this.subInstruments[e3].volume = t3;
          }
          get PlaybackTranspose() {
            return this.playbackTranspose;
          }
          set PlaybackTranspose(t3) {
            this.playbackTranspose = t3;
          }
          get SubInstruments() {
            return this.subInstruments;
          }
          getSubInstrument(t3) {
            for (let e3 = 0, i3 = this.subInstruments.length; e3 < i3; ++e3) {
              const i4 = this.subInstruments[e3];
              if (i4.idString === t3) return i4;
            }
          }
          get PartAbbreviation() {
            return this.partAbbreviation;
          }
          set PartAbbreviation(t3) {
            this.partAbbreviation = t3;
          }
          get Visible() {
            return this.voices.length > 0 && this.Voices[0].Visible;
          }
          set Visible(t3) {
            for (let e3 = 0, i3 = this.Voices.length; e3 < i3; ++e3) this.Voices[e3].Visible = t3;
          }
          get Audible() {
            let t3 = false;
            for (let e3 = 0, i3 = this.Voices.length; e3 < i3; ++e3) {
              const i4 = this.Voices[e3];
              t3 = t3 || i4.Audible;
            }
            return t3;
          }
          set Audible(t3) {
            for (let e3 = 0, i3 = this.Voices.length; e3 < i3; ++e3) this.Voices[e3].Audible = t3;
            for (let e3 = 0, i3 = this.staves.length; e3 < i3; ++e3) this.staves[e3].audible = t3;
          }
          get Following() {
            let t3 = false;
            for (let e3 = 0, i3 = this.Voices.length; e3 < i3; ++e3) {
              const i4 = this.Voices[e3];
              t3 = t3 || i4.Following;
            }
            return t3;
          }
          set Following(t3) {
            for (let e3 = 0, i3 = this.Voices.length; e3 < i3; ++e3) this.Voices[e3].Following = t3;
            for (let e3 = 0, i3 = this.staves.length; e3 < i3; ++e3) this.staves[e3].following = t3;
          }
          SetVoiceAudible(t3, e3) {
            for (let i3 = 0, s2 = this.Voices.length; i3 < s2; ++i3) {
              const s3 = this.Voices[i3];
              if (s3.VoiceId === t3) {
                s3.Audible = e3;
                break;
              }
            }
          }
          SetVoiceFollowing(t3, e3) {
            for (let i3 = 0, s2 = this.Voices.length; i3 < s2; ++i3) {
              const s3 = this.Voices[i3];
              if (s3.VoiceId === t3) {
                s3.Following = e3;
                break;
              }
            }
          }
          SetStaffAudible(t3, e3) {
            const i3 = this.staves[t3 - 1];
            if (i3.audible = e3, e3) for (let t4 = 0, e4 = i3.Voices.length; t4 < e4; ++t4) i3.Voices[t4].Audible = true;
            else for (let e4 = 0, s2 = i3.Voices.length; e4 < s2; ++e4) {
              const s3 = i3.Voices[e4];
              let n2 = false;
              for (let e5 = 0, i4 = this.Staves.length; e5 < i4; ++e5) {
                const i5 = this.Staves[e5];
                if (i5.Id !== t3 && i5.audible) for (let t4 = 0, e6 = i5.Voices.length; t4 < e6; ++t4) i5.Voices[t4] === s3 && (n2 = true);
              }
              n2 || (s3.Audible = false);
            }
          }
          SetStaffFollow(t3, e3) {
            const i3 = this.staves[t3 - 1];
            if (i3.following = e3, e3) for (let t4 = 0, e4 = i3.Voices.length; t4 < e4; ++t4) i3.Voices[t4].Following = true;
            else for (let e4 = 0, s2 = i3.Voices.length; e4 < s2; ++e4) {
              const s3 = i3.Voices[e4];
              let n2 = false;
              for (let e5 = 0, i4 = this.Staves.length; e5 < i4; ++e5) {
                const i5 = this.Staves[e5];
                if (i5.Id !== t3 && i5.following) for (let t4 = 0, e6 = i5.Voices.length; t4 < e6; ++t4) i5.Voices[t4] === s3 && (n2 = true);
              }
              n2 || (s3.Following = false);
            }
          }
          areAllVoiceVisible() {
            for (const t3 of this.Voices) if (!t3.Visible) return false;
            return true;
          }
          createStaves(t3) {
            for (let e3 = 0; e3 < t3; e3++) this.staves.push(new r.Staff(this, e3 + 1));
          }
          toString() {
            return `${this.Name} , id: ${this.id}, idstring: ${this.idString}`;
          }
        }
        e2.Instrument = o;
      }, 9281: function(t2, e2, i2) {
        "use strict";
        var s, n = this && this.__extends || (s = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var i3 in e3) e3.hasOwnProperty(i3) && (t3[i3] = e3[i3]);
        }, function(t3, e3) {
          function i3() {
            this.constructor = t3;
          }
          s(t3, e3), t3.prototype = null === e3 ? Object.create(e3) : (i3.prototype = e3.prototype, new i3());
        });
        Object.defineProperty(e2, "__esModule", { value: true });
        var r = i2(6119), o = i2(4831), a = function(t3) {
          function e3(e4, i3) {
            var s2 = t3.call(this, i3) || this;
            return s2.defaultFactoryFunction = e4, s2;
          }
          return n(e3, t3), e3.prototype.setDefault = function(e4, i3) {
            var s2 = t3.prototype.getValue.call(this, e4);
            return o.isUndefined(s2) ? (this.setValue(e4, i3), i3) : s2;
          }, e3.prototype.getValue = function(t4) {
            return this.setDefault(t4, this.defaultFactoryFunction());
          }, e3;
        }(r.default);
        e2.default = a;
      }, 9288: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.RhythmSymbolEnum = e2.RhythmInstruction = void 0;
        const s = i2(5364);
        class n extends s.AbstractNotationInstruction {
          constructor(t3, e3) {
            super(void 0), this.rhythm = t3, this.numerator = t3.Numerator, this.denominator = t3.Denominator, this.symbolEnum = e3;
          }
          get Rhythm() {
            return this.rhythm;
          }
          set Rhythm(t3) {
            this.rhythm = t3;
          }
          get SymbolEnum() {
            return this.symbolEnum;
          }
          set SymbolEnum(t3) {
            this.symbolEnum = t3;
          }
          clone() {
            return new n(this.rhythm.clone(), this.symbolEnum);
          }
          OperatorEquals(t3) {
            const e3 = this;
            return e3 === t3 || !(!e3 || !t3) && e3.numerator === t3.numerator && e3.denominator === t3.denominator;
          }
          OperatorNotEqual(t3) {
            return !(this === t3);
          }
          ToString() {
            return "Rhythm: " + this.rhythm.toString();
          }
        }
        var r;
        e2.RhythmInstruction = n, function(t3) {
          t3[t3.NONE = 0] = "NONE", t3[t3.COMMON = 1] = "COMMON", t3[t3.CUT = 2] = "CUT";
        }(r || (e2.RhythmSymbolEnum = r = {}));
      }, 9310: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowOctaveShift = void 0;
        var n = s(i2(3206)).default.Flow;
        const r = i2(2768), o = i2(437), a = s(i2(3065));
        class l extends r.GraphicalOctaveShift {
          constructor(t3, e3) {
            switch (super(t3, e3), t3.Type) {
              case o.OctaveEnum.VA8:
                this.position = n.TextBracket.Positions.TOP, this.supscript = "va", this.text = "8";
                break;
              case o.OctaveEnum.MA15:
                this.position = n.TextBracket.Positions.TOP, this.supscript = "ma", this.text = "15";
                break;
              case o.OctaveEnum.VB8:
                this.position = n.TextBracket.Positions.BOTTOM, this.supscript = "vb", this.text = "8";
                break;
              case o.OctaveEnum.MB15:
                this.position = n.TextBracket.Positions.BOTTOM, this.supscript = "mb", this.text = "15";
                break;
              default:
                a.default.error("Unknown or NONE octaveshift. This should not be called!");
            }
          }
          setStartNote(t3) {
            for (const e3 of t3.graphicalVoiceEntries) {
              const t4 = e3;
              if (t4 == null ? void 0 : t4.vfStaveNote) return this.startNote = t4.vfStaveNote, true;
            }
            return false;
          }
          setEndNote(t3) {
            var _a;
            for (const e3 of t3.graphicalVoiceEntries) {
              const i3 = e3;
              if (i3 == null ? void 0 : i3.vfStaveNote) return this.endNote = i3.vfStaveNote, this.endMeasure = t3.parentMeasure, ((_a = this.endMeasure) == null ? void 0 : _a.parentSourceMeasure.Rules.OctaveShiftOnWholeMeasureNoteUntilEndOfMeasure) && i3.notes[0].sourceNote.isWholeMeasureNote() && (this.graphicalEndAtMeasureEnd = true), true;
            }
            return false;
          }
          getTextBracket() {
            let t3, e3 = this.endNote;
            const i3 = this;
            this.graphicalEndAtMeasureEnd && (t3 = { getAbsoluteX: () => 10 * (i3.endMeasure.PositionAndShape.AbsolutePosition.x + i3.endMeasure.PositionAndShape.Size.width), getGlyph: () => ({ getWidth: () => 0 }) }), t3 && (e3 = t3);
            const s2 = new n.TextBracket({ position: this.position, start: this.startNote, stop: e3, superscript: this.supscript, text: this.text });
            return this.endsOnDifferentStaffLine && (s2.render_options.show_bracket = false), s2;
          }
        }
        e2.VexFlowOctaveShift = l;
      }, 9409: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.PointF2D = void 0;
        class i2 {
          constructor(t3 = 0, e3 = 0) {
            this.x = 0, this.y = 0, this.x = t3, this.y = e3;
          }
          static get Empty() {
            return new i2();
          }
          static pointsAreEqual(t3, e3) {
            return t3.x === e3.x && t3.y === e3.y;
          }
          ToString() {
            return "[" + this.x + ", " + this.y + "]";
          }
        }
        e2.PointF2D = i2;
      }, 9436: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.SvgVexFlowBackend = void 0;
        var n = s(i2(3206)).default.Flow;
        const r = i2(1902), o = i2(6014), a = i2(2570), l = i2(624), h = s(i2(3065));
        class c extends r.VexFlowBackend {
          constructor(t3) {
            super(), this.rules = t3;
          }
          getVexflowBackendType() {
            return n.Renderer.Backends.SVG;
          }
          getOSMDBackendType() {
            return l.BackendType.SVG;
          }
          getCanvasSize() {
            var _a;
            return (_a = document.getElementById("osmdCanvasPage" + this.graphicalMusicPage.PageNumber)) == null ? void 0 : _a.offsetHeight;
          }
          initialize(t3, e3) {
            this.zoom = e3, this.canvas = document.createElement("div"), this.canvas.id = "osmdCanvasPage" + this.graphicalMusicPage.PageNumber, this.inner = this.canvas, this.inner.style.position = "relative", this.canvas.style.zIndex = "0", t3.appendChild(this.inner), this.renderer = new n.Renderer(this.canvas, this.getVexflowBackendType()), this.ctx = this.renderer.getContext(), this.ctx.svg.id = "osmdSvgPage" + this.graphicalMusicPage.PageNumber;
          }
          getContext() {
            return this.ctx;
          }
          getSvgElement() {
            return this.ctx.svg;
          }
          removeNode(t3) {
            var _a;
            const e3 = (_a = this.ctx) == null ? void 0 : _a.svg;
            if (!e3) return false;
            try {
              e3.removeChild(t3);
            } catch (t4) {
              return h.default.error(t4), false;
            }
            return true;
          }
          free() {
            const t3 = this.ctx.svg;
            for (; t3.lastChild; ) t3.removeChild(t3.lastChild);
          }
          clear() {
            this.ctx && (this.free(), this.rules.PageBackgroundColor && (this.ctx.svg.style["background-color"] = this.rules.PageBackgroundColor));
          }
          scale(t3) {
            this.ctx.scale(t3, t3);
          }
          translate(t3, e3) {
          }
          renderText(t3, e3, i3, s2, n2, r2, l2 = void 0, h2 = void 0) {
            this.ctx.save();
            const c2 = this.ctx.openGroup("text");
            l2 && (this.ctx.attributes.fill = l2, this.ctx.attributes.stroke = l2);
            let u = h2;
            h2 && "default" !== h2 || (u = this.rules.DefaultFontFamily), this.ctx.setFont(u, t3, o.VexFlowConverter.fontStyle(e3)), this.ctx.attributes["font-size"] = `${t3}px`, this.ctx.state["font-size"] = `${t3}px`;
            let d = "normal", f = "normal";
            switch (e3) {
              case a.FontStyles.Bold:
                d = "bold";
                break;
              case a.FontStyles.Italic:
                f = "italic";
                break;
              case a.FontStyles.BoldItalic:
                d = "bold", f = "italic";
                break;
              default:
                d = "normal";
            }
            return this.ctx.attributes["font-weight"] = d, this.ctx.state["font-weight"] = d, this.ctx.attributes["font-style"] = f, this.ctx.state["font-style"] = f, this.ctx.fillText(s2, r2.x, r2.y + n2), this.ctx.closeGroup(), this.ctx.restore(), c2;
          }
          renderRectangle(t3, e3, i3, s2 = 1) {
            this.ctx.save();
            const n2 = this.ctx.openGroup("rect");
            return this.ctx.attributes.fill = i3 || o.VexFlowConverter.style(e3), this.ctx.attributes["fill-opacity"] = s2, this.ctx.fillRect(t3.x, t3.y, t3.width, t3.height), this.ctx.restore(), this.ctx.attributes["fill-opacity"] = 1, this.ctx.closeGroup(), n2;
          }
          renderLine(t3, e3, i3 = "#FF0000FF", s2 = 2, n2) {
            this.ctx.save();
            const r2 = this.ctx.openGroup("line", n2);
            return this.ctx.beginPath(), this.ctx.moveTo(t3.x, t3.y), this.ctx.lineTo(e3.x, e3.y), this.ctx.attributes.stroke = i3, this.ctx.lineWidth = s2, this.ctx.stroke(), this.ctx.closeGroup(), this.ctx.restore(), r2;
          }
          renderCurve(t3) {
            const e3 = this.ctx.openGroup("curve");
            return this.ctx.beginPath(), this.ctx.moveTo(t3[0].x, t3[0].y), this.ctx.bezierCurveTo(t3[1].x, t3[1].y, t3[2].x, t3[2].y, t3[3].x, t3[3].y), this.ctx.lineTo(t3[7].x, t3[7].y), this.ctx.bezierCurveTo(t3[6].x, t3[6].y, t3[5].x, t3[5].y, t3[4].x, t3[4].y), this.ctx.lineTo(t3[0].x, t3[0].y), this.ctx.closePath(), this.ctx.fill(), this.ctx.closeGroup(), e3;
          }
          renderPath(t3, e3 = true, i3) {
            const s2 = this.ctx.openGroup("path", i3);
            let n2;
            this.ctx.beginPath();
            for (const e4 of t3) n2 ? this.ctx.lineTo(e4.x, e4.y) : (this.ctx.moveTo(e4.x, e4.y), n2 = e4);
            return this.ctx.closePath(), e3 ? this.ctx.fill() : this.ctx.stroke(), this.ctx.stroke(), this.ctx.closeGroup(), s2;
          }
          export() {
            const t3 = this.ctx.svg.cloneNode(true), e3 = document.implementation.createDocumentType("svg", "-//W3C//DTD SVG 1.1//EN", "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"), i3 = document.implementation.createDocument("http://www.w3.org/2000/svg", "svg", e3);
            i3.replaceChild(t3, i3.documentElement);
            const s2 = new XMLSerializer().serializeToString(i3), n2 = document.createElement("a");
            n2.href = "data:image/svg+xml; charset=utf8, " + encodeURIComponent(s2.replace(/></g, ">\n\r<")), n2.download = "opensheetmusicdisplay_download.svg", n2.innerHTML = window.location.href + "/download", document.body.appendChild(n2);
          }
        }
        e2.SvgVexFlowBackend = c;
      }, 9479: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowMusicSheetDrawer = e2.unitInPixels = void 0;
        const n = s(i2(3206)), r = i2(1932), o = i2(200), a = i2(9409), l = i2(7785), h = i2(2683), c = i2(6362), u = i2(3361), d = i2(5023), f = s(i2(3065)), m = i2(1066), p = i2(3661), g = i2(5824), b = i2(9436);
        e2.unitInPixels = 10;
        class S extends r.MusicSheetDrawer {
          constructor(t3 = new p.DrawingParameters()) {
            super(new l.VexFlowTextMeasurer(t3.Rules), t3), this.backends = [], this.zoom = 1, this.pageIdx = 0;
          }
          get Backends() {
            return this.backends;
          }
          drawSheet(t3) {
            var _a, _b, _c;
            "gonville" === this.rules.DefaultVexFlowNoteFont && (n.default.Flow.DEFAULT_FONT_STACK = [(_a = n.default.Flow.Fonts) == null ? void 0 : _a.Gonville, (_b = n.default.Flow.Fonts) == null ? void 0 : _b.Bravura, (_c = n.default.Flow.Fonts) == null ? void 0 : _c.Custom]), n.default.Flow.STAVE_LINE_THICKNESS = this.rules.StaffLineWidth * e2.unitInPixels, n.default.Flow.STEM_WIDTH = this.rules.StemWidth * e2.unitInPixels, n.default.Flow.DEFAULT_NOTATION_FONT_SCALE = this.rules.VexFlowDefaultNotationFontScale, n.default.Flow.DEFAULT_TAB_FONT_SCALE = this.rules.VexFlowDefaultTabFontScale, this.pageIdx = 0;
            for (const e3 of t3.MusicPages) {
              if (e3.PageNumber > this.rules.MaxPageToDrawNumber) break;
              const t4 = this.backends[this.pageIdx];
              t4.graphicalMusicPage = e3, t4.scale(this.zoom), this.pageIdx += 1;
            }
            this.pageIdx = 0, this.backend = this.backends[0], super.drawSheet(t3);
          }
          drawPage(t3) {
            t3 && (this.backend = this.backends[t3.PageNumber - 1], super.drawPage(t3), this.pageIdx += 1);
          }
          clear() {
            for (const t3 of this.backends) t3.clear();
          }
          setZoom(t3) {
            this.zoom = t3;
          }
          calculatePixelDistance(t3) {
            return t3 * e2.unitInPixels;
          }
          drawStaffLine(t3) {
            var _a, _b, _c;
            const e3 = this.backend.getContext(), i3 = e3.openGroup();
            i3 && (i3.classList.add("staffline"), t3.ParentStaff && (i3.id = `${(_a = t3.ParentStaff.ParentInstrument) == null ? void 0 : _a.Name}${(_b = t3.ParentStaff.ParentInstrument) == null ? void 0 : _b.Id}-${(_c = t3.ParentStaff) == null ? void 0 : _c.Id}`)), super.drawStaffLine(t3);
            const s2 = t3.PositionAndShape.AbsolutePosition;
            this.rules.RenderSlurs && this.drawSlurs(t3, s2), this.rules.RenderGlissandi && this.drawGlissandi(t3, s2), e3.closeGroup();
          }
          drawSlurs(t3, e3) {
            for (const i3 of t3.GraphicalSlurs) i3.slur.isCrossed() || this.drawSlur(i3, e3);
          }
          drawGlissandi(t3, e3) {
            for (const i3 of t3.GraphicalGlissandi) this.drawGlissando(i3, e3);
          }
          drawGlissando(t3, e3) {
            if (t3.StaffLine.ParentStaff.isTab || t3.calculateLine(this.rules), t3.Line) {
              const i3 = new a.PointF2D(t3.Line.Start.x + e3.x, t3.Line.Start.y), s2 = new a.PointF2D(t3.Line.End.x + e3.x, t3.Line.End.y);
              t3.Line.SVGElement = this.drawLine(i3, s2, t3.Color, t3.Width);
            } else {
              const e4 = t3.vfTie;
              if (e4) {
                const t4 = this.backend.getContext();
                e4.setContext(t4), e4.draw();
              }
            }
          }
          drawSlur(t3, e3) {
            const i3 = [], s2 = new a.PointF2D(t3.bezierStartPt.x + e3.x, t3.bezierStartPt.y + e3.y), n2 = new a.PointF2D(t3.bezierStartControlPt.x + e3.x, t3.bezierStartControlPt.y + e3.y), r2 = new a.PointF2D(t3.bezierEndControlPt.x + e3.x, t3.bezierEndControlPt.y + e3.y), o2 = new a.PointF2D(t3.bezierEndPt.x + e3.x, t3.bezierEndPt.y + e3.y);
            i3.push(this.applyScreenTransformation(s2)), i3.push(this.applyScreenTransformation(n2)), i3.push(this.applyScreenTransformation(r2)), i3.push(this.applyScreenTransformation(o2)), t3.placement === c.PlacementEnum.Above ? (s2.y -= 0.05, n2.y -= 0.3, r2.y -= 0.3, o2.y -= 0.05) : (s2.y += 0.05, n2.y += 0.3, r2.y += 0.3, o2.y += 0.05), i3.push(this.applyScreenTransformation(s2)), i3.push(this.applyScreenTransformation(n2)), i3.push(this.applyScreenTransformation(r2)), i3.push(this.applyScreenTransformation(o2)), t3.SVGElement = this.backend.renderCurve(i3);
          }
          drawMeasure(t3) {
            t3.setAbsoluteCoordinates(t3.PositionAndShape.AbsolutePosition.x * e2.unitInPixels, t3.PositionAndShape.AbsolutePosition.y * e2.unitInPixels);
            try {
              t3.draw(this.backend.getContext());
            } catch (t4) {
              f.default.warn("VexFlowMusicSheetDrawer.drawMeasure", t4);
            }
            let i3 = 0;
            for (const e3 of t3.staffEntries) this.drawStaffEntry(e3), i3 = this.drawBuzzRolls(e3, i3);
          }
          drawBuzzRolls(t3, e3) {
            var _a;
            for (const i3 of t3.graphicalVoiceEntries) for (const t4 of i3.notes) if ((_a = t4.sourceNote.TremoloInfo) == null ? void 0 : _a.tremoloUnmeasured) {
              const i4 = this.rules.TremoloBuzzRollThickness, s2 = 0.9, n2 = 0.5, r2 = t4;
              let o2, l2;
              const h2 = r2.vfnote[0].getStemDirection();
              let c2;
              if (this.backend instanceof b.SvgVexFlowBackend && (c2 = r2.getStemSVG()), void 0 !== (c2 == null ? void 0 : c2.getBbox)) {
                const t5 = c2.getBBox();
                o2 = new a.PointF2D(t5.x / 10, t5.y / 10), l2 = t5.height / 10;
              } else l2 = r2.vfnote[0].getStemLength() / 10, o2 = new a.PointF2D(r2.vfnote[0].getStem().x_begin / 10, r2.vfnote[0].getStem().y_top / 10), 1 === h2 && (o2.y -= l2);
              let u2 = o2.y + l2 / 3;
              r2.vfnote[0].getBeamCount() > 1 && (u2 = o2.y + l2 / 2, -1 === h2 && (u2 -= n2 + 0.2));
              const d2 = o2.x - 0.5, f2 = u2, m2 = [], p2 = [new a.PointF2D(0, -i4), new a.PointF2D(s2 - i4, 0), new a.PointF2D(-s2 + i4, -n2), new a.PointF2D(0, -i4), new a.PointF2D(s2, 0), new a.PointF2D(0, i4), new a.PointF2D(-s2 + i4, 0), new a.PointF2D(s2 - i4, n2), new a.PointF2D(0, i4), new a.PointF2D(-s2, 0)];
              let g2 = new a.PointF2D(d2, f2);
              m2.push(g2);
              for (const t5 of p2) g2 = m2.last(), m2.push(new a.PointF2D(g2.x + t5.x, g2.y - t5.y));
              this.DrawPath(m2, r2.ParentMusicPage, true, `buzzRoll${e3}`), e3++;
            }
            return e3;
          }
          drawLine(t3, i3, s2 = "#000000FF", n2 = 0.2) {
            return t3 = this.applyScreenTransformation(t3), i3 = this.applyScreenTransformation(i3), this.backend.renderLine(t3, i3, s2, n2 * e2.unitInPixels);
          }
          DrawOverlayLine(t3, i3, s2, n2 = "#FF0000FF", r2 = 0.2, o2) {
            if (!s2.PageNumber || s2.PageNumber > this.backends.length || s2.PageNumber < 1) return void console.log("VexFlowMusicSheetDrawer.drawOverlayLine: invalid page number / music page number doesn't correspond to an existing backend.");
            const a2 = s2.PageNumber - 1, l2 = this.backends[a2];
            return t3 = this.applyScreenTransformation(t3), i3 = this.applyScreenTransformation(i3), o2 || (o2 = `overlayLine ${t3.x}/${t3.y}`), l2.renderLine(t3, i3, n2, r2 * e2.unitInPixels, o2);
          }
          DrawPath(t3, e3, i3 = true, s2) {
            const n2 = e3.PageNumber - 1, r2 = this.backends[n2], o2 = [];
            for (const e4 of t3) o2.push(this.applyScreenTransformation(e4));
            return r2.renderPath(o2, i3, s2);
          }
          drawSkyLine(t3) {
            const e3 = t3.PositionAndShape.AbsolutePosition, i3 = t3.PositionAndShape.Size.width;
            this.drawSampledLine(t3.SkyLine, e3, i3);
          }
          drawBottomLine(t3) {
            const e3 = new a.PointF2D(t3.PositionAndShape.AbsolutePosition.x, t3.PositionAndShape.AbsolutePosition.y), i3 = t3.PositionAndShape.Size.width;
            this.drawSampledLine(t3.BottomLine, e3, i3, "#0000FFFF");
          }
          drawSampledLine(t3, e3, i3, s2 = "#FF0000FF") {
            const n2 = [];
            let r2 = 0;
            for (let e4 = 0; e4 < t3.length; e4++) t3[e4] !== r2 && (n2.push(e4), r2 = t3[e4]);
            const o2 = e3;
            if (n2.length > 0) {
              const e4 = this.rules.SamplingUnit;
              let r3, l2, h2 = new a.PointF2D(o2.x, o2.y), c2 = new a.PointF2D(n2[0] / e4 + o2.x, o2.y);
              this.drawLine(h2, c2, s2), t3[0] >= 0 && (r3 = new a.PointF2D(n2[0] / e4 + o2.x, o2.y), l2 = new a.PointF2D(n2[0] / e4 + o2.x, o2.y + t3[n2[0]]), this.drawLine(r3, l2, s2));
              for (let i4 = 1; i4 < n2.length; i4++) h2 = new a.PointF2D(n2[i4 - 1] / e4 + o2.x, o2.y + t3[n2[i4 - 1]]), c2 = new a.PointF2D(n2[i4] / e4 + o2.x, o2.y + t3[n2[i4 - 1]]), this.drawLine(h2, c2, s2), r3 = new a.PointF2D(n2[i4] / e4 + o2.x, o2.y + t3[n2[i4 - 1]]), l2 = new a.PointF2D(n2[i4] / e4 + o2.x, o2.y + t3[n2[i4]]), this.drawLine(r3, l2, s2);
              n2[n2.length - 1] < t3.length ? (h2 = new a.PointF2D(n2[n2.length - 1] / e4 + o2.x, o2.y + t3[n2[n2.length - 1]]), c2 = new a.PointF2D(o2.x + i3, o2.y + t3[n2[n2.length - 1]]), this.drawLine(h2, c2, s2)) : (h2 = new a.PointF2D(n2[n2.length - 1] / e4 + o2.x, o2.y), c2 = new a.PointF2D(o2.x + i3, o2.y), this.drawLine(h2, c2, s2));
            } else {
              const t4 = new a.PointF2D(o2.x, o2.y), e4 = new a.PointF2D(o2.x + i3, o2.y);
              this.drawLine(t4, e4, s2);
            }
          }
          drawStaffEntry(t3) {
            if (t3.FingeringEntries.length > 0) for (const e3 of t3.FingeringEntries) e3.SVGNode = this.drawLabel(e3, h.GraphicalLayers.Notes);
            if (void 0 !== t3.graphicalChordContainers && t3.graphicalChordContainers.length > 0) for (const e3 of t3.graphicalChordContainers) {
              const t4 = e3.GraphicalLabel;
              t4.SVGNode = this.drawLabel(t4, h.GraphicalLayers.Notes);
            }
            this.rules.RenderLyrics && t3.LyricsEntries.length > 0 && this.drawLyrics(t3.LyricsEntries, h.GraphicalLayers.Notes);
          }
          drawLyrics(t3, e3) {
            t3.forEach((t4) => {
              var _a;
              const i3 = t4.GraphicalLabel;
              i3.Label.colorDefault = this.rules.DefaultColorLyrics, i3.SVGNode = this.drawLabel(i3, e3), (_a = i3.SVGNode) == null ? void 0 : _a.classList.add("lyrics");
            });
          }
          drawInstrumentBrace(t3, e3) {
            const i3 = this.backend.getContext();
            i3.openGroup("brace"), t3.draw(i3), i3.closeGroup();
          }
          drawGroupBracket(t3, e3) {
            const i3 = this.backend.getContext();
            i3.openGroup("bracket"), t3.draw(i3), i3.closeGroup();
          }
          drawOctaveShifts(t3) {
            for (const e3 of t3.OctaveShifts) if (e3) {
              const t4 = e3, i3 = this.backend.getContext(), s2 = t4.getTextBracket();
              this.rules.DefaultColorMusic && (s2.render_options.color = this.rules.DefaultColorMusic), s2.setContext(i3);
              try {
                s2.draw();
              } catch (t5) {
                f.default.warn(t5);
              }
            }
          }
          drawPedals(t3) {
            for (const e3 of t3.Pedals) if (e3) {
              const t4 = e3, i3 = this.backend.getContext(), s2 = t4.getPedalMarking();
              s2.render_options.color = this.rules.DefaultColorMusic, s2.setContext(i3), s2.draw();
            }
          }
          drawExpressions(t3) {
            for (const e3 of t3.AbstractExpressions) if (e3 instanceof d.GraphicalInstantaneousDynamicExpression) this.drawInstantaneousDynamic(e3);
            else if (e3 instanceof u.GraphicalInstantaneousTempoExpression) {
              const t4 = e3.GraphicalLabel;
              t4.SVGNode = this.drawLabel(t4, h.GraphicalLayers.Notes);
            } else if (e3 instanceof m.GraphicalContinuousDynamicExpression) this.drawContinuousDynamic(e3);
            else if (e3 instanceof g.GraphicalUnknownExpression) {
              const t4 = e3.Label;
              t4.SVGNode = this.drawLabel(t4, h.GraphicalLayers.Notes);
            } else f.default.warn("Unkown type of expression!");
          }
          drawInstantaneousDynamic(t3) {
            const e3 = t3.Label;
            e3.SVGNode = this.drawLabel(e3, h.GraphicalLayers.Notes);
          }
          drawContinuousDynamic(t3) {
            if (t3.IsVerbal) {
              const e3 = t3.Label;
              e3.SVGNode = this.drawLabel(e3, h.GraphicalLayers.Notes);
            } else for (const e3 of t3.Lines) {
              const i3 = new a.PointF2D(t3.ParentStaffLine.PositionAndShape.AbsolutePosition.x + e3.Start.x, t3.ParentStaffLine.PositionAndShape.AbsolutePosition.y + e3.Start.y), s2 = new a.PointF2D(t3.ParentStaffLine.PositionAndShape.AbsolutePosition.x + e3.End.x, t3.ParentStaffLine.PositionAndShape.AbsolutePosition.y + e3.End.y);
              e3.SVGElement = this.drawLine(i3, s2, e3.colorHex ?? "#000000", e3.Width);
            }
          }
          renderLabel(t3, i3, s2, n2, r2, o2) {
            var _a;
            if (!t3.Label.print) return;
            const l2 = t3.Label.fontHeight * e2.unitInPixels, { font: h2 } = t3.Label;
            let c2;
            this.rules.ColoringEnabled && (c2 = t3.Label.colorDefault, t3.ColorXML && (c2 = t3.ColorXML), c2 || (c2 = this.rules.DefaultColorLabel));
            let u2, { fontStyle: d2, fontFamily: f2 } = t3.Label;
            d2 || (d2 = this.rules.DefaultFontStyle), f2 || (f2 = this.rules.DefaultFontFamily);
            for (let e3 = 0; e3 < ((_a = t3.TextLines) == null ? void 0 : _a.length); e3++) {
              const i4 = t3.TextLines[e3], s3 = this.calculatePixelDistance(i4.xOffset), n3 = new a.PointF2D(o2.x + s3, o2.y), f3 = this.backend.renderText(l2, d2, h2, i4.text, r2, n3, c2, t3.Label.fontFamily);
              u2 ? u2.appendChild(f3) : u2 = f3, o2.y = o2.y + r2, t3.TextLines.length > 1 && (o2.y += this.rules.SpacingBetweenTextLines);
            }
            return u2;
          }
          renderRectangle(t3, e3, i3, s2, n2) {
            return this.backend.renderRectangle(t3, i3, s2, n2);
          }
          applyScreenTransformation(t3) {
            return new a.PointF2D(t3.x * e2.unitInPixels, t3.y * e2.unitInPixels);
          }
          applyScreenTransformationForRect(t3) {
            return new o.RectangleF2D(t3.x * e2.unitInPixels, t3.y * e2.unitInPixels, t3.width * e2.unitInPixels, t3.height * e2.unitInPixels);
          }
        }
        e2.VexFlowMusicSheetDrawer = S;
      }, 9490: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.AbstractGraphicalExpression = void 0;
        const s = i2(7741), n = i2(6438);
        class r extends s.GraphicalObject {
          constructor(t3, e3, i3) {
            super(), this.expression = e3, this.parentMeasure = i3, this.boundingBox = new n.BoundingBox(this, t3.PositionAndShape), this.parentStaffLine = t3, this.parentStaffLine.AbstractExpressions.push(this), this.rules = t3.ParentMusicSystem.rules;
          }
          get Label() {
            return this.label;
          }
          get ParentStaffLine() {
            return this.parentStaffLine;
          }
          get SourceExpression() {
            return this.expression;
          }
          get Placement() {
            return this.expression.Placement;
          }
        }
        e2.AbstractGraphicalExpression = r;
      }, 9536: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.ChordSymbolReader = void 0;
        const n = i2(9719), r = i2(8233), o = i2(2148), a = s(i2(3065));
        e2.ChordSymbolReader = class {
          static readChordSymbol(t3, e3, i3) {
            const s2 = t3.element("root"), l = t3.element("kind"), h = l.attribute("text");
            if (!s2 || !l) return;
            const c = s2.element("root-step"), u = s2.element("root-alter");
            if (!c) return;
            let d;
            try {
              d = r.NoteEnum[c.value.trim()];
            } catch (t4) {
              const i4 = o.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
              return e3.SheetErrors.pushMeasureError(i4), void a.default.debug("InstrumentReader.readChordSymbol", i4, t4);
            }
            let f = r.AccidentalEnum.NONE;
            if (u) try {
              f = r.Pitch.AccidentalFromHalfTones(parseInt(u.value, 10));
            } catch (t4) {
              const i4 = o.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
              e3.SheetErrors.pushMeasureError(i4), a.default.debug("InstrumentReader.readChordSymbol", i4, t4);
            }
            const m = new r.Pitch(d, 1, f);
            let p, g, b = l.value.trim().replace("-", "");
            if (h) switch (h.value) {
              case "aug":
                b = "augmented";
                break;
              case "dim":
                b = "diminished";
            }
            try {
              p = n.ChordSymbolEnum[b];
            } catch (t4) {
              const i4 = o.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
              return e3.SheetErrors.pushMeasureError(i4), void a.default.debug("InstrumentReader.readChordSymbol", i4, t4);
            }
            const S = t3.element("bass");
            if (S) {
              const t4 = S.element("bass-step"), i4 = S.element("bass-alter");
              let s3 = r.NoteEnum.C;
              if (t4) try {
                s3 = r.NoteEnum[t4.value.trim()];
              } catch (t5) {
                const i5 = o.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
                return e3.SheetErrors.pushMeasureError(i5), void a.default.debug("InstrumentReader.readChordSymbol", i5, t5);
              }
              let n2 = r.AccidentalEnum.NONE;
              if (i4) try {
                n2 = r.Pitch.AccidentalFromHalfTones(parseInt(i4.value, 10));
              } catch (t5) {
                const i5 = o.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
                e3.SheetErrors.pushMeasureError(i5), a.default.debug("InstrumentReader.readChordSymbol", i5, t5);
              }
              g = new r.Pitch(s3, 1, n2);
            }
            const y = [], E = t3.elements("degree");
            for (const t4 of E) if (t4) {
              const i4 = t4.element("degree-value"), s3 = t4.element("degree-alter"), l2 = t4.element("degree-type");
              if (!i4 || !s3 || !l2) return;
              let h2, c2, u2;
              try {
                h2 = parseInt(i4.value.trim(), 10);
              } catch (t5) {
                const i5 = o.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
                return e3.SheetErrors.pushMeasureError(i5), void a.default.debug("InstrumentReader.readChordSymbol", i5, t5);
              }
              try {
                c2 = r.Pitch.AccidentalFromHalfTones(parseInt(s3.value, 10));
              } catch (t5) {
                const i5 = o.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
                return e3.SheetErrors.pushMeasureError(i5), void a.default.debug("InstrumentReader.readChordSymbol", i5, t5);
              }
              try {
                u2 = n.ChordDegreeText[l2.value.trim().toLowerCase()];
              } catch (t5) {
                const i5 = o.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
                return e3.SheetErrors.pushMeasureError(i5), void a.default.debug("InstrumentReader.readChordSymbol", i5, t5);
              }
              y.push(new n.Degree(h2, c2, u2));
            }
            return new n.ChordSymbolContainer(m, p, g, y, e3.Rules);
          }
        };
      }, 9635: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.VexFlowGraphicalNote = void 0;
        const s = i2(3430), n = i2(6014), r = i2(437);
        class o extends s.GraphicalNote {
          constructor(t3, e3, i3, s2 = r.OctaveEnum.NONE, o2, a = void 0) {
            if (super(t3, e3, o2, a), this.clef = i3, this.octaveShift = s2, t3.Pitch) {
              const e4 = t3.isRest() ? t3.Pitch : r.OctaveShift.getPitchFromOctaveShift(t3.Pitch, s2);
              this.vfpitch = n.VexFlowConverter.pitch(e4, t3.isRest(), this.clef, this.sourceNote.Notehead), this.vfpitch[1] = void 0;
            }
          }
          setAccidental(t3) {
            const e3 = this.drawPitch(t3);
            this.vfpitch = n.VexFlowConverter.pitch(e3, this.sourceNote.isRest(), this.clef, this.sourceNote.Notehead), this.DrawnAccidental = e3.Accidental;
          }
          drawPitch(t3) {
            return r.OctaveShift.getPitchFromOctaveShift(t3, this.octaveShift);
          }
          Transpose(t3, e3, i3, s2) {
            const o2 = super.Transpose(t3, e3, i3, s2), a = r.OctaveShift.getPitchFromOctaveShift(o2, this.octaveShift);
            return this.vfpitch = n.VexFlowConverter.pitch(a, this.sourceNote.isRest(), this.clef, this.sourceNote.Notehead), this.vfpitch[1] = void 0, a;
          }
          setIndex(t3, e3) {
            this.vfnote = [t3, e3], this.vfnoteIndex = e3;
          }
          notehead(t3 = void 0) {
            let e3 = t3;
            e3 || (e3 = this.vfnote[0]);
            const i3 = e3.note_heads;
            return i3 && i3.length > this.vfnoteIndex && i3[this.vfnoteIndex] ? e3.note_heads[this.vfnoteIndex] : { line: 0 };
          }
          Clef() {
            return this.clef;
          }
          getSVGId() {
            if (this.vfnote) return this.vfnote[0].getAttribute("id");
          }
          getSVGGElement() {
            if (this.vfnote) return this.vfnote[0].getAttribute("el");
          }
          getStemSVG() {
            return document.getElementById("vf-" + this.getSVGId() + "-stem");
          }
          getBeamSVGs() {
            const t3 = [];
            for (let e3 = 0; ; e3++) {
              const i3 = document.getElementById(`vf-${this.getSVGId()}-beam${e3}`);
              if (!i3) break;
              t3.push(i3);
            }
            return t3;
          }
        }
        e2.VexFlowGraphicalNote = o;
      }, 9647: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.TabNote = void 0;
        const s = i2(1850);
        class n extends s.Note {
          constructor(t3, e3, i3, s2, n2, r, o, a, l) {
            super(t3, e3, i3, s2, n2), this.stringNumberTab = r, this.fretNumber = o, this.bendArray = a, this.vibratoStroke = l;
          }
          get StringNumberTab() {
            return this.stringNumberTab;
          }
          get FretNumber() {
            return this.fretNumber;
          }
          get BendArray() {
            return this.bendArray;
          }
          get VibratoStroke() {
            return this.vibratoStroke;
          }
          hasTabEffects() {
            var _a;
            return ((_a = this.bendArray) == null ? void 0 : _a.length) > 0 || this.vibratoStroke;
          }
        }
        e2.TabNote = n;
      }, 9713: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.PageFormat = e2.EngravingRules = void 0;
        const n = i2(1888), r = s(i2(3065)), o = i2(7533), a = i2(6362), l = i2(624), h = i2(4434), c = i2(3263), u = i2(2257), d = i2(8233), f = i2(9719), m = i2(3430);
        class p {
          constructor() {
            this.NoteDistances = [1, 1, 1.3, 1.6, 2, 2.5, 3, 4], this.NoteDistancesScalingFactors = [1, 2, 4, 8, 16, 32, 64, 128], this.DurationDistanceDict = {}, this.DurationScalingDistanceDict = {}, this.NoteToGraphicalNoteMapObjectCount = 0, this.RenderCount = 0, this.loadDefaultValues();
          }
          loadDefaultValues() {
            this.SamplingUnit = 3 * p.unit, this.SheetTitleHeight = 4, this.SheetSubtitleHeight = 2, this.SheetMinimumDistanceBetweenTitleAndSubtitle = 1, this.SheetComposerHeight = 2, this.SheetAuthorHeight = 2, this.SheetCopyrightHeight = 1.5, this.SheetCopyrightMargin = 2, this.SheetComposerSubtitleUseLegacyParsing = false, this.CompactMode = false, this.PagePlacementEnum = n.PagePlacementEnum.Down, this.PageHeight = 100001, this.PageTopMargin = 5, this.PageTopMarginNarrow = 0, this.PageBottomMargin = 5, this.PageLeftMargin = 5, this.PageRightMargin = 5, this.TitleTopDistance = 5, this.TitleBottomDistance = 1, this.StaffDistance = 7, this.BetweenStaffDistance = 5, this.MinimumStaffLineDistance = 4, this.MinSkyBottomDistBetweenStaves = 1, this.StaffHeight = 4, this.TabStaffInterlineHeight = 1.1111, this.TabStaffInterlineHeightForBboxes = 1.3, this.BetweenStaffLinesDistance = p.unit, this.SystemLeftMargin = 0, this.SystemRightMargin = 0, this.SystemLabelsRightMargin = 2, this.SystemComposerDistance = 2, this.SystemLyricistDistance = 2, this.InstrumentLabelTextHeight = 2, this.MinimumDistanceBetweenSystems = 7, this.MinSkyBottomDistBetweenSystems = 5, this.LastSystemMaxScalingFactor = 1.4, this.AutoBeamNotes = false, this.AutoBeamOptions = { beam_middle_rests_only: false, beam_rests: false, maintain_stem_directions: false }, this.AutoBeamTabs = false, this.BeamWidth = p.unit / 2, this.BeamSpaceWidth = p.unit / 3, this.BeamForwardLength = 1.25 * p.unit, this.FlatBeams = false, this.FlatBeamOffset = 20, this.FlatBeamOffsetPerBeam = 10, this.ClefLeftMargin = 0.5, this.ClefRightMargin = 0.75, this.PercussionOneLineCutoff = 3, this.PercussionForceVoicesOneLineCutoff = 1, this.PercussionUseXMLDisplayStep = true, this.PercussionXMLDisplayStepNoteValueShift = 0, this.PercussionOneLineXMLDisplayStepOctaveOffset = 0, this.PercussionUseCajon2NoteSystem = false, this.BetweenKeySymbolsDistance = 0.2, this.KeyRightMargin = 0.75, this.RhythmRightMargin = 1.25, this.ShowRhythmAgainAfterPartEndOrFinalBarline = true, this.NewPartAndSystemAfterFinalBarline = false, this.InStaffClefScalingFactor = 0.8, this.DistanceBetweenNaturalAndSymbolWhenCancelling = 0.4, this.NoteHelperLinesOffset = 0.25, this.MeasureLeftMargin = 0.7, this.MeasureRightMargin = 0, this.DistanceBetweenLastInstructionAndRepetitionBarline = 1, this.ArpeggioDistance = 0.6, this.StaccatoShorteningFactor = 2, this.IdealStemLength = 3, this.StemNoteHeadBorderYOffset = 0.2, this.StemMargin = 0.2, this.StemMinLength = 2.5, this.StemMaxLength = 4.5, this.BeamSlopeMaxAngle = 10, this.StemMinAllowedDistanceBetweenNoteHeadAndBeamLine = 1, this.SetWantedStemDirectionByXml = true, this.GraceNoteScalingFactor = 0.6, this.GraceNoteXOffset = 0.2, this.GraceNoteGroupXMargin = 0, this.WedgeOpeningLength = 1.2, this.WedgeMeasureEndOpeningLength = 0.75, this.WedgeMeasureBeginOpeningLength = 0.75, this.WedgePlacementAboveY = -1.5, this.WedgePlacementBelowY = 1.5, this.WedgeHorizontalMargin = 0.6, this.WedgeVerticalMargin = 0.5, this.DistanceOffsetBetweenTwoHorizontallyCrossedWedges = 0.3, this.WedgeMinLength = 2, this.WedgeEndDistanceBetweenTimestampsFactor = 1.75, this.ArticulationAboveNoteForStemUp = false, this.SoftAccentWedgePadding = 0.4, this.SoftAccentSizeFactor = 0.6, this.DistanceBetweenAdjacentDynamics = 0.75, this.TempoChangeMeasureValidity = 4, this.TempoContinousFactor = 0.7, this.StaccatoScalingFactor = 0.8, this.BetweenDotsDistance = 0.8, this.OrnamentAccidentalScalingFactor = 0.65, this.ChordSymbolTextHeight = 2, this.ChordSymbolTextAlignment = o.TextAlignmentEnum.LeftBottom, this.ChordSymbolRelativeXOffset = -1, this.ChordSymbolExtraXShiftForShortChordSymbols = 0.3, this.ChordSymbolExtraXShiftWidthThreshold = 2, this.ChordSymbolXSpacing = 1, this.ChordOverlapAllowedIntoNextMeasure = 0, this.ChordSymbolYOffset = 0.1, this.ChordSymbolYPadding = 0, this.ChordSymbolYAlignment = true, this.ChordSymbolYAlignmentScope = "staffline", this.ChordSymbolWholeMeasureRestXOffset = 0, this.ChordSymbolWholeMeasureRestXOffsetMeasure1 = -2, this.ChordAccidentalTexts = new c.Dictionary(), this.resetChordAccidentalTexts(this.ChordAccidentalTexts, false), this.ChordSymbolLabelTexts = new c.Dictionary(), this.resetChordSymbolLabelTexts(this.ChordSymbolLabelTexts), this.CustomChords = [], this.resetChordNames(), this.RepetitionSymbolsYOffset = 0, this.RepetitionEndInstructionXShiftAsPercentOfStaveWidth = 0.4, this.RehearsalMarkXOffsetDefault = 10, this.RehearsalMarkXOffset = 0, this.RehearsalMarkXOffsetSystemStartMeasure = -20, this.RehearsalMarkYOffsetDefault = -15, this.RehearsalMarkYOffsetAddedForRehearsalMarks = -12, this.RehearsalMarkYOffset = 0, this.RehearsalMarkFontSize = 10, this.MeasureNumberLabelHeight = 1.5 * p.unit, this.MeasureNumberLabelOffset = 2, this.MeasureNumberLabelXOffset = -0.5, this.TupletsRatioed = false, this.TupletsBracketed = false, this.TripletsBracketed = false, this.TupletsBracketedUseXMLValue = true, this.TupletNumberLabelHeight = 1.5 * p.unit, this.TupletNumberYOffset = 0.5, this.TupletNumberLimitConsecutiveRepetitions = true, this.TupletNumberMaxConsecutiveRepetitions = 2, this.TupletNumberAlwaysDisableAfterFirstMax = true, this.TupletNumberUseShowNoneXMLValue = true, this.LabelMarginBorderFactor = 0.1, this.TupletVerticalLineLength = 0.5, this.TupletNumbersInTabs = true, this.TabTupletYOffsetBottom = 1, this.TabTupletYOffsetTop = -3.5, this.TabTupletYOffsetEffects = 1.5, this.TabTupletsBracketed = true, this.TabBeamsRendered = true, this.TabKeySignatureRendered = false, this.TabKeySignatureSpacingAdded = true, this.TabTimeSignatureRendered = false, this.TabTimeSignatureSpacingAdded = true, this.TabFingeringsRendered = false, this.TabUseXNoteheadShapeForTabNote = true, this.TabUseXNoteheadAlternativeGlyph = true, this.TabXNoteheadScale = 0.9, this.SlurPlacementFromXML = true, this.SlurPlacementAtStems = false, this.SlurPlacementUseSkyBottomLine = false, this.BezierCurveStepSize = 1e3, this.calculateCurveParametersArrays(), this.TieGhostObjectWidth = 0.75, this.TieYPositionOffsetFactor = 0.3, this.MinimumNeededXspaceForTieGhostObject = 1, this.TieHeightMinimum = 0.28, this.TieHeightMaximum = 1.2, this.TieHeightInterpolationK = 0.0288, this.TieHeightInterpolationD = 0.136, this.SlurNoteHeadYOffset = 0.5, this.SlurEndArticulationYOffset = 0.8, this.SlurStartArticulationYOffsetOfArticulation = 0.5, this.SlurStemXOffset = 0.3, this.SlurSlopeMaxAngle = 15, this.SlurTangentMinAngle = 30, this.SlurTangentMaxAngle = 80, this.SlurHeightFactor = 1, this.SlurHeightFlattenLongSlursFactorByWidth = 0.24, this.SlurHeightFlattenLongSlursFactorByAngle = 0.36, this.SlurHeightFlattenLongSlursCutoffAngle = 47, this.SlurHeightFlattenLongSlursCutoffWidth = 16, this.SlursStartingAtSameStaffEntryYOffset = 0.8, this.SlurMaximumYControlPointDistance = void 0, this.GlissandoNoteOffset = 0.5, this.GlissandoStafflineStartMinimumWidth = 1, this.GlissandoStafflineStartYDistanceToNote = 0.8, this.GlissandoStafflineEndOffset = 1, this.GlissandoDefaultWidth = 0.1, this.RepetitionAllowFirstMeasureBeginningRepeatBarline = true, this.RepetitionEndingLabelHeight = 2, this.RepetitionEndingLabelXOffset = 0.5, this.RepetitionEndingLabelYOffset = 0.3, this.RepetitionEndingLineYLowerOffset = 0.5, this.RepetitionEndingLineYUpperOffset = 0.3, this.VoltaOffset = 2.5, this.LyricsAlignmentStandard = o.TextAlignmentEnum.LeftBottom, this.LyricsHeight = 2, this.LyricsYOffsetToStaffHeight = 0, this.LyricsYMarginToBottomLine = 0.2, this.LyricsExtraXShiftForShortLyrics = 0.5, this.LyricsExtraXShiftForShortLyricsWidthThreshold = 1.4, this.LyricsUseXPaddingForLongLyrics = true, this.LyricsXPaddingFactorForLongLyrics = 1, this.LyricsXPaddingWidthThreshold = 1.7, this.LyricsXPaddingReductionForLongNotes = 0.7, this.LyricsXPaddingReductionForLastNoteInMeasure = 1.2, this.LyricsXPaddingForLastNoteInMeasure = true, this.VerticalBetweenLyricsDistance = 0.5, this.HorizontalBetweenLyricsDistance = 0.2, this.BetweenSyllableMaximumDistance = 10, this.BetweenSyllableMinimumDistance = 0.5, this.LyricOverlapAllowedIntoNextMeasure = 3.4, this.MinimumDistanceBetweenDashes = 10, this.MaximumLyricsElongationFactor = 2.5, this.TempoYSpacing = 0.5, this.InstantaneousTempoTextHeight = 2.3, this.ContinuousDynamicTextHeight = 2.3, this.UseEndOffsetForExpressions = true, this.MoodTextHeight = 2.3, this.UnknownTextHeight = 2, this.ContinuousTempoTextHeight = 2.3, this.DynamicExpressionMaxDistance = 2, this.DynamicExpressionSpacer = 0.5, this.IgnoreRepeatedDynamics = false, this.ExpressionsUseXMLColor = true, this.VexFlowDefaultNotationFontScale = 39, this.VexFlowDefaultTabFontScale = 39, this.TremoloStrokeScale = 1, this.TremoloYSpacingScale = 1, this.TremoloBuzzRollThickness = 0.25, this.StemWidth = 0.15, this.StaffLineWidth = 0.1, this.StaffLineColor = void 0, this.LedgerLineWidth = 1, this.LedgerLineStrokeStyle = void 0, this.LedgerLineColorDefault = "#000000", this.WedgeLineWidth = 0.12, this.TupletLineWidth = 0.12, this.LyricUnderscoreLineWidth = 0.12, this.SystemThinLineWidth = 0.12, this.SystemBoldLineWidth = p.unit / 2, this.SystemRepetitionEndingLineWidth = 0.12, this.SystemDotWidth = p.unit / 2, this.DistanceBetweenVerticalSystemLines = 0.35, this.DistanceBetweenDotAndLine = 0.7, this.RepeatEndStartPadding = 2, this.OctaveShiftLineWidth = 0.12, this.OctaveShiftVerticalLineLength = p.unit, this.OctaveShiftOnWholeMeasureNoteUntilEndOfMeasure = false, this.GraceLineWidth = this.StaffLineWidth * this.GraceNoteScalingFactor, this.MultipleRestMeasureDefaultWidth = 4, this.MultipleRestMeasureAddKeySignature = true, this.FixedMeasureWidth = false, this.FixedMeasureWidthFixedValue = void 0, this.FixedMeasureWidthUseForPickupMeasures = false, this.MinimumCrossedBeamDifferenceMargin = 1e-4, this.SheetMaximumWidth = 32767, this.VoiceSpacingMultiplierVexflow = 0.85, this.VoiceSpacingAddendVexflow = 3, this.PickupMeasureWidthMultiplier = 1, this.PickupMeasureRepetitionSpacing = 0.8, this.PickupMeasureSpacingSingleNoteAddend = 1.6, this.DisplacedNoteMargin = 0.1, this.MinNoteDistance = 2, this.SubMeasureXSpacingThreshold = 35, this.MeasureDynamicsMaxScalingFactor = 2.5, this.WholeRestXShiftVexflow = -1.5, this.MetronomeMarksDrawn = true, this.MetronomeMarkXShift = -6, this.MetronomeMarkYShift = -1, this.SoftmaxFactorVexFlow = 15, this.StaggerSameWholeNotes = true, this.AlignRests = l.AlignRestOption.Never, this.RestCollisionYPadding = 0, this.FillEmptyMeasuresWithWholeRest = l.FillEmptyMeasuresWithWholeRests.No, this.ArpeggiosGoAcrossVoices = false, this.RenderArpeggios = true, this.RenderSlurs = true, this.RenderGlissandi = true, this.ColoringMode = h.ColoringModes.XML, this.ColoringEnabled = true, this.ColorStemsLikeNoteheads = false, this.ColorBeams = true, this.ColorFlags = true, this.applyDefaultColorMusic("#000000"), this.DefaultColorCursor = "#33e02f", this.DefaultFontFamily = "Times New Roman", this.DefaultFontStyle = u.FontStyles.Regular, this.DefaultVexFlowNoteFont = "gonville", this.MaxMeasureToDrawIndex = Number.MAX_VALUE, this.MaxMeasureToDrawNumber = Number.MAX_VALUE, this.MinMeasureToDrawIndex = 0, this.MinMeasureToDrawNumber = 0, this.MaxSystemToDrawNumber = Number.MAX_VALUE, this.MaxPageToDrawNumber = Number.MAX_VALUE, this.RenderComposer = true, this.RenderTitle = true, this.RenderSubtitle = true, this.RenderLyricist = true, this.RenderCopyright = false, this.RenderPartNames = true, this.RenderPartAbbreviations = true, this.RenderSystemLabelsAfterFirstPage = true, this.RenderFingerings = true, this.RenderMeasureNumbers = true, this.RenderMeasureNumbersOnlyAtSystemStart = false, this.UseXMLMeasureNumbers = true, this.RenderLyrics = true, this.RenderChordSymbols = true, this.RenderMultipleRestMeasures = true, this.AutoGenerateMultipleRestMeasuresFromRestMeasures = true, this.RenderRehearsalMarks = true, this.RenderClefsAtBeginningOfStaffline = true, this.RenderKeySignatures = true, this.RenderTimeSignatures = true, this.RenderPedals = true, this.ArticulationPlacementFromXML = true, this.BreathMarkDistance = 0.8, this.FingeringPosition = a.PlacementEnum.AboveOrBelow, this.FingeringPositionFromXML = true, this.FingeringPositionGrace = a.PlacementEnum.Left, this.FingeringInsideStafflines = false, this.FingeringLabelFontHeight = 1.7, this.FingeringOffsetX = 0, this.FingeringOffsetY = 0, this.FingeringPaddingY = -0.2, this.FingeringTextSize = 1.5, this.RenderStringNumbersClassical = true, this.StringNumberOffsetY = 0, this.NewSystemAtXMLNewSystemAttribute = false, this.NewPageAtXMLNewPageAttribute = false, this.NewSystemAtXMLNewPageAttribute = false, this.RenderXMeasuresPerLineAkaSystem = 0, this.RestoreCursorAfterRerender = true, this.StretchLastSystemLine = false, this.IgnoreBracketsWords = true, this.PlaceWordsInsideStafflineFromXml = false, this.PlaceWordsInsideStafflineYOffset = 0.9, this.PageFormat = g.UndefinedPageFormat, this.PageBackgroundColor = void 0, this.UsePageBackgroundColorForTabNotes = true, this.RenderSingleHorizontalStaffline = false, this.SpacingBetweenTextLines = 0, this.NoteToGraphicalNoteMap = new c.Dictionary(), this.NoteToGraphicalNoteMapObjectCount = 0, this.SkyBottomLineBatchMinMeasures = 5, this.SkyBottomLineWebGLMinMeasures = 80, this.AlwaysSetPreferredSkyBottomLineBackendAutomatically = true, this.DisableWebGLInFirefox = true, this.DisableWebGLInSafariAndIOS = true, this.setPreferredSkyBottomLineBackendAutomatically();
            try {
              this.MaxInstructionsConstValue = this.ClefLeftMargin + this.ClefRightMargin + this.KeyRightMargin + this.RhythmRightMargin + 11;
            } catch (t3) {
              r.default.info("EngravingRules()", t3);
            }
          }
          setPreferredSkyBottomLineBackendAutomatically(t3 = -1) {
            var _a, _b;
            let e3 = "", i3 = "";
            "object" == typeof globalThis && (e3 = ((_a = globalThis.navigator) == null ? void 0 : _a.vendor) ?? "", i3 = ((_b = globalThis.navigator) == null ? void 0 : _b.userAgent) ?? "");
            let s2 = false;
            (this.DisableWebGLInSafariAndIOS && /apple/i.test(e3) || this.DisableWebGLInFirefox && i3.includes("Firefox")) && (s2 = true), this.PreferredSkyBottomLineBatchCalculatorBackend = l.SkyBottomLineBatchCalculatorBackendType.Plain, s2 || t3 >= this.SkyBottomLineWebGLMinMeasures && (this.PreferredSkyBottomLineBatchCalculatorBackend = l.SkyBottomLineBatchCalculatorBackendType.WebGL);
          }
          applyDefaultColorMusic(t3) {
            this.DefaultColorMusic = t3, this.DefaultColorNotehead = t3, this.DefaultColorRest = t3, this.DefaultColorStem = t3, this.DefaultColorLabel = t3, this.DefaultColorLyrics = t3, this.DefaultColorTitle = t3, this.LedgerLineColorDefault = t3;
          }
          addGraphicalNoteToNoteMap(t3, e3) {
            t3.NoteToGraphicalNoteObjectId = this.NoteToGraphicalNoteMapObjectCount, this.NoteToGraphicalNoteMap.setValue(t3.NoteToGraphicalNoteObjectId, e3), this.NoteToGraphicalNoteMapObjectCount++;
          }
          GNote(t3) {
            return m.GraphicalNote.FromNote(t3, this);
          }
          clearMusicSheetObjects() {
            this.NoteToGraphicalNoteMap = new c.Dictionary(), this.NoteToGraphicalNoteMapObjectCount = 0;
          }
          resetChordAccidentalTexts(t3, e3) {
            t3.setValue(d.AccidentalEnum.SHARP, e3 ? "♯" : "#"), t3.setValue(d.AccidentalEnum.FLAT, e3 ? "♭" : "b"), t3.setValue(d.AccidentalEnum.DOUBLEFLAT, e3 ? "𝄫" : "bb"), t3.setValue(d.AccidentalEnum.DOUBLESHARP, e3 ? "𝄪" : "x");
          }
          setChordSymbolLabelText(t3, e3) {
            this.ChordSymbolLabelTexts.setValue(t3, e3);
          }
          resetChordSymbolLabelTexts(t3) {
            return t3.setValue(f.ChordSymbolEnum.minor, "m"), t3.setValue(f.ChordSymbolEnum.augmented, "aug"), t3.setValue(f.ChordSymbolEnum.diminished, "dim"), t3.setValue(f.ChordSymbolEnum.dominant, "7"), t3.setValue(f.ChordSymbolEnum.majorseventh, "maj7"), t3.setValue(f.ChordSymbolEnum.minorseventh, "m7"), t3.setValue(f.ChordSymbolEnum.diminishedseventh, "dim7"), t3.setValue(f.ChordSymbolEnum.augmentedseventh, "aug7"), t3.setValue(f.ChordSymbolEnum.halfdiminished, `m7${this.ChordAccidentalTexts.getValue(d.AccidentalEnum.FLAT)}5`), t3.setValue(f.ChordSymbolEnum.majorminor, "m(maj7)"), t3.setValue(f.ChordSymbolEnum.majorsixth, "maj6"), t3.setValue(f.ChordSymbolEnum.minorsixth, "m6"), t3.setValue(f.ChordSymbolEnum.dominantninth, "9"), t3.setValue(f.ChordSymbolEnum.majorninth, "maj9"), t3.setValue(f.ChordSymbolEnum.minorninth, "m9"), t3.setValue(f.ChordSymbolEnum.dominant11th, "11"), t3.setValue(f.ChordSymbolEnum.major11th, "maj11"), t3.setValue(f.ChordSymbolEnum.minor11th, "m11"), t3.setValue(f.ChordSymbolEnum.dominant13th, "13"), t3.setValue(f.ChordSymbolEnum.major13th, "maj13"), t3.setValue(f.ChordSymbolEnum.minor13th, "m13"), t3.setValue(f.ChordSymbolEnum.suspendedsecond, "sus2"), t3.setValue(f.ChordSymbolEnum.suspendedfourth, "sus4"), t3.setValue(f.ChordSymbolEnum.power, "5"), t3.setValue(f.ChordSymbolEnum.none, "N.C."), t3;
          }
          addChordName(t3, e3, i3, s2, n2) {
            if (void 0 !== f.ChordSymbolEnum[e3]) {
              const r2 = { adds: i3, alts: s2, subs: n2 };
              this.CustomChords.push(f.CustomChord.createCustomChord(t3, f.ChordSymbolEnum[e3], r2));
            }
          }
          renameChord(t3, e3) {
            f.CustomChord.renameCustomChord(t3, e3, this.CustomChords);
          }
          resetChordNames() {
            const t3 = this.ChordAccidentalTexts.getValue(d.AccidentalEnum.SHARP), e3 = this.ChordAccidentalTexts.getValue(d.AccidentalEnum.FLAT);
            this.addChordName("alt", "major", [`${t3}5`, `${e3}9`, `${t3}9`], [`${e3}5`], []), this.addChordName("7alt", "dominant", [`${t3}5`, `${e3}9`, `${t3}9`], [`${e3}5`], []), this.addChordName("7sus4", "dominant", ["4"], [], ["3"]), this.addChordName("7sus4", "suspendedfourth", ["7"], [], []), this.addChordName("9sus4", "dominantninth", ["4"], [], ["3"]), this.addChordName("9sus4", "suspendedfourth", ["9"], [], []), this.addChordName("11sus4", "dominant11th", ["4"], [], ["3"]), this.addChordName("11sus4", "suspendedfourth", ["11"], [], []), this.addChordName("13sus4", "dominant13th", ["4"], [], ["3"]), this.addChordName("13sus4", "suspendedfourth", ["13"], [], []), this.addChordName("7sus2", "dominant", ["2"], [], ["3"]), this.addChordName("7sus2", "suspendedsecond", ["7"], [], []), this.addChordName(`m7${e3}5`, "minorseventh", [], [`${e3}5`], []), this.addChordName("9sus2", "dominantninth", ["2"], [], ["3"]), this.addChordName("9sus2", "suspendedsecond", ["9"], [], []), this.addChordName("11sus2", "dominant11th", ["2"], [], ["3"]), this.addChordName("11sus2", "suspendedsecond", ["11"], [], []), this.addChordName("13sus2", "dominant13th", ["2"], [], ["3"]), this.addChordName("13sus2", "suspendedsecond", ["13"], [], []), this.addChordName("m(maj9)", "majorminor", ["9"], [], []), this.addChordName("m(maj11)", "majorminor", ["11"], [], []), this.addChordName("m(maj13)", "majorminor", ["13"], [], []), this.addChordName("69", "majorsixth", ["9"], [], []), this.addChordName("mi69", "minorsixth", ["9"], [], []);
          }
          calculateCurveParametersArrays() {
            this.TPower3 = new Array(this.BezierCurveStepSize), this.OneMinusTPower3 = new Array(this.BezierCurveStepSize), this.FactorOne = new Array(this.BezierCurveStepSize), this.FactorTwo = new Array(this.BezierCurveStepSize);
            for (let t3 = 0; t3 < this.BezierCurveStepSize; t3++) {
              const e3 = t3 / this.BezierCurveStepSize;
              this.TPower3[t3] = Math.pow(e3, 3), this.OneMinusTPower3[t3] = Math.pow(1 - e3, 3), this.FactorOne[t3] = 3 * Math.pow(1 - e3, 2) * e3, this.FactorTwo[t3] = 3 * (1 - e3) * Math.pow(e3, 2);
            }
          }
        }
        e2.EngravingRules = p, p.unit = 1;
        class g {
          constructor(t3, e3, i3 = "noIdStringGiven") {
            this.width = t3, this.height = e3, this.idString = i3;
          }
          get aspectRatio() {
            return this.IsUndefined ? 0 : this.width / this.height;
          }
          get IsUndefined() {
            return void 0 === this.width || void 0 === this.height || 0 === this.height || 0 === this.width;
          }
          static get UndefinedPageFormat() {
            return new g(0, 0);
          }
          Equals(t3) {
            return !!t3 && t3.width === this.width && t3.height === this.height;
          }
        }
        e2.PageFormat = g;
      }, 9719: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.ChordSymbolEnum = e2.ChordDegreeText = e2.CustomChord = e2.Degree = e2.ChordSymbolContainer = void 0;
        const s = i2(8233), n = i2(7921), r = i2(8233);
        e2.ChordSymbolContainer = class {
          constructor(t3, e3, i3, s2, n2) {
            this.rootPitch = t3, this.chordKind = e3, this.bassPitch = i3, this.degrees = s2, this.rules = n2;
          }
          get RootPitch() {
            return this.rootPitch;
          }
          get ChordKind() {
            return this.chordKind;
          }
          get BassPitch() {
            return this.bassPitch;
          }
          get ChordDegrees() {
            return this.degrees;
          }
          static calculateChordText(t3, e3, i3) {
            let o2 = t3.RootPitch;
            if (n.MusicSheetCalculator.transposeCalculator && (o2 = n.MusicSheetCalculator.transposeCalculator.transposePitch(t3.RootPitch, i3, e3)), t3.ChordKind === l.none) return t3.getTextFromChordKindEnum(t3.ChordKind);
            let h = s.Pitch.getNoteEnumString(o2.FundamentalNote);
            o2.Accidental !== r.AccidentalEnum.NONE && (h += t3.getTextForAccidental(o2.Accidental));
            const c = { adds: [], alts: [], subs: [] };
            for (const e4 of t3.ChordDegrees) if (e4) {
              let i4 = "";
              switch (e4.alteration !== r.AccidentalEnum.NONE && (i4 += t3.getTextForAccidental(e4.alteration)), i4 += e4.value, e4.text) {
                case a.add:
                  c.adds.push(i4);
                  break;
                case a.alter:
                  c.alts.push(i4);
                  break;
                case a.subtract:
                  c.subs.push(i4);
              }
            }
            let u = t3.getTextFromChordKindEnum(t3.ChordKind);
            const d = ["adds", "alts", "subs"], f = t3.rules.CustomChords;
            for (const e4 of f) {
              if (e4.chordKind !== t3.chordKind) continue;
              let i4 = true;
              for (const t4 of d) {
                for (const s2 of e4.degrees[t4] || []) if (c[t4].indexOf(s2) < 0) {
                  i4 = false;
                  break;
                }
                if (!i4) break;
              }
              if (i4) {
                for (const t4 of d) for (const i5 of e4.degrees[t4] || []) c[t4].splice(c[t4].indexOf(i5), 1);
                u = e4.alternateName;
              }
            }
            if (h += u, c.adds.length > 0 && (h += "(" + c.adds.join(",") + ")"), c.alts.length > 0 && (h += "(alt " + c.alts.join(",") + ")"), c.subs.length > 0 && (h += "(omit " + c.subs.join(",") + ")"), t3.BassPitch) {
              let r2 = t3.BassPitch;
              n.MusicSheetCalculator.transposeCalculator && (r2 = n.MusicSheetCalculator.transposeCalculator.transposePitch(t3.BassPitch, i3, e3)), h += "/", h += s.Pitch.getNoteEnumString(r2.FundamentalNote), h += t3.getTextForAccidental(r2.Accidental);
            }
            return h;
          }
          getTextForAccidental(t3) {
            const e3 = this.rules.ChordAccidentalTexts.getValue(t3);
            return void 0 !== e3 ? e3 : "";
          }
          getTextFromChordKindEnum(t3) {
            return this.rules.ChordSymbolLabelTexts.getValue(t3) ?? "";
          }
        }, e2.Degree = class {
          constructor(t3, e3, i3) {
            this.value = t3, this.alteration = e3, this.text = i3;
          }
        };
        class o {
          constructor(t3, e3, i3) {
            this.alternateName = t3, this.chordKind = e3, this.degrees = i3;
          }
          static createCustomChord(t3, e3, i3) {
            return new o(t3, e3, i3);
          }
          static renameCustomChord(t3, e3, i3) {
            for (const s2 of i3) s2.alternateName === t3 && (s2.alternateName = e3);
          }
        }
        var a, l;
        e2.CustomChord = o, function(t3) {
          t3[t3.add = 0] = "add", t3[t3.alter = 1] = "alter", t3[t3.subtract = 2] = "subtract";
        }(a || (e2.ChordDegreeText = a = {})), function(t3) {
          t3[t3.major = 0] = "major", t3[t3.minor = 1] = "minor", t3[t3.augmented = 2] = "augmented", t3[t3.diminished = 3] = "diminished", t3[t3.dominant = 4] = "dominant", t3[t3.majorseventh = 5] = "majorseventh", t3[t3.minorseventh = 6] = "minorseventh", t3[t3.diminishedseventh = 7] = "diminishedseventh", t3[t3.augmentedseventh = 8] = "augmentedseventh", t3[t3.halfdiminished = 9] = "halfdiminished", t3[t3.majorminor = 10] = "majorminor", t3[t3.majorsixth = 11] = "majorsixth", t3[t3.minorsixth = 12] = "minorsixth", t3[t3.dominantninth = 13] = "dominantninth", t3[t3.majorninth = 14] = "majorninth", t3[t3.minorninth = 15] = "minorninth", t3[t3.dominant11th = 16] = "dominant11th", t3[t3.major11th = 17] = "major11th", t3[t3.minor11th = 18] = "minor11th", t3[t3.dominant13th = 19] = "dominant13th", t3[t3.major13th = 20] = "major13th", t3[t3.minor13th = 21] = "minor13th", t3[t3.suspendedsecond = 22] = "suspendedsecond", t3[t3.suspendedfourth = 23] = "suspendedfourth", t3[t3.Neapolitan = 24] = "Neapolitan", t3[t3.Italian = 25] = "Italian", t3[t3.French = 26] = "French", t3[t3.German = 27] = "German", t3[t3.pedal = 28] = "pedal", t3[t3.power = 29] = "power", t3[t3.Tristan = 30] = "Tristan", t3[t3.none = 31] = "none";
        }(l || (e2.ChordSymbolEnum = l = {}));
      }, 9735: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__createBinding || (Object.create ? function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3);
          var n2 = Object.getOwnPropertyDescriptor(e3, i3);
          n2 && !("get" in n2 ? !e3.__esModule : n2.writable || n2.configurable) || (n2 = { enumerable: true, get: function() {
            return e3[i3];
          } }), Object.defineProperty(t3, s2, n2);
        } : function(t3, e3, i3, s2) {
          void 0 === s2 && (s2 = i3), t3[s2] = e3[i3];
        }), n = this && this.__exportStar || function(t3, e3) {
          for (var i3 in t3) "default" === i3 || Object.prototype.hasOwnProperty.call(e3, i3) || s(e3, t3, i3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), n(i2(2561), e2), n(i2(6904), e2), n(i2(8786), e2), n(i2(8705), e2), n(i2(8233), e2), n(i2(9409), e2), n(i2(200), e2), n(i2(6864), e2);
      }, 9760: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.GraphicalStaffEntryLink = void 0, e2.GraphicalStaffEntryLink = class {
          constructor(t3) {
            this.graphicalLinkedStaffEntries = [], this.staffEntryLink = t3, this.initialize();
          }
          get GetStaffEntryLink() {
            return this.staffEntryLink;
          }
          get GraphicalLinkedStaffEntries() {
            return this.graphicalLinkedStaffEntries;
          }
          set GraphicalLinkedStaffEntries(t3) {
            this.graphicalLinkedStaffEntries = t3;
          }
          isFilled() {
            for (let t3 = 0; t3 < this.graphicalLinkedStaffEntries.length; t3++) if (!this.graphicalLinkedStaffEntries[t3]) return false;
            return true;
          }
          getLinkedStaffEntriesGraphicalNotes(t3) {
            if (-1 !== this.graphicalLinkedStaffEntries.indexOf(t3)) {
              const t4 = [];
              for (let e3 = 0, i2 = this.graphicalLinkedStaffEntries.length; e3 < i2; ++e3) {
                const i3 = this.graphicalLinkedStaffEntries[e3];
                for (const e4 of i3.graphicalVoiceEntries) for (const i4 of e4.notes) i4.sourceNote.ParentStaffEntry.Link && i4.sourceNote.ParentVoiceEntry === this.staffEntryLink.GetVoiceEntry && t4.push(i4);
              }
              return t4;
            }
          }
          initialize() {
            for (let t3 = 0, e3 = this.staffEntryLink.LinkStaffEntries.length; t3 < e3; ++t3) this.graphicalLinkedStaffEntries.push(void 0);
          }
        };
      }, 9767: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.DynamicEnum = e2.InstantaneousDynamicExpression = void 0;
        const n = i2(6362), r = i2(6990), o = i2(7307), a = s(i2(3065)), l = i2(3263);
        class h extends n.AbstractExpression {
          static staticConstructor() {
            h.dynamicToRelativeVolumeDict.setValue(c.ffffff, 1), h.dynamicToRelativeVolumeDict.setValue(c.fffff, 126 / 127), h.dynamicToRelativeVolumeDict.setValue(c.ffff, 125 / 127), h.dynamicToRelativeVolumeDict.setValue(c.fff, 124 / 127), h.dynamicToRelativeVolumeDict.setValue(c.ff, 122 / 127), h.dynamicToRelativeVolumeDict.setValue(c.f, 108 / 127), h.dynamicToRelativeVolumeDict.setValue(c.mf, 76 / 127), h.dynamicToRelativeVolumeDict.setValue(c.sf, 0.5), h.dynamicToRelativeVolumeDict.setValue(c.sfp, 0.5), h.dynamicToRelativeVolumeDict.setValue(c.sfpp, 0.5), h.dynamicToRelativeVolumeDict.setValue(c.fp, 0.5), h.dynamicToRelativeVolumeDict.setValue(c.rf, 0.5), h.dynamicToRelativeVolumeDict.setValue(c.rfz, 0.5), h.dynamicToRelativeVolumeDict.setValue(c.sfz, 0.5), h.dynamicToRelativeVolumeDict.setValue(c.sffz, 0.5), h.dynamicToRelativeVolumeDict.setValue(c.fz, 0.5), h.dynamicToRelativeVolumeDict.setValue(c.mp, 60 / 127), h.dynamicToRelativeVolumeDict.setValue(c.p, 28 / 127), h.dynamicToRelativeVolumeDict.setValue(c.pp, 12 / 127), h.dynamicToRelativeVolumeDict.setValue(c.ppp, 10 / 127), h.dynamicToRelativeVolumeDict.setValue(c.pppp, 7 / 127), h.dynamicToRelativeVolumeDict.setValue(c.ppppp, 5 / 127), h.dynamicToRelativeVolumeDict.setValue(c.pppppp, 4 / 127);
          }
          constructor(t3, e3, i3, s2, n2) {
            super(i3), this.parentMeasure = n2, this.dynamicEnum = c[t3.toLowerCase()], this.soundDynamic = e3, this.staffNumber = s2;
          }
          get ParentMultiExpression() {
            return this.multiExpression;
          }
          set ParentMultiExpression(t3) {
            this.multiExpression = t3;
          }
          get DynEnum() {
            return this.dynamicEnum;
          }
          set DynEnum(t3) {
            this.dynamicEnum = t3;
          }
          get SoundDynamic() {
            return this.soundDynamic;
          }
          set SoundDynamic(t3) {
            this.soundDynamic = t3;
          }
          get Placement() {
            return this.placement;
          }
          set Placement(t3) {
            this.placement = t3;
          }
          get StaffNumber() {
            return this.staffNumber;
          }
          set StaffNumber(t3) {
            this.staffNumber = t3;
          }
          get Length() {
            return Math.abs(this.length) < 1e-4 && (this.length = this.calculateLength()), this.length;
          }
          get MidiVolume() {
            return 127 * this.Volume;
          }
          get Volume() {
            return h.dynamicToRelativeVolumeDict.getValue(this.dynamicEnum);
          }
          static isInputStringInstantaneousDynamic(t3) {
            return !!t3 && h.isStringInStringList(h.listInstantaneousDynamics, t3);
          }
          getDynamicExpressionSymbol(t3) {
            switch (t3) {
              case "p":
                return r.DynamicExpressionSymbolEnum.p;
              case "f":
                return r.DynamicExpressionSymbolEnum.f;
              case "s":
                return r.DynamicExpressionSymbolEnum.s;
              case "z":
                return r.DynamicExpressionSymbolEnum.z;
              case "m":
                return r.DynamicExpressionSymbolEnum.m;
              case "r":
                return r.DynamicExpressionSymbolEnum.r;
              default:
                throw new o.InvalidEnumArgumentException("unknown DynamicExpressionSymbolEnum: " + t3);
            }
          }
          calculateLength() {
            return a.default.debug("[Andrea] instantaneousDynamicExpression: not implemented: calculateLength!"), 0;
          }
        }
        var c;
        e2.InstantaneousDynamicExpression = h, h.dynamicToRelativeVolumeDict = new l.Dictionary(), h.listInstantaneousDynamics = ["pppppp", "ppppp", "pppp", "ppp", "pp", "p", "ffffff", "fffff", "ffff", "fff", "ff", "f", "mf", "mp", "sf", "sff", "sp", "spp", "fp", "rf", "rfz", "sfz", "sffz", "fz"], function(t3) {
          t3[t3.pppppp = 0] = "pppppp", t3[t3.ppppp = 1] = "ppppp", t3[t3.pppp = 2] = "pppp", t3[t3.ppp = 3] = "ppp", t3[t3.pp = 4] = "pp", t3[t3.p = 5] = "p", t3[t3.mp = 6] = "mp", t3[t3.mf = 7] = "mf", t3[t3.f = 8] = "f", t3[t3.ff = 9] = "ff", t3[t3.fff = 10] = "fff", t3[t3.ffff = 11] = "ffff", t3[t3.fffff = 12] = "fffff", t3[t3.ffffff = 13] = "ffffff", t3[t3.sf = 14] = "sf", t3[t3.sff = 15] = "sff", t3[t3.sfp = 16] = "sfp", t3[t3.sfpp = 17] = "sfpp", t3[t3.fp = 18] = "fp", t3[t3.rf = 19] = "rf", t3[t3.rfz = 20] = "rfz", t3[t3.sfz = 21] = "sfz", t3[t3.sffz = 22] = "sffz", t3[t3.fz = 23] = "fz", t3[t3.other = 24] = "other";
        }(c || (e2.DynamicEnum = c = {})), h.staticConstructor();
      }, 9803: (t2, e2, i2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.MoodEnum = e2.MoodExpression = void 0;
        const s = i2(6362);
        class n extends s.AbstractExpression {
          constructor(t3, e3, i3) {
            super(e3), this.label = t3, this.staffNumber = i3, this.setMoodType();
          }
          static isInputStringMood(t3) {
            return !!t3 && (n.isStringInStringList(n.listMoodAffettuoso, t3) || n.isStringInStringList(n.listMoodAgitato, t3) || n.isStringInStringList(n.listMoodAnimato, t3) || n.isStringInStringList(n.listMoodAppassionato, t3) || n.isStringInStringList(n.listMoodBrillante, t3) || n.isStringInStringList(n.listMoodCantabile, t3) || n.isStringInStringList(n.listMoodDolce, t3) || n.isStringInStringList(n.listMoodEnergico, t3) || n.isStringInStringList(n.listMoodEroico, t3) || n.isStringInStringList(n.listMoodEspressivo, t3) || n.isStringInStringList(n.listMoodFurioso, t3) || n.isStringInStringList(n.listMoodGiocoso, t3) || n.isStringInStringList(n.listMoodGioioso, t3) || n.isStringInStringList(n.listMoodGrandioso, t3) || n.isStringInStringList(n.listMoodGrazioso, t3) || n.isStringInStringList(n.listMoodLacrimoso, t3) || n.isStringInStringList(n.listMoodLeggiero, t3) || n.isStringInStringList(n.listMoodMaestoso, t3) || n.isStringInStringList(n.listMoodMalinconico, t3) || n.isStringInStringList(n.listMoodMarcato, t3) || n.isStringInStringList(n.listMoodMarziale, t3) || n.isStringInStringList(n.listMoodMesto, t3) || n.isStringInStringList(n.listMoodMorendo, t3) || n.isStringInStringList(n.listMoodNobilmente, t3) || n.isStringInStringList(n.listMoodPatetico, t3) || n.isStringInStringList(n.listMoodPesante, t3) || n.isStringInStringList(n.listMoodSaltando, t3) || n.isStringInStringList(n.listMoodSautille, t3) || n.isStringInStringList(n.listMoodScherzando, t3) || n.isStringInStringList(n.listMoodSostenuto, t3) || n.isStringInStringList(n.listMoodSpiccato, t3) || n.isStringInStringList(n.listMoodTenerezza, t3) || n.isStringInStringList(n.listMoodTranquillamente, t3) || n.isStringInStringList(n.listMoodTrionfante, t3));
          }
          get Label() {
            return this.label;
          }
          set Label(t3) {
            this.label = t3;
          }
          get Mood() {
            return this.moodType;
          }
          set Mood(t3) {
            this.moodType = t3;
          }
          get StaffNumber() {
            return this.staffNumber;
          }
          set StaffNumber(t3) {
            this.staffNumber = t3;
          }
          get Placement() {
            return this.placement;
          }
          set Placement(t3) {
            this.placement = t3;
          }
          setMoodType() {
            n.isStringInStringList(n.listMoodAffettuoso, this.label) ? this.moodType = r.Affettuoso : n.isStringInStringList(n.listMoodAgitato, this.label) ? this.moodType = r.Agitato : n.isStringInStringList(n.listMoodAnimato, this.label) ? this.moodType = r.Animato : n.isStringInStringList(n.listMoodAppassionato, this.label) ? this.moodType = r.Appassionato : n.isStringInStringList(n.listMoodBrillante, this.label) ? this.moodType = r.Brillante : n.isStringInStringList(n.listMoodCantabile, this.label) ? this.moodType = r.Cantabile : n.isStringInStringList(n.listMoodDolce, this.label) ? this.moodType = r.Dolce : n.isStringInStringList(n.listMoodEnergico, this.label) ? this.moodType = r.Energico : n.isStringInStringList(n.listMoodEroico, this.label) ? this.moodType = r.Eroico : n.isStringInStringList(n.listMoodEspressivo, this.label) ? this.moodType = r.Espressivo : n.isStringInStringList(n.listMoodFurioso, this.label) ? this.moodType = r.Furioso : n.isStringInStringList(n.listMoodGiocoso, this.label) ? this.moodType = r.Giocoso : n.isStringInStringList(n.listMoodGioioso, this.label) ? this.moodType = r.Gioioso : n.isStringInStringList(n.listMoodGrandioso, this.label) ? this.moodType = r.Grandioso : n.isStringInStringList(n.listMoodGrazioso, this.label) ? this.moodType = r.Grazioso : n.isStringInStringList(n.listMoodLacrimoso, this.label) ? this.moodType = r.Lacrimoso : n.isStringInStringList(n.listMoodLeggiero, this.label) ? this.moodType = r.Leggiero : n.isStringInStringList(n.listMoodMaestoso, this.label) ? this.moodType = r.Maestoso : n.isStringInStringList(n.listMoodMalinconico, this.label) ? this.moodType = r.Malinconico : n.isStringInStringList(n.listMoodMarcato, this.label) ? this.moodType = r.Marcato : n.isStringInStringList(n.listMoodMarziale, this.label) ? this.moodType = r.Marziale : n.isStringInStringList(n.listMoodMesto, this.label) ? this.moodType = r.Mesto : n.isStringInStringList(n.listMoodMorendo, this.label) ? this.moodType = r.Morendo : n.isStringInStringList(n.listMoodNobilmente, this.label) ? this.moodType = r.Nobilmente : n.isStringInStringList(n.listMoodPatetico, this.label) ? this.moodType = r.Patetico : n.isStringInStringList(n.listMoodPesante, this.label) ? this.moodType = r.Pesante : n.isStringInStringList(n.listMoodSaltando, this.label) ? this.moodType = r.Saltando : n.isStringInStringList(n.listMoodSautille, this.label) ? this.moodType = r.Sautille : n.isStringInStringList(n.listMoodScherzando, this.label) ? this.moodType = r.Scherzando : n.isStringInStringList(n.listMoodSostenuto, this.label) ? this.moodType = r.Sostenuto : n.isStringInStringList(n.listMoodSpiccato, this.label) ? this.moodType = r.Spiccato : n.isStringInStringList(n.listMoodTenerezza, this.label) ? this.moodType = r.Tenerezza : n.isStringInStringList(n.listMoodTranquillamente, this.label) ? this.moodType = r.Tranquillamente : n.isStringInStringList(n.listMoodTrionfante, this.label) && (this.moodType = r.Trionfante);
          }
        }
        var r;
        e2.MoodExpression = n, n.listMoodAffettuoso = ["affettuoso"], n.listMoodAgitato = ["agitato"], n.listMoodAppassionato = ["appassionato"], n.listMoodAnimato = ["animato", "lively"], n.listMoodBrillante = ["brillante"], n.listMoodCantabile = ["cantabile"], n.listMoodDolce = ["dolce"], n.listMoodEnergico = ["energico"], n.listMoodEroico = ["eroico"], n.listMoodEspressivo = ["espressivo"], n.listMoodFurioso = ["furioso"], n.listMoodGiocoso = ["giocoso"], n.listMoodGioioso = ["gioioso"], n.listMoodLacrimoso = ["lacrimoso"], n.listMoodGrandioso = ["grandioso"], n.listMoodGrazioso = ["grazioso"], n.listMoodLeggiero = ["leggiero"], n.listMoodMaestoso = ["maestoso"], n.listMoodMalinconico = ["malinconico"], n.listMoodMarcato = ["marcato"], n.listMoodMarziale = ["marziale"], n.listMoodMesto = ["mesto"], n.listMoodMorendo = ["morendo"], n.listMoodNobilmente = ["nobilmente"], n.listMoodPatetico = ["patetico"], n.listMoodPesante = ["pesante"], n.listMoodSautille = ["sautille"], n.listMoodSaltando = ["saltando"], n.listMoodScherzando = ["scherzando"], n.listMoodSostenuto = ["sostenuto"], n.listMoodSpiccato = ["spiccato"], n.listMoodTenerezza = ["tenerezza"], n.listMoodTranquillamente = ["tranquillamente"], n.listMoodTrionfante = ["trionfante"], function(t3) {
          t3[t3.Affettuoso = 0] = "Affettuoso", t3[t3.Agitato = 1] = "Agitato", t3[t3.Appassionato = 2] = "Appassionato", t3[t3.Animato = 3] = "Animato", t3[t3.Brillante = 4] = "Brillante", t3[t3.Cantabile = 5] = "Cantabile", t3[t3.Dolce = 6] = "Dolce", t3[t3.Energico = 7] = "Energico", t3[t3.Eroico = 8] = "Eroico", t3[t3.Espressivo = 9] = "Espressivo", t3[t3.Furioso = 10] = "Furioso", t3[t3.Giocoso = 11] = "Giocoso", t3[t3.Gioioso = 12] = "Gioioso", t3[t3.Lacrimoso = 13] = "Lacrimoso", t3[t3.Grandioso = 14] = "Grandioso", t3[t3.Grazioso = 15] = "Grazioso", t3[t3.Leggiero = 16] = "Leggiero", t3[t3.Maestoso = 17] = "Maestoso", t3[t3.Malinconico = 18] = "Malinconico", t3[t3.Marcato = 19] = "Marcato", t3[t3.Marziale = 20] = "Marziale", t3[t3.Mesto = 21] = "Mesto", t3[t3.Morendo = 22] = "Morendo", t3[t3.Nobilmente = 23] = "Nobilmente", t3[t3.Patetico = 24] = "Patetico", t3[t3.Pesante = 25] = "Pesante", t3[t3.Sautille = 26] = "Sautille", t3[t3.Saltando = 27] = "Saltando", t3[t3.Scherzando = 28] = "Scherzando", t3[t3.Sostenuto = 29] = "Sostenuto", t3[t3.Spiccato = 30] = "Spiccato", t3[t3.Tenerezza = 31] = "Tenerezza", t3[t3.Tranquillamente = 32] = "Tranquillamente", t3[t3.Trionfante = 33] = "Trionfante", t3[t3.Vivace = 34] = "Vivace";
        }(r || (e2.MoodEnum = r = {}));
      }, 9834: function(t2, e2, i2) {
        "use strict";
        var s = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.CanvasVexFlowBackend = void 0;
        var n = s(i2(3206)).default.Flow;
        const r = i2(1902), o = i2(6014), a = i2(624), l = i2(1888);
        class h extends r.VexFlowBackend {
          constructor(t3) {
            super(), this.rules = t3;
          }
          getVexflowBackendType() {
            return n.Renderer.Backends.CANVAS;
          }
          getOSMDBackendType() {
            return a.BackendType.Canvas;
          }
          getCanvasSize() {
            var _a;
            return (_a = document.getElementById("osmdCanvasPage" + this.graphicalMusicPage.PageNumber)) == null ? void 0 : _a.offsetHeight;
          }
          initialize(t3, e3) {
            this.zoom = e3, this.canvas = document.createElement("canvas"), this.graphicalMusicPage || (this.graphicalMusicPage = new l.GraphicalMusicPage(void 0), this.graphicalMusicPage.PageNumber = 1), this.canvas.id = "osmdCanvasVexFlowBackendCanvas" + this.graphicalMusicPage.PageNumber, this.inner = document.createElement("div"), this.inner.id = "osmdCanvasPage" + this.graphicalMusicPage.PageNumber, this.inner.style.position = "relative", this.canvas.style.zIndex = "0", this.inner.appendChild(this.canvas), t3.appendChild(this.inner), this.renderer = new n.Renderer(this.canvas, this.getVexflowBackendType()), this.ctx = this.renderer.getContext();
          }
          initializeHeadless(t3 = 300, e3 = 300) {
            this.graphicalMusicPage || (this.graphicalMusicPage = new l.GraphicalMusicPage(void 0), this.graphicalMusicPage.PageNumber = 1), this.canvas = document.createElement("canvas"), this.canvas.width = t3, this.canvas.height = e3, this.renderer = new n.Renderer(this.canvas, this.getVexflowBackendType()), this.ctx = this.renderer.getContext();
          }
          getContext() {
            return this.ctx;
          }
          free() {
            this.canvas && (this.canvas.width = 0, this.canvas.height = 0, this.canvas.remove(), delete this.canvas, this.canvas = null);
          }
          clear() {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height), this.rules.PageBackgroundColor && (this.ctx.save(), this.ctx.setFillStyle(this.rules.PageBackgroundColor), this.zoom = 1, this.ctx.fillRect(0, 0, this.canvas.width / this.zoom, this.canvas.height / this.zoom), this.ctx.restore());
          }
          scale(t3) {
            this.ctx.scale(t3, t3);
          }
          translate(t3, e3) {
            this.CanvasRenderingCtx.translate(t3, e3);
          }
          renderText(t3, e3, i3, s2, n2, r2, a2 = void 0, l2 = void 0) {
            const h2 = this.CanvasRenderingCtx.font;
            this.CanvasRenderingCtx.save(), this.CanvasRenderingCtx.font = o.VexFlowConverter.font(t3, e3, i3, this.rules, l2), this.CanvasRenderingCtx.fillStyle = a2, this.CanvasRenderingCtx.strokeStyle = a2, this.CanvasRenderingCtx.fillText(s2, r2.x, r2.y + n2), this.CanvasRenderingCtx.restore(), this.CanvasRenderingCtx.font = h2;
          }
          renderRectangle(t3, e3, i3, s2 = 1) {
            const n2 = this.CanvasRenderingCtx.fillStyle;
            this.CanvasRenderingCtx.fillStyle = i3 || o.VexFlowConverter.style(e3), this.CanvasRenderingCtx.globalAlpha = s2, this.ctx.fillRect(t3.x, t3.y, t3.width, t3.height), this.CanvasRenderingCtx.fillStyle = n2, this.CanvasRenderingCtx.globalAlpha = 1;
          }
          renderLine(t3, e3, i3 = "#FF0000FF", s2 = 2, n2) {
            const r2 = this.CanvasRenderingCtx.strokeStyle;
            this.CanvasRenderingCtx.strokeStyle = i3, this.CanvasRenderingCtx.beginPath(), this.CanvasRenderingCtx.moveTo(t3.x, t3.y), this.CanvasRenderingCtx.lineTo(e3.x, e3.y), this.CanvasRenderingCtx.stroke(), this.CanvasRenderingCtx.strokeStyle = r2;
          }
          renderCurve(t3) {
            this.ctx.beginPath(), this.ctx.moveTo(t3[0].x, t3[0].y), this.ctx.bezierCurveTo(t3[1].x, t3[1].y, t3[2].x, t3[2].y, t3[3].x, t3[3].y), this.ctx.lineTo(t3[7].x, t3[7].y), this.ctx.bezierCurveTo(t3[6].x, t3[6].y, t3[5].x, t3[5].y, t3[4].x, t3[4].y), this.ctx.lineTo(t3[0].x, t3[0].y), this.ctx.closePath(), this.ctx.fill();
          }
          renderPath(t3, e3 = true, i3) {
            let s2;
            this.ctx.beginPath();
            for (const e4 of t3) s2 ? this.ctx.lineTo(e4.x, e4.y) : (this.ctx.moveTo(e4.x, e4.y), s2 = e4);
            this.ctx.closePath(), e3 ? this.ctx.fill() : this.ctx.stroke();
          }
          get CanvasRenderingCtx() {
            return this.ctx.vexFlowCanvasContext;
          }
        }
        e2.CanvasVexFlowBackend = h;
      }, 9924: function(t2, e2, i2) {
        "use strict";
        var s, n = this && this.__extends || (s = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var i3 in e3) e3.hasOwnProperty(i3) && (t3[i3] = e3[i3]);
        }, function(t3, e3) {
          function i3() {
            this.constructor = t3;
          }
          s(t3, e3), t3.prototype = null === e3 ? Object.create(e3) : (i3.prototype = e3.prototype, new i3());
        });
        Object.defineProperty(e2, "__esModule", { value: true });
        var r = function(t3) {
          function e3() {
            return null !== t3 && t3.apply(this, arguments) || this;
          }
          return n(e3, t3), e3;
        }(i2(4041).default);
        e2.default = r;
      }, 9990: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
      } }, e = {};
      function i(s) {
        var n = e[s];
        if (void 0 !== n) return n.exports;
        var r = e[s] = { exports: {} };
        return t[s].call(r.exports, r, r.exports, i), r.exports;
      }
      return i.d = (t2, e2) => {
        for (var s in e2) i.o(e2, s) && !i.o(t2, s) && Object.defineProperty(t2, s, { enumerable: true, get: e2[s] });
      }, i.g = function() {
        if ("object" == typeof globalThis) return globalThis;
        try {
          return this || new Function("return this")();
        } catch (t2) {
          if ("object" == typeof window) return window;
        }
      }(), i.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), i.r = (t2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
      }, i(8156);
    })());
  }
});
export default require_opensheetmusicdisplay_min();
/*! Bundled license information:

opensheetmusicdisplay/build/opensheetmusicdisplay.min.js:
  (*! For license information please see opensheetmusicdisplay.min.js.LICENSE.txt *)
*/
//# sourceMappingURL=opensheetmusicdisplay.js.map
