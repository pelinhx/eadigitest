{
  "version": 3,
  "sources": ["../../../../../../../node_modules/phylotree/phylotree.js"],
  "sourcesContent": ["(function() {\n\n  var d3_layout_phylotree_event_id = \"d3.layout.phylotree.event\",\n      d3_layout_phylotree_context_menu_id = \"d3_layout_phylotree_context_menu\";\n/** \n* @name newick_parser\n* @version 1.0\n* @exports phylotree\n* @namespace phylotree\n*/\n  d3.layout.newick_parser = function(nwk_str, bootstrap_values) {\n\n      var clade_stack = [];\n\n      function add_new_tree_level() {\n          var new_level = {\n              \"name\": null\n          };\n          var the_parent = clade_stack[clade_stack.length - 1];\n          if (!(\"children\" in the_parent)) {\n              the_parent[\"children\"] = [];\n          }\n          clade_stack.push(new_level);\n          the_parent[\"children\"].push(clade_stack[clade_stack.length - 1]);\n          clade_stack[clade_stack.length - 1][\"original_child_order\"] = the_parent[\"children\"].length;\n      }\n\n      function finish_node_definition() {\n          var this_node = clade_stack.pop();\n          if (bootstrap_values && 'children' in this_node) {\n              this_node[\"bootstrap_values\"] = current_node_name;\n          } else {\n              this_node[\"name\"] = current_node_name;\n          }\n          this_node[\"attribute\"] = current_node_attribute;\n          this_node[\"annotation\"] = current_node_annotation;\n          current_node_name = '';\n          current_node_attribute = '';\n          current_node_annotation = '';\n      }\n\n\n      function generate_error(location) {\n          return {\n              \"json\": null,\n              \"error\": \"Unexpected '\" + nwk_str[location] + \"' in '\" + nwk_str.substring(location - 20, location + 1) + \"[ERROR HERE]\" + nwk_str.substring(location + 1, location + 20) + \"'\"\n          };\n      }\n\n      var automaton_state = 0;\n      var current_node_name = '';\n      var current_node_attribute = '';\n      var current_node_annotation = '';\n      var quote_delimiter = null;\n      var name_quotes = {\n          \"'\": 1,\n          \"\\\"\": 1\n      };\n\n      var tree_json = {\n          \"name\": \"root\"\n      };\n      clade_stack.push(tree_json);\n\n      var space = /\\s/;\n\n      for (var char_index = 0; char_index < nwk_str.length; char_index++) {\n          try {\n              var current_char = nwk_str[char_index];\n              switch (automaton_state) {\n                  case 0:\n                      {\n                          // look for the first opening parenthesis\n                          if (current_char == '(') {\n                              add_new_tree_level();\n                              automaton_state = 1; // expecting node name\n                          }\n                          break;\n                      }\n                  case 1: // name\n                  case 3: // branch length\n                      {\n                          // reading name\n                          if (current_char == ':') {\n                              if (automaton_state == 3) {\n                                  return generate_error(char_index);\n                              }\n                              automaton_state = 3;\n                          } else if (current_char == ',' || current_char == ')') {\n                              try {\n                                  finish_node_definition();\n                                  automaton_state = 1;\n                                  if (current_char == ',') {\n                                      add_new_tree_level();\n                                  }\n                              } catch (e) {\n                                  return generate_error(char_index);\n                              }\n                          } else if (current_char == '(') {\n                              if (current_node_name.length > 0) {\n                                  return generate_error(char_index);\n                              } else {\n                                  add_new_tree_level();\n                              }\n                          } else if (current_char in name_quotes) {\n                              if (automaton_state == 1 && current_node_name.length === 0 && current_node_attribute.length === 0 && current_node_annotation.length === 0) {\n                                  automaton_state = 2;\n                                  quote_delimiter = current_char;\n                                  continue;\n                              }\n                              return generate_error(char_index);\n                          } else {\n                              if (current_char == '[') {\n                                  if (current_node_annotation.length) {\n                                      return generate_error(char_index);\n                                  } else {\n                                      automaton_state = 4;\n                                  }\n                              } else {\n                                  if (automaton_state == 3) {\n                                      current_node_attribute += current_char;\n                                  } else {\n                                      if (space.test(current_char)) {\n                                          continue;\n                                      }\n                                      current_node_name += current_char;\n                                  }\n                              }\n                          }\n\n                          break;\n                      }\n                  case 2:\n                      {\n                          if (current_char == quote_delimiter) {\n                              if (char_index < nwk_str.length - 1) {\n                                  if (nwk_str[char_index + 1] == quote_delimiter) {\n                                      char_index++;\n                                      current_node_name += quote_delimiter;\n                                      continue;\n                                  }\n                              }\n                              quote_delimiter = 0;\n                              automaton_state = 1;\n                              continue;\n                          } else {\n                              current_node_name += current_char;\n                          }\n                          break;\n                      }\n                  case 4:\n                      {\n                          if (current_char == ']') {\n                              automaton_state = 3;\n                          } else {\n                              if (current_char == '[') {\n                                  return generate_error(char_index);\n                              }\n                              current_node_annotation += current_char;\n                          }\n                          break;\n                      }\n              }\n          } catch (e) {\n              return generate_error(char_index);\n          }\n      }\n\n      if (clade_stack.length != 1) {\n          return generate_error(nwk_str.length - 1);\n      }\n\n      return {\n          \"json\": tree_json,\n          \"error\": null\n      };\n  };\n\n  d3.layout.phylotree = function(container) {\n\n      var item_selected = d3_phylotree_item_selected,\n          node_visible = d3_phylotree_node_visible,\n          node_notshown = d3_phylotree_node_notshown,\n          edge_visible = d3_phylotree_edge_visible,\n          item_tagged = d3_phylotree_item_tagged,\n          resize_svg = d3_phylotree_resize_svg,\n          is_leafnode = d3_phylotree_is_leafnode,\n          has_hidden_nodes = d3_phylotree_has_hidden_nodes,\n          is_node_collapsed = d3_phylotree_is_node_collapsed,\n          node_css_selectors = d3_phylotree_node_css_selectors,\n          edge_css_selectors = d3_phylotree_edge_css_selectors,\n          clade_css_selectors = d3_phylotree_clade_css_selectors,\n          newick_parser = d3_phylotree_newick_parser,\n          rootpath = d3_phylotree_rootpath,\n          rescale = d3_phylotree_rescale,\n          trigger_refresh = d3_phylotree_trigger_refresh,\n          trigger_count_update = d3_phylotree_trigger_count_update,\n          event_listener = d3_phylotree_event_listener,\n          add_event_listener = d3_phylotree_add_event_listener,\n          svg_translate = d3_phylotree_svg_translate,\n          svg_rotate = d3_phylotree_svg_rotate;\n\n      var self = {},\n          d3_hierarchy = d3.layout.hierarchy().sort(null).value(null),\n          size = [1, 1],\n          phylo_attr = [1, 1],\n          newick_string = null,\n          separation = function(_node, _previos) {\n              return 0;\n          },\n          node_span = function(_node) {\n              return 1;\n          },\n          relative_node_span = function(_node) {\n              return node_span(_node) / rescale_node_span;\n          },\n          def_branch_length_accessor = function(_node) {\n              if (\"attribute\" in _node && _node[\"attribute\"] && _node[\"attribute\"].length) {\n                  var bl = parseFloat(_node[\"attribute\"]);\n                  if (!isNaN(bl)) {\n                      return Math.max(0, bl);\n                  }\n              }\n              //console.log (\"No branch length for \", _node.name);\n              return undefined;\n          },\n          branch_length_accessor = def_branch_length_accessor,\n          def_node_label = function(_node) {\n              if (options['internal-names'] || d3_phylotree_is_leafnode(_node)) {\n                  return _node.name || \"\";\n              }\n              return \"\";\n          },\n          node_label = def_node_label,\n          length_attribute = null,\n          scale_attribute = \"y_scaled\",\n          needs_redraw = true,\n          svg = null,\n\n          options = {\n              'layout': 'left-to-right',\n              'branches': 'step',\n              'scaling': true,\n              'bootstrap': false,\n              'color-fill': true,\n              'internal-names': false,\n              'selectable': true,\n              'collapsible': true,\n              'left-right-spacing': 'fixed-step', //'fit-to-size',\n              'top-bottom-spacing': 'fixed-step',\n              'left-offset': 0,\n              'show-scale': 'top',\n              // currently not implemented to support any other positioning\n              'draw-size-bubbles': false,\n              'binary-selectable': false,\n              'is-radial': false,\n              'attribute-list': [],\n              'max-radius': 768,\n              'annular-limit': 0.38196601125010515,\n              'compression': 0.2,\n              'align-tips': false,\n              'maximim-per-node-spacing': 100,\n              'minimum-per-node-spacing': 2,\n              'maximim-per-level-spacing': 100,\n              'minimum-per-level-spacing': 10,\n              'node_circle_size': d3.functor(3),\n              'transitions': null\n          },\n\n          css_classes = {\n              'tree-container': 'phylotree-container',\n              'tree-scale-bar': 'tree-scale-bar',\n              'node': 'node',\n              'internal-node': 'internal-node',\n              'tagged-node': 'node-tagged',\n              'selected-node': 'node-selected',\n              'collapsed-node': 'node-collapsed',\n              'branch': 'branch',\n              'selected-branch': 'branch-selected',\n              'tagged-branch': 'branch-tagged',\n              'tree-selection-brush': 'tree-selection-brush',\n              'branch-tracer': 'branch-tracer',\n              'clade': 'clade',\n          },\n\n          nodes = [],\n          links = [],\n          partitions = [],\n          x_coord = function(d) {\n              return d.y;\n          },\n          y_coord = function(d) {\n              return d.x;\n          },\n          scales = [1, 1],\n          fixed_width = [15, 20],\n          font_size = 12,\n          scale_bar_font_size = 12,\n          offsets = [0, font_size],\n\n          draw_line = d3.svg.line()\n          .x(function(d) {\n              return x_coord(d);\n          })\n          .y(function(d) {\n              return y_coord(d);\n          })\n          .interpolate(\"step-before\"),\n\n          draw_arc = function(points) {\n              var start = radial_mapper(points[0].radius, points[0].angle),\n                  end = radial_mapper(points[0].radius, points[1].angle);\n\n              return \"M \" + x_coord(start) + \",\" + y_coord(start) + \" A \" + points[0].radius + \",\" + points[0].radius +\n                  \" 0,0, \" + (points[1].angle > points[0].angle ? 1 : 0) + \" \" + x_coord(end) + \",\" + y_coord(end) +\n                  \" L \" + x_coord(points[1]) + \",\" + y_coord(points[1]);\n\n          };\n\n      draw_branch = draw_line,\n          draw_scale_bar = null,\n          rescale_node_span = 1,\n          count_listener_handler = function () {},\n          layout_listener_handler = function () {},\n          node_styler = undefined,\n          edge_styler = undefined,\n          shown_font_size = font_size,\n          selection_attribute_name = 'selected',\n          popover_displayed = null,\n          right_most_leaf = 0,\n          label_width = 0,\n          radial_center = 0,\n          radius = 1,\n          radius_pad_for_bubbles = 0,\n          radial_mapper = function(r, a) {\n              return {\n                  'x': radial_center + r * Math.sin(a),\n                  'y': radial_center + r * Math.cos(a)\n              };\n          },\n          cartesian_mapper = function(x, y) {\n              return polar_to_cartesian(x - radial_center, y - radial_center);\n          },\n          cartesian_to_polar = function(node, radius, radial_root_offset) {\n\n              node.x *= scales[0];\n              node.y *= scales[1];\n              node.radius = radius * (node.y / size[1] + radial_root_offset);\n\n              if (!node.angle) {\n                  node.angle = 2 * Math.PI * node.x * scales[0] / size[0];\n              }\n\n              var radial = radial_mapper(node.radius, node.angle);\n\n              node.x = radial.x;\n              node.y = radial.y;\n\n              return node;\n          },\n          polar_to_cartesian = function(x, y) {\n              r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n              a = Math.atan2(y, x);\n              return [r, a];\n          };\n\n      self.container = container || \"body\";\n\n\n      /*--------------------------------------------------------------------------------------*/\n\n      phylotree.placenodes = function() {\n\n          var x = 0.0,\n              _extents = [\n                  [0, 0],\n                  [0, 0]\n              ],\n              last_node = null,\n              last_span = 0,\n              save_x = x,\n              save_span = last_span * 0.5;\n\n          var do_scaling = options[\"scaling\"],\n              undef_BL = false,\n              is_under_collapsed_parent = false,\n              max_depth = 1,\n              leaf_counter = 0;\n\n          function process_internal_node(a_node) {\n              var count_undefined = 0;\n              a_node.x = a_node.children.map(tree_layout).reduce(function(a, b) {\n                  if (typeof b == \"number\") return a + b;\n                  count_undefined += 1;\n                  return a;\n              }, 0.0);\n              if (count_undefined == a_node.children.length) {\n                  a_node.notshown = true;\n                  a_node.x = undefined;\n                  return;\n              } else {\n                  a_node.x /= (a_node.children.length - count_undefined);\n              }\n          }\n\n          function tree_layout(a_node) {\n              if (d3_phylotree_node_notshown(a_node)) {\n                  return undefined;\n              }\n\n              var is_leaf = d3_phylotree_is_leafnode(a_node);\n\n              a_node.text_angle = null;\n              a_node.text_align = null;\n              a_node.radius = null;\n              a_node.angle = null;\n\n\n              if (a_node['parent']) {\n                  if (do_scaling) {\n                      if (undef_BL) {\n                          return 0;\n                      }\n                      a_node.y = branch_length_accessor(a_node);\n                      if (typeof a_node.y === 'undefined') {\n                          undef_BL = true;\n                          return 0;\n                      }\n                      a_node.y += a_node.parent.y;\n                  } else {\n                      a_node.y = is_leaf ? max_depth : a_node.depth;\n                  }\n              } else {\n                  x = 0.0;\n                  _extents = [\n                      [0, 0],\n                      [0, 0]\n                  ];\n                  last_node = null;\n                  last_span = 0;\n                  a_node.y = 0.0;\n              }\n\n\n              if (is_leaf) {\n\n                  var _node_span = node_span(a_node) / rescale_node_span;\n\n                  x = a_node.x = x + separation(last_node, a_node) + (last_span + _node_span) * 0.5;\n\n                  _extents[1][1] = Math.max(_extents[1][1], a_node.y);\n                  _extents[1][0] = Math.min(_extents[1][0], a_node.y - _node_span * 0.5);\n\n                  if (is_under_collapsed_parent) {\n                      _extents[0][1] = Math.max(_extents[0][1], (save_x + (a_node.x - save_x) * options['compression'] + save_span) + (_node_span * 0.5 + separation(last_node, a_node)) * options['compression']);\n                  } else {\n                      _extents[0][1] = Math.max(_extents[0][1], x + _node_span * 0.5 + separation(last_node, a_node));\n                  }\n\n                  last_node = a_node;\n                  last_span = _node_span;\n\n              } else {\n\n                  var count_undefined = 0;\n                  if (d3_phylotree_is_node_collapsed(a_node) && !is_under_collapsed_parent) {\n\n                      save_x = x;\n                      save_span = last_span * 0.5;\n\n                      is_under_collapsed_parent = true;\n                      process_internal_node(a_node);\n                      is_under_collapsed_parent = false;\n                      if (typeof a_node.x === \"number\") {\n\n                          a_node.x = save_x + (a_node.x - save_x) * options['compression'] + save_span;\n                          a_node.collapsed = [\n                              [a_node.x, a_node.y]\n                          ];\n\n                          var map_me = function(n) {\n                              n.hidden = true;\n                              if (d3_phylotree_is_leafnode(n)) {\n                                  x = n.x = save_x + (n.x - save_x) * options['compression'] + save_span;\n                                  a_node.collapsed.push([n.x, n.y]);\n                              } else {\n                                  n.children.map(map_me);\n                              }\n                          };\n\n                          x = save_x;\n                          map_me(a_node);\n\n                          a_node.collapsed.splice(1, 0, [save_x, a_node.y]);\n                          a_node.collapsed.push([x, a_node.y]);\n                          a_node.collapsed.push([a_node.x, a_node.y]);\n                          a_node.hidden = false;\n                      }\n\n                  } else {\n                      process_internal_node(a_node);\n                  }\n              }\n\n              return a_node.x;\n          }\n\n          rescale_node_span = nodes.map(function(d) {\n              return node_span(d);\n          }).reduce(function(p, c) {\n              return Math.min(c, p || 1e200);\n          }, null) || 1;\n\n          nodes[0].x = tree_layout(nodes[0], do_scaling);\n\n          max_depth = d3.max(nodes, (function(n) {\n              return n.depth;\n          }));\n\n          if (do_scaling && undef_BL) {\n              do_scaling = false;\n              nodes[0].x = tree_layout(nodes[0]);\n          }\n\n          var at_least_one_dimension_fixed = false;\n\n          draw_scale_bar = options['show-scale'] && do_scaling;\n          // this is a hack so that phylotree.pad_height would return ruler spacing\n\n          if (options['top-bottom-spacing'] == 'fixed-step') {\n              offsets[1] = Math.max(font_size, -_extents[1][0] * fixed_width[0]);\n              size[0] = _extents[0][1] * fixed_width[0];\n              scales[0] = fixed_width[0];\n          } else {\n              scales[0] = (size[0] - phylotree.pad_height()) / _extents[0][1];\n              at_least_one_dimension_fixed = true;\n          }\n\n          shown_font_size = Math.min(font_size, scales[0]);\n\n          function do_lr() {\n\n              if (phylotree.radial() && at_least_one_dimension_fixed) {\n                  offsets[1] = 0;\n              }\n\n              if (options['left-right-spacing'] == 'fixed-step') {\n                  size[1] = max_depth * fixed_width[1];\n                  scales[1] = (size[1] - offsets[1] - options[\"left-offset\"]) / _extents[1][1];\n                  label_width = phylotree._label_width(shown_font_size);\n              } else {\n                  label_width = phylotree._label_width(shown_font_size);\n                  at_least_one_dimension_fixed = true;\n\n                  var available_width = size[1] - offsets[1] - options[\"left-offset\"];\n                  if (available_width * 0.5 < label_width) {\n                      shown_font_size *= available_width * 0.5 / label_width;\n                      label_width = available_width * 0.5;\n                  }\n\n                  scales[1] = (size[1] - offsets[1] - options[\"left-offset\"] - label_width) / _extents[1][1];\n\n              }\n          }\n\n          if (phylotree.radial()) { // map the nodes to polar coordinates\n\n              draw_branch = draw_arc;\n\n              var last_child_angle = null,\n                  last_circ_position = null,\n                  last_child_radius = null,\n                  min_radius = 0,\n                  zero_length = null,\n                  effective_span = _extents[0][1] * scales[0];\n\n              var compute_distance = function(r1, r2, a1, a2, annular_shift) {\n                  annular_shift = annular_shift || 0;\n                  return Math.sqrt((r2 - r1) * (r2 - r1) + 2 * (r1 + annular_shift) * (r2 + annular_shift) * (1 - Math.cos(a1 - a2)));\n              };\n\n              var max_r = 0;\n\n              nodes.forEach(function(d) {\n                  var my_circ_position = d.x * scales[0];\n                  d.angle = 2 * Math.PI * my_circ_position / effective_span;\n                  d.text_angle = (d.angle - Math.PI / 2);\n                  d.text_angle = d.text_angle > 0 && d.text_angle < Math.PI;\n                  d.text_align = d.text_angle ? \"end\" : \"start\";\n                  d.text_angle = (d.text_angle ? 180 : 0) + d.angle * 180 / Math.PI;\n                  d.radius = d.y * scales[1] / size[1];\n                  max_r = Math.max (max_r, d.radius);\n              });\n\n              do_lr();\n\n\n              var annular_shift = 0,\n                  do_tip_offset = phylotree.align_tips() && !options['draw-size-bubbles'];\n\n\n              nodes.forEach(function(d) {\n                  if (!d.children) {\n                      var my_circ_position = d.x * scales[0];\n                      if (last_child_angle !== null) {\n                          var required_spacing = my_circ_position - last_circ_position,\n                              radial_dist = compute_distance(d.radius, last_child_radius, d.angle, last_child_angle, annular_shift);\n\n                          var local_mr = radial_dist > 0 ? required_spacing / radial_dist : 10 * options['max-radius'];\n\n                          if (local_mr > options['max-radius']) { // adjust the annular shift\n                              var dd = required_spacing / options['max-radius'],\n                                  b = d.radius + last_child_radius,\n                                  c = d.radius * last_child_radius - (dd * dd - (last_child_radius - d.radius) * (last_child_radius - d.radius)) / 2 / (1 - Math.cos(last_child_angle - d.angle)),\n                                  st = Math.sqrt(b * b - 4 * c);\n\n                              annular_shift = Math.min(options['annular-limit'] * max_r, (-b + st) / 2);\n                              min_radius = options['max-radius'];\n                          } else {\n                              min_radius = local_mr;\n                          }\n                      }\n\n                      last_child_angle = d.angle;\n                      last_circ_position = my_circ_position;\n                      last_child_radius = d.radius;\n                  }\n              });\n\n              radius = Math.min(options['max-radius'], Math.max(effective_span / 2 / Math.PI, min_radius));\n\n              if (annular_shift) {\n                  var scaler = 1;\n\n                   nodes.forEach(function(d) {\n                      d.radius = d.y*scales[1]/size[1] + annular_shift;\n                      scaler = Math.max (scaler, d.radius);\n\n                  });\n\n\n                  if (scaler > 1) {\n                      scales[0] /= scaler;\n                      scales[1] /= scaler;\n                      annular_shift /= scaler;\n                  }\n               }\n\n\n              if (at_least_one_dimension_fixed) {\n                  radius = Math.min(radius, (Math.min(effective_span, _extents[1][1] * scales[1]) - label_width) * 0.5 - radius * annular_shift);\n              }\n\n              radial_center = radius_pad_for_bubbles = radius;\n\n              nodes.forEach(function(d) {\n\n                  cartesian_to_polar(d, radius, annular_shift);\n\n\n                  if (options['draw-size-bubbles']) {\n                      radius_pad_for_bubbles = Math.max(radius_pad_for_bubbles, d.radius + phylotree.node_bubble_size(d));\n                  } else {\n                      radius_pad_for_bubbles = Math.max(radius_pad_for_bubbles, d.radius);\n                  }\n\n\n                  if (d.collapsed) {\n                      d.collapsed = d.collapsed.map(function(p) {\n                          var z = {};\n                          z.x = p[0];\n                          z.y = p[1];\n                          z = cartesian_to_polar(z, radius, annular_shift);\n                          return [z.x, z.y];\n                      });\n\n                      var last_point = d.collapsed[1];\n                      d.collapsed = d.collapsed.filter(function(p, i) {\n                          if (i < 3 || i > d.collapsed.length - 4) return true;\n                          if (Math.sqrt(Math.pow(p[0] - last_point[0], 2) + Math.pow(p[1] - last_point[1], 2)) > 3) {\n                              last_point = p;\n                              return true;\n                          }\n                          return false;\n                      });\n                  }\n              });\n\n              size[0] = radial_center + radius;\n              size[1] = radial_center + radius;\n          } else {\n\n              do_lr();\n\n              draw_branch = draw_line;\n              right_most_leaf = 0;\n              nodes.forEach(function(d) {\n\n                  d.x *= scales[0];\n                  d.y *= scales[1];\n\n                  if (d3_phylotree_is_leafnode(d)) {\n                      right_most_leaf = Math.max(right_most_leaf, d.y + phylotree.node_bubble_size(d));\n                  }\n\n\n                  if (d.collapsed) {\n                      d.collapsed.map(function(p) {\n                          return [p[0] *= scales[0], p[1] *= scales[1]];\n                      });\n                      var last_x = d.collapsed[1][0];\n                      d.collapsed = d.collapsed.filter(function(p, i) {\n                          if (i < 3 || i > d.collapsed.length - 4) return true;\n                          if (p[0] - last_x > 3) {\n                              last_x = p[0];\n                              return true;\n                          }\n                          return false;\n                      });\n                  }\n              });\n          }\n\n          if (draw_scale_bar) {\n\n              var domain_limit,\n                  range_limit;\n\n              if (phylotree.radial()) {\n                  range_limit = Math.min(radius / 5, 50);\n                  domain_limit = Math.pow(10, Math.ceil(Math.log(_extents[1][1] * range_limit / radius) / Math.log(10)));\n                  range_limit = domain_limit * (radius / _extents[1][1]);\n                  if (range_limit < 30) {\n                      var stretch = Math.ceil(30 / range_limit);\n                      //console.log (stretch, domain_limit, radius, _extents[1][1], range_limit, domain_limit);\n                      range_limit *= stretch;\n                      domain_limit *= stretch;\n                  }\n\n              } else {\n                  domain_limit = _extents[1][1];\n                  range_limit = (size[1] - offsets[1] - options[\"left-offset\"]);\n              }\n\n\n\n              var scale = d3.scale.linear()\n                  .domain([0, domain_limit])\n                  .range([shown_font_size, shown_font_size + range_limit]),\n                  scaleTickFormatter = d3.format(\".2g\");\n              draw_scale_bar = d3.svg.axis().scale(scale).orient(\"top\")\n                  .tickFormat(function(d) {\n                      if (d === 0) {\n                          return \"\";\n                      }\n                      return scaleTickFormatter(d);\n                  });\n\n              if (phylotree.radial()) {\n                  draw_scale_bar.tickValues([domain_limit]);\n              } else {\n                  var my_ticks = scale.ticks();\n                  my_ticks = my_ticks.length > 1 ? my_ticks[1] : my_ticks[0];\n                  draw_scale_bar.ticks(Math.min(10, d3.round(range_limit / (shown_font_size * scaleTickFormatter(my_ticks).length * 0.8), 0)));\n              }\n\n\n              //_extentsconsole.log (scale.domain(), scale.range());\n          } else {\n              draw_scale_bar = null;\n          }\n\n          return phylotree;\n      };\n\n      function phylotree(nwk, bootstrap_values) {\n\n          d3_phylotree_add_event_listener();\n\n\n          var _node_data = (typeof nwk == \"string\") ? d3_phylotree_newick_parser(nwk, bootstrap_values) : nwk;\n          // this builds children and links;\n\n          if (!_node_data['json']) {\n              nodes = [];\n          } else {\n              newick_string = nwk;\n              nodes = d3_hierarchy.call(this, _node_data.json);\n          }\n\n          phylotree.placenodes();\n          links = phylotree.links(nodes);\n          return phylotree;\n      }\n\n      phylotree.size = function(attr) {\n          if (arguments.length) {\n            phylo_attr = attr;\n          }\n\n          if (options['top-bottom-spacing'] != 'fixed-step') {\n              size[0] = phylo_attr[0];\n          }\n          if (options['left-right-spacing'] != 'fixed-step') {\n              size[1] = phylo_attr[1];\n          }\n\n          if (!arguments.length) {\n            return size;\n          }\n\n          return phylotree;\n      };\n\n      phylotree.pad_height = function() {\n          if (draw_scale_bar) {\n              return scale_bar_font_size + 25;\n          }\n          return 0;\n      };\n\n      phylotree.pad_width = function() {\n          return offsets[1] + options[\"left-offset\"] + label_width;\n      };\n\n      phylotree.descendants = function(n) {\n          var desc = [];\n\n          function recurse_d(nd) {\n              if (d3_phylotree_is_leafnode(nd)) {\n                  desc.push(nd);\n              } else {\n                  nd.children.forEach(recurse_nd);\n              }\n          }\n          recurse_d(n);\n          return desc;\n      };\n\n      phylotree.collapse_node = function(n) {\n          if (!d3_phylotree_is_node_collapsed(n)) {\n              n.collapsed = true;\n          }\n      };\n\n      phylotree.separation = function(attr) {\n          if (!arguments.length) return separation;\n          separation = attr;\n          return phylotree;\n      };\n\n      phylotree.selection_label = function(attr) {\n          if (!arguments.length) return selection_attribute_name;\n          selection_attribute_name = attr;\n          phylotree.sync_edge_labels();\n          return phylotree;\n      };\n\n      phylotree.handle_node_click = function(node) {\n\n          var menu_object = d3.select(self.container).select(\"#\" + d3_layout_phylotree_context_menu_id);\n\n\n          if (menu_object.empty()) {\n              menu_object = d3.select(self.container).append(\"ul\")\n                  .attr(\"id\", d3_layout_phylotree_context_menu_id)\n                  .attr(\"class\", \"dropdown-menu\")\n                  .attr(\"role\", \"menu\");\n          }\n\n\n\n          menu_object.selectAll(\"li\").remove();\n          if (node) {\n              if (!d3_phylotree_is_leafnode(node)) {\n                  if (options[\"collapsible\"]) {\n                      menu_object.append(\"li\").append(\"a\")\n                          .attr(\"tabindex\", \"-1\")\n                          .text(d3_phylotree_is_node_collapsed(node) ? \"Expand Subtree\" : \"Collapse Subtree\")\n                          .on(\"click\", function(d) {\n                              menu_object.style(\"display\", \"none\");\n                              phylotree.toggle_collapse(node).update();\n                          });\n                      menu_object.append(\"li\").attr(\"class\", \"divider\");\n                      menu_object.append(\"li\").attr(\"class\", \"dropdown-header\").text(\"Toggle selection\");\n                  }\n\n                  if (options[\"selectable\"]) {\n                      menu_object.append(\"li\").append(\"a\")\n                          .attr(\"tabindex\", \"-1\")\n                          .text(\"All descendant branches\")\n                          .on(\"click\", function(d) {\n                              menu_object.style(\"display\", \"none\");\n                              phylotree.modify_selection(phylotree.select_all_descendants(node, true, true));\n                          });\n\n                      menu_object.append(\"li\").append(\"a\")\n                          .attr(\"tabindex\", \"-1\")\n                          .text(\"All terminal branches\")\n                          .on(\"click\", function(d) {\n                              menu_object.style(\"display\", \"none\");\n                              phylotree.modify_selection(phylotree.select_all_descendants(node, true, false));\n                          });\n\n                      menu_object.append(\"li\").append(\"a\")\n                          .attr(\"tabindex\", \"-1\")\n                          .text(\"All internal branches\")\n                          .on(\"click\", function(d) {\n                              menu_object.style(\"display\", \"none\");\n                              phylotree.modify_selection(phylotree.select_all_descendants(node, false, true));\n                          });\n                  }\n              }\n\n              if (node.parent) {\n\n                  if (options[\"selectable\"]) {\n                      menu_object.append(\"li\").append(\"a\")\n                          .attr(\"tabindex\", \"-1\")\n                          .text(\"Incident branch\")\n                          .on(\"click\", function(d) {\n                              menu_object.style(\"display\", \"none\");\n                              phylotree.modify_selection([node]);\n                          });\n\n                      menu_object.append(\"li\").append(\"a\")\n                          .attr(\"tabindex\", \"-1\")\n                          .text(\"Path to root\")\n                          .on(\"click\", function(d) {\n                              menu_object.style(\"display\", \"none\");\n                              phylotree.modify_selection(phylotree.path_to_root(node));\n                          });\n\n                      menu_object.append(\"li\").attr(\"class\", \"divider\");\n                  }\n\n                  menu_object.append(\"li\").append(\"a\")\n                      .attr(\"tabindex\", \"-1\")\n                      .text(\"Reroot on this node\")\n                      .on(\"click\", function(d) {\n                          menu_object.style(\"display\", \"none\");\n                          phylotree.reroot(node).update();\n                      });\n\n                  menu_object.append(\"li\").attr(\"class\", \"divider\");\n\n                  menu_object.append(\"li\").append(\"a\")\n                      .attr(\"tabindex\", \"-1\")\n                      .text(\"Hide this \" + (d3_phylotree_is_leafnode(node) ? \"node\" : \"subtree\"))\n                      .on(\"click\", function(d) {\n                          menu_object.style(\"display\", \"none\");\n                          phylotree.modify_selection([node], \"notshown\", true, true).update_has_hidden_nodes().update();\n                      });\n\n\n\n              }\n\n              if (d3_phylotree_has_hidden_nodes(node)) {\n                  menu_object.append(\"li\").append(\"a\")\n                      .attr(\"tabindex\", \"-1\")\n                      .text(\"Show all descendant nodes\")\n                      .on(\"click\", function(d) {\n                          menu_object.style(\"display\", \"none\");\n                          phylotree.modify_selection(phylotree.select_all_descendants(node, true, true), \"notshown\", true, true, \"false\").update_has_hidden_nodes().update();\n                      });\n              }\n\n              // now see if we need to add user defined menus\n\n              var has_user_elements = [];\n              if (\"menu_items\" in node && typeof node[\"menu_items\"] === \"object\") {\n                  node[\"menu_items\"].forEach(function(d) {\n                      if (d.length == 3) {\n                          if (!d[2] || d[2](node)) {\n                              has_user_elements.push([d[0], d[1]]);\n                          }\n                      }\n                  });\n              }\n\n              if (has_user_elements.length) {\n                  menu_object.append(\"li\").attr(\"class\", \"divider\");\n                  has_user_elements.forEach(function(d) {\n                      menu_object.append(\"li\").append(\"a\")\n                          .attr(\"tabindex\", \"-1\")\n                          .text(d[0](node))\n                          .on(\"click\", d[1]);\n                  });\n              }\n\n              var tree_container = $(self.container);\n              var coordinates = d3.mouse(tree_container[0]);\n              menu_object.style(\"position\", \"absolute\")\n                  .style(\"left\", \"\" + (coordinates[0]) + \"px\")\n                  .style(\"top\", \"\" + (coordinates[1]) + \"px\")\n                  .style(\"display\", \"block\");\n\n          } else {\n              menu_object.style(\"display\", \"none\");\n          }\n      };\n\n      phylotree.style_nodes = function(attr) {\n          if (!arguments.length) return node_styler;\n          node_styler = attr;\n          return phylotree;\n      };\n\n      phylotree.style_edges = function(attr) {\n          if (!arguments.length) return edge_styler;\n          edge_styler = attr.bind(this);\n          return phylotree;\n      };\n\n      phylotree.get_newick = function(annotator) {\n\n          function escape_string(nn) {\n\n              var need_escape = /[\\s\\[\\]\\,\\)\\(\\:\\'\\\"]/;\n              var enquote = need_escape.test(nn);\n              return enquote ? \"'\" + nn.replace(\"'\", \"''\") + \"'\" : nn;\n          }\n\n          function node_display(n) {\n              if (!d3_phylotree_is_leafnode(n)) {\n                  element_array.push(\"(\");\n                  n.children.forEach(function(d, i) {\n                      if (i) {\n                          element_array.push(\",\");\n                      }\n                      node_display(d);\n                  });\n                  element_array.push(\")\");\n              }\n\n              element_array.push(escape_string(node_label(n)));\n              element_array.push(annotator(n));\n\n              var bl = branch_length_accessor(n);\n              if (bl !== undefined) {\n                  element_array.push(\":\" + bl);\n              }\n\n          }\n\n          var element_array = [];\n          annotator = annotator || \"\";\n          node_display(nodes[0]);\n          return element_array.join(\"\");\n\n      };\n\n      phylotree.update_layout = function(new_json, do_hierarchy) {\n\n          if (do_hierarchy) {\n              nodes = d3_hierarchy.call(this, new_json);\n              nodes.forEach(function(d) {\n                  d.id = null;\n              });\n          }\n          phylotree.placenodes();\n          links = phylotree.links(nodes);\n          phylotree.sync_edge_labels();\n          d3_phylotree_trigger_layout (phylotree);\n      };\n\n      phylotree.sync_edge_labels = function() {\n\n          links.forEach(function(d) {\n              d[selection_attribute_name] = d.target[selection_attribute_name] || false;\n              d.tag = d.target.tag || false;\n          });\n\n          d3_phylotree_trigger_refresh(phylotree);\n\n          if (phylotree.count_handler()) {\n              var counts = {};\n              counts[selection_attribute_name] = links.reduce(function(p, c) {\n                  return p + (c[selection_attribute_name] ? 1 : 0);\n              }, 0);\n              counts['tagged'] = links.reduce(function(p, c) {\n                  return p + (d3_phylotree_item_tagged(c) ? 1 : 0);\n              }, 0);\n\n              d3_phylotree_trigger_count_update(phylotree,\n                  counts, phylotree.count_handler());\n          }\n\n      };\n\n      phylotree.modify_selection = function(callback, attr, place, skip_refresh, mode) {\n\n          attr = attr || selection_attribute_name;\n          mode = mode || \"toggle\";\n\n          if (options[\"selectable\"] && !options[\"binary-selectable\"]) {\n\n              var do_refresh = false;\n\n              if (typeof callback === 'function') {\n                  links.forEach(function(d) {\n                      var select_me = callback(d);\n                      d[attr] = d[attr] || false;\n                      if (d[attr] != select_me) {\n\n                          d[attr] = select_me;\n                          do_refresh = true;\n                          d.target[attr] = select_me;\n                      }\n                  });\n\n              } else {\n\n                  callback.forEach(function(d) {\n                      var new_value;\n                      switch (mode) {\n                          case 'true':\n                              new_value = true;\n                              break;\n                          case 'false':\n                              new_value = false;\n                              break;\n                          default:\n                              new_value = !d[attr];\n                              break;\n                      }\n\n                      if (d[attr] != new_value) {\n                          d[attr] = new_value;\n                          do_refresh = true;\n                      }\n\n                  });\n\n                  links.forEach(function(d) {\n                      d[attr] = d.target[attr];\n                  });\n\n\n              }\n\n              if (do_refresh) {\n                  if (!skip_refresh) {\n                      d3_phylotree_trigger_refresh(phylotree);\n                  }\n                  if (phylotree.count_handler()) {\n                      var counts = {};\n                      counts[attr] = links.reduce(function(p, c) {\n                          return p + (c[attr] ? 1 : 0);\n                      }, 0);\n                      d3_phylotree_trigger_count_update(phylotree,\n                          counts,\n                          phylotree.count_handler());\n                  }\n\n                  if (place) {\n                      phylotree.placenodes();\n                  }\n              }\n\n          } else if (options['binary-selectable']) {\n\n              if (typeof callback === 'function') {\n                  links.forEach(function(d) {\n\n                      var select_me = callback(d);\n                      d[attr] = d[attr] || false;\n\n\n                      if (d[attr] != select_me) {\n                          d[attr] = select_me;\n                          do_refresh = true;\n                          d.target[attr] = select_me;\n                      }\n\n                      options['attribute-list'].forEach(function(type) {\n                          if (type != attr && d[attr] === true) {\n                              d[type] = false;\n                              d.target[type] = false;\n                          }\n\n                      });\n\n                  });\n\n              } else {\n\n                  callback.forEach(function(d) {\n\n                      var new_value;\n                      new_value = !d[attr];\n\n                      if (d[attr] != new_value) {\n                          d[attr] = new_value;\n                          do_refresh = true;\n                      }\n\n                  });\n\n                  links.forEach(function(d) {\n                      d[attr] = d.target[attr];\n                      options['attribute-list'].forEach(function(type) {\n                          if (type != attr && d[attr] !== true) {\n                              d[type] = false;\n                              d.target[type] = false;\n                          }\n\n                      });\n\n                  });\n              }\n\n              if (do_refresh) {\n                  if (!skip_refresh) {\n                      d3_phylotree_trigger_refresh(phylotree);\n                  }\n                  if (phylotree.count_handler()) {\n                      var counts = {};\n                      counts[attr] = links.reduce(function(p, c) {\n                          return p + (c[attr] ? 1 : 0);\n                      }, 0);\n                      d3_phylotree_trigger_count_update(phylotree,\n                          counts,\n                          phylotree.count_handler());\n                  }\n\n                  if (place) {\n                      phylotree.placenodes();\n                  }\n              }\n\n          }\n\n          return phylotree;\n      };\n\n      phylotree.trigger_refresh = function() {\n        trigger_refresh(phylotree);\n      };\n\n      phylotree.is_leafnode = d3_phylotree_is_leafnode;\n\n      phylotree.radial = function(attr) {\n          if (!arguments.length) return options['is-radial'];\n          options['is-radial'] = attr;\n          return phylotree;\n      };\n\n      phylotree.align_tips = function(attr) {\n          if (!arguments.length) return options['align-tips'];\n          options['align-tips'] = attr;\n          return phylotree;\n      };\n\n      phylotree.node_bubble_size = function(node) {\n          return options['draw-size-bubbles'] ? relative_node_span(node) * scales[0] * 0.5 : 0;\n      };\n\n      phylotree.shift_tip = function(d) {\n\n          if (options['is-radial']) {\n              return [(d.text_align == \"end\" ? -1 : 1) * (radius_pad_for_bubbles - d.radius), 0];\n          }\n\n          return [right_most_leaf - d.screen_x, 0];\n      };\n\n\n      phylotree.get_selection = function() {\n          return nodes.filter(function(d) {\n              return d[selection_attribute_name];\n          });\n      };\n\n      phylotree.count_handler = function(attr) {\n          if (!arguments.length) return count_listener_handler;\n          count_listener_handler = attr;\n          return phylotree;\n      };\n      \n      phylotree.layout_handler = function(attr) {\n          if (!arguments.length) return layout_listener_handler;\n          layout_listener_handler = attr;\n          return phylotree;\n      }\n\n      phylotree.internal_label = function(callback, respect_existing) {\n          phylotree.clear_internal_nodes(respect_existing);\n\n          for (var i = nodes.length - 1; i >= 0; i--) {\n              var d = nodes[i];\n              if (!(d3_phylotree_is_leafnode(d) || d3_phylotree_item_selected(d, selection_attribute_name))) {\n                  d[selection_attribute_name] = callback(d.children);\n                  //console.log (d[selection_attribute_name]);\n              }\n          }\n\n          phylotree.modify_selection(function(d, callback) {\n              if (d3_phylotree_is_leafnode(d.target)) {\n                  return d.target[selection_attribute_name];\n              }\n              return d.target[selection_attribute_name];\n          });\n      };\n\n      phylotree.max_parsimony = function(respect_existing) {\n\n          phylotree.clear_internal_nodes(respect_existing);\n\n          function populate_mp_matrix(d) {\n              d.mp = [\n                  [0, 0], // score for parent selected / not selected\n                  [false, false]\n              ]; // selected or not\n\n              if (d3_phylotree_is_leafnode(d)) {\n                  d.mp[1][0] = d.mp[1][1] = d[selection_attribute_name] || false;\n                  d.mp[0][0] = d.mp[1][0] ? 1 : 0;\n                  d.mp[0][1] = 1 - d.mp[0][0];\n              } else {\n                  d.children.forEach(populate_mp_matrix);\n\n                  var s0 = d.children.reduce(function(p, n) {\n                      return n.mp[0][0] + p;\n                  }, 0);\n                  // cumulative children score if this node is 0\n                  var s1 = d.children.reduce(function(p, n) {\n                      return n.mp[0][1] + p;\n                  }, 0);\n                  // cumulative children score if this node is 1\n\n                  // parent = 0\n\n                  if (d[selection_attribute_name]) {\n                      // respect selected\n                      d.mp[0][0] = s1 + 1;\n                      d.mp[1][0] = true;\n                      d.mp[0][1] = s1;\n                      d.mp[1][1] = true;\n                  } else {\n                      if (s0 < s1 + 1) {\n                          d.mp[0][0] = s0;\n                          d.mp[1][0] = false;\n                      } else {\n                          d.mp[0][0] = s1 + 1;\n                          d.mp[1][0] = true;\n                      }\n\n                      // parent = 1\n\n                      if (s1 < s0 + 1) {\n                          d.mp[0][1] = s1;\n                          d.mp[1][1] = true;\n                      } else {\n                          d.mp[0][1] = s0 + 1;\n                          d.mp[1][1] = false;\n                      }\n                  }\n              }\n          }\n\n\n          populate_mp_matrix(nodes[0]);\n          nodes.forEach(function(d) {\n              if (d.parent) {\n                  d.mp = d.mp[1][d.parent.mp ? 1 : 0];\n              } else {\n                  d.mp = d.mp[1][d.mp[0][0] < d.mp[0][1] ? 0 : 1];\n              }\n          });\n\n          phylotree.modify_selection(function(d, callback) {\n              if (d3_phylotree_is_leafnode(d.target)) {\n                  return d.target[selection_attribute_name];\n              }\n              return d.target.mp;\n          });\n\n      };\n\n      phylotree.node_span = function(attr) {\n          if (!arguments.length) return node_span;\n          if (typeof attr == \"string\" && attr == 'equal') {\n              node_span = function(d) {\n                  return 1;\n              };\n          } else {\n              node_span = attr;\n          }\n          return phylotree;\n      };\n\n      /*phylotree.reroot = function (node) {\n\n      }*/\n\n      phylotree.resort_children = function(comparator) {\n          function sort_children(node) {\n              if (node.children) {\n                  for (var k = 0; k < node.children.length; k++) {\n                      sort_children(node.children[k]);\n                  }\n                  node.children.sort(comparator);\n              }\n          }\n\n          sort_children(nodes[0]);\n          phylotree.update_layout(nodes);\n          phylotree.update();\n      };\n\n      phylotree.graft_a_node = function(graft_at, new_child, new_parent, lengths) {\n          if (graft_at.parent) {\n              var node_index = nodes.indexOf(graft_at);\n              if (node_index >= 0) {\n                  var parent_index = graft_at.parent.children.indexOf(graft_at);\n\n                  var new_split = {\n                          \"name\": new_parent,\n                          \"parent\": graft_at.parent,\n                          \"attribute\": lengths ? lengths[2] : null,\n                          \"original_child_order\": graft_at[\"original_child_order\"]\n                      },\n\n                      new_node = {\n                          \"name\": new_child,\n                          \"parent\": new_split,\n                          \"attribute\": lengths ? lengths[1] : null,\n                          \"original_child_order\": 2\n                      };\n\n                  new_split[\"children\"] = [graft_at, new_node];\n                  graft_at[\"parent\"].children[parent_index] = new_split;\n                  graft_at.parent = new_split;\n                  graft_at[\"attribute\"] = lengths ? lengths[0] : null;\n                  graft_at[\"original_child_order\"] = 1;\n\n\n                  phylotree.update_layout(nodes[0], true);\n              }\n          }\n          return phylotree;\n      };\n\n      phylotree.delete_a_node = function(index) {\n          if (typeof index != \"number\") {\n              return phylotree.delete_a_node(nodes.indexOf(index));\n          }\n\n          if (index > 0 && index < nodes.length) {\n              var node = nodes[index];\n              if (node.parent) { // can only delete nodes that are not the root\n                  var delete_me_idx = node.parent.children.indexOf(node);\n\n                  //console.log (delete_me_idx, node, index);\n\n                  if (delete_me_idx >= 0) {\n                      nodes.splice(index, 1);\n                      if (node.children) {\n                          node.children.forEach(function(d) {\n                              d['original_child_order'] = node.parent.children.length;\n                              node.parent.children.push(d);\n                              d.parent = node.parent;\n                          });\n                      }\n\n                      if (node.parent.children.length > 2) {\n                          node.parent.children.splice(delete_me_idx, 1);\n                      } else {\n                          if (node.parent.parent) {\n                              node.parent.parent.children[node.parent.parent.children.indexOf(node.parent)] = node.parent.children[1 - delete_me_idx];\n                              node.parent.children[1 - delete_me_idx].parent = node.parent.parent;\n                              nodes.splice(nodes.indexOf(node.parent), 1);\n                          } else {\n                              nodes.splice(0, 1);\n                              nodes[0].parent = null;\n                              delete nodes[0]['attribute'];\n                              delete nodes[0]['annotation'];\n                              delete nodes[0]['original_child_order'];\n                              nodes[0].name = 'root';\n                          }\n                      }\n                      phylotree.update_layout(nodes[0], true);\n\n                  }\n              }\n          }\n          return phylotree;\n      };\n\n\n      phylotree.traverse_and_compute = function(callback, traversal_type) {\n          traversal_type = traversal_type || \"post-order\";\n\n          function post_order(node) {\n              if (node.children) {\n                  for (var k = 0; k < node.children.length; k++) {\n                      post_order(node.children[k]);\n                  }\n              }\n              callback(node);\n          }\n\n          if (traversal_type == 'post-order') {\n              traversal_type = post_order;\n          }\n\n          traversal_type(nodes[0]);\n      };\n\n      phylotree.reroot = function(node) {\n          if (node.parent) {\n\n              new_json = {\n                  'name': 'new_root',\n                  '__mapped_bl': undefined,\n                  'children': [node]\n              };\n\n              nodes.forEach(function(n) {\n                  n.__mapped_bl = branch_length_accessor(n);\n              });\n              phylotree.branch_length(function(n) {\n                  return n.__mapped_bl;\n              });\n\n              var remove_me = node,\n                  current_node = node.parent,\n                  parent_length = current_node.__mapped_bl,\n                  stashed_bl = _.noop();\n\n\n              if (current_node.parent) {\n                  node.__mapped_bl = node.__mapped_bl === undefined ? undefined : node.__mapped_bl * 0.5;\n                  stashed_bl = current_node.__mapped_bl;\n                  current_node.__mapped_bl = node.__mapped_bl;\n                  new_json.children.push(current_node);\n                  while (current_node.parent) {\n                      var remove_idx = current_node.children.indexOf(remove_me);\n                      if (current_node.parent.parent) {\n                          current_node.children.splice(remove_idx, 1, current_node.parent);\n                      } else {\n                          current_node.children.splice(remove_idx, 1);\n                      }\n\n                      var t = current_node.parent.__mapped_bl;\n                      if (t !== undefined) {\n                          current_node.parent.__mapped_bl = stashed_bl;\n                          stashed_bl = t;\n                      }\n                      remove_me = current_node;\n                      current_node = current_node.parent;\n                  }\n                  var remove_idx = current_node.children.indexOf(remove_me);\n                  current_node.children.splice(remove_idx, 1);\n              } else {\n                  var remove_idx = current_node.children.indexOf(remove_me);\n                  current_node.children.splice(remove_idx, 1);\n                  remove_me = new_json;\n\n              }\n\n              // current_node is now old root, and remove_me is the root child we came up\n              // the tree through\n\n              if (current_node.children.length == 1) {\n                  if (stashed_bl) {\n                      current_node.children[0].__mapped_bl += stashed_bl;\n                  }\n                  remove_me.children = remove_me.children.concat(current_node.children);\n              } else {\n                  var new_node = {\n                      \"name\": \"__reroot_top_clade\"\n                  };\n                  new_node.__mapped_bl = stashed_bl;\n                  new_node.children = current_node.children.map(function(n) {\n                      return n;\n                  });\n                  remove_me.children.push(new_node);\n\n              }\n\n              phylotree.update_layout(new_json, true);\n\n          }\n          return phylotree;\n\n      };\n\n      phylotree.update_key_name = function(old_key, new_key) {\n          nodes.forEach(function(n) {\n              if (old_key in n) {\n                  if (new_key) {\n                      n[new_key] = n[old_key];\n                  }\n                  delete n[old_key];\n              }\n          });\n          phylotree.sync_edge_labels();\n      };\n\n      phylotree.spacing_x = function(attr, skip_render) {\n          if (!arguments.length) return fixed_width[0];\n          if (fixed_width[0] != attr && attr >= options['minimum-per-node-spacing'] && attr <= options['maximim-per-node-spacing']) {\n              fixed_width[0] = attr;\n              if (!skip_render) {\n                  phylotree.placenodes();\n              }\n          }\n          return phylotree;\n      };\n\n      phylotree.spacing_y = function(attr, skip_render) {\n          if (!arguments.length) return fixed_width[1];\n          if (fixed_width[1] != attr && attr >= options['minimum-per-level-spacing'] && attr <= options['maximim-per-level-spacing']) {\n              fixed_width[1] = attr;\n              if (!skip_render) {\n                  phylotree.placenodes();\n              }\n          }\n          return phylotree;\n      };\n\n      phylotree.toggle_collapse = function(node) {\n\n          if (node.collapsed) {\n              node.collapsed = false;\n\n              var unhide = function (n) {\n                  if (!d3_phylotree_is_leafnode(n)) {\n                      if (!n.collapsed) {\n                          n.children.forEach(unhide);\n                      }\n                  }\n                  n.hidden = false;\n              };\n\n              unhide(node);\n\n          } else {\n              node.collapsed = true;\n          }\n\n          phylotree.placenodes();\n          return phylotree;\n      };\n\n      phylotree.update_has_hidden_nodes = function() {\n\n          for (k = nodes.length - 1; k >= 0; k -= 1) {\n              if (d3_phylotree_is_leafnode(nodes[k])) {\n                  nodes[k].has_hidden_nodes = nodes[k].notshown;\n              } else {\n                  nodes[k].has_hidden_nodes = nodes[k].children.reduce(function(p, c) {\n                      return c.notshown || p;\n                  }, false);\n              }\n          }\n\n          return phylotree;\n      };\n\n      phylotree.branch_length = function(attr) {\n          if (!arguments.length) return branch_length_accessor;\n          branch_length_accessor = attr ? attr : def_branch_length_accessor;\n          return phylotree;\n      };\n\n      phylotree.branch_name = function(attr) {\n          if (!arguments.length) return node_label;\n          node_label = attr ? attr : def_node_label;\n          return phylotree;\n      };\n\n      phylotree.length = function(attr) {\n          if (!arguments.length) return default_length_attribute;\n          if (default_length_attribute != attr) {\n              default_length_attribute = attr;\n              needs_redraw = true;\n          }\n          return phylotree;\n      };\n\n      phylotree._label_width = function(_font_size) {\n          _font_size = _font_size || shown_font_size;\n\n          var width = 0;\n\n          nodes.filter(d3_phylotree_node_visible).forEach(function(node) {\n              var node_width = node_label(node).length * _font_size * 0.6;\n              if (node.angle !== null) {\n                  node_width *= Math.max(Math.abs(Math.cos(node.angle)), Math.abs(Math.sin(node.angle)));\n              }\n              width = Math.max(node_width, width);\n          });\n\n          return width;\n      };\n\n      phylotree.font_size = function(attr) {\n          if (!arguments.length) return font_size;\n          font_size = attr === undefined ? 12 : attr;\n          return phylotree;\n      };\n\n      phylotree.scale_bar_font_size = function(attr) {\n          if (!arguments.length) return scale_bar_font_size;\n          scale_bar_font_size = attr === undefined ? 12 : attr;\n          return phylotree;\n      };\n\n\n      phylotree.node_circle_size = function(attr, attr2) {\n          if (!arguments.length) return options['node_circle_size'];\n          options['node_circle_size'] = d3.functor(attr === undefined ? 3 : attr);\n          return phylotree;\n      };\n\n      phylotree.needs_redraw = function() {\n          return needs_redraw;\n      };\n\n      phylotree.svg = function(svg_element) {\n          if (!arguments.length) return svg_element;\n          if (svg !== svg_element) {\n              svg = svg_element;\n              svg.selectAll(\"*\").remove();\n              svg_defs = svg.append(\"defs\");\n              d3.select(self.container).on(\"click\", function(d) {\n                  phylotree.handle_node_click(null);\n              }, true);\n          }\n          return phylotree;\n      };\n\n      phylotree.css = function(opt) {\n\n          if (arguments.length === 0) return css_classes;\n          if (arguments.length > 2) {\n              var arg = {};\n              arg[opt[0]] = opt[1];\n              return phylotree.css(arg);\n          }\n\n          for (var key in css_classes) {\n              if (key in opt && opt[key] != css_classes[key]) {\n                  css_classes[key] = opt[key];\n              }\n          }\n          return phylotree;\n      };\n\n      phylotree.options = function(opt, run_update) {\n          if (!arguments.length) return options;\n\n          var do_update = false;\n\n          for (var key in options) {\n              if (key in opt && opt[key] != options[key]) {\n                  do_update = true;\n                  options[key] = opt[key];\n                  switch (key) {\n                      case 'branches':\n                          {\n                              switch (opt[key]) {\n                                  case 'straight':\n                                      {\n                                          draw_branch.interpolate('linear');\n                                          break;\n                                      }\n                                  default:\n                                      {\n                                          draw_branch.interpolate('step-before');\n                                          break;\n                                      }\n                              }\n                          }\n                          break;\n                  }\n              }\n          }\n\n          if (run_update && do_update) {\n              phylotree.layout();\n          }\n\n          return phylotree;\n      };\n\n      phylotree.transitions = function(arg) {\n          if (arg !== undefined) {\n              return arg;\n          }\n          if (options['transitions'] !== null) {\n              return options['transitions'];\n          }\n\n          return nodes.length <= 300;\n      };\n\n      phylotree.update = function(transitions) {\n\n          if (!phylotree.svg)\n              return phylotree;\n\n          transitions = phylotree.transitions(transitions);\n\n          var node_id = 0;\n\n          var enclosure = svg.selectAll(\".\" + css_classes[\"tree-container\"]).data([0]);\n\n          enclosure.enter().append(\"g\")\n              .attr(\"class\", css_classes[\"tree-container\"]);\n\n          enclosure.attr(\"transform\", function(d) {\n              return d3_phylotree_svg_translate([offsets[1] + options[\"left-offset\"], phylotree.pad_height()]);\n          });\n\n          if (draw_scale_bar) {\n              var scale_bar = svg.selectAll(\".\" + css_classes[\"tree-scale-bar\"]).data([0]);\n              scale_bar.enter().append(\"g\");\n              scale_bar.attr(\"class\", css_classes[\"tree-scale-bar\"])\n                  .style(\"font-size\", \"\" + scale_bar_font_size)\n                  .attr(\"transform\", function(d) {\n                      return d3_phylotree_svg_translate([offsets[1] + options[\"left-offset\"], phylotree.pad_height() - 10]);\n                  })\n                  .call(draw_scale_bar);\n              scale_bar.selectAll(\"text\")\n                  .style(\"text-anchor\", \"end\");\n          } else {\n              svg.selectAll(\".\" + css_classes[\"tree-scale-bar\"]).remove();\n          }\n\n\n\n\n          var drawn_links = enclosure.selectAll(d3_phylotree_edge_css_selectors(css_classes))\n              .data(links.filter(d3_phylotree_edge_visible), function(d) {\n                  return d.target.id || (d.target.id = ++node_id);\n              });\n\n          if (transitions) {\n              drawn_links.exit().transition().remove();\n          } else {\n              drawn_links.exit().remove();\n          }\n          drawn_links.enter().insert(\"path\", \":first-child\");\n          drawn_links.each(function(d) {\n              phylotree.draw_edge(this, d, transitions);\n          });\n\n\n          var collapsed_clades = enclosure.selectAll(d3_phylotree_clade_css_selectors(css_classes))\n              .data(nodes.filter(d3_phylotree_is_node_collapsed), function(d) {\n                  return d.id || (d.id = ++node_id);\n              });\n\n\n          var spline = function() {};\n          var spline_f = _.noop();\n\n          // Collapse radial differently\n          if (phylotree.radial()) {\n\n              // create interpolator\n              var interpolator = function(points) {\n\n                  points.pop();\n\n                  var center_node = points.shift();\n                  var path_string = points.join(\"L\");\n\n                  var polar_coords = cartesian_mapper(center_node[0], center_node[1]);\n\n                  var first_angle = cartesian_mapper(points[0][0], points[0][1])[1];\n                  var last_angle = cartesian_mapper(points[points.length - 1][0], points[points.length - 1][1])[1];\n\n                  var connecting_arc = \"A \" + polar_coords[0] + \" \" + polar_coords[0] + \" \" + (first_angle > last_angle ? 1 : 0) + \" 0 0 \" + points[0].join(',');\n\n                  return path_string + connecting_arc;\n\n              };\n\n              spline = d3.svg.line()\n                  .interpolate(interpolator)\n                  .y(function(d) {\n                      return d[0];\n                  })\n                  .x(function(d) {\n                      return d[1];\n                  });\n\n              spline_f = function(coord, i, d, init_0, init_1) {\n                  if (i) {\n                      return [d.screen_y + (coord[0] - init_0) / 50, d.screen_x + (coord[1] - init_1) / 50];\n                  } else {\n                      return [d.screen_y, d.screen_x];\n                  }\n              };\n\n          } else {\n\n              spline = d3.svg.line()\n                  .interpolate(\"basis\")\n                  .y(function(d) {\n                      return d[0];\n                  })\n                  .x(function(d) {\n                      return d[1];\n                  });\n\n              spline_f = function(coord, i, d, init_0, init_1) {\n                  if (i) {\n                      return [d.screen_y + (coord[0] - init_0) / 50, d.screen_x + (coord[1] - init_1) / 50];\n                  } else {\n                      return [d.screen_y, d.screen_x];\n                  }\n              };\n          }\n\n          var cce = collapsed_clades.exit().each(function(d) {\n              d.collapsed_clade = null;\n          }).remove();\n\n          if (transitions) {\n              collapsed_clades.enter().insert(\"path\", \":first-child\");\n              collapsed_clades.attr(\"class\", css_classes[\"clade\"])\n                  .attr(\"d\", function(d) {\n                      if (d.collapsed_clade) {\n                          return d.collapsed_clade;\n                      }\n                      var init_0 = d.collapsed[0][0];\n                      var init_1 = d.collapsed[0][1];\n                      //#1 return spline(d.collapsed.map(spline_f, d, init_0, init_1));\n                      return spline(d.collapsed.map(function (coord, i) {\n                          return spline_f(coord, i, d, init_0, init_1);\n                      }));\n                  })\n                  .transition()\n                  .attr(\"d\", function(d) {\n                      return d.collapsed_clade = spline(d.collapsed);\n                  });\n          } else {\n              collapsed_clades.enter().insert(\"path\", \":first-child\");\n              collapsed_clades.attr(\"class\", css_classes[\"clade\"])\n                  .attr(\"d\", function (d) {\n                      return d.collapsed_clade = spline(d.collapsed);\n                  });\n          }\n\n\n          var drawn_nodes = enclosure.selectAll(d3_phylotree_node_css_selectors(css_classes))\n              .data(nodes.filter(d3_phylotree_node_visible), function(d) {\n                  return d.id || (d.id = ++node_id);\n              });\n\n          var append_here = drawn_nodes.enter().append(\"g\");\n\n          if (transitions) {\n              //drawn_nodes.exit().transition ().style (\"opacity\", \"0\").remove();\n              drawn_nodes.exit().transition().remove();\n              drawn_nodes = drawn_nodes.attr(\"transform\", function(d) {\n                  if(!_.isUndefined(d.screen_x) && !_.isUndefined(d.screen_y)) {\n                    return \"translate(\" + d.screen_x + \",\" + d.screen_y + \")\";\n                  }\n              }).transition();\n          } else {\n              drawn_nodes.exit().remove();\n          }\n\n          drawn_nodes.attr(\"transform\", function(d) {\n                  d.screen_x = x_coord(d);\n                  d.screen_y = y_coord(d);\n                  return d3_phylotree_svg_translate([d.screen_x, d.screen_y]);\n              })\n              .attr(\"class\", phylotree.reclass_node).each(function(d) {\n                  phylotree.draw_node(this, d, transitions);\n              });\n\n          var sizes = d3_phylotree_resize_svg(phylotree, svg, transitions);\n\n          var brush = enclosure.selectAll(\".\" + css_classes[\"tree-selection-brush\"]).data([0]);\n          brush.enter().insert(\"g\", \":first-child\")\n              .attr(\"class\", css_classes[\"tree-selection-brush\"]);\n\n          var brush_object = d3.svg.brush()\n              .x(d3.scale.identity().domain([0, sizes[0] - offsets[1] - options[\"left-offset\"]]))\n              .y(d3.scale.identity().domain([0, sizes[1] - phylotree.pad_height()]))\n              .on(\"brush\", function() {\n                  var extent = d3.event.target.extent(),\n                      shown_links = links.filter(d3_phylotree_edge_visible),\n                      selected_links = shown_links.filter(function(d, i) {\n\n                          return d.source.screen_x >= extent[0][0] && d.source.screen_x <= extent[1][0] && d.source.screen_y >= extent[0][1] && d.source.screen_y <= extent[1][1] && d.target.screen_x >= extent[0][0] && d.target.screen_x <= extent[1][0] && d.target.screen_y >= extent[0][1] && d.target.screen_y <= extent[1][1];\n                      }).map(function(d) {\n                          return d.target;\n                      });\n\n                  phylotree.modify_selection(links.map(function(d) {\n                      return d.target;\n                  }), \"tag\", false, selected_links.length > 0, \"false\");\n                  phylotree.modify_selection(selected_links, \"tag\", false, false, \"true\");\n              }).\n          on(\"brushend\", function() {\n              brush.call(d3.event.target.clear());\n          });\n\n          brush.call(brush_object);\n\n          return phylotree;\n      };\n\n      phylotree.css_classes = function() {\n          return css_classes;\n      };\n\n      phylotree.layout = function(transitions) {\n          if (svg) {\n              svg.selectAll(\".\" + css_classes[\"tree-container\"] + \",.\" + css_classes[\"tree-scale-bar\"] + \",.\" + css_classes[\"tree-selection-brush\"]).remove();\n              return phylotree.update(transitions);\n          }\n          return phylotree;\n      };\n\n      phylotree.refresh = function() {\n          var self = this;\n\n          var enclosure = svg.selectAll(\".\" + css_classes[\"tree-container\"]);\n\n          var edges = enclosure.selectAll(d3_phylotree_edge_css_selectors(css_classes));\n          edges.attr(\"class\", phylotree.reclass_edge);\n\n          if (edge_styler) {\n              edges.each(function(d) {\n                  edge_styler(d3.select(this), d);\n              });\n          }\n\n          var nodes = enclosure.selectAll(d3_phylotree_node_css_selectors(css_classes));\n          nodes.attr(\"class\", phylotree.reclass_node);\n\n          if (node_styler) {\n              nodes.each(function(d) {\n                  node_styler(d3.select(this), d);\n              });\n          }\n      };\n\n      phylotree.reclass_edge = function(edge) {\n          var class_var = css_classes[\"branch\"];\n          if (d3_phylotree_item_tagged(edge)) {\n              class_var += \" \" + css_classes[\"tagged-branch\"];\n          }\n          if (d3_phylotree_item_selected(edge, selection_attribute_name)) {\n              class_var += \" \" + css_classes[\"selected-branch\"];\n          }\n          return class_var;\n      };\n\n      phylotree.reclass_node = function(node) {\n          var class_var = css_classes[d3_phylotree_is_leafnode(node) ? \"node\" : \"internal-node\"];\n\n          if (d3_phylotree_item_tagged(node)) {\n              class_var += \" \" + css_classes[\"tagged-node\"];\n          }\n\n          if (d3_phylotree_item_selected(node, selection_attribute_name)) {\n              class_var += \" \" + css_classes[\"selected-node\"];\n          }\n\n          if (d3_phylotree_is_node_collapsed(node) || d3_phylotree_has_hidden_nodes(node)) {\n              class_var += \" \" + css_classes['collapsed-node'];\n          }\n          return class_var;\n      };\n\n      phylotree.select_all_descendants = function(node, terminal, internal) {\n          var selection = [];\n\n          function sel(d) {\n              if (d3_phylotree_is_leafnode(d)) {\n                  if (terminal) {\n                      if (d != node)\n                          selection.push(d);\n                  }\n              } else {\n                  if (internal) {\n                      if (d != node)\n                          selection.push(d);\n                  }\n                  d.children.forEach(sel);\n              }\n          }\n          sel(node);\n          return selection;\n      };\n\n      phylotree.path_to_root = function(node) {\n          var selection = [];\n          while (node) {\n              selection.push(node);\n              node = node.parent;\n          }\n          return selection;\n      };\n\n      phylotree.draw_edge = function(container, edge, transition) {\n\n          container = d3.select(container);\n\n          container.attr(\"class\", phylotree.reclass_edge)\n              .on(\"click\", function(d) {\n                  phylotree.modify_selection([d.target], selection_attribute_name);\n              });\n\n          var new_branch_path = draw_branch([edge.source, edge.target]);\n\n          if (transition) {\n              if (container.datum().existing_path) {\n                  container.attr(\"d\", function(d) {\n                      return d.existing_path;\n                  });\n              }\n              container.transition().attr(\"d\", new_branch_path);\n          } else {\n              container.attr(\"d\", new_branch_path);\n          }\n          edge.existing_path = new_branch_path;\n\n          var bl = branch_length_accessor(edge.target);\n          if (bl !== undefined) {\n              var haz_title = container.selectAll(\"title\");\n              if (haz_title.empty()) {\n                  haz_title = container.append(\"title\");\n              }\n              haz_title.text(\"Length = \" + bl);\n          } else {\n              container.selectAll(\"title\").remove();\n          }\n\n          if (edge_styler) {\n              edge_styler(container, edge);\n          }\n\n\n          return phylotree;\n      };\n\n      phylotree.clear_internal_nodes = function(respect) {\n          if (!respect) {\n              nodes.forEach(function(d) {\n                  if (!d3_phylotree_is_leafnode(d)) {\n                      d[selection_attribute_name] = false;\n                  }\n              });\n          }\n      };\n\n      phylotree.draw_node = function(container, node, transitions) {\n          container = d3.select(container);\n\n          if (d3_phylotree_is_leafnode(node)) {\n\n\n              var labels = container.selectAll(\"text\").data([node]),\n                  tracers = container.selectAll(\"line\");\n\n              if (transitions) {\n                  labels.enter().append(\"text\").style(\"opacity\", 0).transition().style(\"opacity\", 1);\n              } else {\n                  labels.enter().append(\"text\");\n              }\n\n              labels.on(\"click\", function(d, i) {\n                      phylotree.handle_node_click(d);\n                  })\n                  .attr(\"dy\", function(d) {\n                      return shown_font_size * 0.33;\n                  })\n                  .text(function(d) {\n                      return node_label(d);\n                  }).style(\"font-size\", function(d) {\n                      return shown_font_size;\n                  });\n\n\n\n              if (phylotree.radial()) {\n                  (transitions ? labels.transition() : labels).attr(\"transform\", function(d) {\n                          return d3_phylotree_svg_rotate(d.text_angle) + d3_phylotree_svg_translate(phylotree.align_tips() ? phylotree.shift_tip(d) : null);\n                      })\n                      .attr(\"text-anchor\", function(d) {\n                          return d.text_align;\n                      });\n              } else {\n                  (transitions ? labels.transition() : labels).attr(\"text-anchor\", \"start\")\n                      .attr(\"transform\", function(d) {\n                          return d3_phylotree_svg_translate(phylotree.align_tips() ? phylotree.shift_tip(d) : null);\n                      });\n              }\n\n              if (phylotree.align_tips()) {\n                  tracers = tracers.data([node]);\n                  if (transitions) {\n                      tracers.enter().append(\"line\").style(\"opacity\", 0).transition().style(\"opacity\", 1);\n                      tracers.attr(\"x1\", function(d) {\n                          return (d.text_align == \"end\" ? -1 : 1) * phylotree.node_bubble_size(node);\n                      }).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 0);\n                      tracers.transition().attr(\"x2\", function(d) {\n                          return phylotree.shift_tip(d)[0];\n                      }).attr(\"transform\", function(d) {\n                          return d3_phylotree_svg_rotate(d.text_angle);\n                      });\n                  } else {\n                      tracers.enter().append(\"line\");\n                      tracers.attr(\"x1\", function(d) {\n                          return (d.text_align == \"end\" ? -1 : 1) * phylotree.node_bubble_size(node);\n                      }).attr(\"y2\", 0).attr(\"y1\", 0).transition().attr(\"x2\", function(d) {\n                          return phylotree.shift_tip(d)[0];\n                      });\n                      tracers.attr(\"transform\", function(d) {\n                          return d3_phylotree_svg_rotate(d.text_angle);\n                      });\n                  }\n                  tracers.classed(css_classes['branch-tracer'], true);\n              } else {\n                  tracers.remove();\n              }\n\n\n              if (options['draw-size-bubbles']) {\n                  var shift = phylotree.node_bubble_size(node);\n                  var circles = container.selectAll(\"circle\").data([shift]);\n                  circles.enter().append(\"circle\");\n                  if (transitions) {\n                      circles = circles.transition();\n                  }\n                  circles.attr(\"r\", function(d) {\n                      return d;\n                  });\n\n                  if (shown_font_size >= 5) {\n                      labels.attr(\"dx\", function(d) {\n                          return (d.text_align == \"end\" ? -1 : 1) * ((phylotree.align_tips() ? 0 : shift) + shown_font_size * 0.33);\n                      });\n                  }\n\n              } else {\n                  if (shown_font_size >= 5) {\n                      labels.attr(\"dx\", function(d) {\n                          return (d.text_align == \"end\" ? -1 : 1) * shown_font_size * 0.33;\n                      });\n                  }\n              }\n\n          } else {\n              var circles = container.selectAll(\"circle\").data([node]),\n                  radius = phylotree.node_circle_size()(node);\n\n              if (radius > 0) {\n                  circles.enter().append(\"circle\");\n                  circles.attr(\"r\", function(d) {\n                          return Math.min(shown_font_size * 0.75, radius);\n                      })\n                      .on(\"click\", function(d) {\n                          phylotree.handle_node_click(d);\n                      });\n              } else {\n                  circles.remove();\n              }\n          }\n\n\n          if (node_styler) {\n              node_styler(container, node);\n          }\n\n          return node;\n\n      };\n\n      phylotree.get_nodes = function() {\n          return nodes;\n      };\n\n      phylotree.get_node_by_name = function(name) {\n        return _.findWhere(nodes, {name : name});\n      };\n\n\n      phylotree.assign_attributes = function(attributes) {\n        //return nodes;\n        // add annotations to each matching node\n        _.each(nodes, function(d) {\n          if(_.indexOf(_.keys(attributes), d.name) >= 0) {\n            d[\"annotations\"] = attributes[d.name];\n          }\n        });\n\n      };\n\n      phylotree.set_partitions = function(partitions) {\n        this.partitions = partitions;\n      };\n\n      phylotree.get_partitions = function(attributes) {\n        return this.partitions;\n      };\n\n      d3.rebind(phylotree, d3_hierarchy, \"sort\", \"children\", \"value\");\n\n      // Add an alias for nodes and links, for convenience.\n      phylotree.nodes = phylotree;\n      phylotree.links = d3.layout.cluster().links;\n\n      return phylotree;\n  };\n\n  //------------------------------------------------------------------------------\n\n  function d3_phylotree_item_selected(item, tag) {\n      return (item[tag] || false);\n  }\n\n  function d3_phylotree_node_visible(node) {\n      return !(node.hidden || node.notshown || false);\n  }\n\n  function d3_phylotree_node_notshown(node) {\n      return node.notshown;\n  }\n\n  function d3_phylotree_edge_visible(edge) {\n      return !(edge.target.hidden || edge.target.notshown || false);\n  }\n\n  function d3_phylotree_item_tagged(item) {\n      return (item.tag || false);\n  }\n\n  function d3_phylotree_resize_svg(tree, svg, tr) {\n\n      var sizes = tree.size();\n\n      if (tree.radial()) {\n\n          var pad_radius = tree.pad_width(),\n              vertical_offset = (tree.options()['top-bottom-spacing'] != 'fit-to-size' ? tree.pad_height() : 0);\n\n\n          sizes = [sizes[1] + 2 * pad_radius,\n              sizes[0] + 2 * pad_radius + vertical_offset\n          ];\n\n          if (svg) {\n              svg.selectAll(\".\" + tree.css_classes()['tree-container']).attr(\"transform\", \"translate (\" + (pad_radius) + \",\" + (pad_radius + vertical_offset) + \")\");\n          }\n\n      } else {\n          sizes = [sizes[1] + (tree.options()['left-right-spacing'] != 'fit-to-size' ? tree.pad_width() : 0),\n              sizes[0] + (tree.options()['top-bottom-spacing'] != 'fit-to-size' ? tree.pad_height() : 0)\n          ];\n      }\n\n      if (svg) {\n          if (tr) {\n              svg = svg.transition(100);\n          }\n\n          svg.attr(\"height\", sizes[1])\n              .attr(\"width\", sizes[0]);\n      }\n\n      return sizes;\n  }\n\n  function d3_phylotree_is_leafnode(node) {\n      return !(node.children && node.children.length);\n  }\n\n  function d3_phylotree_has_hidden_nodes(node) {\n      return node.has_hidden_nodes || false;\n  }\n\n  function d3_phylotree_is_node_collapsed(node) {\n      return node.collapsed || false;\n  }\n\n  function d3_phylotree_node_css_selectors(css_classes) {\n      return [css_classes['node'], css_classes['internal-node'], css_classes['collapsed-node'], css_classes['tagged-node']]\n          .reduce(function(p, c, i, a) {\n              return p += \"g.\" + c + ((i < a.length - 1) ? \",\" : \"\");\n          }, \"\");\n  }\n\n  function d3_phylotree_edge_css_selectors(css_classes) {\n      return [css_classes['branch'], css_classes['selected-branch'], css_classes['tagged-branch']]\n          .reduce(function(p, c, i, a) {\n              return p += \"path.\" + c + ((i < a.length - 1) ? \",\" : \"\");\n          }, \"\");\n  }\n\n  function d3_phylotree_clade_css_selectors(css_classes) {\n      return [css_classes['clade']]\n          .reduce(function(p, c, i, a) {\n              return p += \"path.\" + c + ((i < a.length - 1) ? \",\" : \"\");\n          }, \"\");\n  }\n\n  function d3_phylotree_newick_parser(nwk_str, bootstrap_values) {\n\n      var clade_stack = [];\n/** \n * @method add_new_tree_level\n * @memberof phylotree\n * @returns nothing\n */\n      function add_new_tree_level() {\n          var new_level = {\n              \"name\": null\n          };\n          var the_parent = clade_stack[clade_stack.length - 1];\n          if (!(\"children\" in the_parent)) {\n              the_parent[\"children\"] = [];\n          }\n          clade_stack.push(new_level);\n          the_parent[\"children\"].push(clade_stack[clade_stack.length - 1]);\n          clade_stack[clade_stack.length - 1][\"original_child_order\"] = the_parent[\"children\"].length;\n      }\n\n /** \n * @method finish_node_definition\n * @memberof phylotree\n * @returns nothing\n */\n      function finish_node_definition() {\n          var this_node = clade_stack.pop();\n          if (bootstrap_values && 'children' in this_node) {\n              this_node[\"bootstrap_values\"] = current_node_name;\n          } else {\n              this_node[\"name\"] = current_node_name;\n          }\n          this_node[\"attribute\"] = current_node_attribute;\n          this_node[\"annotation\"] = current_node_annotation;\n          current_node_name = '';\n          current_node_attribute = '';\n          current_node_annotation = '';\n      }\n\n\n      function generate_error(location) {\n          return {\n              \"json\": null,\n              \"error\": \"Unexpected '\" + nwk_str[location] + \"' in '\" + nwk_str.substring(location - 20, location + 1) + \"[ERROR HERE]\" + nwk_str.substring(location + 1, location + 20) + \"'\"\n          };\n      }\n\n      var automaton_state = 0;\n      var current_node_name = '';\n      var current_node_attribute = '';\n      var current_node_annotation = '';\n      var quote_delimiter = null;\n      var name_quotes = {\n          \"'\": 1,\n          \"\\\"\": 1\n      };\n\n      var tree_json = {\n          \"name\": \"root\"\n      };\n      clade_stack.push(tree_json);\n\n      var space = /\\s/;\n\n      for (var char_index = 0; char_index < nwk_str.length; char_index++) {\n          try {\n              var current_char = nwk_str[char_index];\n              switch (automaton_state) {\n                  case 0:\n                      {\n                          // look for the first opening parenthesis\n                          if (current_char == '(') {\n                              add_new_tree_level();\n                              automaton_state = 1; // expecting node name\n                          }\n                          break;\n                      }\n                  case 1: // name\n                  case 3: // branch length\n                      {\n                          // reading name\n                          if (current_char == ':') {\n                              if (automaton_state == 3) {\n                                  return generate_error(char_index);\n                              }\n                              automaton_state = 3;\n                          } else if (current_char == ',' || current_char == ')') {\n                              try {\n                                  finish_node_definition();\n                                  automaton_state = 1;\n                                  if (current_char == ',') {\n                                      add_new_tree_level();\n                                  }\n                              } catch (e) {\n                                  return generate_error(char_index);\n                              }\n                          } else if (current_char == '(') {\n                              if (current_node_name.length > 0) {\n                                  return generate_error(char_index);\n                              } else {\n                                  add_new_tree_level();\n                              }\n                          } else if (current_char in name_quotes) {\n                              if (automaton_state == 1 && current_node_name.length === 0 && current_node_attribute.length === 0 && current_node_annotation.length === 0) {\n                                  automaton_state = 2;\n                                  quote_delimiter = current_char;\n                                  continue;\n                              }\n                              return generate_error(char_index);\n                          } else {\n                              if (current_char == '[') {\n                                  if (current_node_annotation.length) {\n                                      return generate_error(char_index);\n                                  } else {\n                                      automaton_state = 4;\n                                  }\n                              } else {\n                                  if (automaton_state == 3) {\n                                      current_node_attribute += current_char;\n                                  } else {\n                                      if (space.test(current_char)) {\n                                          continue;\n                                      }\n                                      current_node_name += current_char;\n                                  }\n                              }\n                          }\n\n                          break;\n                      }\n                  case 2:\n                      {\n                          if (current_char == quote_delimiter) {\n                              if (char_index < nwk_str.length - 1) {\n                                  if (nwk_str[char_index + 1] == quote_delimiter) {\n                                      char_index++;\n                                      current_node_name += quote_delimiter;\n                                      continue;\n                                  }\n                              }\n                              quote_delimiter = 0;\n                              automaton_state = 1;\n                              continue;\n                          } else {\n                              current_node_name += current_char;\n                          }\n                          break;\n                      }\n                  case 4:\n                      {\n                          if (current_char == ']') {\n                              automaton_state = 3;\n                          } else {\n                              if (current_char == '[') {\n                                  return generate_error(char_index);\n                              }\n                              current_node_annotation += current_char;\n                          }\n                          break;\n                      }\n              }\n          } catch (e) {\n              return generate_error(char_index);\n          }\n      }\n\n      if (clade_stack.length != 1) {\n          return generate_error(nwk_str.length - 1);\n      }\n\n      return {\n          \"json\": tree_json,\n          \"error\": null\n      };\n  }\n\n  function d3_add_custom_menu(node, name, callback, condition) {\n      if (!(\"menu_items\" in node)) {\n          node[\"menu_items\"] = [];\n      }\n      if (!node[\"menu_items\"].some(function(d) {\n              return d[0] == name && d[1] == callback && d[2] == condition;\n          })) {\n          node[\"menu_items\"].push([name, callback, condition]);\n      }\n  }\n\n  function d3_phylotree_rootpath(attr_name, store_name) {\n\n      attr_name = attr_name || \"attribute\";\n      store_name = store_name || \"y_scaled\";\n\n      if ('parent' in this) {\n          var my_value = parseFloat(this[attr_name]);\n          this[store_name] = this.parent[store_name] + (isNaN(my_value) ? 0.1 : my_value);\n      } else {\n          this[store_name] = 0.0;\n      }\n\n      return this[store_name];\n  }\n\n  function d3_phylotree_rescale(scale, attr_name) {\n      attr_name = attr_name || \"y_scaled\";\n      if (attr_name in this) {\n          this[attr_name] *= scale;\n      }\n  }\n\n  function d3_phylotree_trigger_refresh(tree) {\n      var event = new CustomEvent(d3_layout_phylotree_event_id, {\n          'detail': ['refresh', tree]\n      });\n      document.dispatchEvent(event);\n  }\n\n  function d3_phylotree_trigger_count_update(tree, counts) {\n      var event = new CustomEvent(d3_layout_phylotree_event_id, {\n          'detail': ['count_update', counts, tree.count_handler()]\n      });\n      document.dispatchEvent(event);\n  }\n  \n   function d3_phylotree_trigger_layout (tree) {\n     var event = new CustomEvent(d3_layout_phylotree_event_id, {\n         'detail': ['layout', tree, tree.layout_handler()]\n     });\n     document.dispatchEvent(event);\n  }\n\n  function d3_phylotree_event_listener(event) {\n      switch (event.detail[0]) {\n          case 'refresh':\n              event.detail[1].refresh();\n              break;\n          case 'count_update':\n          case 'layout': \n              event.detail[2](event.detail[1]);\n              break;\n      }\n      return true;\n  }\n\n  function d3_phylotree_add_event_listener() {\n      document.addEventListener(d3_layout_phylotree_event_id, d3_phylotree_event_listener, false);\n  }\n\n  function d3_phylotree_svg_translate(x) {\n      if (x && (x[0] !== null || x[1] !== null))\n          return \"translate (\" + (x[0] !== null ? x[0] : 0) + \",\" + (x[1] !== null ? x[1] : 0) + \") \";\n\n      return \"\";\n  }\n\n  function d3_phylotree_svg_rotate(a) {\n      if (a !== null) {\n          return \"rotate (\" + a + \") \";\n      }\n      return \"\";\n  }\n\n  d3.layout.phylotree.is_leafnode = d3_phylotree_is_leafnode;\n  d3.layout.phylotree.add_custom_menu = d3_add_custom_menu;\n  d3.layout.phylotree.trigger_refresh = d3_phylotree_trigger_refresh;\n\n}.call(this));\n"],
  "mappings": "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",
  "names": ["r", "a", "radius", "annular_shift", "new_json", "d", "callback", "k", "self", "nodes", "container", "partitions"]
}
